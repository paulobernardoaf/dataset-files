<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\me_cmp.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"copy_block.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simple_idct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"me_cmp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>ff_square_tab</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">65536</literal></expr>, <expr><literal type="number">65025</literal></expr>, <expr><literal type="number">64516</literal></expr>, <expr><literal type="number">64009</literal></expr>, <expr><literal type="number">63504</literal></expr>, <expr><literal type="number">63001</literal></expr>, <expr><literal type="number">62500</literal></expr>, <expr><literal type="number">62001</literal></expr>, <expr><literal type="number">61504</literal></expr>, <expr><literal type="number">61009</literal></expr>, <expr><literal type="number">60516</literal></expr>, <expr><literal type="number">60025</literal></expr>, <expr><literal type="number">59536</literal></expr>, <expr><literal type="number">59049</literal></expr>, <expr><literal type="number">58564</literal></expr>, <expr><literal type="number">58081</literal></expr>,
<expr><literal type="number">57600</literal></expr>, <expr><literal type="number">57121</literal></expr>, <expr><literal type="number">56644</literal></expr>, <expr><literal type="number">56169</literal></expr>, <expr><literal type="number">55696</literal></expr>, <expr><literal type="number">55225</literal></expr>, <expr><literal type="number">54756</literal></expr>, <expr><literal type="number">54289</literal></expr>, <expr><literal type="number">53824</literal></expr>, <expr><literal type="number">53361</literal></expr>, <expr><literal type="number">52900</literal></expr>, <expr><literal type="number">52441</literal></expr>, <expr><literal type="number">51984</literal></expr>, <expr><literal type="number">51529</literal></expr>, <expr><literal type="number">51076</literal></expr>, <expr><literal type="number">50625</literal></expr>,
<expr><literal type="number">50176</literal></expr>, <expr><literal type="number">49729</literal></expr>, <expr><literal type="number">49284</literal></expr>, <expr><literal type="number">48841</literal></expr>, <expr><literal type="number">48400</literal></expr>, <expr><literal type="number">47961</literal></expr>, <expr><literal type="number">47524</literal></expr>, <expr><literal type="number">47089</literal></expr>, <expr><literal type="number">46656</literal></expr>, <expr><literal type="number">46225</literal></expr>, <expr><literal type="number">45796</literal></expr>, <expr><literal type="number">45369</literal></expr>, <expr><literal type="number">44944</literal></expr>, <expr><literal type="number">44521</literal></expr>, <expr><literal type="number">44100</literal></expr>, <expr><literal type="number">43681</literal></expr>,
<expr><literal type="number">43264</literal></expr>, <expr><literal type="number">42849</literal></expr>, <expr><literal type="number">42436</literal></expr>, <expr><literal type="number">42025</literal></expr>, <expr><literal type="number">41616</literal></expr>, <expr><literal type="number">41209</literal></expr>, <expr><literal type="number">40804</literal></expr>, <expr><literal type="number">40401</literal></expr>, <expr><literal type="number">40000</literal></expr>, <expr><literal type="number">39601</literal></expr>, <expr><literal type="number">39204</literal></expr>, <expr><literal type="number">38809</literal></expr>, <expr><literal type="number">38416</literal></expr>, <expr><literal type="number">38025</literal></expr>, <expr><literal type="number">37636</literal></expr>, <expr><literal type="number">37249</literal></expr>,
<expr><literal type="number">36864</literal></expr>, <expr><literal type="number">36481</literal></expr>, <expr><literal type="number">36100</literal></expr>, <expr><literal type="number">35721</literal></expr>, <expr><literal type="number">35344</literal></expr>, <expr><literal type="number">34969</literal></expr>, <expr><literal type="number">34596</literal></expr>, <expr><literal type="number">34225</literal></expr>, <expr><literal type="number">33856</literal></expr>, <expr><literal type="number">33489</literal></expr>, <expr><literal type="number">33124</literal></expr>, <expr><literal type="number">32761</literal></expr>, <expr><literal type="number">32400</literal></expr>, <expr><literal type="number">32041</literal></expr>, <expr><literal type="number">31684</literal></expr>, <expr><literal type="number">31329</literal></expr>,
<expr><literal type="number">30976</literal></expr>, <expr><literal type="number">30625</literal></expr>, <expr><literal type="number">30276</literal></expr>, <expr><literal type="number">29929</literal></expr>, <expr><literal type="number">29584</literal></expr>, <expr><literal type="number">29241</literal></expr>, <expr><literal type="number">28900</literal></expr>, <expr><literal type="number">28561</literal></expr>, <expr><literal type="number">28224</literal></expr>, <expr><literal type="number">27889</literal></expr>, <expr><literal type="number">27556</literal></expr>, <expr><literal type="number">27225</literal></expr>, <expr><literal type="number">26896</literal></expr>, <expr><literal type="number">26569</literal></expr>, <expr><literal type="number">26244</literal></expr>, <expr><literal type="number">25921</literal></expr>,
<expr><literal type="number">25600</literal></expr>, <expr><literal type="number">25281</literal></expr>, <expr><literal type="number">24964</literal></expr>, <expr><literal type="number">24649</literal></expr>, <expr><literal type="number">24336</literal></expr>, <expr><literal type="number">24025</literal></expr>, <expr><literal type="number">23716</literal></expr>, <expr><literal type="number">23409</literal></expr>, <expr><literal type="number">23104</literal></expr>, <expr><literal type="number">22801</literal></expr>, <expr><literal type="number">22500</literal></expr>, <expr><literal type="number">22201</literal></expr>, <expr><literal type="number">21904</literal></expr>, <expr><literal type="number">21609</literal></expr>, <expr><literal type="number">21316</literal></expr>, <expr><literal type="number">21025</literal></expr>,
<expr><literal type="number">20736</literal></expr>, <expr><literal type="number">20449</literal></expr>, <expr><literal type="number">20164</literal></expr>, <expr><literal type="number">19881</literal></expr>, <expr><literal type="number">19600</literal></expr>, <expr><literal type="number">19321</literal></expr>, <expr><literal type="number">19044</literal></expr>, <expr><literal type="number">18769</literal></expr>, <expr><literal type="number">18496</literal></expr>, <expr><literal type="number">18225</literal></expr>, <expr><literal type="number">17956</literal></expr>, <expr><literal type="number">17689</literal></expr>, <expr><literal type="number">17424</literal></expr>, <expr><literal type="number">17161</literal></expr>, <expr><literal type="number">16900</literal></expr>, <expr><literal type="number">16641</literal></expr>,
<expr><literal type="number">16384</literal></expr>, <expr><literal type="number">16129</literal></expr>, <expr><literal type="number">15876</literal></expr>, <expr><literal type="number">15625</literal></expr>, <expr><literal type="number">15376</literal></expr>, <expr><literal type="number">15129</literal></expr>, <expr><literal type="number">14884</literal></expr>, <expr><literal type="number">14641</literal></expr>, <expr><literal type="number">14400</literal></expr>, <expr><literal type="number">14161</literal></expr>, <expr><literal type="number">13924</literal></expr>, <expr><literal type="number">13689</literal></expr>, <expr><literal type="number">13456</literal></expr>, <expr><literal type="number">13225</literal></expr>, <expr><literal type="number">12996</literal></expr>, <expr><literal type="number">12769</literal></expr>,
<expr><literal type="number">12544</literal></expr>, <expr><literal type="number">12321</literal></expr>, <expr><literal type="number">12100</literal></expr>, <expr><literal type="number">11881</literal></expr>, <expr><literal type="number">11664</literal></expr>, <expr><literal type="number">11449</literal></expr>, <expr><literal type="number">11236</literal></expr>, <expr><literal type="number">11025</literal></expr>, <expr><literal type="number">10816</literal></expr>, <expr><literal type="number">10609</literal></expr>, <expr><literal type="number">10404</literal></expr>, <expr><literal type="number">10201</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><literal type="number">9801</literal></expr>, <expr><literal type="number">9604</literal></expr>, <expr><literal type="number">9409</literal></expr>,
<expr><literal type="number">9216</literal></expr>, <expr><literal type="number">9025</literal></expr>, <expr><literal type="number">8836</literal></expr>, <expr><literal type="number">8649</literal></expr>, <expr><literal type="number">8464</literal></expr>, <expr><literal type="number">8281</literal></expr>, <expr><literal type="number">8100</literal></expr>, <expr><literal type="number">7921</literal></expr>, <expr><literal type="number">7744</literal></expr>, <expr><literal type="number">7569</literal></expr>, <expr><literal type="number">7396</literal></expr>, <expr><literal type="number">7225</literal></expr>, <expr><literal type="number">7056</literal></expr>, <expr><literal type="number">6889</literal></expr>, <expr><literal type="number">6724</literal></expr>, <expr><literal type="number">6561</literal></expr>,
<expr><literal type="number">6400</literal></expr>, <expr><literal type="number">6241</literal></expr>, <expr><literal type="number">6084</literal></expr>, <expr><literal type="number">5929</literal></expr>, <expr><literal type="number">5776</literal></expr>, <expr><literal type="number">5625</literal></expr>, <expr><literal type="number">5476</literal></expr>, <expr><literal type="number">5329</literal></expr>, <expr><literal type="number">5184</literal></expr>, <expr><literal type="number">5041</literal></expr>, <expr><literal type="number">4900</literal></expr>, <expr><literal type="number">4761</literal></expr>, <expr><literal type="number">4624</literal></expr>, <expr><literal type="number">4489</literal></expr>, <expr><literal type="number">4356</literal></expr>, <expr><literal type="number">4225</literal></expr>,
<expr><literal type="number">4096</literal></expr>, <expr><literal type="number">3969</literal></expr>, <expr><literal type="number">3844</literal></expr>, <expr><literal type="number">3721</literal></expr>, <expr><literal type="number">3600</literal></expr>, <expr><literal type="number">3481</literal></expr>, <expr><literal type="number">3364</literal></expr>, <expr><literal type="number">3249</literal></expr>, <expr><literal type="number">3136</literal></expr>, <expr><literal type="number">3025</literal></expr>, <expr><literal type="number">2916</literal></expr>, <expr><literal type="number">2809</literal></expr>, <expr><literal type="number">2704</literal></expr>, <expr><literal type="number">2601</literal></expr>, <expr><literal type="number">2500</literal></expr>, <expr><literal type="number">2401</literal></expr>,
<expr><literal type="number">2304</literal></expr>, <expr><literal type="number">2209</literal></expr>, <expr><literal type="number">2116</literal></expr>, <expr><literal type="number">2025</literal></expr>, <expr><literal type="number">1936</literal></expr>, <expr><literal type="number">1849</literal></expr>, <expr><literal type="number">1764</literal></expr>, <expr><literal type="number">1681</literal></expr>, <expr><literal type="number">1600</literal></expr>, <expr><literal type="number">1521</literal></expr>, <expr><literal type="number">1444</literal></expr>, <expr><literal type="number">1369</literal></expr>, <expr><literal type="number">1296</literal></expr>, <expr><literal type="number">1225</literal></expr>, <expr><literal type="number">1156</literal></expr>, <expr><literal type="number">1089</literal></expr>,
<expr><literal type="number">1024</literal></expr>, <expr><literal type="number">961</literal></expr>, <expr><literal type="number">900</literal></expr>, <expr><literal type="number">841</literal></expr>, <expr><literal type="number">784</literal></expr>, <expr><literal type="number">729</literal></expr>, <expr><literal type="number">676</literal></expr>, <expr><literal type="number">625</literal></expr>, <expr><literal type="number">576</literal></expr>, <expr><literal type="number">529</literal></expr>, <expr><literal type="number">484</literal></expr>, <expr><literal type="number">441</literal></expr>, <expr><literal type="number">400</literal></expr>, <expr><literal type="number">361</literal></expr>, <expr><literal type="number">324</literal></expr>, <expr><literal type="number">289</literal></expr>,
<expr><literal type="number">256</literal></expr>, <expr><literal type="number">225</literal></expr>, <expr><literal type="number">196</literal></expr>, <expr><literal type="number">169</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">169</literal></expr>, <expr><literal type="number">196</literal></expr>, <expr><literal type="number">225</literal></expr>,
<expr><literal type="number">256</literal></expr>, <expr><literal type="number">289</literal></expr>, <expr><literal type="number">324</literal></expr>, <expr><literal type="number">361</literal></expr>, <expr><literal type="number">400</literal></expr>, <expr><literal type="number">441</literal></expr>, <expr><literal type="number">484</literal></expr>, <expr><literal type="number">529</literal></expr>, <expr><literal type="number">576</literal></expr>, <expr><literal type="number">625</literal></expr>, <expr><literal type="number">676</literal></expr>, <expr><literal type="number">729</literal></expr>, <expr><literal type="number">784</literal></expr>, <expr><literal type="number">841</literal></expr>, <expr><literal type="number">900</literal></expr>, <expr><literal type="number">961</literal></expr>,
<expr><literal type="number">1024</literal></expr>, <expr><literal type="number">1089</literal></expr>, <expr><literal type="number">1156</literal></expr>, <expr><literal type="number">1225</literal></expr>, <expr><literal type="number">1296</literal></expr>, <expr><literal type="number">1369</literal></expr>, <expr><literal type="number">1444</literal></expr>, <expr><literal type="number">1521</literal></expr>, <expr><literal type="number">1600</literal></expr>, <expr><literal type="number">1681</literal></expr>, <expr><literal type="number">1764</literal></expr>, <expr><literal type="number">1849</literal></expr>, <expr><literal type="number">1936</literal></expr>, <expr><literal type="number">2025</literal></expr>, <expr><literal type="number">2116</literal></expr>, <expr><literal type="number">2209</literal></expr>,
<expr><literal type="number">2304</literal></expr>, <expr><literal type="number">2401</literal></expr>, <expr><literal type="number">2500</literal></expr>, <expr><literal type="number">2601</literal></expr>, <expr><literal type="number">2704</literal></expr>, <expr><literal type="number">2809</literal></expr>, <expr><literal type="number">2916</literal></expr>, <expr><literal type="number">3025</literal></expr>, <expr><literal type="number">3136</literal></expr>, <expr><literal type="number">3249</literal></expr>, <expr><literal type="number">3364</literal></expr>, <expr><literal type="number">3481</literal></expr>, <expr><literal type="number">3600</literal></expr>, <expr><literal type="number">3721</literal></expr>, <expr><literal type="number">3844</literal></expr>, <expr><literal type="number">3969</literal></expr>,
<expr><literal type="number">4096</literal></expr>, <expr><literal type="number">4225</literal></expr>, <expr><literal type="number">4356</literal></expr>, <expr><literal type="number">4489</literal></expr>, <expr><literal type="number">4624</literal></expr>, <expr><literal type="number">4761</literal></expr>, <expr><literal type="number">4900</literal></expr>, <expr><literal type="number">5041</literal></expr>, <expr><literal type="number">5184</literal></expr>, <expr><literal type="number">5329</literal></expr>, <expr><literal type="number">5476</literal></expr>, <expr><literal type="number">5625</literal></expr>, <expr><literal type="number">5776</literal></expr>, <expr><literal type="number">5929</literal></expr>, <expr><literal type="number">6084</literal></expr>, <expr><literal type="number">6241</literal></expr>,
<expr><literal type="number">6400</literal></expr>, <expr><literal type="number">6561</literal></expr>, <expr><literal type="number">6724</literal></expr>, <expr><literal type="number">6889</literal></expr>, <expr><literal type="number">7056</literal></expr>, <expr><literal type="number">7225</literal></expr>, <expr><literal type="number">7396</literal></expr>, <expr><literal type="number">7569</literal></expr>, <expr><literal type="number">7744</literal></expr>, <expr><literal type="number">7921</literal></expr>, <expr><literal type="number">8100</literal></expr>, <expr><literal type="number">8281</literal></expr>, <expr><literal type="number">8464</literal></expr>, <expr><literal type="number">8649</literal></expr>, <expr><literal type="number">8836</literal></expr>, <expr><literal type="number">9025</literal></expr>,
<expr><literal type="number">9216</literal></expr>, <expr><literal type="number">9409</literal></expr>, <expr><literal type="number">9604</literal></expr>, <expr><literal type="number">9801</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><literal type="number">10201</literal></expr>, <expr><literal type="number">10404</literal></expr>, <expr><literal type="number">10609</literal></expr>, <expr><literal type="number">10816</literal></expr>, <expr><literal type="number">11025</literal></expr>, <expr><literal type="number">11236</literal></expr>, <expr><literal type="number">11449</literal></expr>, <expr><literal type="number">11664</literal></expr>, <expr><literal type="number">11881</literal></expr>, <expr><literal type="number">12100</literal></expr>, <expr><literal type="number">12321</literal></expr>,
<expr><literal type="number">12544</literal></expr>, <expr><literal type="number">12769</literal></expr>, <expr><literal type="number">12996</literal></expr>, <expr><literal type="number">13225</literal></expr>, <expr><literal type="number">13456</literal></expr>, <expr><literal type="number">13689</literal></expr>, <expr><literal type="number">13924</literal></expr>, <expr><literal type="number">14161</literal></expr>, <expr><literal type="number">14400</literal></expr>, <expr><literal type="number">14641</literal></expr>, <expr><literal type="number">14884</literal></expr>, <expr><literal type="number">15129</literal></expr>, <expr><literal type="number">15376</literal></expr>, <expr><literal type="number">15625</literal></expr>, <expr><literal type="number">15876</literal></expr>, <expr><literal type="number">16129</literal></expr>,
<expr><literal type="number">16384</literal></expr>, <expr><literal type="number">16641</literal></expr>, <expr><literal type="number">16900</literal></expr>, <expr><literal type="number">17161</literal></expr>, <expr><literal type="number">17424</literal></expr>, <expr><literal type="number">17689</literal></expr>, <expr><literal type="number">17956</literal></expr>, <expr><literal type="number">18225</literal></expr>, <expr><literal type="number">18496</literal></expr>, <expr><literal type="number">18769</literal></expr>, <expr><literal type="number">19044</literal></expr>, <expr><literal type="number">19321</literal></expr>, <expr><literal type="number">19600</literal></expr>, <expr><literal type="number">19881</literal></expr>, <expr><literal type="number">20164</literal></expr>, <expr><literal type="number">20449</literal></expr>,
<expr><literal type="number">20736</literal></expr>, <expr><literal type="number">21025</literal></expr>, <expr><literal type="number">21316</literal></expr>, <expr><literal type="number">21609</literal></expr>, <expr><literal type="number">21904</literal></expr>, <expr><literal type="number">22201</literal></expr>, <expr><literal type="number">22500</literal></expr>, <expr><literal type="number">22801</literal></expr>, <expr><literal type="number">23104</literal></expr>, <expr><literal type="number">23409</literal></expr>, <expr><literal type="number">23716</literal></expr>, <expr><literal type="number">24025</literal></expr>, <expr><literal type="number">24336</literal></expr>, <expr><literal type="number">24649</literal></expr>, <expr><literal type="number">24964</literal></expr>, <expr><literal type="number">25281</literal></expr>,
<expr><literal type="number">25600</literal></expr>, <expr><literal type="number">25921</literal></expr>, <expr><literal type="number">26244</literal></expr>, <expr><literal type="number">26569</literal></expr>, <expr><literal type="number">26896</literal></expr>, <expr><literal type="number">27225</literal></expr>, <expr><literal type="number">27556</literal></expr>, <expr><literal type="number">27889</literal></expr>, <expr><literal type="number">28224</literal></expr>, <expr><literal type="number">28561</literal></expr>, <expr><literal type="number">28900</literal></expr>, <expr><literal type="number">29241</literal></expr>, <expr><literal type="number">29584</literal></expr>, <expr><literal type="number">29929</literal></expr>, <expr><literal type="number">30276</literal></expr>, <expr><literal type="number">30625</literal></expr>,
<expr><literal type="number">30976</literal></expr>, <expr><literal type="number">31329</literal></expr>, <expr><literal type="number">31684</literal></expr>, <expr><literal type="number">32041</literal></expr>, <expr><literal type="number">32400</literal></expr>, <expr><literal type="number">32761</literal></expr>, <expr><literal type="number">33124</literal></expr>, <expr><literal type="number">33489</literal></expr>, <expr><literal type="number">33856</literal></expr>, <expr><literal type="number">34225</literal></expr>, <expr><literal type="number">34596</literal></expr>, <expr><literal type="number">34969</literal></expr>, <expr><literal type="number">35344</literal></expr>, <expr><literal type="number">35721</literal></expr>, <expr><literal type="number">36100</literal></expr>, <expr><literal type="number">36481</literal></expr>,
<expr><literal type="number">36864</literal></expr>, <expr><literal type="number">37249</literal></expr>, <expr><literal type="number">37636</literal></expr>, <expr><literal type="number">38025</literal></expr>, <expr><literal type="number">38416</literal></expr>, <expr><literal type="number">38809</literal></expr>, <expr><literal type="number">39204</literal></expr>, <expr><literal type="number">39601</literal></expr>, <expr><literal type="number">40000</literal></expr>, <expr><literal type="number">40401</literal></expr>, <expr><literal type="number">40804</literal></expr>, <expr><literal type="number">41209</literal></expr>, <expr><literal type="number">41616</literal></expr>, <expr><literal type="number">42025</literal></expr>, <expr><literal type="number">42436</literal></expr>, <expr><literal type="number">42849</literal></expr>,
<expr><literal type="number">43264</literal></expr>, <expr><literal type="number">43681</literal></expr>, <expr><literal type="number">44100</literal></expr>, <expr><literal type="number">44521</literal></expr>, <expr><literal type="number">44944</literal></expr>, <expr><literal type="number">45369</literal></expr>, <expr><literal type="number">45796</literal></expr>, <expr><literal type="number">46225</literal></expr>, <expr><literal type="number">46656</literal></expr>, <expr><literal type="number">47089</literal></expr>, <expr><literal type="number">47524</literal></expr>, <expr><literal type="number">47961</literal></expr>, <expr><literal type="number">48400</literal></expr>, <expr><literal type="number">48841</literal></expr>, <expr><literal type="number">49284</literal></expr>, <expr><literal type="number">49729</literal></expr>,
<expr><literal type="number">50176</literal></expr>, <expr><literal type="number">50625</literal></expr>, <expr><literal type="number">51076</literal></expr>, <expr><literal type="number">51529</literal></expr>, <expr><literal type="number">51984</literal></expr>, <expr><literal type="number">52441</literal></expr>, <expr><literal type="number">52900</literal></expr>, <expr><literal type="number">53361</literal></expr>, <expr><literal type="number">53824</literal></expr>, <expr><literal type="number">54289</literal></expr>, <expr><literal type="number">54756</literal></expr>, <expr><literal type="number">55225</literal></expr>, <expr><literal type="number">55696</literal></expr>, <expr><literal type="number">56169</literal></expr>, <expr><literal type="number">56644</literal></expr>, <expr><literal type="number">57121</literal></expr>,
<expr><literal type="number">57600</literal></expr>, <expr><literal type="number">58081</literal></expr>, <expr><literal type="number">58564</literal></expr>, <expr><literal type="number">59049</literal></expr>, <expr><literal type="number">59536</literal></expr>, <expr><literal type="number">60025</literal></expr>, <expr><literal type="number">60516</literal></expr>, <expr><literal type="number">61009</literal></expr>, <expr><literal type="number">61504</literal></expr>, <expr><literal type="number">62001</literal></expr>, <expr><literal type="number">62500</literal></expr>, <expr><literal type="number">63001</literal></expr>, <expr><literal type="number">63504</literal></expr>, <expr><literal type="number">64009</literal></expr>, <expr><literal type="number">64516</literal></expr>, <expr><literal type="number">65025</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sse4_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>sq</name> <init>= <expr><name>ff_square_tab</name> <operator>+</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sse8_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>sq</name> <init>= <expr><name>ff_square_tab</name> <operator>+</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sse16_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>sq</name> <init>= <expr><name>ff_square_tab</name> <operator>+</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>sq</name><index>[<expr><name><name>pix1</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sum_abs_dctelem_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>sum</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>avg2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) + (b) + 1) &gt;&gt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>avg4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) + (b) + (c) + (d) + 2) &gt;&gt; 2)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>pix_abs16_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>pix_median_abs16_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(pix1[x] - pix2[x])</cpp:value></cpp:define>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><operator>-</operator><name>stride</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><name>j</name><operator>-</operator><name>stride</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>V</name><argument_list>(<argument><expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>V</name><argument_list>(<argument><expr><name>j</name><operator>-</operator><name>stride</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>V</name><argument_list>(<argument><expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><name>j</name><operator>-</operator><name>stride</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>V</name></cpp:undef>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pix_abs16_x2_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pix_abs16_y2_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix3</name> <init>= <expr><name>pix2</name> <operator>+</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix3</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pix_abs16_xy2_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix3</name> <init>= <expr><name>pix2</name> <operator>+</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix3</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>pix_abs8_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>pix2</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>pix_median_abs8_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(pix1[x] - pix2[x])</cpp:value></cpp:define>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><operator>-</operator><name>stride</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><call><name>V</name><argument_list>(<argument><expr><name>j</name><operator>-</operator><name>stride</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>V</name><argument_list>(<argument><expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>V</name><argument_list>(<argument><expr><name>j</name><operator>-</operator><name>stride</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>V</name><argument_list>(<argument><expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>V</name><argument_list>(<argument><expr><name>j</name><operator>-</operator><name>stride</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>V</name></cpp:undef>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pix_abs8_x2_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pix_abs8_y2_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix3</name> <init>= <expr><name>pix2</name> <operator>+</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix3</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pix_abs8_xy2_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix3</name> <init>= <expr><name>pix2</name> <operator>+</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>pix1</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <call><name>avg4</name><argument_list>(<argument><expr><name><name>pix2</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix2</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pix3</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix3</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nsse16_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>score1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>score2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>score1</name> <operator>+=</operator> <operator>(</operator><name><name>s1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>s2</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>s1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>s2</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>h</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>score2</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>s1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>s1</name><index>[<expr><name>x</name> <operator>+</operator> <name>stride</name></expr>]</index></name> <operator>-</operator>
<name><name>s1</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s1</name><index>[<expr><name>x</name> <operator>+</operator> <name>stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name><name>s2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>s2</name><index>[<expr><name>x</name> <operator>+</operator> <name>stride</name></expr>]</index></name> <operator>-</operator>
<name><name>s2</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s2</name><index>[<expr><name>x</name> <operator>+</operator> <name>stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>score1</name> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>score2</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>nsse_weight</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>score1</name> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>score2</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nsse8_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>score1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>score2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>score1</name> <operator>+=</operator> <operator>(</operator><name><name>s1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>s2</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>s1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>s2</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>h</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>score2</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>s1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>s1</name><index>[<expr><name>x</name> <operator>+</operator> <name>stride</name></expr>]</index></name> <operator>-</operator>
<name><name>s1</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s1</name><index>[<expr><name>x</name> <operator>+</operator> <name>stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name><name>s2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>s2</name><index>[<expr><name>x</name> <operator>+</operator> <name>stride</name></expr>]</index></name> <operator>-</operator>
<name><name>s2</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s2</name><index>[<expr><name>x</name> <operator>+</operator> <name>stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>score1</name> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>score2</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>nsse_weight</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>score1</name> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>score2</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>zero_cmp</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_set_cmp</name><parameter_list>(<parameter><decl><type><name>MECmpContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>me_cmp_func</name> <modifier>*</modifier></type><name>cmp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FF_CMP_SAD</name></expr>:</case>
<expr_stmt><expr><name><name>cmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>sad</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_CMP_MEDIAN_SAD</name></expr>:</case>
<expr_stmt><expr><name><name>cmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>median_sad</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_CMP_SATD</name></expr>:</case>
<expr_stmt><expr><name><name>cmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>hadamard8_diff</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_CMP_SSE</name></expr>:</case>
<expr_stmt><expr><name><name>cmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>sse</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_CMP_DCT</name></expr>:</case>
<expr_stmt><expr><name><name>cmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dct_sad</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_CMP_DCT264</name></expr>:</case>
<expr_stmt><expr><name><name>cmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dct264_sad</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_CMP_DCTMAX</name></expr>:</case>
<expr_stmt><expr><name><name>cmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dct_max</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_CMP_PSNR</name></expr>:</case>
<expr_stmt><expr><name><name>cmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>quant_psnr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_CMP_BIT</name></expr>:</case>
<expr_stmt><expr><name><name>cmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>bit</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_CMP_RD</name></expr>:</case>
<expr_stmt><expr><name><name>cmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>rd</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_CMP_VSAD</name></expr>:</case>
<expr_stmt><expr><name><name>cmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>vsad</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_CMP_VSSE</name></expr>:</case>
<expr_stmt><expr><name><name>cmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>vsse</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_CMP_ZERO</name></expr>:</case>
<expr_stmt><expr><name><name>cmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>zero_cmp</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_CMP_NSSE</name></expr>:</case>
<expr_stmt><expr><name><name>cmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>nsse</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DWT</name></expr></cpp:if>
<case>case <expr><name>FF_CMP_W53</name></expr>:</case>
<expr_stmt><expr><name><name>cmp</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>w53</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_CMP_W97</name></expr>:</case>
<expr_stmt><expr><name><name>cmp</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>w97</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"internal error in cmp function selection\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUTTERFLY2</name><parameter_list>(<parameter><type><name>o1</name></type></parameter>, <parameter><type><name>o2</name></type></parameter>, <parameter><type><name>i1</name></type></parameter>, <parameter><type><name>i2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>o1 = (i1) + (i2); o2 = (i1) - (i2);</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUTTERFLY1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ int a, b; a = x; b = y; x = a + b; y = a - b; }</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUTTERFLYA</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(FFABS((x) + (y)) + FFABS((x) - (y)))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hadamard8_diff8x8_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name><name>temp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>h</name> <operator>==</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>BUTTERFLY2</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>src</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>src</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY2</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>src</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>src</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY2</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>src</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>src</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY2</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>src</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>src</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>dst</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">7</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">7</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>BUTTERFLYA</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>BUTTERFLYA</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>BUTTERFLYA</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>BUTTERFLYA</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">7</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>sum</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hadamard8_intra8x8_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name><name>temp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>h</name> <operator>==</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>BUTTERFLY2</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>src</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY2</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>src</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY2</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>src</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY2</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>src</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>stride</name> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">7</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY1</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">7</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator>
<call><name>BUTTERFLYA</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>BUTTERFLYA</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">1</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>BUTTERFLYA</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>BUTTERFLYA</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">7</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>sum</name> <operator>-=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>temp</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>sum</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dct_sad8x8_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>h</name> <operator>==</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>diff_pixels_unaligned</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>.</operator><name>fdct</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>sum_abs_dctelem</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_GPL</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCT8_1D</name></cpp:macro> <cpp:value>{ const int s07 = SRC(0) + SRC(7); const int s16 = SRC(1) + SRC(6); const int s25 = SRC(2) + SRC(5); const int s34 = SRC(3) + SRC(4); const int a0 = s07 + s34; const int a1 = s16 + s25; const int a2 = s07 - s34; const int a3 = s16 - s25; const int d07 = SRC(0) - SRC(7); const int d16 = SRC(1) - SRC(6); const int d25 = SRC(2) - SRC(5); const int d34 = SRC(3) - SRC(4); const int a4 = d16 + d25 + (d07 + (d07 &gt;&gt; 1)); const int a5 = d07 - d34 - (d25 + (d25 &gt;&gt; 1)); const int a6 = d07 + d34 - (d16 + (d16 &gt;&gt; 1)); const int a7 = d16 - d25 + (d34 + (d34 &gt;&gt; 1)); DST(0, a0 + a1); DST(1, a4 + (a7 &gt;&gt; 2)); DST(2, a2 + (a3 &gt;&gt; 1)); DST(3, a5 + (a6 &gt;&gt; 2)); DST(4, a0 - a1); DST(5, a6 - (a5 &gt;&gt; 2)); DST(6, (a2 &gt;&gt; 1) - a3); DST(7, (a4 &gt;&gt; 2) - a7); }</cpp:value></cpp:define>



























<function><type><specifier>static</specifier> <name>int</name></type> <name>dct264_sad8x8_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>dct</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>diff_pixels_unaligned</name></name><argument_list>(<argument><expr><name><name>dct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dct[i][x]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DST</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dct[i][x] = v</cpp:value></cpp:define>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<macro><name>DCT8_1D</name></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SRC</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DST</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dct[x][i]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DST</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sum += FFABS(v)</cpp:value></cpp:define>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<macro><name>DCT8_1D</name></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SRC</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DST</name></cpp:undef>
<return>return <expr><name>sum</name></expr>;</return></block_content></block></for></block_content></block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dct_max8x8_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>h</name> <operator>==</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>diff_pixels_unaligned</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>.</operator><name>fdct</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>sum</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>quant_psnr8x8_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>bak</name> <init>= <expr><name>temp</name> <operator>+</operator> <literal type="number">64</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>h</name> <operator>==</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>diff_pixels_unaligned</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bak</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><literal type="number">0</literal></expr> ]</index></name> <operator>=</operator>
<call><name><name>s</name><operator>-&gt;</operator><name>fast_dct_quantize</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_inter</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_simple_idct_int16_8bit</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>bak</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>bak</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>sum</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rd8x8_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scantable</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>permutated</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>lsrc1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>lsrc2</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>last</name></decl>, <decl><type ref="prev"/><name>run</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>distortion</name></decl>, <decl><type ref="prev"/><name>start_i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>esc_length</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ac_esc_length</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>length</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last_length</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>h</name> <operator>==</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_block8</name><argument_list>(<argument><expr><name>lsrc1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block8</name><argument_list>(<argument><expr><name>lsrc2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>diff_pixels</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>lsrc1</name></expr></argument>, <argument><expr><name>lsrc2</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><literal type="number">0</literal></expr> ]</index></name> <operator>=</operator>
<name>last</name> <operator>=</operator>
<call><name><name>s</name><operator>-&gt;</operator><name>fast_dct_quantize</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_ac_vlc_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_length</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_ac_vlc_last_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>luma_dc_vlc_length</name><index>[<expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">256</literal></expr>]</index></name></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>start_i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_ac_vlc_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_length</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_ac_vlc_last_length</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&gt;=</operator> <name>start_i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start_i</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>scantable</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>level</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>level</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">127</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name><name>length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name>esc_length</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>run</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>scantable</name><index>[<expr><name>last</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>level</name> <operator>-</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>level</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">127</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name><name>last_length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name>esc_length</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_intra</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>dct_unquantize_inter</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_add</name></name><argument_list>(<argument><expr><name>lsrc2</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>distortion</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>sse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>NULL</name><operator>,</operator> <name>lsrc2</name><operator>,</operator> <name>lsrc1</name><operator>,</operator> <literal type="number">8</literal><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>distortion</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>bits</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>*</operator> <literal type="number">109</literal> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bit8x8_c</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scantable</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>permutated</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>last</name></decl>, <decl><type ref="prev"/><name>run</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>start_i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>esc_length</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ac_esc_length</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>length</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last_length</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>h</name> <operator>==</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>pdsp</name><operator>.</operator><name>diff_pixels_unaligned</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><literal type="number">0</literal></expr> ]</index></name> <operator>=</operator>
<name>last</name> <operator>=</operator>
<call><name><name>s</name><operator>-&gt;</operator><name>fast_dct_quantize</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_ac_vlc_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_length</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_ac_vlc_last_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>luma_dc_vlc_length</name><index>[<expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">256</literal></expr>]</index></name></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>start_i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_ac_vlc_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_length</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>inter_ac_vlc_last_length</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&gt;=</operator> <name>start_i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start_i</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>scantable</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>level</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>level</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">127</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name><name>length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name>esc_length</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>run</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>scantable</name><index>[<expr><name>last</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>level</name> <operator>-</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>level</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><literal type="number">127</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name><name>last_length</name><index>[<expr><call><name>UNI_AC_ENC_INDEX</name><argument_list>(<argument><expr><name>run</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name>esc_length</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>bits</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSAD_INTRA</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int vsad_intra ##size ##_c(MpegEncContext *c, uint8_t *s, uint8_t *dummy, ptrdiff_t stride, int h) { int score = 0, x, y; for (y = 1; y &lt; h; y++) { for (x = 0; x &lt; size; x += 4) { score += FFABS(s[x] - s[x + stride]) + FFABS(s[x + 1] - s[x + stride + 1]) + FFABS(s[x + 2] - s[x + 2 + stride]) + FFABS(s[x + 3] - s[x + 3 + stride]); } s += stride; } return score; }</cpp:value></cpp:define>


















<macro><name>VSAD_INTRA</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>VSAD_INTRA</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSAD</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int vsad ##size ##_c(MpegEncContext *c, uint8_t *s1, uint8_t *s2, ptrdiff_t stride, int h) { int score = 0, x, y; for (y = 1; y &lt; h; y++) { for (x = 0; x &lt; size; x++) score += FFABS(s1[x] - s2[x] - s1[x + stride] + s2[x + stride]); s1 += stride; s2 += stride; } return score; }</cpp:value></cpp:define>















<macro><name>VSAD</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>VSAD</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) * (a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSSE_INTRA</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int vsse_intra ##size ##_c(MpegEncContext *c, uint8_t *s, uint8_t *dummy, ptrdiff_t stride, int h) { int score = 0, x, y; for (y = 1; y &lt; h; y++) { for (x = 0; x &lt; size; x += 4) { score += SQ(s[x] - s[x + stride]) + SQ(s[x + 1] - s[x + stride + 1]) + SQ(s[x + 2] - s[x + stride + 2]) + SQ(s[x + 3] - s[x + stride + 3]); } s += stride; } return score; }</cpp:value></cpp:define>


















<macro><name>VSSE_INTRA</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>VSSE_INTRA</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSSE</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int vsse ##size ##_c(MpegEncContext *c, uint8_t *s1, uint8_t *s2, ptrdiff_t stride, int h) { int score = 0, x, y; for (y = 1; y &lt; h; y++) { for (x = 0; x &lt; size; x++) score += SQ(s1[x] - s2[x] - s1[x + stride] + s2[x + stride]); s1 += stride; s2 += stride; } return score; }</cpp:value></cpp:define>














<macro><name>VSSE</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>VSSE</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRAPPER8_16_SQ</name><parameter_list>(<parameter><type><name>name8</name></type></parameter>, <parameter><type><name>name16</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int name16(MpegEncContext *s, uint8_t *dst, uint8_t *src, ptrdiff_t stride, int h) { int score = 0; score += name8(s, dst, src, stride, 8); score += name8(s, dst + 8, src + 8, stride, 8); if (h == 16) { dst += 8 * stride; src += 8 * stride; score += name8(s, dst, src, stride, 8); score += name8(s, dst + 8, src + 8, stride, 8); } return score; }</cpp:value></cpp:define>
















<macro><name>WRAPPER8_16_SQ</name><argument_list>(<argument>hadamard8_diff8x8_c</argument>, <argument>hadamard8_diff16_c</argument>)</argument_list></macro>
<macro><name>WRAPPER8_16_SQ</name><argument_list>(<argument>hadamard8_intra8x8_c</argument>, <argument>hadamard8_intra16_c</argument>)</argument_list></macro>
<macro><name>WRAPPER8_16_SQ</name><argument_list>(<argument>dct_sad8x8_c</argument>, <argument>dct_sad16_c</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_GPL</name></expr></cpp:if>
<macro><name>WRAPPER8_16_SQ</name><argument_list>(<argument>dct264_sad8x8_c</argument>, <argument>dct264_sad16_c</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>WRAPPER8_16_SQ</name><argument_list>(<argument>dct_max8x8_c</argument>, <argument>dct_max16_c</argument>)</argument_list></macro>
<macro><name>WRAPPER8_16_SQ</name><argument_list>(<argument>quant_psnr8x8_c</argument>, <argument>quant_psnr16_c</argument>)</argument_list></macro>
<macro><name>WRAPPER8_16_SQ</name><argument_list>(<argument>rd8x8_c</argument>, <argument>rd16_c</argument>)</argument_list></macro>
<macro><name>WRAPPER8_16_SQ</name><argument_list>(<argument>bit8x8_c</argument>, <argument>bit16_c</argument>)</argument_list></macro>

<function><type><name>int</name></type> <name>ff_check_alignment</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>did_fail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>aligned</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>aligned</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>did_fail</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMX</name> <operator>||</operator> <name>HAVE_ALTIVEC</name></expr></cpp:if>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Compiler did not align stack variables. Libavcodec has been miscompiled\n"</literal>
<literal type="string">"and may be very slow or crash. This is not a bug in libavcodec,\n"</literal>
<literal type="string">"but in the compiler. You may try recompiling using gcc &gt;= 4.2.\n"</literal>
<literal type="string">"Do not report crashes to FFmpeg developers.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>did_fail</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_me_cmp_init</name><parameter_list>(<parameter><decl><type><name>MECmpContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_check_alignment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sum_abs_dctelem</name></name> <operator>=</operator> <name>sum_abs_dctelem_c</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pix_abs16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>pix_abs16_x2_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>pix_abs16_y2_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>pix_abs16_xy2_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pix_abs8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>pix_abs8_x2_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>pix_abs8_y2_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>pix_abs8_xy2_c</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_CMP_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c-&gt;name[0] = name ##16_c; c-&gt;name[1] = name ##8x8_c;</cpp:value></cpp:define>



<macro><name>SET_CMP_FUNC</name><argument_list>(<argument>hadamard8_diff</argument>)</argument_list></macro>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hadamard8_diff</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>hadamard8_intra16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hadamard8_diff</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>hadamard8_intra8x8_c</name></expr>;</expr_stmt>
<macro><name>SET_CMP_FUNC</name><argument_list>(<argument>dct_sad</argument>)</argument_list></macro>
<macro><name>SET_CMP_FUNC</name><argument_list>(<argument>dct_max</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_GPL</name></expr></cpp:if>
<macro><name>SET_CMP_FUNC</name><argument_list>(<argument>dct264_sad</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pix_abs16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>pix_abs8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sse16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sse8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sse</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>sse4_c</name></expr>;</expr_stmt>
<macro><name>SET_CMP_FUNC</name><argument_list>(<argument>quant_psnr</argument>)</argument_list></macro>
<macro><name>SET_CMP_FUNC</name><argument_list>(<argument>rd</argument>)</argument_list></macro>
<macro><name>SET_CMP_FUNC</name><argument_list>(<argument>bit</argument>)</argument_list></macro>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vsad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>vsad16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vsad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>vsad8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vsad</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>vsad_intra16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vsad</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>vsad_intra8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vsse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>vsse16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vsse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>vsse8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vsse</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>vsse_intra16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vsse</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>vsse_intra8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>nsse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>nsse16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>nsse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>nsse8_c</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SNOW_DECODER</name> <operator>||</operator> <name>CONFIG_SNOW_ENCODER</name></expr></cpp:if>
<expr_stmt><expr><call><name>ff_dsputil_init_dwt</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ARCH_ALPHA</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_me_cmp_init_alpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_me_cmp_init_arm</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_PPC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_me_cmp_init_ppc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_me_cmp_init_x86</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_MIPS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_me_cmp_init_mips</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>median_sad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pix_median_abs16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>median_sad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>pix_median_abs8_c</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
