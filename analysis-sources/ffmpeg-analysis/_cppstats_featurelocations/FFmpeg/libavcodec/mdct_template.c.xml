<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mdct_template.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft-internal.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFT_FLOAT</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSCALE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) + (y))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFT_FIXED_32</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSCALE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((x) + (unsigned)(y) + 32) &gt;&gt; 6)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSCALE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((x) + (unsigned)(y)) &gt;&gt; 1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>av_cold</name> <name>int</name></type> <name>ff_mdct_init</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inverse</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>n4</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>alpha</name></decl>, <decl><type ref="prev"/><name>theta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tstep</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>nbits</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mdct_bits</name></name> <operator>=</operator> <name>nbits</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mdct_size</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n4</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mdct_permutation</name></name> <operator>=</operator> <name>FF_MDCT_PERM_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_fft_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mdct_bits</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>inverse</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tcos</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FFTSample</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>tcos</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mdct_permutation</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FF_MDCT_PERM_NONE</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tsin</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tcos</name></name> <operator>+</operator> <name>n4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tstep</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_MDCT_PERM_INTERLEAVE</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tsin</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tcos</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tstep</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></switch>

<expr_stmt><expr><name>theta</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <literal type="number">8.0</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>scale</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>n4</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><call><name>fabs</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n4</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name>theta</name><operator>)</operator> <operator>/</operator> <name>n</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFT_FIXED_32</name></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tcos</name><index>[<expr><name>i</name><operator>*</operator><name>tstep</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><operator>-</operator><call><name>cos</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2147483648.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tsin</name><index>[<expr><name>i</name><operator>*</operator><name>tstep</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><operator>-</operator><call><name>sin</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2147483648.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tcos</name><index>[<expr><name>i</name><operator>*</operator><name>tstep</name></expr>]</index></name> <operator>=</operator> <call><name>FIX15</name><argument_list>(<argument><expr><operator>-</operator><call><name>cos</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tsin</name><index>[<expr><name>i</name><operator>*</operator><name>tstep</name></expr>]</index></name> <operator>=</operator> <call><name>FIX15</name><argument_list>(<argument><expr><operator>-</operator><call><name>sin</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>ff_imdct_half_c</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>n8</name></decl>, <decl><type ref="prev"/><name>n4</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>revtab</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>revtab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>tcos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tcos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>tsin</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tsin</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>in1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>in2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator><name>FFTComplex</name> <operator>*</operator><operator>)</operator><name>output</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mdct_bits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n2</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n4</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n8</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>in1</name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in2</name> <operator>=</operator> <name>input</name> <operator>+</operator> <name>n2</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n4</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>j</name><operator>=</operator><name><name>revtab</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CMUL</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><operator>*</operator><name>in2</name></expr></argument>, <argument><expr><operator>*</operator><name>in1</name></expr></argument>, <argument><expr><name><name>tcos</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tsin</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in1</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in2</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fft_calc</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n8</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>FFTSample</name></type> <name>r0</name></decl>, <decl><type ref="prev"/><name>i0</name></decl>, <decl><type ref="prev"/><name>r1</name></decl>, <decl><type ref="prev"/><name>i1</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CMUL</name><argument_list>(<argument><expr><name>r0</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><name>n8</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><name>n8</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>tsin</name><index>[<expr><name>n8</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tcos</name><index>[<expr><name>n8</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CMUL</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>i0</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><name>n8</name><operator>+</operator><name>k</name></expr> ]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><name>n8</name><operator>+</operator><name>k</name></expr> ]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>tsin</name><index>[<expr><name>n8</name><operator>+</operator><name>k</name></expr> ]</index></name></expr></argument>, <argument><expr><name><name>tcos</name><index>[<expr><name>n8</name><operator>+</operator><name>k</name></expr> ]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><name>n8</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>r0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><name>n8</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>i0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><name>n8</name><operator>+</operator><name>k</name></expr> ]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><name>n8</name><operator>+</operator><name>k</name></expr> ]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>ff_imdct_calc_c</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mdct_bits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n2</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n4</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_imdct_half_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>output</name><operator>+</operator><name>n4</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n4</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>output</name><index>[<expr><name>n2</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>n</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>output</name><index>[<expr><name>n2</name><operator>+</operator><name>k</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><name>void</name></type> <name>ff_mdct_calc_c</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>n8</name></decl>, <decl><type ref="prev"/><name>n4</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>, <decl><type ref="prev"/><name>n3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTDouble</name></type> <name>re</name></decl>, <decl><type ref="prev"/><name>im</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>revtab</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>revtab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>tcos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tcos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>tsin</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tsin</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><operator>(</operator><name>FFTComplex</name> <operator>*</operator><operator>)</operator><name>out</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mdct_bits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n2</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n4</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n8</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n3</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name>n4</name></expr>;</expr_stmt>


<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n8</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>re</name> <operator>=</operator> <call><name>RSCALE</name><argument_list>(<argument><expr><operator>-</operator><name><name>input</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><name>n3</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator> <name><name>input</name><index>[<expr><name>n3</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>im</name> <operator>=</operator> <call><name>RSCALE</name><argument_list>(<argument><expr><operator>-</operator><name><name>input</name><index>[<expr><name>n4</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>+</operator> <name><name>input</name><index>[<expr><name>n4</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>revtab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CMUL</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>im</name></expr></argument>, <argument><expr><operator>-</operator><name><name>tcos</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tsin</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>re</name> <operator>=</operator> <call><name>RSCALE</name><argument_list>( <argument><expr><name><name>input</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></argument> , <argument><expr><operator>-</operator> <name><name>input</name><index>[<expr><name>n2</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>im</name> <operator>=</operator> <call><name>RSCALE</name><argument_list>(<argument><expr><operator>-</operator><name><name>input</name><index>[<expr><name>n2</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator> <name><name>input</name><index>[ <expr><name>n</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>revtab</name><index>[<expr><name>n8</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CMUL</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>im</name></expr></argument>, <argument><expr><operator>-</operator><name><name>tcos</name><index>[<expr><name>n8</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tsin</name><index>[<expr><name>n8</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fft_calc</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n8</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>FFTSample</name></type> <name>r0</name></decl>, <decl><type ref="prev"/><name>i0</name></decl>, <decl><type ref="prev"/><name>r1</name></decl>, <decl><type ref="prev"/><name>i1</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CMUL</name><argument_list>(<argument><expr><name>i1</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><name>n8</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><name>n8</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><operator>-</operator><name><name>tsin</name><index>[<expr><name>n8</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><name><name>tcos</name><index>[<expr><name>n8</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CMUL</name><argument_list>(<argument><expr><name>i0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><name>n8</name><operator>+</operator><name>i</name></expr> ]</index></name><operator>.</operator><name>re</name></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><name>n8</name><operator>+</operator><name>i</name></expr> ]</index></name><operator>.</operator><name>im</name></expr></argument>, <argument><expr><operator>-</operator><name><name>tsin</name><index>[<expr><name>n8</name><operator>+</operator><name>i</name></expr> ]</index></name></expr></argument>, <argument><expr><operator>-</operator><name><name>tcos</name><index>[<expr><name>n8</name><operator>+</operator><name>i</name></expr> ]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>n8</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>r0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>n8</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>i0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>n8</name><operator>+</operator><name>i</name></expr> ]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>n8</name><operator>+</operator><name>i</name></expr> ]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_mdct_end</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tcos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_fft_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
