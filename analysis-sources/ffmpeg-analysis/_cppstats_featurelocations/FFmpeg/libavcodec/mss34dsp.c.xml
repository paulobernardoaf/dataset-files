<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mss34dsp.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mss34dsp.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>luma_quant</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">61</literal></expr>,
<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">55</literal></expr>,
<expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">56</literal></expr>,
<expr><literal type="number">14</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">62</literal></expr>,
<expr><literal type="number">18</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">77</literal></expr>,
<expr><literal type="number">24</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">92</literal></expr>,
<expr><literal type="number">49</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">101</literal></expr>,
<expr><literal type="number">72</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">95</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">99</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>chroma_quant</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>,
<expr><literal type="number">18</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>,
<expr><literal type="number">24</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>,
<expr><literal type="number">47</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>,
<expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>,
<expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>,
<expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>,
<expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>ff_mss34_gen_quant_mat</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>qmat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quality</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>luma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>qsrc</name> <init>= <expr><ternary><condition><expr><name>luma</name></expr> ?</condition><then> <expr><name>luma_quant</name></expr> </then><else>: <expr><name>chroma_quant</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>quality</name> <operator>&gt;=</operator> <literal type="number">50</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><literal type="number">200</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>quality</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>qmat</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>qsrc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>scale</name> <operator>+</operator> <literal type="number">50</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>qmat</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">5000</literal> <operator>*</operator> <name><name>qsrc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name>quality</name> <operator>+</operator> <literal type="number">50</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCT_TEMPLATE</name><parameter_list>(<parameter><type><name>blk</name></type></parameter>, <parameter><type><name>step</name></type></parameter>, <parameter><type><name>SOP</name></type></parameter>, <parameter><type><name>shift</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>const unsigned t0 =-39409U * blk[7 * step] - 58980U * blk[1 * step]; const unsigned t1 = 39410U * blk[1 * step] - 58980U * blk[7 * step]; const unsigned t2 =-33410U * blk[5 * step] -167963U * blk[3 * step]; const unsigned t3 = 33410U * blk[3 * step] -167963U * blk[5 * step]; const unsigned t4 = blk[3 * step] + blk[7 * step]; const unsigned t5 = blk[1 * step] + blk[5 * step]; const unsigned t6 = 77062U * t4 + 51491U * t5; const unsigned t7 = 77062U * t5 - 51491U * t4; const unsigned t8 = 35470U * blk[2 * step] - 85623U * blk[6 * step]; const unsigned t9 = 35470U * blk[6 * step] + 85623U * blk[2 * step]; const unsigned tA = SOP(blk[0 * step] - blk[4 * step]); const unsigned tB = SOP(blk[0 * step] + blk[4 * step]); blk[0 * step] = (int)( t1 + t6 + t9 + tB) &gt;&gt; shift; blk[1 * step] = (int)( t3 + t7 + t8 + tA) &gt;&gt; shift; blk[2 * step] = (int)( t2 + t6 - t8 + tA) &gt;&gt; shift; blk[3 * step] = (int)( t0 + t7 - t9 + tB) &gt;&gt; shift; blk[4 * step] = (int)(-(t0 + t7) - t9 + tB) &gt;&gt; shift; blk[5 * step] = (int)(-(t2 + t6) - t8 + tA) &gt;&gt; shift; blk[6 * step] = (int)(-(t3 + t7) + t8 + tA) &gt;&gt; shift; blk[7 * step] = (int)(-(t1 + t6) + t9 + tB) &gt;&gt; shift;</cpp:value></cpp:define> 






















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOP_ROW</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) * (1U &lt;&lt; 16)) + 0x2000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOP_COL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) + 32) * (1U &lt;&lt; 16))</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>ff_mss34_dct_put</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>DCT_TEMPLATE</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SOP_ROW</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>DCT_TEMPLATE</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>SOP_COL</name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
