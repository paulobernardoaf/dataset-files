<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\h264_ps.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_ps.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"golomb.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_LOG2_MAX_FRAME_NUM</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTENDED_SAR</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>default_scaling4</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">32</literal></expr>,
<expr><literal type="number">20</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">42</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">27</literal></expr>,
<expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">34</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>default_scaling8</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">27</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr>,
<expr><literal type="number">13</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">31</literal></expr>,
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">33</literal></expr>,
<expr><literal type="number">18</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">36</literal></expr>,
<expr><literal type="number">23</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">38</literal></expr>,
<expr><literal type="number">25</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">40</literal></expr>,
<expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">42</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>,
<expr><literal type="number">13</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>,
<expr><literal type="number">15</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">27</literal></expr>,
<expr><literal type="number">17</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>,
<expr><literal type="number">19</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">30</literal></expr>,
<expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">32</literal></expr>,
<expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>,
<expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">35</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>level_max_dpb_mbs</name><index>[]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">396</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">900</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">2376</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">13</literal></expr>, <expr><literal type="number">2376</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">2376</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">21</literal></expr>, <expr><literal type="number">4752</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">22</literal></expr>, <expr><literal type="number">8100</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">8100</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">18000</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">20480</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">32768</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">41</literal></expr>, <expr><literal type="number">32768</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">42</literal></expr>, <expr><literal type="number">34816</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">50</literal></expr>, <expr><literal type="number">110400</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">51</literal></expr>, <expr><literal type="number">184320</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">52</literal></expr>, <expr><literal type="number">184320</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_pps</name><parameter_list>(<parameter><decl><type><name>H264ParamSets</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pps_list</name><index>[<expr><name>id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_sps</name><parameter_list>(<parameter><decl><type><name>H264ParamSets</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int i;
if (s-&gt;sps_list[id]) {

for (i = 0; i &lt; FF_ARRAY_ELEMS(s-&gt;pps_list); i++)
if (s-&gt;pps_list[i] &amp;&amp; ((PPS*)s-&gt;pps_list[i]-&gt;data)-&gt;sps_id == id)
remove_pps(s, i);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name>id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>decode_hrd_parameters</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>,
<parameter><decl><type><name>SPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cpb_count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cpb_count</name> <operator>=</operator> <call><name>get_ue_golomb_31</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cpb_count</name> <operator>&gt;</operator> <literal type="number">32U</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cpb_count %d invalid\n"</literal></expr></argument>, <argument><expr><name>cpb_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cpb_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></for>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>initial_cpb_removal_delay_length</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>cpb_removal_delay_length</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>dpb_output_delay_length</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>time_offset_length</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>cpb_cnt</name></name> <operator>=</operator> <name>cpb_count</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>decode_vui_parameters</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>,
<parameter><decl><type><name>SPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>aspect_ratio_info_present_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>aspect_ratio_idc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>aspect_ratio_info_present_flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>aspect_ratio_info_present_flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>aspect_ratio_idc</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>aspect_ratio_idc</name> <operator>==</operator> <name>EXTENDED_SAR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sar</name><operator>.</operator><name>num</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sar</name><operator>.</operator><name>den</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>aspect_ratio_idc</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ff_h264_pixel_aspect</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sar</name></name> <operator>=</operator> <name><name>ff_h264_pixel_aspect</name><index>[<expr><name>aspect_ratio_idc</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"illegal aspect ratio\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sar</name><operator>.</operator><name>num</name></name> <operator>=</operator>
<name><name>sps</name><operator>-&gt;</operator><name>sar</name><operator>.</operator><name>den</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>video_signal_type_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>video_signal_type_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>full_range</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>colour_description_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>colour_description_present_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_color_primaries_name</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>color_primaries</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name>AVCOL_PRI_UNSPECIFIED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_color_transfer_name</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>color_trc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name>AVCOL_TRC_UNSPECIFIED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_color_space_name</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>colorspace</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_location</name></name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_location</name></name> <operator>=</operator> <name>AVCHROMA_LOC_LEFT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>show_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Truncated VUI (%d)\n"</literal></expr></argument>, <argument><expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>timing_info_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>timing_info_present_flag</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>num_units_in_tick</name> <init>= <expr><call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>time_scale</name> <init>= <expr><call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num_units_in_tick</name> <operator>||</operator> <operator>!</operator><name>time_scale</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"time_scale/num_units_in_tick invalid or unsupported (%u/%u)\n"</literal></expr></argument>,
<argument><expr><name>time_scale</name></expr></argument>, <argument><expr><name>num_units_in_tick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>timing_info_present_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>num_units_in_tick</name></name> <operator>=</operator> <name>num_units_in_tick</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>time_scale</name></name> <operator>=</operator> <name>time_scale</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>fixed_frame_rate_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>nal_hrd_parameters_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>nal_hrd_parameters_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>decode_hrd_parameters</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>sps</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vcl_hrd_parameters_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>vcl_hrd_parameters_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>decode_hrd_parameters</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>sps</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>nal_hrd_parameters_present_flag</name></name> <operator>||</operator>
<name><name>sps</name><operator>-&gt;</operator><name>vcl_hrd_parameters_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pic_struct_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>bitstream_restriction_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>bitstream_restriction_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>num_reorder_frames</name></name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>num_reorder_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>bitstream_restriction_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>num_reorder_frames</name></name> <operator>&gt;</operator> <literal type="number">16U</literal></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Clipping illegal num_reorder_frames %d\n"</literal></expr></argument>,
<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>num_reorder_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>num_reorder_frames</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_scaling_list</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>factors</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>jvt_list</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>fallback_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>last</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, <decl><type ref="prev"/><name>next</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scan</name> <init>= <expr><ternary><condition><expr><name>size</name> <operator>==</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><name>ff_zigzag_scan</name></expr> </then><else>: <expr><name>ff_zigzag_direct</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>factors</name></expr></argument>, <argument><expr><name>fallback_list</name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>get_se_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">128</literal> <operator>||</operator> <name>v</name></expr></argument> &gt;</argument_list></name> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"delta scale %d is invalid\n"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <operator>(</operator><name>last</name> <operator>+</operator> <name>v</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>next</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>factors</name></expr></argument>, <argument><expr><name>jvt_list</name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>factors</name><index>[<expr><name><name>scan</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>next</name></expr> ?</condition><then> <expr><name>next</name></expr> </then><else>: <expr><name>last</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>decode_scaling_matrices</name><argument_list>(<argument><expr><name>GetBitContext</name> <operator>*</operator><name>gb</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SPS</name> <operator>*</operator><name>sps</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>PPS</name> <operator>*</operator><name>pps</name></expr></argument>, <argument><expr><name>int</name> <name>is_sps</name></expr></argument>,
<argument><expr><call><name>uint8_t</name><argument_list>(<argument><expr><operator>*</operator><name>scaling_matrix4</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal></expr>]</index></expr></argument>,
<argument><expr><call><name>uint8_t</name><argument_list>(<argument><expr><operator>*</operator><name>scaling_matrix8</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fallback_sps</name> <init>= <expr><operator>!</operator><name>is_sps</name> <operator>&amp;&amp;</operator> <name><name>sps</name><operator>-&gt;</operator><name>scaling_matrix_present</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>fallback</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>fallback_sps</name> <operator>?</operator> <name><name>sps</name><operator>-&gt;</operator><name>scaling_matrix4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>:</operator> <name><name>default_scaling4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,
<expr><name>fallback_sps</name> <operator>?</operator> <name><name>sps</name><operator>-&gt;</operator><name>scaling_matrix4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>:</operator> <name><name>default_scaling4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,
<expr><name>fallback_sps</name> <operator>?</operator> <name><name>sps</name><operator>-&gt;</operator><name>scaling_matrix8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>:</operator> <name><name>default_scaling8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,
<expr><name>fallback_sps</name> <operator>?</operator> <name><name>sps</name><operator>-&gt;</operator><name>scaling_matrix8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>:</operator> <name><name>default_scaling8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>decode_scaling_list</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>scaling_matrix4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>default_scaling4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>fallback</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>decode_scaling_list</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>scaling_matrix4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>default_scaling4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>scaling_matrix4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>decode_scaling_list</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>scaling_matrix4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>default_scaling4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>scaling_matrix4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>decode_scaling_list</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>scaling_matrix4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>default_scaling4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>fallback</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>decode_scaling_list</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>scaling_matrix4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>default_scaling4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>scaling_matrix4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>decode_scaling_list</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>scaling_matrix4</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>default_scaling4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>scaling_matrix4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>is_sps</name> <operator>||</operator> <name><name>pps</name><operator>-&gt;</operator><name>transform_8x8_mode</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>decode_scaling_list</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>scaling_matrix8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name><name>default_scaling8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>fallback</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>decode_scaling_list</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>scaling_matrix8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name><name>default_scaling8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>fallback</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>decode_scaling_list</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>scaling_matrix8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name><name>default_scaling8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>scaling_matrix8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>decode_scaling_list</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>scaling_matrix8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name><name>default_scaling8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>scaling_matrix8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>decode_scaling_list</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>scaling_matrix8</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name><name>default_scaling8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>scaling_matrix8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>decode_scaling_list</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>scaling_matrix8</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name><name>default_scaling8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>scaling_matrix8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>is_sps</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>ff_h264_ps_uninit</name><parameter_list>(<parameter><decl><type><name>H264ParamSets</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_SPS_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PPS_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>pps_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>sps_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>pps_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>pps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>sps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_h264_decode_seq_parameter_set</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>H264ParamSets</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ignore_truncation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>sps_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>profile_idc</name></decl>, <decl><type ref="prev"/><name>level_idc</name></decl>, <decl><type ref="prev"/><name>constraint_set_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sps_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>log2_max_frame_num_minus4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SPS</name> <modifier>*</modifier></type><name>sps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sps_buf</name> <operator>=</operator> <call><name>av_buffer_allocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sps_buf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sps</name> <operator>=</operator> <operator>(</operator><name>SPS</name><operator>*</operator><operator>)</operator><name><name>sps_buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name><name>gb</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>gb</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>data_size</name></name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Truncating likely oversized SPS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>gb</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>profile_idc</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>constraint_set_flags</name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>constraint_set_flags</name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>constraint_set_flags</name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>constraint_set_flags</name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>constraint_set_flags</name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>constraint_set_flags</name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>level_idc</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sps_id</name> <operator>=</operator> <call><name>get_ue_golomb_31</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sps_id</name> <operator>&gt;=</operator> <name>MAX_SPS_COUNT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sps_id %u out of range\n"</literal></expr></argument>, <argument><expr><name>sps_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sps_id</name></name> <operator>=</operator> <name>sps_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>time_offset_length</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>=</operator> <name>profile_idc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>constraint_set_flags</name></name> <operator>=</operator> <name>constraint_set_flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>level_idc</name></name> <operator>=</operator> <name>level_idc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>full_range</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>scaling_matrix4</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>scaling_matrix4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>scaling_matrix8</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>scaling_matrix8</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>scaling_matrix_present</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">100</literal> <operator>||</operator> 
<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">110</literal> <operator>||</operator> 
<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">122</literal> <operator>||</operator> 
<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">244</literal> <operator>||</operator> 
<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">44</literal> <operator>||</operator> 
<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">83</literal> <operator>||</operator> 
<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">86</literal> <operator>||</operator> 
<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">118</literal> <operator>||</operator> 
<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">128</literal> <operator>||</operator> 
<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">138</literal> <operator>||</operator> 
<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">144</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>=</operator> <call><name>get_ue_golomb_31</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>&gt;</operator> <literal type="number">3U</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"chroma_format_idc %u"</literal></expr></argument>,
<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>residual_color_transform_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>residual_color_transform_flag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"separate color planes are not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma</name></name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma</name></name> <operator>!=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,
<argument><expr><literal type="string">"Different chroma and luma bit depth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>||</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>&gt;</operator> <literal type="number">14</literal> <operator>||</operator>
<name><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma</name></name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>||</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma</name></name> <operator>&gt;</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"illegal bit depth value (%d, %d)\n"</literal></expr></argument>,
<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>transform_bypass</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_scaling_matrices</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>sps</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>scaling_matrix4</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>scaling_matrix8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>scaling_matrix_present</name></name> <operator>|=</operator> <name>ret</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>log2_max_frame_num_minus4</name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>log2_max_frame_num_minus4</name> <argument_list type="generic">&lt; <argument><expr><name>MIN_LOG2_MAX_FRAME_NUM</name> <operator>-</operator> <literal type="number">4</literal> <operator>||</operator>
<name>log2_max_frame_num_minus4</name></expr></argument> &gt;</argument_list></name> <name>MAX_LOG2_MAX_FRAME_NUM</name> <operator>-</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"log2_max_frame_num_minus4 out of range (0-12): %d\n"</literal></expr></argument>,
<argument><expr><name>log2_max_frame_num_minus4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_max_frame_num</name></name> <operator>=</operator> <name>log2_max_frame_num_minus4</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>poc_type</name></name> <operator>=</operator> <call><name>get_ue_golomb_31</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>poc_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>unsigned</name></type> <name>t</name> <init>= <expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name><operator>&gt;</operator><literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"log2_max_poc_lsb (%d) is out of range\n"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_max_poc_lsb</name></name> <operator>=</operator> <name>t</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>poc_type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>delta_pic_order_always_zero_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>offset_for_non_ref_pic</name></name> <operator>=</operator> <call><name>get_se_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>offset_for_top_to_bottom_field</name></name> <operator>=</operator> <call><name>get_se_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>sps</name><operator>-&gt;</operator><name>offset_for_non_ref_pic</name></name> <operator>==</operator> <name>INT32_MIN</name>
<operator>||</operator> <name><name>sps</name><operator>-&gt;</operator><name>offset_for_top_to_bottom_field</name></name> <operator>==</operator> <name>INT32_MIN</name></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"offset_for_non_ref_pic or offset_for_top_to_bottom_field is out of range\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>poc_cycle_length</name></name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>sps</name><operator>-&gt;</operator><name>poc_cycle_length</name></name> <operator>&gt;=</operator>
<call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>offset_for_ref_frame</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"poc_cycle_length overflow %d\n"</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>poc_cycle_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>poc_cycle_length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>offset_for_ref_frame</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_se_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>offset_for_ref_frame</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>INT32_MIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"offset_for_ref_frame is out of range\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>poc_type</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"illegal POC type %d\n"</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>poc_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>ref_frame_count</name></name> <operator>=</operator> <call><name>get_ue_golomb_31</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>ref_frame_count</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>ref_frame_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>ref_frame_count</name></name> <operator>&gt;</operator> <name>MAX_DELAYED_PIC_COUNT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"too many reference frames %d\n"</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>ref_frame_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>gaps_in_frame_num_allowed_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>/</operator> <literal type="number">2U</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"height overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*=</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>mb_aff</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>mb_aff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>sps</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>/</operator> <literal type="number">16</literal> <operator>||</operator>
<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>sps</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>/</operator> <literal type="number">16</literal> <operator>||</operator>
<call><name>av_image_check_size</name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>*</operator> <name><name>sps</name><operator>-&gt;</operator><name>mb_width</name></name></expr></argument>,
<argument><expr><literal type="number">16</literal> <operator>*</operator> <name><name>sps</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mb_width/height overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>direct_8x8_inference_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ALLOW_INTERLACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>mb_aff</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"MBAFF support not included; enable it at compile-time.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>crop</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>crop</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>crop_left</name> <init>= <expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>crop_right</name> <init>= <expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>crop_top</name> <init>= <expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>crop_bottom</name> <init>= <expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><literal type="number">16</literal> <operator>*</operator> <name><name>sps</name><operator>-&gt;</operator><name>mb_width</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><literal type="number">16</literal> <operator>*</operator> <name><name>sps</name><operator>-&gt;</operator><name>mb_height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags2</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG2_IGNORE_CROP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"discarding sps cropping, original "</literal>
<literal type="string">"values are l:%d r:%d t:%d b:%d\n"</literal></expr></argument>,
<argument><expr><name>crop_left</name></expr></argument>, <argument><expr><name>crop_right</name></expr></argument>, <argument><expr><name>crop_top</name></expr></argument>, <argument><expr><name>crop_bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>crop_left</name></name> <operator>=</operator>
<name><name>sps</name><operator>-&gt;</operator><name>crop_right</name></name> <operator>=</operator>
<name><name>sps</name><operator>-&gt;</operator><name>crop_top</name></name> <operator>=</operator>
<name><name>sps</name><operator>-&gt;</operator><name>crop_bottom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>vsub</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hsub</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator>
<name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>step_x</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>hsub</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>step_y</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name><name>sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <name>vsub</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>crop_left</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>INT_MAX</name> <operator>/</operator> <literal type="number">4</literal> <operator>/</operator> <name>step_x</name> <operator>||</operator>
<name>crop_right</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>INT_MAX</name> <operator>/</operator> <literal type="number">4</literal> <operator>/</operator> <name>step_x</name> <operator>||</operator>
<name>crop_top</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>INT_MAX</name> <operator>/</operator> <literal type="number">4</literal> <operator>/</operator> <name>step_y</name> <operator>||</operator>
<name>crop_bottom</name><operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>INT_MAX</name> <operator>/</operator> <literal type="number">4</literal> <operator>/</operator> <name>step_y</name> <operator>||</operator>
<operator>(</operator><name>crop_left</name> <operator>+</operator> <name>crop_right</name> <operator>)</operator> <operator>*</operator> <name>step_x</name> <operator>&gt;=</operator> <name>width</name> <operator>||</operator>
<operator>(</operator><name>crop_top</name> <operator>+</operator> <name>crop_bottom</name><operator>)</operator> <operator>*</operator> <name>step_y</name> <operator>&gt;=</operator> <name>height</name></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"crop values invalid %d %d %d %d / %d %d\n"</literal></expr></argument>, <argument><expr><name>crop_left</name></expr></argument>, <argument><expr><name>crop_right</name></expr></argument>, <argument><expr><name>crop_top</name></expr></argument>, <argument><expr><name>crop_bottom</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>crop_left</name></name> <operator>=</operator> <name>crop_left</name> <operator>*</operator> <name>step_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>crop_right</name></name> <operator>=</operator> <name>crop_right</name> <operator>*</operator> <name>step_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>crop_top</name></name> <operator>=</operator> <name>crop_top</name> <operator>*</operator> <name>step_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>crop_bottom</name></name> <operator>=</operator> <name>crop_bottom</name> <operator>*</operator> <name>step_y</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>crop_left</name></name> <operator>=</operator>
<name><name>sps</name><operator>-&gt;</operator><name>crop_right</name></name> <operator>=</operator>
<name><name>sps</name><operator>-&gt;</operator><name>crop_top</name></name> <operator>=</operator>
<name><name>sps</name><operator>-&gt;</operator><name>crop_bottom</name></name> <operator>=</operator>
<name><name>sps</name><operator>-&gt;</operator><name>crop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui_parameters_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>vui_parameters_present_flag</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>decode_vui_parameters</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log_once</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><ternary><condition><expr><name>ignore_truncation</name></expr> ?</condition><then> <expr><name>AV_LOG_WARNING</name></expr> </then><else>: <expr><name>AV_LOG_ERROR</name></expr></else></ternary></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>overread_warning_printed</name><index>[<expr><name><name>sps</name><operator>-&gt;</operator><name>vui_parameters_present_flag</name></name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="string">"Overread %s by %d bits\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>sps</name><operator>-&gt;</operator><name>vui_parameters_present_flag</name></name></expr> ?</condition><then> <expr><literal type="string">"VUI"</literal></expr> </then><else>: <expr><literal type="string">"SPS"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>-</operator><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ignore_truncation</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sps</name><operator>-&gt;</operator><name>bitstream_restriction_flag</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>ref_frame_count</name></name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&gt;=</operator> <name>FF_COMPLIANCE_STRICT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>num_reorder_frames</name></name> <operator>=</operator> <name>MAX_DELAYED_PIC_COUNT</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>level_max_dpb_mbs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>level_max_dpb_mbs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>sps</name><operator>-&gt;</operator><name>level_idc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>num_reorder_frames</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>level_max_dpb_mbs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <name><name>sps</name><operator>-&gt;</operator><name>mb_height</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>num_reorder_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sps</name><operator>-&gt;</operator><name>sar</name><operator>.</operator><name>den</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sar</name><operator>.</operator><name>den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_PICT_INFO</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>csp</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"Gray"</literal></expr>, <expr><literal type="string">"420"</literal></expr>, <expr><literal type="string">"422"</literal></expr>, <expr><literal type="string">"444"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"sps:%u profile:%d/%d poc:%d ref:%d %dx%d %s %s crop:%u/%u/%u/%u %s %s %"</literal><name>PRId32</name><literal type="string">"/%"</literal><name>PRId32</name><literal type="string">" b%d reo:%d\n"</literal></expr></argument>,
<argument><expr><name>sps_id</name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>level_idc</name></name></expr></argument>,
<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>poc_type</name></name></expr></argument>,
<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>ref_frame_count</name></name></expr></argument>,
<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>mb_width</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name></expr> ?</condition><then> <expr><literal type="string">"FRM"</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>sps</name><operator>-&gt;</operator><name>mb_aff</name></name></expr> ?</condition><then> <expr><literal type="string">"MB-AFF"</literal></expr> </then><else>: <expr><literal type="string">"PIC-AFF"</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>sps</name><operator>-&gt;</operator><name>direct_8x8_inference_flag</name></name></expr> ?</condition><then> <expr><literal type="string">"8B8"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>crop_left</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>crop_right</name></name></expr></argument>,
<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>crop_top</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>crop_bottom</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>sps</name><operator>-&gt;</operator><name>vui_parameters_present_flag</name></name></expr> ?</condition><then> <expr><literal type="string">"VUI"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>csp</name><index>[<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>]</index></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>sps</name><operator>-&gt;</operator><name>timing_info_present_flag</name></name></expr> ?</condition><then> <expr><name><name>sps</name><operator>-&gt;</operator><name>num_units_in_tick</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>sps</name><operator>-&gt;</operator><name>timing_info_present_flag</name></name></expr> ?</condition><then> <expr><name><name>sps</name><operator>-&gt;</operator><name>time_scale</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>sps</name><operator>-&gt;</operator><name>bitstream_restriction_flag</name></name></expr> ?</condition><then> <expr><name><name>sps</name><operator>-&gt;</operator><name>num_reorder_frames</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name>sps_id</name></expr>]</index></name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name>sps_id</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>, <argument><expr><name><name>sps_buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>sps_buf</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sps_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>remove_sps</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>sps_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name>sps_id</name></expr>]</index></name> <operator>=</operator> <name>sps_buf</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sps_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_dequant8_coeff_table</name><parameter_list>(<parameter><decl><type><name>PPS</name> <modifier>*</modifier></type><name>pps</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_qp</name> <init>= <expr><literal type="number">51</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>dequant8_coeff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>dequant8_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix8</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix8</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>dequant8_coeff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>dequant8_buffer</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <name>max_qp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><name><name>ff_h264_quant_div6</name><index>[<expr><name>q</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>ff_h264_quant_rem6</name><index>[<expr><name>q</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>dequant8_coeff</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>q</name></expr>]</index><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>]</index></name> <operator>=</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ff_h264_dequant8_coeff_init</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name><name>ff_h264_dequant8_coeff_init_scan</name><index>[<expr><operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>]</index></name></expr>]</index></name> <operator>*</operator>
<name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix8</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_dequant4_coeff_table</name><parameter_list>(<parameter><decl><type><name>PPS</name> <modifier>*</modifier></type><name>pps</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_qp</name> <init>= <expr><literal type="number">51</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>dequant4_coeff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>dequant4_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix4</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix4</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>dequant4_coeff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>dequant4_buffer</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <name>max_qp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><name><name>ff_h264_quant_div6</name><index>[<expr><name>q</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>ff_h264_quant_rem6</name><index>[<expr><name>q</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>dequant4_coeff</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>q</name></expr>]</index><index>[<expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator></expr>]</index></name> <operator>=</operator>
<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ff_h264_dequant4_coeff_init</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>*</operator>
<name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix4</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_dequant_tables</name><parameter_list>(<parameter><decl><type><name>PPS</name> <modifier>*</modifier></type><name>pps</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_dequant4_coeff_table</name><argument_list>(<argument><expr><name>pps</name></expr></argument>, <argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>dequant8_coeff</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>dequant8_coeff</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>transform_8x8_mode</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>init_dequant8_coeff_table</name><argument_list>(<argument><expr><name>pps</name></expr></argument>, <argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>transform_bypass</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>dequant4_coeff</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>transform_8x8_mode</name></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>dequant8_coeff</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>build_qp_table</name><parameter_list>(<parameter><decl><type><name>PPS</name> <modifier>*</modifier></type><name>pps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_qp</name> <init>= <expr><literal type="number">51</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <operator>(</operator><name>depth</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_qp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_table</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<name><name>ff_h264_chroma_qp</name><index>[<expr><name>depth</name> <operator>-</operator> <literal type="number">8</literal></expr>]</index><index>[<expr><call><name>av_clip</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <name>index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max_qp</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>more_rbsp_data_in_pps</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>profile_idc</name> <init>= <expr><name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>profile_idc</name> <operator>==</operator> <literal type="number">66</literal> <operator>||</operator> <name>profile_idc</name> <operator>==</operator> <literal type="number">77</literal> <operator>||</operator>
<name>profile_idc</name> <operator>==</operator> <literal type="number">88</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>constraint_set_flags</name></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"Current profile doesn't provide more RBSP data in PPS, skipping\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_h264_decode_picture_parameter_set</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>H264ParamSets</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>pps_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>SPS</name> <modifier>*</modifier></type><name>sps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pps_id</name> <init>= <expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PPS</name> <modifier>*</modifier></type><name>pps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>qp_bd_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits_left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pps_id</name> <operator>&gt;=</operator> <name>MAX_PPS_COUNT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pps_id %u out of range\n"</literal></expr></argument>, <argument><expr><name>pps_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pps_buf</name> <operator>=</operator> <call><name>av_buffer_allocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pps_buf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pps</name> <operator>=</operator> <operator>(</operator><name>PPS</name><operator>*</operator><operator>)</operator><name><name>pps_buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name><name>gb</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>gb</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>data_size</name></name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Truncating likely oversized PPS "</literal>
<literal type="string">"(%"</literal><name>SIZE_SPECIFIER</name><literal type="string">" &gt; %"</literal><name>SIZE_SPECIFIER</name><literal type="string">")\n"</literal></expr></argument>,
<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>gb</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name> <operator>=</operator> <call><name>get_ue_golomb_31</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name> <operator>&gt;=</operator> <name>MAX_SPS_COUNT</name> <operator>||</operator>
<operator>!</operator><name><name>ps</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sps_id %u out of range\n"</literal></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sps</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>SPS</name><operator>*</operator><operator>)</operator><name><name>ps</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>&gt;</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid luma bit depth=%d\n"</literal></expr></argument>,
<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>==</operator> <literal type="number">11</literal> <operator>||</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>==</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,
<argument><expr><literal type="string">"Unimplemented luma bit depth=%d"</literal></expr></argument>,
<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_PATCHWELCOME</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>cabac</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>pic_order_present</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>slice_group_count</name></name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>slice_group_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>mb_slice_group_map_type</name></name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"FMO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_PATCHWELCOME</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <literal type="number">32</literal> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>pps</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <literal type="number">32</literal> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"reference overflow (pps)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>qp_bd_offset</name> <operator>=</operator> <literal type="number">6</literal> <operator>*</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>weighted_pred</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>weighted_bipred_idc</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>init_qp</name></name> <operator>=</operator> <call><name>get_se_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">26U</literal> <operator>+</operator> <name>qp_bd_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>init_qs</name></name> <operator>=</operator> <call><name>get_se_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">26U</literal> <operator>+</operator> <name>qp_bd_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_se_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <operator>-</operator><literal type="number">12</literal> <operator>||</operator> <name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>deblocking_filter_parameters_present</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>constrained_intra_pred</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>redundant_pic_cnt_present</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>transform_8x8_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix4</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>scaling_matrix4</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix8</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>scaling_matrix8</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix8</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bits_left</name> <operator>=</operator> <name>bit_length</name> <operator>-</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bits_left</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>more_rbsp_data_in_pps</name><argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>transform_8x8_mode</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_scaling_matrices</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>sps</name></expr></argument>, <argument><expr><name>pps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix4</name></name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_se_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <operator>-</operator><literal type="number">12</literal> <operator>||</operator> <name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>build_qp_table</name><argument_list>(<argument><expr><name>pps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>build_qp_table</name><argument_list>(<argument><expr><name>pps</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_dequant_tables</name><argument_list>(<argument><expr><name>pps</name></expr></argument>, <argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_diff</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_PICT_INFO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"pps:%u sps:%u %s slice_groups:%d ref:%u/%u %s qp:%d/%d/%d/%d %s %s %s %s\n"</literal></expr></argument>,
<argument><expr><name>pps_id</name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>pps</name><operator>-&gt;</operator><name>cabac</name></name></expr> ?</condition><then> <expr><literal type="string">"CABAC"</literal></expr> </then><else>: <expr><literal type="string">"CAVLC"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>slice_group_count</name></name></expr></argument>,
<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>pps</name><operator>-&gt;</operator><name>weighted_pred</name></name></expr> ?</condition><then> <expr><literal type="string">"weighted"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>init_qp</name></name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>init_qs</name></name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>pps</name><operator>-&gt;</operator><name>deblocking_filter_parameters_present</name></name></expr> ?</condition><then> <expr><literal type="string">"LPAR"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>pps</name><operator>-&gt;</operator><name>constrained_intra_pred</name></name></expr> ?</condition><then> <expr><literal type="string">"CONSTR"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>pps</name><operator>-&gt;</operator><name>redundant_pic_cnt_present</name></name></expr> ?</condition><then> <expr><literal type="string">"REDU"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>pps</name><operator>-&gt;</operator><name>transform_8x8_mode</name></name></expr> ?</condition><then> <expr><literal type="string">"8x8DCT"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>remove_pps</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>pps_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>pps_list</name><index>[<expr><name>pps_id</name></expr>]</index></name> <operator>=</operator> <name>pps_buf</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pps_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
