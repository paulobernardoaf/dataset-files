<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\dxva2.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;initguid.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dxva2_internal.h"</cpp:file></cpp:include>



<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>ff_DXVA2_ModeMPEG2_VLD</name></expr></argument>, <argument><expr><literal type="number">0xee27417f</literal></expr></argument>, <argument><expr><literal type="number">0x5e28</literal></expr></argument>,<argument><expr><literal type="number">0x4e65</literal></expr></argument>,<argument><expr><literal type="number">0xbe</literal></expr></argument>,<argument><expr><literal type="number">0xea</literal></expr></argument>,<argument><expr><literal type="number">0x1d</literal></expr></argument>,<argument><expr><literal type="number">0x26</literal></expr></argument>,<argument><expr><literal type="number">0xb5</literal></expr></argument>,<argument><expr><literal type="number">0x08</literal></expr></argument>,<argument><expr><literal type="number">0xad</literal></expr></argument>,<argument><expr><literal type="number">0xc9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>ff_DXVA2_ModeMPEG2and1_VLD</name></expr></argument>, <argument><expr><literal type="number">0x86695f12</literal></expr></argument>, <argument><expr><literal type="number">0x340e</literal></expr></argument>,<argument><expr><literal type="number">0x4f04</literal></expr></argument>,<argument><expr><literal type="number">0x9f</literal></expr></argument>,<argument><expr><literal type="number">0xd3</literal></expr></argument>,<argument><expr><literal type="number">0x92</literal></expr></argument>,<argument><expr><literal type="number">0x53</literal></expr></argument>,<argument><expr><literal type="number">0xdd</literal></expr></argument>,<argument><expr><literal type="number">0x32</literal></expr></argument>,<argument><expr><literal type="number">0x74</literal></expr></argument>,<argument><expr><literal type="number">0x60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>ff_DXVA2_ModeH264_E</name></expr></argument>, <argument><expr><literal type="number">0x1b81be68</literal></expr></argument>, <argument><expr><literal type="number">0xa0c7</literal></expr></argument>,<argument><expr><literal type="number">0x11d3</literal></expr></argument>,<argument><expr><literal type="number">0xb9</literal></expr></argument>,<argument><expr><literal type="number">0x84</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0xc0</literal></expr></argument>,<argument><expr><literal type="number">0x4f</literal></expr></argument>,<argument><expr><literal type="number">0x2e</literal></expr></argument>,<argument><expr><literal type="number">0x73</literal></expr></argument>,<argument><expr><literal type="number">0xc5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>ff_DXVA2_ModeH264_F</name></expr></argument>, <argument><expr><literal type="number">0x1b81be69</literal></expr></argument>, <argument><expr><literal type="number">0xa0c7</literal></expr></argument>,<argument><expr><literal type="number">0x11d3</literal></expr></argument>,<argument><expr><literal type="number">0xb9</literal></expr></argument>,<argument><expr><literal type="number">0x84</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0xc0</literal></expr></argument>,<argument><expr><literal type="number">0x4f</literal></expr></argument>,<argument><expr><literal type="number">0x2e</literal></expr></argument>,<argument><expr><literal type="number">0x73</literal></expr></argument>,<argument><expr><literal type="number">0xc5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>ff_DXVADDI_Intel_ModeH264_E</name></expr></argument>, <argument><expr><literal type="number">0x604F8E68</literal></expr></argument>, <argument><expr><literal type="number">0x4951</literal></expr></argument>,<argument><expr><literal type="number">0x4C54</literal></expr></argument>,<argument><expr><literal type="number">0x88</literal></expr></argument>,<argument><expr><literal type="number">0xFE</literal></expr></argument>,<argument><expr><literal type="number">0xAB</literal></expr></argument>,<argument><expr><literal type="number">0xD2</literal></expr></argument>,<argument><expr><literal type="number">0x5C</literal></expr></argument>,<argument><expr><literal type="number">0x15</literal></expr></argument>,<argument><expr><literal type="number">0xB3</literal></expr></argument>,<argument><expr><literal type="number">0xD6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>ff_DXVA2_ModeVC1_D</name></expr></argument>, <argument><expr><literal type="number">0x1b81beA3</literal></expr></argument>, <argument><expr><literal type="number">0xa0c7</literal></expr></argument>,<argument><expr><literal type="number">0x11d3</literal></expr></argument>,<argument><expr><literal type="number">0xb9</literal></expr></argument>,<argument><expr><literal type="number">0x84</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0xc0</literal></expr></argument>,<argument><expr><literal type="number">0x4f</literal></expr></argument>,<argument><expr><literal type="number">0x2e</literal></expr></argument>,<argument><expr><literal type="number">0x73</literal></expr></argument>,<argument><expr><literal type="number">0xc5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>ff_DXVA2_ModeVC1_D2010</name></expr></argument>, <argument><expr><literal type="number">0x1b81beA4</literal></expr></argument>, <argument><expr><literal type="number">0xa0c7</literal></expr></argument>,<argument><expr><literal type="number">0x11d3</literal></expr></argument>,<argument><expr><literal type="number">0xb9</literal></expr></argument>,<argument><expr><literal type="number">0x84</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0xc0</literal></expr></argument>,<argument><expr><literal type="number">0x4f</literal></expr></argument>,<argument><expr><literal type="number">0x2e</literal></expr></argument>,<argument><expr><literal type="number">0x73</literal></expr></argument>,<argument><expr><literal type="number">0xc5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>ff_DXVA2_ModeHEVC_VLD_Main</name></expr></argument>, <argument><expr><literal type="number">0x5b11d51b</literal></expr></argument>, <argument><expr><literal type="number">0x2f4c</literal></expr></argument>,<argument><expr><literal type="number">0x4452</literal></expr></argument>,<argument><expr><literal type="number">0xbc</literal></expr></argument>,<argument><expr><literal type="number">0xc3</literal></expr></argument>,<argument><expr><literal type="number">0x09</literal></expr></argument>,<argument><expr><literal type="number">0xf2</literal></expr></argument>,<argument><expr><literal type="number">0xa1</literal></expr></argument>,<argument><expr><literal type="number">0x16</literal></expr></argument>,<argument><expr><literal type="number">0x0c</literal></expr></argument>,<argument><expr><literal type="number">0xc0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>ff_DXVA2_ModeHEVC_VLD_Main10</name></expr></argument>,<argument><expr><literal type="number">0x107af0e0</literal></expr></argument>, <argument><expr><literal type="number">0xef1a</literal></expr></argument>,<argument><expr><literal type="number">0x4d19</literal></expr></argument>,<argument><expr><literal type="number">0xab</literal></expr></argument>,<argument><expr><literal type="number">0xa8</literal></expr></argument>,<argument><expr><literal type="number">0x67</literal></expr></argument>,<argument><expr><literal type="number">0xa1</literal></expr></argument>,<argument><expr><literal type="number">0x63</literal></expr></argument>,<argument><expr><literal type="number">0x07</literal></expr></argument>,<argument><expr><literal type="number">0x3d</literal></expr></argument>,<argument><expr><literal type="number">0x13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>ff_DXVA2_ModeVP9_VLD_Profile0</name></expr></argument>,<argument><expr><literal type="number">0x463707f8</literal></expr></argument>,<argument><expr><literal type="number">0xa1d0</literal></expr></argument>,<argument><expr><literal type="number">0x4585</literal></expr></argument>,<argument><expr><literal type="number">0x87</literal></expr></argument>,<argument><expr><literal type="number">0x6d</literal></expr></argument>,<argument><expr><literal type="number">0x83</literal></expr></argument>,<argument><expr><literal type="number">0xaa</literal></expr></argument>,<argument><expr><literal type="number">0x6d</literal></expr></argument>,<argument><expr><literal type="number">0x60</literal></expr></argument>,<argument><expr><literal type="number">0xb8</literal></expr></argument>,<argument><expr><literal type="number">0x9e</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>ff_DXVA2_ModeVP9_VLD_10bit_Profile2</name></expr></argument>,<argument><expr><literal type="number">0xa4c749ef</literal></expr></argument>,<argument><expr><literal type="number">0x6ecf</literal></expr></argument>,<argument><expr><literal type="number">0x48aa</literal></expr></argument>,<argument><expr><literal type="number">0x84</literal></expr></argument>,<argument><expr><literal type="number">0x48</literal></expr></argument>,<argument><expr><literal type="number">0x50</literal></expr></argument>,<argument><expr><literal type="number">0xa7</literal></expr></argument>,<argument><expr><literal type="number">0xa1</literal></expr></argument>,<argument><expr><literal type="number">0x16</literal></expr></argument>,<argument><expr><literal type="number">0x5f</literal></expr></argument>,<argument><expr><literal type="number">0xf7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>ff_DXVA2_NoEncrypt</name></expr></argument>, <argument><expr><literal type="number">0x1b81beD0</literal></expr></argument>, <argument><expr><literal type="number">0xa0c7</literal></expr></argument>,<argument><expr><literal type="number">0x11d3</literal></expr></argument>,<argument><expr><literal type="number">0xb9</literal></expr></argument>,<argument><expr><literal type="number">0x84</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0xc0</literal></expr></argument>,<argument><expr><literal type="number">0x4f</literal></expr></argument>,<argument><expr><literal type="number">0x2e</literal></expr></argument>,<argument><expr><literal type="number">0x73</literal></expr></argument>,<argument><expr><literal type="number">0xc5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>ff_GUID_NULL</name></expr></argument>, <argument><expr><literal type="number">0x00000000</literal></expr></argument>, <argument><expr><literal type="number">0x0000</literal></expr></argument>,<argument><expr><literal type="number">0x0000</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_GUID</name><argument_list>(<argument><expr><name>ff_IID_IDirectXVideoDecoderService</name></expr></argument>, <argument><expr><literal type="number">0xfc51a551</literal></expr></argument>,<argument><expr><literal type="number">0xd5e7</literal></expr></argument>,<argument><expr><literal type="number">0x11d9</literal></expr></argument>,<argument><expr><literal type="number">0xaf</literal></expr></argument>,<argument><expr><literal type="number">0x55</literal></expr></argument>,<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><literal type="number">0x05</literal></expr></argument>,<argument><expr><literal type="number">0x4e</literal></expr></argument>,<argument><expr><literal type="number">0x43</literal></expr></argument>,<argument><expr><literal type="number">0xff</literal></expr></argument>,<argument><expr><literal type="number">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <name>dxva_mode</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name>guid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>profiles</name></decl>;</decl_stmt>
}</block></struct></type> <name>dxva_mode</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>prof_mpeg2_main</name><index>[]</index></name> <init>= <expr><block>{<expr><name>FF_PROFILE_MPEG2_SIMPLE</name></expr>,
<expr><name>FF_PROFILE_MPEG2_MAIN</name></expr>,
<expr><name>FF_PROFILE_UNKNOWN</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>prof_h264_high</name><index>[]</index></name> <init>= <expr><block>{<expr><name>FF_PROFILE_H264_CONSTRAINED_BASELINE</name></expr>,
<expr><name>FF_PROFILE_H264_MAIN</name></expr>,
<expr><name>FF_PROFILE_H264_HIGH</name></expr>,
<expr><name>FF_PROFILE_UNKNOWN</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>prof_hevc_main</name><index>[]</index></name> <init>= <expr><block>{<expr><name>FF_PROFILE_HEVC_MAIN</name></expr>,
<expr><name>FF_PROFILE_UNKNOWN</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>prof_hevc_main10</name><index>[]</index></name> <init>= <expr><block>{<expr><name>FF_PROFILE_HEVC_MAIN_10</name></expr>,
<expr><name>FF_PROFILE_UNKNOWN</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>prof_vp9_profile0</name><index>[]</index></name> <init>= <expr><block>{<expr><name>FF_PROFILE_VP9_0</name></expr>,
<expr><name>FF_PROFILE_UNKNOWN</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>prof_vp9_profile2</name><index>[]</index></name> <init>= <expr><block>{<expr><name>FF_PROFILE_VP9_2</name></expr>,
<expr><name>FF_PROFILE_UNKNOWN</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dxva_mode</name></type> <name><name>dxva_modes</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><operator>&amp;</operator><name>ff_DXVA2_ModeMPEG2_VLD</name></expr>, <expr><name>AV_CODEC_ID_MPEG2VIDEO</name></expr>, <expr><name>prof_mpeg2_main</name></expr> }</block></expr>,
<expr><block>{ <expr><operator>&amp;</operator><name>ff_DXVA2_ModeMPEG2and1_VLD</name></expr>, <expr><name>AV_CODEC_ID_MPEG2VIDEO</name></expr>, <expr><name>prof_mpeg2_main</name></expr> }</block></expr>,


<expr><block>{ <expr><operator>&amp;</operator><name>ff_DXVA2_ModeH264_F</name></expr>, <expr><name>AV_CODEC_ID_H264</name></expr>, <expr><name>prof_h264_high</name></expr> }</block></expr>,
<expr><block>{ <expr><operator>&amp;</operator><name>ff_DXVA2_ModeH264_E</name></expr>, <expr><name>AV_CODEC_ID_H264</name></expr>, <expr><name>prof_h264_high</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>ff_DXVADDI_Intel_ModeH264_E</name></expr>, <expr><name>AV_CODEC_ID_H264</name></expr>, <expr><name>prof_h264_high</name></expr> }</block></expr>,


<expr><block>{ <expr><operator>&amp;</operator><name>ff_DXVA2_ModeVC1_D2010</name></expr>, <expr><name>AV_CODEC_ID_VC1</name></expr> }</block></expr>,
<expr><block>{ <expr><operator>&amp;</operator><name>ff_DXVA2_ModeVC1_D2010</name></expr>, <expr><name>AV_CODEC_ID_WMV3</name></expr> }</block></expr>,
<expr><block>{ <expr><operator>&amp;</operator><name>ff_DXVA2_ModeVC1_D</name></expr>, <expr><name>AV_CODEC_ID_VC1</name></expr> }</block></expr>,
<expr><block>{ <expr><operator>&amp;</operator><name>ff_DXVA2_ModeVC1_D</name></expr>, <expr><name>AV_CODEC_ID_WMV3</name></expr> }</block></expr>,


<expr><block>{ <expr><operator>&amp;</operator><name>ff_DXVA2_ModeHEVC_VLD_Main10</name></expr>, <expr><name>AV_CODEC_ID_HEVC</name></expr>, <expr><name>prof_hevc_main10</name></expr> }</block></expr>,
<expr><block>{ <expr><operator>&amp;</operator><name>ff_DXVA2_ModeHEVC_VLD_Main</name></expr>, <expr><name>AV_CODEC_ID_HEVC</name></expr>, <expr><name>prof_hevc_main</name></expr> }</block></expr>,


<expr><block>{ <expr><operator>&amp;</operator><name>ff_DXVA2_ModeVP9_VLD_Profile0</name></expr>, <expr><name>AV_CODEC_ID_VP9</name></expr>, <expr><name>prof_vp9_profile0</name></expr> }</block></expr>,
<expr><block>{ <expr><operator>&amp;</operator><name>ff_DXVA2_ModeVP9_VLD_10bit_Profile2</name></expr>, <expr><name>AV_CODEC_ID_VP9</name></expr>, <expr><name>prof_vp9_profile2</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva_get_decoder_configuration</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>cfg_list</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>cfg_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFDXVASharedContext</name> <modifier>*</modifier></type><name>sctx</name> <init>= <expr><call><name>DXVA_SHARED_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>best_score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>best_cfg</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cfg_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>score</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>ConfigBitstreamRaw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GUID</name></type> <name>guidConfigBitstreamEncryption</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_D3D11</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>D3D11_VIDEO_DECODER_CONFIG</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>D3D11_VIDEO_DECODER_CONFIG</name> <operator>*</operator><operator>)</operator><name>cfg_list</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ConfigBitstreamRaw</name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>ConfigBitstreamRaw</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>guidConfigBitstreamEncryption</name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>guidConfigBitstreamEncryption</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DXVA2_ConfigPictureDecode</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>DXVA2_ConfigPictureDecode</name> <operator>*</operator><operator>)</operator><name>cfg_list</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ConfigBitstreamRaw</name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>ConfigBitstreamRaw</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>guidConfigBitstreamEncryption</name> <operator>=</operator> <name><name>cfg</name><operator>-&gt;</operator><name>guidConfigBitstreamEncryption</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ConfigBitstreamRaw</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name> <operator>&amp;&amp;</operator> <name>ConfigBitstreamRaw</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IsEqualGUID</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guidConfigBitstreamEncryption</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_DXVA2_NoEncrypt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>score</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&gt;</operator> <name>best_score</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>best_score</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_cfg</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>best_score</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"No valid decoder configuration available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>best_cfg</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>d3d11va_validate_output</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name>GUID</name></type> <name>guid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>surface_format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>is_supported</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoDevice_CheckVideoDecoderFormat</name><argument_list>(<argument><expr><operator>(</operator><name>ID3D11VideoDevice</name> <operator>*</operator><operator>)</operator><name>service</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>,
<argument><expr><operator>*</operator><operator>(</operator><name>DXGI_FORMAT</name> <operator>*</operator><operator>)</operator><name>surface_format</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>is_supported</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>is_supported</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_validate_output</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>decoder_service</name></decl></parameter>, <parameter><decl><type><name>GUID</name></type> <name>guid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>surface_format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>target_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3DFORMAT</name> <modifier>*</modifier></type><name>target_list</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoDecoderService_GetDecoderRenderTargets</name><argument_list>(<argument><expr><operator>(</operator><name>IDirectXVideoDecoderService</name> <operator>*</operator><operator>)</operator><name>decoder_service</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>target_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>D3DFORMAT</name></type> <name>format</name> <init>= <expr><name><name>target_list</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <operator>*</operator><operator>(</operator><name>D3DFORMAT</name> <operator>*</operator><operator>)</operator><name>surface_format</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>target_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva_check_codec_compatibility</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dxva_mode</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>-&gt;</operator><name>codec</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>-&gt;</operator><name>profiles</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_flags</name></name> <operator>&amp;</operator> <name>AV_HWACCEL_FLAG_ALLOW_PROFILE_MISMATCH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>mode</name><operator>-&gt;</operator><name>profiles</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>FF_PROFILE_UNKNOWN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name><name>mode</name><operator>-&gt;</operator><name>profiles</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dxva_list_guids_debug</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>guid_count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name>guid_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFDXVASharedContext</name> <modifier>*</modifier></type><name>sctx</name> <init>= <expr><call><name>DXVA_SHARED_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Decoder GUIDs reported as supported:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>guid_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name>guid</name> <init>= <expr><operator>&amp;</operator><name><name>guid_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"{%8.8x-%4.4x-%4.4x-%2.2x%2.2x-%2.2x%2.2x%2.2x%2.2x%2.2x%2.2x}"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>guid</name><operator>-&gt;</operator><name>Data1</name></name></expr></argument>, <argument><expr><name><name>guid</name><operator>-&gt;</operator><name>Data2</name></name></expr></argument>, <argument><expr><name><name>guid</name><operator>-&gt;</operator><name>Data3</name></name></expr></argument>,
<argument><expr><name><name>guid</name><operator>-&gt;</operator><name>Data4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>guid</name><operator>-&gt;</operator><name>Data4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>guid</name><operator>-&gt;</operator><name>Data4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>guid</name><operator>-&gt;</operator><name>Data4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>guid</name><operator>-&gt;</operator><name>Data4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>guid</name><operator>-&gt;</operator><name>Data4</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>guid</name><operator>-&gt;</operator><name>Data4</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>guid</name><operator>-&gt;</operator><name>Data4</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_D3D11</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DXGI_FORMAT</name></type> <name>format</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>format</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>format</name> <operator>&lt;</operator> <literal type="number">200</literal></expr>;</condition> <incr><expr><name>format</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>d3d11va_validate_output</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>*</operator><name>guid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>D3DFORMAT</name></type> <name><name>formats</name><index>[]</index></name> <init>= <expr><block>{<expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>,
<macro><name>MKTAG</name><argument_list>(<argument><literal type="char">'P'</literal></argument>, <argument><literal type="char">'0'</literal></argument>, <argument><literal type="char">'1'</literal></argument>, <argument><literal type="char">'0'</literal></argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dxva2_validate_output</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>*</operator><name>guid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>formats</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva_get_decoder_guid</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>surface_format</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>guid_count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name>guid_list</name></decl></parameter>, <parameter><decl><type><name>GUID</name> <modifier>*</modifier></type><name>decoder_guid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFDXVASharedContext</name> <modifier>*</modifier></type><name>sctx</name> <init>= <expr><call><name>DXVA_SHARED_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dxva_list_guids_debug</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>guid_count</name></expr></argument>, <argument><expr><name>guid_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>decoder_guid</name> <operator>=</operator> <name>ff_GUID_NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>dxva_modes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>guid</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>dxva_mode</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><operator>&amp;</operator><name><name>dxva_modes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>validate</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dxva_check_codec_compatibility</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>guid_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IsEqualGUID</name><argument_list>(<argument><expr><name><name>mode</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>guid_list</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>guid_count</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_D3D11</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>validate</name> <operator>=</operator> <call><name>d3d11va_validate_output</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>*</operator><name><name>mode</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>, <argument><expr><name>surface_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>validate</name> <operator>=</operator> <call><name>dxva2_validate_output</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>*</operator><name><name>mode</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>, <argument><expr><name>surface_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>validate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>decoder_guid</name> <operator>=</operator> <operator>*</operator><name><name>mode</name><operator>-&gt;</operator><name>guid</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>IsEqualGUID</name><argument_list>(<argument><expr><name>decoder_guid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_GUID_NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"No decoder device for codec found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsEqualGUID</name><argument_list>(<argument><expr><name>decoder_guid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_DXVADDI_Intel_ModeH264_E</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sctx</name><operator>-&gt;</operator><name>workaround</name></name> <operator>|=</operator> <name>FF_DXVA2_WORKAROUND_INTEL_CLEARVIDEO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bufref_free_interface</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>IUnknown_Release</name><argument_list>(<argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVBufferRef</name> <modifier>*</modifier></type><name>bufref_wrap_interface</name><parameter_list>(<parameter><decl><type><name>IUnknown</name> <modifier>*</modifier></type><name>iface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>av_buffer_create</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>iface</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bufref_free_interface</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_get_decoder_configuration</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type><name>device_guid</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>DXVA2_VideoDesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
<parameter><decl><type><name>DXVA2_ConfigPictureDecode</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFDXVASharedContext</name> <modifier>*</modifier></type><name>sctx</name> <init>= <expr><call><name>DXVA_SHARED_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>cfg_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DXVA2_ConfigPictureDecode</name> <modifier>*</modifier></type><name>cfg_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoDecoderService_GetDecoderConfigurations</name><argument_list>(<argument><expr><name><name>sctx</name><operator>-&gt;</operator><name>dxva2_service</name></name></expr></argument>, <argument><expr><name>device_guid</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to retrieve decoder configurations\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dxva_get_decoder_configuration</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>cfg_list</name></expr></argument>, <argument><expr><name>cfg_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>config</name> <operator>=</operator> <name><name>cfg_list</name><index>[<expr><name>ret</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>cfg_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_create_decoder</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFDXVASharedContext</name> <modifier>*</modifier></type><name>sctx</name> <init>= <expr><call><name>DXVA_SHARED_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GUID</name> <modifier>*</modifier></type><name>guid_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>guid_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GUID</name></type> <name>device_guid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3DFORMAT</name></type> <name>surface_format</name> <init>= <expr><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>sw_pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P10</name></expr> ?</condition><then>
<expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DXVA2_VideoDesc</name></type> <name>desc</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DXVA2_ConfigPictureDecode</name></type> <name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>device_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDXVA2FramesContext</name> <modifier>*</modifier></type><name>frames_hwctx</name> <init>= <expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDXVA2DeviceContext</name> <modifier>*</modifier></type><name>device_hwctx</name> <init>= <expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDeviceManager9_OpenDeviceHandle</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>devmgr</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>device_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to open a device handle\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDeviceManager9_GetVideoService</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>devmgr</name></name></expr></argument>, <argument><expr><name>device_handle</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ff_IID_IDirectXVideoDecoderService</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sctx</name><operator>-&gt;</operator><name>dxva2_service</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IDirect3DDeviceManager9_CloseDeviceHandle</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>devmgr</name></name></expr></argument>, <argument><expr><name>device_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create IDirectXVideoDecoderService\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoDecoderService_GetDecoderDeviceGuids</name><argument_list>(<argument><expr><name><name>sctx</name><operator>-&gt;</operator><name>dxva2_service</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>guid_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>guid_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to retrieve decoder device GUIDs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dxva_get_decoder_guid</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>sctx</name><operator>-&gt;</operator><name>dxva2_service</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>surface_format</name></expr></argument>,
<argument><expr><name>guid_count</name></expr></argument>, <argument><expr><name>guid_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>device_guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CoTaskMemFree</name><argument_list>(<argument><expr><name>guid_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>SampleWidth</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>SampleHeight</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>Format</name></name> <operator>=</operator> <name>surface_format</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dxva2_get_decoder_configuration</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>device_guid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoDecoderService_CreateVideoDecoder</name><argument_list>(<argument><expr><name><name>sctx</name><operator>-&gt;</operator><name>dxva2_service</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>device_guid</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>config</name></expr></argument>, <argument><expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name></name></expr></argument>,
<argument><expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sctx</name><operator>-&gt;</operator><name>dxva2_decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create DXVA2 video decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sctx</name><operator>-&gt;</operator><name>dxva2_config</name></name> <operator>=</operator> <name>config</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sctx</name><operator>-&gt;</operator><name>decoder_ref</name></name> <operator>=</operator> <call><name>bufref_wrap_interface</name><argument_list>(<argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator><name><name>sctx</name><operator>-&gt;</operator><name>dxva2_decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sctx</name><operator>-&gt;</operator><name>decoder_ref</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>d3d11va_get_decoder_configuration</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>ID3D11VideoDevice</name> <modifier>*</modifier></type><name>video_device</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>D3D11_VIDEO_DECODER_DESC</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
<parameter><decl><type><name>D3D11_VIDEO_DECODER_CONFIG</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>cfg_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3D11_VIDEO_DECODER_CONFIG</name> <modifier>*</modifier></type><name>cfg_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoDevice_GetVideoDecoderConfigCount</name><argument_list>(<argument><expr><name>video_device</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to retrieve decoder configurations\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cfg_list</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>cfg_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>D3D11_VIDEO_DECODER_CONFIG</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cfg_list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cfg_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoDevice_GetVideoDecoderConfig</name><argument_list>(<argument><expr><name>video_device</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cfg_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to retrieve decoder configurations. (hr=0x%lX)\n"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>cfg_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dxva_get_decoder_configuration</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>cfg_list</name></expr></argument>, <argument><expr><name>cfg_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>config</name> <operator>=</operator> <name><name>cfg_list</name><index>[<expr><name>ret</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>cfg_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DXGI_FORMAT</name></type> <name>d3d11va_map_sw_to_hw_format</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>pix_fmt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_NV12</name></expr>:</case> <return>return <expr><name>DXGI_FORMAT_NV12</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_P010</name></expr>:</case> <return>return <expr><name>DXGI_FORMAT_P010</name></expr>;</return>
<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case> <return>return <expr><name>DXGI_FORMAT_420_OPAQUE</name></expr>;</return>
<default>default:</default> <return>return <expr><name>DXGI_FORMAT_UNKNOWN</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>d3d11va_create_decoder</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFDXVASharedContext</name> <modifier>*</modifier></type><name>sctx</name> <init>= <expr><call><name>DXVA_SHARED_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GUID</name> <modifier>*</modifier></type><name>guid_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>guid_count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GUID</name></type> <name>decoder_guid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3D11_VIDEO_DECODER_DESC</name></type> <name>desc</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3D11_VIDEO_DECODER_CONFIG</name></type> <name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name> <operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVD3D11VADeviceContext</name> <modifier>*</modifier></type><name>device_hwctx</name> <init>= <expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVD3D11VAFramesContext</name> <modifier>*</modifier></type><name>frames_hwctx</name> <init>= <expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DXGI_FORMAT</name></type> <name>surface_format</name> <init>= <expr><call><name>d3d11va_map_sw_to_hw_format</name><argument_list>(<argument><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D3D11_TEXTURE2D_DESC</name></type> <name>texdesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frames_hwctx</name><operator>-&gt;</operator><name>texture</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AVD3D11VAFramesContext.texture not set.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ID3D11Texture2D_GetDesc</name><argument_list>(<argument><expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>texdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>guid_count</name> <operator>=</operator> <call><name>ID3D11VideoDevice_GetVideoDecoderProfileCount</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>video_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>guid_list</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>guid_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>guid_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>guid_list</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>guid_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get the decoder GUIDs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>guid_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>guid_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoDevice_GetVideoDecoderProfile</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>video_device</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>guid_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to retrieve decoder GUID %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>guid_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dxva_get_decoder_guid</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>video_device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>surface_format</name></expr></argument>,
<argument><expr><name>guid_count</name></expr></argument>, <argument><expr><name>guid_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoder_guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>guid_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>SampleWidth</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>SampleHeight</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>OutputFormat</name></name> <operator>=</operator> <name>surface_format</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><operator>.</operator><name>Guid</name></name> <operator>=</operator> <name>decoder_guid</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d3d11va_get_decoder_configuration</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>video_device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sctx</name><operator>-&gt;</operator><name>d3d11_views</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>texdesc</name><operator>.</operator><name>ArraySize</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sctx</name><operator>-&gt;</operator><name>d3d11_views</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sctx</name><operator>-&gt;</operator><name>d3d11_views</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sctx</name><operator>-&gt;</operator><name>nb_d3d11_views</name></name> <operator>=</operator> <name><name>texdesc</name><operator>.</operator><name>ArraySize</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sctx</name><operator>-&gt;</operator><name>nb_d3d11_views</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC</name></type> <name>viewDesc</name> <init>= <expr><block>{
<expr><operator>.</operator><name>DecodeProfile</name> <operator>=</operator> <name>decoder_guid</name></expr>,
<expr><operator>.</operator><name>ViewDimension</name> <operator>=</operator> <name>D3D11_VDOV_DIMENSION_TEXTURE2D</name></expr>,
<expr><operator>.</operator><name>Texture2D</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>ArraySlice</name> <operator>=</operator> <name>i</name></expr>,
}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoDevice_CreateVideoDecoderOutputView</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>video_device</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>ID3D11Resource</name><operator>*</operator><operator>)</operator> <name><name>frames_hwctx</name><operator>-&gt;</operator><name>texture</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>viewDesc</name></expr></argument>,
<argument><expr><operator>(</operator><name>ID3D11VideoDecoderOutputView</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>sctx</name><operator>-&gt;</operator><name>d3d11_views</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not create the decoder output view %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoDevice_CreateVideoDecoder</name><argument_list>(<argument><expr><name><name>device_hwctx</name><operator>-&gt;</operator><name>video_device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>config</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sctx</name><operator>-&gt;</operator><name>d3d11_decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create D3D11VA video decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sctx</name><operator>-&gt;</operator><name>d3d11_config</name></name> <operator>=</operator> <name>config</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sctx</name><operator>-&gt;</operator><name>d3d11_texture</name></name> <operator>=</operator> <name><name>frames_hwctx</name><operator>-&gt;</operator><name>texture</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sctx</name><operator>-&gt;</operator><name>decoder_ref</name></name> <operator>=</operator> <call><name>bufref_wrap_interface</name><argument_list>(<argument><expr><operator>(</operator><name>IUnknown</name> <operator>*</operator><operator>)</operator><name><name>sctx</name><operator>-&gt;</operator><name>d3d11_decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sctx</name><operator>-&gt;</operator><name>decoder_ref</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_dxva2_lock</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ff_dxva2_is_d3d11</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>FFDXVASharedContext</name> <modifier>*</modifier></type><name>sctx</name> <init>= <expr><call><name>DXVA_SHARED_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDXVAContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>DXVA_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>context_mutex</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>WaitForSingleObjectEx</name><argument_list>(<argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>context_mutex</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sctx</name><operator>-&gt;</operator><name>device_ctx</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVD3D11VADeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>sctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>hwctx</name><operator>-&gt;</operator><name>lock</name></name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>lock_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_dxva2_unlock</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ff_dxva2_is_d3d11</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>FFDXVASharedContext</name> <modifier>*</modifier></type><name>sctx</name> <init>= <expr><call><name>DXVA_SHARED_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDXVAContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>DXVA_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>context_mutex</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>context_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sctx</name><operator>-&gt;</operator><name>device_ctx</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVD3D11VADeviceContext</name> <modifier>*</modifier></type><name>hwctx</name> <init>= <expr><name><name>sctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>hwctx</name><operator>-&gt;</operator><name>unlock</name></name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>lock_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_dxva2_common_frame_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hw_frames_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name> <operator>*</operator><operator>)</operator><name><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>device_ctx</name> <init>= <expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>device_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>surface_alignment</name></decl>, <decl><type ref="prev"/><name>num_surfaces</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>device_ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_HWDEVICE_TYPE_DXVA2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>device_ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_HWDEVICE_TYPE_D3D11VA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_D3D11</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>surface_alignment</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if>


<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_HEVC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>surface_alignment</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>surface_alignment</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>num_surfaces</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_HEVC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_surfaces</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP9</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_surfaces</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>num_surfaces</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>sw_pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P10</name></expr> ?</condition><then>
<expr><name>AV_PIX_FMT_P010</name></expr> </then><else>: <expr><name>AV_PIX_FMT_NV12</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr></argument>, <argument><expr><name>surface_alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr></argument>, <argument><expr><name>surface_alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>=</operator> <name>num_surfaces</name></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVDXVA2FramesContext</name> <modifier>*</modifier></type><name>frames_hwctx</name> <init>= <expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>surface_type</name></name> <operator>=</operator> <name>DXVA2_VideoDecoderRenderTarget</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_D3D11</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVD3D11VAFramesContext</name> <modifier>*</modifier></type><name>frames_hwctx</name> <init>= <expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>BindFlags</name></name> <operator>|=</operator> <name>D3D11_BIND_DECODER</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_dxva2_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFDXVASharedContext</name> <modifier>*</modifier></type><name>sctx</name> <init>= <expr><call><name>DXVA_SHARED_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVHWDeviceType</name></name></type> <name>dev_type</name> <init>= <expr><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>
?</condition><then> <expr><name>AV_HWDEVICE_TYPE_DXVA2</name></expr> </then><else>: <expr><name>AV_HWDEVICE_TYPE_D3D11VA</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>sctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_decode_get_hw_frames_ctx</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>dev_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frames_ctx</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sctx</name><operator>-&gt;</operator><name>device_ctx</name></name> <operator>=</operator> <name><name>frames_ctx</name><operator>-&gt;</operator><name>device_ctx</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>sctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid pixfmt for hwaccel!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_D3D11</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVD3D11VADeviceContext</name> <modifier>*</modifier></type><name>device_hwctx</name> <init>= <expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVD3D11VAContext</name> <modifier>*</modifier></type><name>d3d11_ctx</name> <init>= <expr><operator>&amp;</operator><name><name>sctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>d3d11va</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_dxva2_lock</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d3d11va_create_decoder</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dxva2_unlock</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>d3d11_ctx</name><operator>-&gt;</operator><name>decoder</name></name> <operator>=</operator> <name><name>sctx</name><operator>-&gt;</operator><name>d3d11_decoder</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d3d11_ctx</name><operator>-&gt;</operator><name>video_context</name></name> <operator>=</operator> <name><name>device_hwctx</name><operator>-&gt;</operator><name>video_context</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d3d11_ctx</name><operator>-&gt;</operator><name>cfg</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>sctx</name><operator>-&gt;</operator><name>d3d11_config</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d3d11_ctx</name><operator>-&gt;</operator><name>surface_count</name></name> <operator>=</operator> <name><name>sctx</name><operator>-&gt;</operator><name>nb_d3d11_views</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d3d11_ctx</name><operator>-&gt;</operator><name>surface</name></name> <operator>=</operator> <name><name>sctx</name><operator>-&gt;</operator><name>d3d11_views</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d3d11_ctx</name><operator>-&gt;</operator><name>workaround</name></name> <operator>=</operator> <name><name>sctx</name><operator>-&gt;</operator><name>workaround</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d3d11_ctx</name><operator>-&gt;</operator><name>context_mutex</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVDXVA2FramesContext</name> <modifier>*</modifier></type><name>frames_hwctx</name> <init>= <expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dxva_context</name></name> <modifier>*</modifier></type><name>dxva_ctx</name> <init>= <expr><operator>&amp;</operator><name><name>sctx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>dxva2</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_dxva2_lock</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dxva2_create_decoder</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dxva2_unlock</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dxva_ctx</name><operator>-&gt;</operator><name>decoder</name></name> <operator>=</operator> <name><name>sctx</name><operator>-&gt;</operator><name>dxva2_decoder</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxva_ctx</name><operator>-&gt;</operator><name>cfg</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>sctx</name><operator>-&gt;</operator><name>dxva2_config</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxva_ctx</name><operator>-&gt;</operator><name>surface</name></name> <operator>=</operator> <name><name>frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxva_ctx</name><operator>-&gt;</operator><name>surface_count</name></name> <operator>=</operator> <name><name>frames_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dxva_ctx</name><operator>-&gt;</operator><name>workaround</name></name> <operator>=</operator> <name><name>sctx</name><operator>-&gt;</operator><name>workaround</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ff_dxva2_decode_uninit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_dxva2_decode_uninit</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFDXVASharedContext</name> <modifier>*</modifier></type><name>sctx</name> <init>= <expr><call><name>DXVA_SHARED_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sctx</name><operator>-&gt;</operator><name>decoder_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sctx</name><operator>-&gt;</operator><name>nb_d3d11_views</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sctx</name><operator>-&gt;</operator><name>d3d11_views</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ID3D11VideoDecoderOutputView_Release</name><argument_list>(<argument><expr><name><name>sctx</name><operator>-&gt;</operator><name>d3d11_views</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sctx</name><operator>-&gt;</operator><name>d3d11_views</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>sctx</name><operator>-&gt;</operator><name>dxva2_service</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>IDirectXVideoDecoderService_Release</name><argument_list>(<argument><expr><name><name>sctx</name><operator>-&gt;</operator><name>dxva2_service</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>get_surface</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_D3D11</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>FFDXVASharedContext</name> <modifier>*</modifier></type><name>sctx</name> <init>= <expr><call><name>DXVA_SHARED_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intptr_t</name></type> <name>index</name> <init>= <expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>index</name> <operator>&gt;=</operator> <name><name>sctx</name><operator>-&gt;</operator><name>nb_d3d11_views</name></name> <operator>||</operator>
<name><name>sctx</name><operator>-&gt;</operator><name>d3d11_texture</name></name> <operator>!=</operator> <operator>(</operator><name>ID3D11Texture2D</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"get_buffer frame is invalid!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>sctx</name><operator>-&gt;</operator><name>d3d11_views</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>ff_dxva2_get_surface_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVDXVAContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>surface</name> <init>= <expr><call><name>get_surface</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_D3D11</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_D3D11VA_VLD</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC</name></type> <name>viewDesc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ID3D11VideoDecoderOutputView_GetDesc</name><argument_list>(<argument><expr><operator>(</operator><name>ID3D11VideoDecoderOutputView</name><operator>*</operator><operator>)</operator> <name>surface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>viewDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>viewDesc</name><operator>.</operator><name>Texture2D</name><operator>.</operator><name>ArraySlice</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>DXVA_CONTEXT_COUNT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dxva2</name><operator>.</operator><name>surface</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>surface</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_dxva2_commit_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>AVDXVAContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>DECODER_BUFFER_DESC</name> <modifier>*</modifier></type><name>dsc</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>mb_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dxva_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>dxva_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ff_dxva2_is_d3d11</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoContext_GetDecoderBuffer</name><argument_list>(<argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>video_context</name></expr></argument>,
<argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>,
<argument><expr><name>type</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dxva_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dxva_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoDecoder_GetBuffer</name><argument_list>(<argument><expr><call><name>DXVA2_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dxva_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dxva_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get a buffer for %u: 0x%x\n"</literal></expr></argument>,
<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <name>dxva_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dxva_data</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ff_dxva2_is_d3d11</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>D3D11_VIDEO_DECODER_BUFFER_DESC</name> <modifier>*</modifier></type><name>dsc11</name> <init>= <expr><name>dsc</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dsc11</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dsc11</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc11</name><operator>-&gt;</operator><name>BufferType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc11</name><operator>-&gt;</operator><name>DataSize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc11</name><operator>-&gt;</operator><name>NumMBsInBuffer</name></name> <operator>=</operator> <name>mb_count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DXVA2_DecodeBufferDesc</name> <modifier>*</modifier></type><name>dsc2</name> <init>= <expr><name>dsc</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dsc2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dsc2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc2</name><operator>-&gt;</operator><name>CompressedBufferType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc2</name><operator>-&gt;</operator><name>DataSize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc2</name><operator>-&gt;</operator><name>NumMBsInBuffer</name></name> <operator>=</operator> <name>mb_count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Buffer for type %u was too small\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ff_dxva2_is_d3d11</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoContext_ReleaseDecoderBuffer</name><argument_list>(<argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>video_context</name></expr></argument>, <argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoDecoder_ReleaseBuffer</name><argument_list>(<argument><expr><call><name>DXVA2_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Failed to release buffer type %u: 0x%x\n"</literal></expr></argument>,
<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>frame_add_buf</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV_NUM_DATA_POINTERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_dxva2_common_end_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>pp_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>qm</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>qm_size</name></decl></parameter>,
<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>commit_bs_si</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>DECODER_BUFFER_DESC</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>,
<parameter><decl><type><name>DECODER_BUFFER_DESC</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDXVAContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>DXVA_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>buffer_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<decl_stmt><decl><type><name>D3D11_VIDEO_DECODER_BUFFER_DESC</name></type> <name><name>buffer11</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<decl_stmt><decl><type><name>DXVA2_DecodeBufferDesc</name></type> <name><name>buffer2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>DECODER_BUFFER_DESC</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buffer_slice</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>runs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFDXVASharedContext</name> <modifier>*</modifier></type><name>sctx</name> <init>= <expr><call><name>DXVA_SHARED_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sctx</name><operator>-&gt;</operator><name>decoder_ref</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>frame_add_buf</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>sctx</name><operator>-&gt;</operator><name>decoder_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><call><name>ff_dxva2_lock</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ff_dxva2_is_d3d11</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoContext_DecoderBeginFrame</name><argument_list>(<argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>video_context</name></expr></argument>, <argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>,
<argument><expr><call><name>get_surface</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoDecoder_BeginFrame</name><argument_list>(<argument><expr><call><name>DXVA2_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>,
<argument><expr><call><name>get_surface</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>hr</name> <operator>!=</operator> <name>E_PENDING</name> <operator>||</operator> <operator>++</operator><name>runs</name> <operator>&gt;</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_dxva2_unlock</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_usleep</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to begin frame: 0x%x\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dxva2_unlock</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ff_dxva2_is_d3d11</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>buffer11</name><index>[<expr><name>buffer_count</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>D3D11_VIDEO_DECODER_BUFFER_PICTURE_PARAMETERS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>buffer2</name><index>[<expr><name>buffer_count</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>DXVA2_PictureParametersBufferType</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ff_dxva2_commit_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>,
<argument><expr><name>type</name></expr></argument>,
<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>pp_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Failed to add picture parameter buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buffer_count</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>qm_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ff_dxva2_is_d3d11</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>buffer11</name><index>[<expr><name>buffer_count</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>D3D11_VIDEO_DECODER_BUFFER_INVERSE_QUANTIZATION_MATRIX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>buffer2</name><index>[<expr><name>buffer_count</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>DXVA2_InverseQuantizationMatrixBufferType</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ff_dxva2_commit_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>,
<argument><expr><name>type</name></expr></argument>,
<argument><expr><name>qm</name></expr></argument>, <argument><expr><name>qm_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Failed to add inverse quantization matrix buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buffer_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ff_dxva2_is_d3d11</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>buffer11</name><index>[<expr><name>buffer_count</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer_slice</name> <operator>=</operator> <operator>&amp;</operator><name><name>buffer11</name><index>[<expr><name>buffer_count</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>buffer2</name><index>[<expr><name>buffer_count</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer_slice</name> <operator>=</operator> <operator>&amp;</operator><name><name>buffer2</name><index>[<expr><name>buffer_count</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>commit_bs_si</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,
<argument><expr><name>buffer</name></expr></argument>,
<argument><expr><name>buffer_slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Failed to add bitstream or slice control buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buffer_count</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>



<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>buffer_count</name> <operator>==</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>qm_size</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ff_dxva2_is_d3d11</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoContext_SubmitDecoderBuffers</name><argument_list>(<argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>video_context</name></expr></argument>,
<argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>,
<argument><expr><name>buffer_count</name></expr></argument>, <argument><expr><name>buffer11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DXVA2_DecodeExecuteParams</name></type> <name>exec</name> <init>= <expr><block>{
<expr><operator>.</operator><name>NumCompBuffers</name> <operator>=</operator> <name>buffer_count</name></expr>,
<expr><operator>.</operator><name>pCompressedBuffers</name> <operator>=</operator> <name>buffer2</name></expr>,
<expr><operator>.</operator><name>pExtensionData</name> <operator>=</operator> <name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoDecoder_Execute</name><argument_list>(<argument><expr><call><name>DXVA2_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to execute: 0x%x\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ff_dxva2_is_d3d11</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ID3D11VideoContext_DecoderEndFrame</name><argument_list>(<argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>video_context</name></expr></argument>, <argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirectXVideoDecoder_EndFrame</name><argument_list>(<argument><expr><call><name>DXVA2_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ff_dxva2_unlock</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to end frame: 0x%x\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_dxva2_is_d3d11</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>CONFIG_D3D11VA</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_D3D11VA_VLD</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_D3D11</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
