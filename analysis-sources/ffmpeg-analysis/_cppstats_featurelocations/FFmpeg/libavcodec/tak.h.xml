<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\tak.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_TAK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_TAK_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_FORMAT_DATA_TYPE_BITS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_FORMAT_SAMPLE_RATE_BITS</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_FORMAT_BPS_BITS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_FORMAT_CHANNEL_BITS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_FORMAT_VALID_BITS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_FORMAT_CH_LAYOUT_BITS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_SIZE_FRAME_DURATION_BITS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_SIZE_SAMPLES_NUM_BITS</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_LAST_FRAME_POS_BITS</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_LAST_FRAME_SIZE_BITS</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_ENCODER_CODEC_BITS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_ENCODER_PROFILE_BITS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_ENCODER_VERSION_BITS</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_SAMPLE_RATE_MIN</name></cpp:macro> <cpp:value>6000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_CHANNELS_MIN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_BPS_MIN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_FRAME_HEADER_FLAGS_BITS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_FRAME_HEADER_SYNC_ID</name></cpp:macro> <cpp:value>0xA0FF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_FRAME_HEADER_SYNC_ID_BITS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_FRAME_HEADER_SAMPLE_COUNT_BITS</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_FRAME_HEADER_NO_BITS</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_FRAME_DURATION_QUANT_SHIFT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_CRC24_BITS</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_FRAME_FLAG_IS_LAST</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_FRAME_FLAG_HAS_INFO</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_FRAME_FLAG_HAS_METADATA</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_MAX_CHANNELS</name></cpp:macro> <cpp:value>(1 &lt;&lt; TAK_FORMAT_CHANNEL_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_MIN_FRAME_HEADER_BITS</name></cpp:macro> <cpp:value>(TAK_FRAME_HEADER_SYNC_ID_BITS + TAK_FRAME_HEADER_FLAGS_BITS + TAK_FRAME_HEADER_NO_BITS + TAK_CRC24_BITS)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_MIN_FRAME_HEADER_LAST_BITS</name></cpp:macro> <cpp:value>(TAK_MIN_FRAME_HEADER_BITS + 2 + TAK_FRAME_HEADER_SAMPLE_COUNT_BITS)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_ENCODER_BITS</name></cpp:macro> <cpp:value>(TAK_ENCODER_CODEC_BITS + TAK_ENCODER_PROFILE_BITS)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_SIZE_BITS</name></cpp:macro> <cpp:value>(TAK_SIZE_SAMPLES_NUM_BITS + TAK_SIZE_FRAME_DURATION_BITS)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_FORMAT_BITS</name></cpp:macro> <cpp:value>(TAK_FORMAT_DATA_TYPE_BITS + TAK_FORMAT_SAMPLE_RATE_BITS + TAK_FORMAT_BPS_BITS + TAK_FORMAT_CHANNEL_BITS + 1 + TAK_FORMAT_VALID_BITS + 1 + TAK_FORMAT_CH_LAYOUT_BITS * TAK_MAX_CHANNELS)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_STREAMINFO_BITS</name></cpp:macro> <cpp:value>(TAK_ENCODER_BITS + TAK_SIZE_BITS + TAK_FORMAT_BITS)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_MAX_FRAME_HEADER_BITS</name></cpp:macro> <cpp:value>(TAK_MIN_FRAME_HEADER_LAST_BITS + TAK_STREAMINFO_BITS + 31)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_STREAMINFO_BYTES</name></cpp:macro> <cpp:value>((TAK_STREAMINFO_BITS + 7) / 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_MAX_FRAME_HEADER_BYTES</name></cpp:macro> <cpp:value>((TAK_MAX_FRAME_HEADER_BITS + 7) / 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAK_MIN_FRAME_HEADER_BYTES</name></cpp:macro> <cpp:value>((TAK_MIN_FRAME_HEADER_BITS + 7) / 8)</cpp:value></cpp:define>

<enum>enum <name>TAKCodecType</name> <block>{
<decl><name>TAK_CODEC_MONO_STEREO</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>TAK_CODEC_MULTICHANNEL</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
}</block>;</enum>

<enum>enum <name>TAKMetaDataType</name> <block>{
<decl><name>TAK_METADATA_END</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>TAK_METADATA_STREAMINFO</name></decl>,
<decl><name>TAK_METADATA_SEEKTABLE</name></decl>,
<decl><name>TAK_METADATA_SIMPLE_WAVE_DATA</name></decl>,
<decl><name>TAK_METADATA_ENCODER</name></decl>,
<decl><name>TAK_METADATA_PADDING</name></decl>,
<decl><name>TAK_METADATA_MD5</name></decl>,
<decl><name>TAK_METADATA_LAST_FRAME</name></decl>,
}</block>;</enum>

<enum>enum <name>TAKFrameSizeType</name> <block>{
<decl><name>TAK_FST_94ms</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>TAK_FST_125ms</name></decl>,
<decl><name>TAK_FST_188ms</name></decl>,
<decl><name>TAK_FST_250ms</name></decl>,
<decl><name>TAK_FST_4096</name></decl>,
<decl><name>TAK_FST_8192</name></decl>,
<decl><name>TAK_FST_16384</name></decl>,
<decl><name>TAK_FST_512</name></decl>,
<decl><name>TAK_FST_1024</name></decl>,
<decl><name>TAK_FST_2048</name></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>TAKStreamInfo</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>TAKCodecType</name></name></type> <name>codec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>data_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_frame_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ch_layout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>samples</name></decl>;</decl_stmt>
}</block></struct></type> <name>TAKStreamInfo</name>;</typedef>

<function_decl><type><name>int</name></type> <name>ff_tak_check_crc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> <name>avpriv_tak_parse_streaminfo</name><parameter_list>(<parameter><decl><type><name>TAKStreamInfo</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_tak_parse_streaminfo</name><parameter_list>(<parameter><decl><type><name>TAKStreamInfo</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> <name>ff_tak_decode_frame_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,
<parameter><decl><type><name>TAKStreamInfo</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log_level_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
