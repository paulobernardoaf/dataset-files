<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mpc.h">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_MPC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_MPC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/lfg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bswapdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudiodsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BANDS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLES_PER_BAND</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPC_FRAME_SIZE</name></cpp:macro> <cpp:value>(BANDS * SAMPLES_PER_BAND)</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>Band</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>msf</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>res</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>scfi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>scf_idx</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>Q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type><name>Band</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MPCContext</name> <block>{
<decl_stmt><decl><type><name>BswapDSPContext</name></type> <name>bdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MPADSPContext</name></type> <name>mpadsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>IS</name></decl>, <name>MSS</name>, <name>gapless</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lastframelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxbands</name></decl>, <name>last_max_band</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_bits_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>oldDSCF</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>BANDS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Band</name></type> <name><name>bands</name><index>[<expr><name>BANDS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>Q</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>MPC_FRAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_frame</name></decl>, <name>frames</name>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVLFG</name></type> <name>rnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frames_to_skip</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>MPA_INT</name></expr></argument>, <argument><expr><name>synth_buf</name></expr></argument>)</argument_list></call><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">512</literal><operator>*</operator><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>synth_buf_offset</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>sb_samples</name></expr></argument>)</argument_list></call><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">36</literal></expr>]</index><index>[<expr><name>SBLIMIT</name></expr>]</index></expr>;</expr_stmt>
}</block></struct></type> <name>MPCContext</name>;</typedef>

<function_decl><type><name>void</name></type> <name>ff_mpc_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_mpc_dequantize_and_synth</name><parameter_list>(<parameter><decl><type><name>MPCContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxband</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
