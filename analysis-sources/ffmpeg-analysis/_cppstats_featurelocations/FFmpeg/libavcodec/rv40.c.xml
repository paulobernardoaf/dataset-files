<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\rv40.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"golomb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rv34.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rv40vlc2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rv40data.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name>aic_top_vlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>aic_mode1_vlc</name><index>[<expr><name>AIC_MODE1_NUM</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>aic_mode2_vlc</name><index>[<expr><name>AIC_MODE2_NUM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>ptype_vlc</name><index>[<expr><name>NUM_PTYPE_VLCS</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>btype_vlc</name><index>[<expr><name>NUM_BTYPE_VLCS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>mode2_offs</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">614</literal></expr>, <expr><literal type="number">1222</literal></expr>, <expr><literal type="number">1794</literal></expr>, <expr><literal type="number">2410</literal></expr>, <expr><literal type="number">3014</literal></expr>, <expr><literal type="number">3586</literal></expr>, <expr><literal type="number">4202</literal></expr>, <expr><literal type="number">4792</literal></expr>, <expr><literal type="number">5382</literal></expr>, <expr><literal type="number">5966</literal></expr>, <expr><literal type="number">6542</literal></expr>,
<expr><literal type="number">7138</literal></expr>, <expr><literal type="number">7716</literal></expr>, <expr><literal type="number">8292</literal></expr>, <expr><literal type="number">8864</literal></expr>, <expr><literal type="number">9444</literal></expr>, <expr><literal type="number">10030</literal></expr>, <expr><literal type="number">10642</literal></expr>, <expr><literal type="number">11212</literal></expr>, <expr><literal type="number">11814</literal></expr>
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>rv40_init_tables</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VLC_TYPE</name></type> <name><name>aic_table</name><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>AIC_TOP_BITS</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VLC_TYPE</name></type> <name><name>aic_mode1_table</name><index>[<expr><name>AIC_MODE1_NUM</name> <operator>&lt;&lt;</operator> <name>AIC_MODE1_BITS</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VLC_TYPE</name></type> <name><name>aic_mode2_table</name><index>[<expr><literal type="number">11814</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VLC_TYPE</name></type> <name><name>ptype_table</name><index>[<expr><name>NUM_PTYPE_VLCS</name> <operator>&lt;&lt;</operator> <name>PTYPE_VLC_BITS</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VLC_TYPE</name></type> <name><name>btype_table</name><index>[<expr><name>NUM_BTYPE_VLCS</name> <operator>&lt;&lt;</operator> <name>BTYPE_VLC_BITS</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>aic_top_vlc</name><operator>.</operator><name>table</name></name> <operator>=</operator> <name>aic_table</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aic_top_vlc</name><operator>.</operator><name>table_allocated</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>AIC_TOP_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aic_top_vlc</name></expr></argument>, <argument><expr><name>AIC_TOP_BITS</name></expr></argument>, <argument><expr><name>AIC_TOP_SIZE</name></expr></argument>,
<argument><expr><name>rv40_aic_top_vlc_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>rv40_aic_top_vlc_codes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AIC_MODE1_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator> <operator>==</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>aic_mode1_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>aic_mode1_table</name><index>[<expr><name>i</name> <operator>&lt;&lt;</operator> <name>AIC_MODE1_BITS</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aic_mode1_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>AIC_MODE1_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aic_mode1_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>AIC_MODE1_BITS</name></expr></argument>, <argument><expr><name>AIC_MODE1_SIZE</name></expr></argument>,
<argument><expr><name><name>aic_mode1_vlc_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>aic_mode1_vlc_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AIC_MODE2_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>aic_mode2_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>aic_mode2_table</name><index>[<expr><name><name>mode2_offs</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aic_mode2_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name><name>mode2_offs</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>mode2_offs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aic_mode2_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>AIC_MODE2_BITS</name></expr></argument>, <argument><expr><name>AIC_MODE2_SIZE</name></expr></argument>,
<argument><expr><name><name>aic_mode2_vlc_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>aic_mode2_vlc_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_PTYPE_VLCS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>ptype_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>ptype_table</name><index>[<expr><name>i</name> <operator>&lt;&lt;</operator> <name>PTYPE_VLC_BITS</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptype_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>PTYPE_VLC_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_init_vlc_sparse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ptype_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>PTYPE_VLC_BITS</name></expr></argument>, <argument><expr><name>PTYPE_VLC_SIZE</name></expr></argument>,
<argument><expr><name><name>ptype_vlc_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>ptype_vlc_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>ptype_vlc_syms</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_BTYPE_VLCS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>btype_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>btype_table</name><index>[<expr><name>i</name> <operator>&lt;&lt;</operator> <name>BTYPE_VLC_BITS</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>btype_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>BTYPE_VLC_BITS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_init_vlc_sparse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>btype_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>BTYPE_VLC_BITS</name></expr></argument>, <argument><expr><name>BTYPE_VLC_SIZE</name></expr></argument>,
<argument><expr><name><name>btype_vlc_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>btype_vlc_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>btype_vlc_syms</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>get_dimension</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>dim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name><name>dim</name><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>dim</name><index>[<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>val</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>val</name></expr>)</condition><block>{<block_content>
<do>do<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <name>t</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block>while<condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0xFF</literal></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>rv40_parse_picture_size</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <call><name>get_dimension</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>rv40_standard_widths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <call><name>get_dimension</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>rv40_standard_heights</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rv40_parse_slice_header</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>SliceInfo</name> <modifier>*</modifier></type><name>si</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mb_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>width</name></name></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>si</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SliceInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>quant</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>vlc_set</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>si</name><operator>-&gt;</operator><name>type</name></name> <operator>||</operator> <operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rv40_parse_picture_size</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_image_check_size</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>avctx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>w</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>h</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_bits</name> <operator>=</operator> <call><name>ff_rv34_get_start_offset</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>mb_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>mb_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>rv40_decode_intra_types</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>C</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>dst</name> <operator>+=</operator> <name><name>r</name><operator>-&gt;</operator><name>intra_types_stride</name></name></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>i</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>pattern</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>aic_top_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>AIC_TOP_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>pattern</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>pattern</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>pattern</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>pattern</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>






<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><operator>-</operator><name><name>r</name><operator>-&gt;</operator><name>intra_types_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>B</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><operator>-</operator><name><name>r</name><operator>-&gt;</operator><name>intra_types_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>C</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pattern</name> <operator>=</operator> <name>A</name> <operator>+</operator> <name>B</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>C</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MODE2_PATTERNS_NUM</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><name>pattern</name> <operator>==</operator> <name><name>rv40_aic_table_index</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if<condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>MODE2_PATTERNS_NUM</name></expr>)</condition><block>{<block_content> 
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>aic_mode2_vlc</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><name>AIC_MODE2_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <name>v</name><operator>/</operator><literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <name>v</name><operator>%</operator><literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>B</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>C</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>aic_mode1_vlc</name><index>[<expr><name>B</name> <operator>+</operator> <name>C</name><operator>*</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><name>AIC_MODE1_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block>{<block_content> 
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>C</name></expr>)</condition><block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case> 
<if_stmt><if>if<condition>(<expr><name>B</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<case>case <expr><literal type="number">2</literal></expr>:</case> 
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>^</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>rv40_decode_mb_info</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_pos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_skip_run</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_skip_run</name></name> <operator>=</operator> <call><name>get_interleaved_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_skip_run</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>--</operator><name><name>r</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mb_skip_run</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>RV34_MB_SKIP</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">6</literal><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>blocks</name><index>[<expr><name>RV34_MB_TYPES</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">6</literal><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>blocks</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>blocks</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">6</literal><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>blocks</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">6</literal><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>blocks</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RV34_MB_TYPES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>count</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_type</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>count</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>avail_cache</name><index>[<expr><literal type="number">6</literal><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev_type</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>prev_type</name> <operator>=</operator> <name><name>block_num_to_ptype_vlc_num</name><index>[<expr><name>prev_type</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ptype_vlc</name><index>[<expr><name>prev_type</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><name>PTYPE_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>q</name> <operator>&lt;</operator> <name>PBTYPE_ESCAPE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>q</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ptype_vlc</name><index>[<expr><name>prev_type</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><name>PTYPE_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Dquant for P-frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name>prev_type</name> <operator>=</operator> <name><name>block_num_to_btype_vlc_num</name><index>[<expr><name>prev_type</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>btype_vlc</name><index>[<expr><name>prev_type</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><name>BTYPE_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>q</name> <operator>&lt;</operator> <name>PBTYPE_ESCAPE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>q</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>btype_vlc</name><index>[<expr><name>prev_type</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><name>BTYPE_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Dquant for B-frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<enum>enum <name>RV40BlockPos</name><block>{
<decl><name>POS_CUR</name></decl>,
<decl><name>POS_TOP</name></decl>,
<decl><name>POS_LEFT</name></decl>,
<decl><name>POS_BOTTOM</name></decl>,
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK_CUR</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK_RIGHT</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK_BOTTOM</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK_TOP</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK_Y_TOP_ROW</name></cpp:macro> <cpp:value>0x000F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK_Y_LAST_ROW</name></cpp:macro> <cpp:value>0xF000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK_Y_LEFT_COL</name></cpp:macro> <cpp:value>0x1111</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK_Y_RIGHT_COL</name></cpp:macro> <cpp:value>0x8888</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK_C_TOP_ROW</name></cpp:macro> <cpp:value>0x0003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK_C_LAST_ROW</name></cpp:macro> <cpp:value>0x000C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK_C_LEFT_COL</name></cpp:macro> <cpp:value>0x0005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK_C_RIGHT_COL</name></cpp:macro> <cpp:value>0x000A</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>neighbour_offs_x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>neighbour_offs_y</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rv40_adaptive_loop_filter</name><parameter_list>(<parameter><decl><type><name>RV34DSPContext</name> <modifier>*</modifier></type><name>rdsp</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dmode</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>lim_q1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lim_p1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>chroma</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>edge</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>filter_p1</name></decl>, <decl><type ref="prev"/><name>filter_q1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>strong</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lims</name></decl>;</decl_stmt>

<expr_stmt><expr><name>strong</name> <operator>=</operator> <name><name>rdsp</name><operator>-&gt;</operator><name>rv40_loop_filter_strength</name><index>[<expr><name>dir</name></expr>]</index></name><operator>(</operator><name>src</name><operator>,</operator> <name>stride</name><operator>,</operator> <name>beta</name><operator>,</operator> <name>beta2</name><operator>,</operator>
<name>edge</name><operator>,</operator> <operator>&amp;</operator><name>filter_p1</name><operator>,</operator> <operator>&amp;</operator><name>filter_q1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>lims</name> <operator>=</operator> <name>filter_p1</name> <operator>+</operator> <name>filter_q1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>lim_q1</name> <operator>+</operator> <name>lim_p1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>strong</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rdsp</name><operator>-&gt;</operator><name>rv40_strong_loop_filter</name><index>[<expr><name>dir</name></expr>]</index></name><operator>(</operator><name>src</name><operator>,</operator> <name>stride</name><operator>,</operator> <name>alpha</name><operator>,</operator>
<name>lims</name><operator>,</operator> <name>dmode</name><operator>,</operator> <name>chroma</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>filter_p1</name> <operator>&amp;</operator> <name>filter_q1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rdsp</name><operator>-&gt;</operator><name>rv40_weak_loop_filter</name><index>[<expr><name>dir</name></expr>]</index></name><operator>(</operator><name>src</name><operator>,</operator> <name>stride</name><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <name>alpha</name><operator>,</operator> <name>beta</name><operator>,</operator>
<name>lims</name><operator>,</operator> <name>lim_q1</name><operator>,</operator> <name>lim_p1</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>filter_p1</name> <operator>|</operator> <name>filter_q1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rdsp</name><operator>-&gt;</operator><name>rv40_weak_loop_filter</name><index>[<expr><name>dir</name></expr>]</index></name><operator>(</operator><name>src</name><operator>,</operator> <name>stride</name><operator>,</operator> <name>filter_p1</name><operator>,</operator> <name>filter_q1</name><operator>,</operator>
<name>alpha</name><operator>,</operator> <name>beta</name><operator>,</operator> <name>lims</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>,</operator> <name>lim_q1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>,</operator>
<name>lim_p1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>rv40_loop_filter</name><parameter_list>(<parameter><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_pos</name></decl>, <decl><type ref="prev"/><name>mb_x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Y</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>C</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alpha</name></decl>, <decl><type ref="prev"/><name>beta</name></decl>, <decl><type ref="prev"/><name>betaY</name></decl>, <decl><type ref="prev"/><name>betaC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>mbtype</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 




<decl_stmt><decl><type><name>int</name></type> <name><name>mb_strong</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>clip</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 






<decl_stmt><decl><type><name>int</name></type> <name><name>cbp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name><name>uvcbp</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name></type> <name><name>mvmasks</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>mb_pos</name> <operator>=</operator> <name>row</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr><operator>,</operator> <expr><name>mb_pos</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mbtype</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>mbtype</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_SEPARATE_DC</name><argument_list>(<argument><expr><name>mbtype</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>cbp_luma</name> <index>[<expr><name>mb_pos</name></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>deblock_coefs</name><index>[<expr><name>mb_pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>mbtype</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>cbp_chroma</name><index>[<expr><name>mb_pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>mb_pos</name> <operator>=</operator> <name>row</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>mb_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr><operator>,</operator> <expr><name>mb_pos</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y_h_deblock</name></decl>, <decl><type ref="prev"/><name>y_v_deblock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>c_v_deblock</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c_h_deblock</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clip_left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>avail</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>y_to_deblock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>c_to_deblock</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>qscale_table</name><index>[<expr><name>mb_pos</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <name><name>rv40_alpha_tab</name><index>[<expr><name>q</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>beta</name> <operator>=</operator> <name><name>rv40_beta_tab</name> <index>[<expr><name>q</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>betaY</name> <operator>=</operator> <name>betaC</name> <operator>=</operator> <name>beta</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>&lt;=</operator> <literal type="number">176</literal><operator>*</operator><literal type="number">144</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>betaY</name> <operator>+=</operator> <name>beta</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avail</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avail</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>mb_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avail</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>row</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>avail</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name>mb_pos</name> <operator>+</operator> <name><name>neighbour_offs_x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>neighbour_offs_y</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mvmasks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>deblock_coefs</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mbtype</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbp</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>cbp_luma</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uvcbp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>cbp_chroma</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uvcbp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>cbp_chroma</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name><name>mvmasks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mbtype</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>mbtype</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbp</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uvcbp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>uvcbp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>mb_strong</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>mbtype</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_SEPARATE_DC</name><argument_list>(<argument><expr><name><name>mbtype</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>clip</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>rv40_filter_clip_tbl</name><index>[<expr><name><name>mb_strong</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>q</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>y_to_deblock</name> <operator>=</operator> <name><name>mvmasks</name><index>[<expr><name>POS_CUR</name></expr>]</index></name>
<operator>|</operator> <operator>(</operator><name><name>mvmasks</name><index>[<expr><name>POS_BOTTOM</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>






<expr_stmt><expr><name>y_h_deblock</name> <operator>=</operator> <name>y_to_deblock</name>
<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>cbp</name><index>[<expr><name>POS_CUR</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>MASK_Y_TOP_ROW</name><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>cbp</name><index>[<expr><name>POS_TOP</name></expr>]</index></name> <operator>&amp;</operator> <name>MASK_Y_LAST_ROW</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>






<expr_stmt><expr><name>y_v_deblock</name> <operator>=</operator> <name>y_to_deblock</name>
<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>cbp</name><index>[<expr><name>POS_CUR</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>MASK_Y_LEFT_COL</name><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>cbp</name><index>[<expr><name>POS_LEFT</name></expr>]</index></name> <operator>&amp;</operator> <name>MASK_Y_RIGHT_COL</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>mb_x</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y_v_deblock</name> <operator>&amp;=</operator> <operator>~</operator><name>MASK_Y_LEFT_COL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>row</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y_h_deblock</name> <operator>&amp;=</operator> <operator>~</operator><name>MASK_Y_TOP_ROW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>row</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name><name>mb_strong</name><index>[<expr><name>POS_CUR</name></expr>]</index></name> <operator>|</operator> <name><name>mb_strong</name><index>[<expr><name>POS_BOTTOM</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y_h_deblock</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>MASK_Y_TOP_ROW</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>c_to_deblock</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>uvcbp</name><index>[<expr><name>POS_BOTTOM</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name><name>uvcbp</name><index>[<expr><name>POS_CUR</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_v_deblock</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c_to_deblock</name><index>[<expr><name>i</name></expr>]</index></name>
<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>uvcbp</name><index>[<expr><name>POS_CUR</name></expr>]</index> <index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>MASK_C_LEFT_COL</name><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>uvcbp</name><index>[<expr><name>POS_LEFT</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>MASK_C_RIGHT_COL</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c_h_deblock</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c_to_deblock</name><index>[<expr><name>i</name></expr>]</index></name>
<operator>|</operator> <operator>(</operator><operator>(</operator><name><name>uvcbp</name><index>[<expr><name>POS_TOP</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>MASK_C_LAST_ROW</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><name><name>uvcbp</name><index>[<expr><name>POS_CUR</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>mb_x</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c_v_deblock</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>MASK_C_LEFT_COL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>row</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c_h_deblock</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>MASK_C_TOP_ROW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>row</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name><name>mb_strong</name><index>[<expr><name>POS_CUR</name></expr>]</index></name> <operator>|</operator> <name><name>mb_strong</name><index>[<expr><name>POS_BOTTOM</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c_h_deblock</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>MASK_C_TOP_ROW</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>Y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>mb_x</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>row</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>j</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>Y</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ij</name> <init>= <expr><name>i</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clip_cur</name> <init>= <expr><ternary><condition><expr><name>y_to_deblock</name> <operator>&amp;</operator> <operator>(</operator><name>MASK_CUR</name> <operator>&lt;&lt;</operator> <name>ij</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>clip</name><index>[<expr><name>POS_CUR</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dither</name> <init>= <expr><ternary><condition><expr><name>j</name></expr> ?</condition><then> <expr><name>ij</name></expr> </then><else>: <expr><name>i</name><operator>*</operator><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>



<if_stmt><if>if<condition>(<expr><name>y_h_deblock</name> <operator>&amp;</operator> <operator>(</operator><name>MASK_BOTTOM</name> <operator>&lt;&lt;</operator> <name>ij</name><operator>)</operator></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>rv40_adaptive_loop_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>rdsp</name></name></expr></argument>, <argument><expr><name>Y</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name>dither</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>y_to_deblock</name> <operator>&amp;</operator> <operator>(</operator><name>MASK_BOTTOM</name> <operator>&lt;&lt;</operator> <name>ij</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>clip</name><index>[<expr><name>POS_CUR</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>clip_cur</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>betaY</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>y_v_deblock</name> <operator>&amp;</operator> <operator>(</operator><name>MASK_CUR</name> <operator>&lt;&lt;</operator> <name>ij</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>mb_strong</name><index>[<expr><name>POS_CUR</name></expr>]</index></name> <operator>|</operator> <name><name>mb_strong</name><index>[<expr><name>POS_LEFT</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>clip_left</name> <operator>=</operator> <ternary><condition><expr><name><name>mvmasks</name><index>[<expr><name>POS_LEFT</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>MASK_RIGHT</name> <operator>&lt;&lt;</operator> <name>j</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>clip</name><index>[<expr><name>POS_LEFT</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>clip_left</name> <operator>=</operator> <ternary><condition><expr><name>y_to_deblock</name> <operator>&amp;</operator> <operator>(</operator><name>MASK_CUR</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>ij</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name><name>clip</name><index>[<expr><name>POS_CUR</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>rv40_adaptive_loop_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>rdsp</name></name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name>dither</name></expr></argument>,
<argument><expr><name>clip_cur</name></expr></argument>,
<argument><expr><name>clip_left</name></expr></argument>,
<argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>betaY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>j</name> <operator>&amp;&amp;</operator> <name>y_h_deblock</name> <operator>&amp;</operator> <operator>(</operator><name>MASK_CUR</name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mb_strong</name><index>[<expr><name>POS_CUR</name></expr>]</index></name> <operator>|</operator> <name><name>mb_strong</name><index>[<expr><name>POS_TOP</name></expr>]</index></name><operator>)</operator></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>rv40_adaptive_loop_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>rdsp</name></name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name>dither</name></expr></argument>,
<argument><expr><name>clip_cur</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>mvmasks</name><index>[<expr><name>POS_TOP</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>MASK_TOP</name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>clip</name><index>[<expr><name>POS_TOP</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>betaY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>y_v_deblock</name> <operator>&amp;</operator> <operator>(</operator><name>MASK_CUR</name> <operator>&lt;&lt;</operator> <name>ij</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>i</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mb_strong</name><index>[<expr><name>POS_CUR</name></expr>]</index></name> <operator>|</operator> <name><name>mb_strong</name><index>[<expr><name>POS_LEFT</name></expr>]</index></name><operator>)</operator></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>clip_left</name> <operator>=</operator> <ternary><condition><expr><name><name>mvmasks</name><index>[<expr><name>POS_LEFT</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>MASK_RIGHT</name> <operator>&lt;&lt;</operator> <name>j</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>clip</name><index>[<expr><name>POS_LEFT</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rv40_adaptive_loop_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>rdsp</name></name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name>dither</name></expr></argument>,
<argument><expr><name>clip_cur</name></expr></argument>,
<argument><expr><name>clip_left</name></expr></argument>,
<argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>betaY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name>C</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>mb_x</name><operator>*</operator><literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name>row</name><operator>*</operator><literal type="number">8</literal> <operator>+</operator> <name>j</name><operator>*</operator><literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>C</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ij</name> <init>= <expr><name>i</name> <operator>+</operator> <name>j</name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clip_cur</name> <init>= <expr><ternary><condition><expr><name><name>c_to_deblock</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>MASK_CUR</name> <operator>&lt;&lt;</operator> <name>ij</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>clip</name><index>[<expr><name>POS_CUR</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>c_h_deblock</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>MASK_CUR</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>ij</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>clip_bot</name> <init>= <expr><ternary><condition><expr><name><name>c_to_deblock</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>MASK_CUR</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>ij</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name><name>clip</name><index>[<expr><name>POS_CUR</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rv40_adaptive_loop_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>rdsp</name></name></expr></argument>, <argument><expr><name>C</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">8</literal></expr></argument>,
<argument><expr><name>clip_bot</name></expr></argument>,
<argument><expr><name>clip_cur</name></expr></argument>,
<argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>betaC</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>c_v_deblock</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>MASK_CUR</name> <operator>&lt;&lt;</operator> <name>ij</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>mb_strong</name><index>[<expr><name>POS_CUR</name></expr>]</index></name> <operator>|</operator> <name><name>mb_strong</name><index>[<expr><name>POS_LEFT</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>i</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>clip_left</name> <operator>=</operator> <ternary><condition><expr><name><name>uvcbp</name><index>[<expr><name>POS_LEFT</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>MASK_CUR</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name><name>clip</name><index>[<expr><name>POS_LEFT</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>clip_left</name> <operator>=</operator> <ternary><condition><expr><name><name>c_to_deblock</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>MASK_CUR</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>ij</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name><name>clip</name><index>[<expr><name>POS_CUR</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>rv40_adaptive_loop_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>rdsp</name></name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name>j</name><operator>*</operator><literal type="number">8</literal></expr></argument>,
<argument><expr><name>clip_cur</name></expr></argument>,
<argument><expr><name>clip_left</name></expr></argument>,
<argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>betaC</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>j</name> <operator>&amp;&amp;</operator> <name><name>c_h_deblock</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>MASK_CUR</name> <operator>&lt;&lt;</operator> <name>ij</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mb_strong</name><index>[<expr><name>POS_CUR</name></expr>]</index></name> <operator>|</operator> <name><name>mb_strong</name><index>[<expr><name>POS_TOP</name></expr>]</index></name><operator>)</operator></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>clip_top</name> <init>= <expr><ternary><condition><expr><name><name>uvcbp</name><index>[<expr><name>POS_TOP</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>MASK_CUR</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>ij</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name><name>clip</name><index>[<expr><name>POS_TOP</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rv40_adaptive_loop_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>rdsp</name></name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">8</literal></expr></argument>,
<argument><expr><name>clip_cur</name></expr></argument>,
<argument><expr><name>clip_top</name></expr></argument>,
<argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>betaC</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>c_v_deblock</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>MASK_CUR</name> <operator>&lt;&lt;</operator> <name>ij</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>i</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mb_strong</name><index>[<expr><name>POS_CUR</name></expr>]</index></name> <operator>|</operator> <name><name>mb_strong</name><index>[<expr><name>POS_LEFT</name></expr>]</index></name><operator>)</operator></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>clip_left</name> <operator>=</operator> <ternary><condition><expr><name><name>uvcbp</name><index>[<expr><name>POS_LEFT</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>MASK_CUR</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name><name>clip</name><index>[<expr><name>POS_LEFT</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rv40_adaptive_loop_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>rdsp</name></name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></argument>, <argument><expr><name>j</name><operator>*</operator><literal type="number">8</literal></expr></argument>,
<argument><expr><name>clip_cur</name></expr></argument>,
<argument><expr><name>clip_left</name></expr></argument>,
<argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>betaC</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>rv40_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RV34DecContext</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>rv30</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_rv34_decode_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>aic_top_vlc</name><operator>.</operator><name>bits</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rv40_init_tables</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>parse_slice_header</name></name> <operator>=</operator> <name>rv40_parse_slice_header</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>decode_intra_types</name></name> <operator>=</operator> <name>rv40_decode_intra_types</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>decode_mb_info</name></name> <operator>=</operator> <name>rv40_decode_mb_info</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>loop_filter</name></name> <operator>=</operator> <name>rv40_loop_filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>luma_dc_quant_i</name></name> <operator>=</operator> <name><name>rv40_luma_dc_quant</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>luma_dc_quant_p</name></name> <operator>=</operator> <name><name>rv40_luma_dc_quant</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_rv40_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"rv40"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"RealVideo 4.0"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_RV40</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RV34DecContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>rv40_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_rv34_decode_end</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>ff_rv34_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>|</operator>
<name>AV_CODEC_CAP_FRAME_THREADS</name></expr>,
<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>ff_mpeg_flush</name></expr>,
<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{
<expr><name>AV_PIX_FMT_YUV420P</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr>,
<expr><operator>.</operator><name>init_thread_copy</name> <operator>=</operator> <call><name>ONLY_IF_THREADS_ENABLED</name><argument_list>(<argument><expr><name>ff_rv34_decode_init_thread_copy</name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>update_thread_context</name> <operator>=</operator> <call><name>ONLY_IF_THREADS_ENABLED</name><argument_list>(<argument><expr><name>ff_rv34_decode_update_thread_context</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
