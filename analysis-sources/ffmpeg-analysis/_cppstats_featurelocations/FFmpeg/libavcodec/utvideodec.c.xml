<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\utvideodec.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHED_BITSTREAM_READER</name></cpp:macro> <cpp:value>!ARCH_X86_32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNCHECKED_BITSTREAM_READER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bswapdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utvideo.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>build_huff10</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fsym</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HuffEntry</name></type> <name><name>he</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>codes</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bits</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>syms</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>fsym</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>he</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sym</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>he</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>he</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>he</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ff_ut10_huff_cmp_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>he</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>fsym</name> <operator>=</operator> <name><name>he</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sym</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <literal type="number">1023</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>he</name><index>[<expr><name>last</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>==</operator> <literal type="number">255</literal> <operator>&amp;&amp;</operator> <name>last</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>he</name><index>[<expr><name>last</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>last</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>codes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>code</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name><name>he</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>he</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>syms</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>he</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sym</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>+=</operator> <literal type="number">0x80000000u</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>he</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_BITS</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<return>return <expr><call><name>ff_init_vlc_sparse</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><name>last</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>bits</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bits</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bits</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>codes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>codes</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>codes</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>syms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>syms</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>syms</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>build_huff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fsym</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HuffEntry</name></type> <name><name>he</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>codes</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bits</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>syms</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>fsym</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>he</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sym</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>he</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>he</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>he</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ff_ut_huff_cmp_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>he</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>fsym</name> <operator>=</operator> <name><name>he</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sym</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>he</name><index>[<expr><name>last</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>==</operator> <literal type="number">255</literal> <operator>&amp;&amp;</operator> <name>last</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>he</name><index>[<expr><name>last</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>last</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>codes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>code</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name><name>he</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>he</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>syms</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>he</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sym</name></expr>;</expr_stmt>
<expr_stmt><expr><name>code</name> <operator>+=</operator> <literal type="number">0x80000000u</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>he</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><call><name>ff_init_vlc_sparse</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><name>last</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>bits</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bits</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bits</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>codes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>codes</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>codes</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>syms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>syms</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>syms</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_plane10</name><parameter_list>(<parameter><decl><type><name>UtvideoContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane_no</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>huff</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>use_pred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>slice</name></decl>, <decl><type ref="prev"/><name>pix</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sstart</name></decl>, <decl><type ref="prev"/><name>send</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC</name></type> <name>vlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev</name></decl>, <decl><type ref="prev"/><name>fsym</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>build_huff10</name><argument_list>(<argument><expr><name>huff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsym</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot build Huffman codes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fsym</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>send</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>slice</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>slice</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr>;</condition> <incr><expr><name>slice</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sstart</name> <operator>=</operator> <name>send</name></expr>;</expr_stmt>
<expr_stmt><expr><name>send</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>*</operator> <operator>(</operator><name>slice</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <name>sstart</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <literal type="number">0x200</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>sstart</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>send</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pix</name> <operator>=</operator> <name>fsym</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>use_pred</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev</name> <operator>+=</operator> <name>pix</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>&amp;=</operator> <literal type="number">0x3FF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pix</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pix</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>send</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>slice</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>slice</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr>;</condition> <incr><expr><name>slice</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_data_start</name></decl>, <decl><type ref="prev"/><name>slice_data_end</name></decl>, <decl><type ref="prev"/><name>slice_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sstart</name> <operator>=</operator> <name>send</name></expr>;</expr_stmt>
<expr_stmt><expr><name>send</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>*</operator> <operator>(</operator><name>slice</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <name>sstart</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>


<expr_stmt><expr><name>slice_data_start</name> <operator>=</operator> <ternary><condition><expr><name>slice</name></expr> ?</condition><then> <expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>slice</name> <operator>*</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_data_end</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>slice</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_size</name> <operator>=</operator> <name>slice_data_end</name> <operator>-</operator> <name>slice_data_start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>slice_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Plane has more than one symbol "</literal>
<literal type="string">"yet a slice has a length of zero.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>slice_bits</name></name> <operator>+</operator> <name>slice_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>bswap_buf</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>slice_bits</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>src</name> <operator>+</operator> <name>slice_data_start</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>slice_data_end</name> <operator>-</operator> <name>slice_data_start</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>slice_bits</name></name></expr></argument>, <argument><expr><name>slice_size</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <literal type="number">0x200</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>sstart</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>send</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pix</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pix</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Decoding error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>use_pred</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev</name> <operator>+=</operator> <name>pix</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>&amp;=</operator> <literal type="number">0x3FF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pix</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pix</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Slice decoding ran out of bits\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"%d bits left after decoding slice\n"</literal></expr></argument>, <argument><expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compute_cmask</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>plane_no</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interlaced</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>is_luma</name> <init>= <expr><operator>(</operator><name>pix_fmt</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>plane_no</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>interlaced</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>is_luma</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>~</operator><name>is_luma</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_plane</name><parameter_list>(<parameter><decl><type><name>UtvideoContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane_no</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_pred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>slice</name></decl>, <decl><type ref="prev"/><name>pix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sstart</name></decl>, <decl><type ref="prev"/><name>send</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC</name></type> <name>vlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>prev</name></decl>, <decl><type ref="prev"/><name>fsym</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cmask</name> <init>= <expr><call><name>compute_cmask</name><argument_list>(<argument><expr><name>plane_no</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>interlaced</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>pack</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>send</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>slice</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>slice</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr>;</condition> <incr><expr><name>slice</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>cbit</name></decl>, <decl><type ref="prev"/><name>pbit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_get_bits8_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cbit</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>control_stream</name><index>[<expr><name>plane_no</name></expr>]</index><index>[<expr><name>slice</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>control_stream_size</name><index>[<expr><name>plane_no</name></expr>]</index><index>[<expr><name>slice</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_get_bits8_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbit</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>packed_stream</name><index>[<expr><name>plane_no</name></expr>]</index><index>[<expr><name>slice</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>packed_stream_size</name><index>[<expr><name>plane_no</name></expr>]</index><index>[<expr><name>slice</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sstart</name> <operator>=</operator> <name>send</name></expr>;</expr_stmt>
<expr_stmt><expr><name>send</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>*</operator> <operator>(</operator><name>slice</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name><operator>)</operator> <operator>&amp;</operator> <name>cmask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <name>sstart</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>dst</name> <operator>+</operator> <name>send</name> <operator>*</operator> <name>stride</name> <operator>-</operator> <name>dest</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal><operator>)</operator> <operator>&gt;</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cbit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>dest</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>dst</name> <operator>+</operator> <name>send</name> <operator>*</operator> <name>stride</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><call><name>get_bits_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cbit</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sub</name> <init>= <expr><literal type="number">0x80</literal> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <operator>(</operator><name>bits</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>add</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bits</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>&gt;</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits_le</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbit</name></expr></argument>, <argument><expr><name>bits</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>add</name> <operator>=</operator> <operator>(</operator><operator>~</operator><name><name>p</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;</operator> <name>sub</name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>bits</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-=</operator> <name>sub</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <name>add</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>build_huff</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsym</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot build Huffman codes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fsym</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>send</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>slice</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>slice</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr>;</condition> <incr><expr><name>slice</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sstart</name> <operator>=</operator> <name>send</name></expr>;</expr_stmt>
<expr_stmt><expr><name>send</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>*</operator> <operator>(</operator><name>slice</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name><operator>)</operator> <operator>&amp;</operator> <name>cmask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <name>sstart</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>sstart</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>send</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pix</name> <operator>=</operator> <name>fsym</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>use_pred</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev</name> <operator>+=</operator> <name>pix</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pix</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>send</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>slice</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>slice</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr>;</condition> <incr><expr><name>slice</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_data_start</name></decl>, <decl><type ref="prev"/><name>slice_data_end</name></decl>, <decl><type ref="prev"/><name>slice_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sstart</name> <operator>=</operator> <name>send</name></expr>;</expr_stmt>
<expr_stmt><expr><name>send</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>*</operator> <operator>(</operator><name>slice</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name><operator>)</operator> <operator>&amp;</operator> <name>cmask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <name>sstart</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>


<expr_stmt><expr><name>slice_data_start</name> <operator>=</operator> <ternary><condition><expr><name>slice</name></expr> ?</condition><then> <expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>slice</name> <operator>*</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_data_end</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>slice</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_size</name> <operator>=</operator> <name>slice_data_end</name> <operator>-</operator> <name>slice_data_start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>slice_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Plane has more than one symbol "</literal>
<literal type="string">"yet a slice has a length of zero.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>slice_bits</name></name> <operator>+</operator> <name>slice_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>bswap_buf</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>slice_bits</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>src</name> <operator>+</operator> <name>slice_data_start</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>slice_data_end</name> <operator>-</operator> <name>slice_data_start</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>slice_bits</name></name></expr></argument>, <argument><expr><name>slice_size</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>sstart</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>send</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pix</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pix</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Decoding error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>use_pred</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev</name> <operator>+=</operator> <name>pix</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pix</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pix</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Slice decoding ran out of bits\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"%d bits left after decoding slice\n"</literal></expr></argument>, <argument><expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>A</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>B</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>C</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>restore_median_planar</name><parameter_list>(<parameter><decl><type><name>UtvideoContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rmode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>slice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>C</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bsrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_start</name></decl>, <decl><type ref="prev"/><name>slice_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cmask</name> <init>= <expr><operator>~</operator><name>rmode</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>slice</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>slice</name> <operator>&lt;</operator> <name>slices</name></expr>;</condition> <incr><expr><name>slice</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>slice_start</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>slice</name> <operator>*</operator> <name>height</name><operator>)</operator> <operator>/</operator> <name>slices</name><operator>)</operator> <operator>&amp;</operator> <name>cmask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_height</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>slice</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>height</name><operator>)</operator> <operator>/</operator> <name>slices</name><operator>)</operator> <operator>&amp;</operator> <name>cmask</name><operator>)</operator> <operator>-</operator>
<name>slice_start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>slice_height</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bsrc</name> <operator>=</operator> <name>src</name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>bsrc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred</name></name><argument_list>(<argument><expr><name>bsrc</name></expr></argument>, <argument><expr><name>bsrc</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bsrc</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slice_height</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <name><name>bsrc</name><index>[<expr><operator>-</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsrc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>C</name></expr>;</expr_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>bsrc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 
<expr_stmt><expr><name>B</name> <operator>=</operator> <name><name>bsrc</name><index>[<expr><name>i</name> <operator>-</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsrc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>A</name> <operator>+</operator> <name>B</name> <operator>-</operator> <name>C</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>C</name> <operator>=</operator> <name>B</name></expr>;</expr_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>bsrc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_median_pred</name></name><argument_list>(<argument><expr><name>bsrc</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>bsrc</name> <operator>-</operator> <name>stride</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>,
<argument><expr><name>bsrc</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bsrc</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>slice_height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_median_pred</name></name><argument_list>(<argument><expr><name>bsrc</name></expr></argument>, <argument><expr><name>bsrc</name> <operator>-</operator> <name>stride</name></expr></argument>,
<argument><expr><name>bsrc</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bsrc</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>restore_median_planar_il</name><parameter_list>(<parameter><decl><type><name>UtvideoContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rmode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>slice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>C</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bsrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_start</name></decl>, <decl><type ref="prev"/><name>slice_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cmask</name> <init>= <expr><operator>~</operator><operator>(</operator><ternary><condition><expr><name>rmode</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>stride2</name> <init>= <expr><name>stride</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>slice</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>slice</name> <operator>&lt;</operator> <name>slices</name></expr>;</condition> <incr><expr><name>slice</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>slice_start</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>slice</name> <operator>*</operator> <name>height</name><operator>)</operator> <operator>/</operator> <name>slices</name><operator>)</operator> <operator>&amp;</operator> <name>cmask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_height</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>slice</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>height</name><operator>)</operator> <operator>/</operator> <name>slices</name><operator>)</operator> <operator>&amp;</operator> <name>cmask</name><operator>)</operator> <operator>-</operator>
<name>slice_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_height</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>slice_height</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bsrc</name> <operator>=</operator> <name>src</name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>bsrc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name><name>c</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred</name></name><argument_list>(<argument><expr><name>bsrc</name></expr></argument>, <argument><expr><name>bsrc</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred</name></name><argument_list>(<argument><expr><name>bsrc</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><name>bsrc</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bsrc</name> <operator>+=</operator> <name>stride2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slice_height</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <name><name>bsrc</name><index>[<expr><operator>-</operator><name>stride2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsrc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>C</name></expr>;</expr_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>bsrc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 
<expr_stmt><expr><name>B</name> <operator>=</operator> <name><name>bsrc</name><index>[<expr><name>i</name> <operator>-</operator> <name>stride2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsrc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>A</name> <operator>+</operator> <name>B</name> <operator>-</operator> <name>C</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>C</name> <operator>=</operator> <name>B</name></expr>;</expr_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>bsrc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_median_pred</name></name><argument_list>(<argument><expr><name>bsrc</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>bsrc</name> <operator>-</operator> <name>stride2</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>,
<argument><expr><name>bsrc</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_median_pred</name></name><argument_list>(<argument><expr><name>bsrc</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><name>bsrc</name> <operator>-</operator> <name>stride</name></expr></argument>,
<argument><expr><name>bsrc</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bsrc</name> <operator>+=</operator> <name>stride2</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>slice_height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_median_pred</name></name><argument_list>(<argument><expr><name>bsrc</name></expr></argument>, <argument><expr><name>bsrc</name> <operator>-</operator> <name>stride2</name></expr></argument>,
<argument><expr><name>bsrc</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_median_pred</name></name><argument_list>(<argument><expr><name>bsrc</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><name>bsrc</name> <operator>-</operator> <name>stride</name></expr></argument>,
<argument><expr><name>bsrc</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bsrc</name> <operator>+=</operator> <name>stride2</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>restore_gradient_planar</name><parameter_list>(<parameter><decl><type><name>UtvideoContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rmode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>slice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>C</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bsrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_start</name></decl>, <decl><type ref="prev"/><name>slice_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cmask</name> <init>= <expr><operator>~</operator><name>rmode</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_width</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>slice</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>slice</name> <operator>&lt;</operator> <name>slices</name></expr>;</condition> <incr><expr><name>slice</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>slice_start</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>slice</name> <operator>*</operator> <name>height</name><operator>)</operator> <operator>/</operator> <name>slices</name><operator>)</operator> <operator>&amp;</operator> <name>cmask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_height</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>slice</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>height</name><operator>)</operator> <operator>/</operator> <name>slices</name><operator>)</operator> <operator>&amp;</operator> <name>cmask</name><operator>)</operator> <operator>-</operator>
<name>slice_start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>slice_height</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bsrc</name> <operator>=</operator> <name>src</name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>bsrc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred</name></name><argument_list>(<argument><expr><name>bsrc</name></expr></argument>, <argument><expr><name>bsrc</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bsrc</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slice_height</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>slice_height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bsrc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>bsrc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>bsrc</name><index>[<expr><operator>-</operator><name>stride</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>min_width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 
<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>bsrc</name><index>[<expr><name>i</name> <operator>-</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>B</name> <operator>=</operator> <name><name>bsrc</name><index>[<expr><name>i</name> <operator>-</operator> <operator>(</operator><name>stride</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>C</name> <operator>=</operator> <name><name>bsrc</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsrc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>A</name> <operator>-</operator> <name>B</name> <operator>+</operator> <name>C</name> <operator>+</operator> <name><name>bsrc</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_gradient_pred</name></name><argument_list>(<argument><expr><name>bsrc</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bsrc</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>restore_gradient_planar_il</name><parameter_list>(<parameter><decl><type><name>UtvideoContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rmode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>slice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>C</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bsrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_start</name></decl>, <decl><type ref="prev"/><name>slice_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cmask</name> <init>= <expr><operator>~</operator><operator>(</operator><ternary><condition><expr><name>rmode</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>stride2</name> <init>= <expr><name>stride</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_width</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>slice</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>slice</name> <operator>&lt;</operator> <name>slices</name></expr>;</condition> <incr><expr><name>slice</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>slice_start</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>slice</name> <operator>*</operator> <name>height</name><operator>)</operator> <operator>/</operator> <name>slices</name><operator>)</operator> <operator>&amp;</operator> <name>cmask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_height</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>slice</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>height</name><operator>)</operator> <operator>/</operator> <name>slices</name><operator>)</operator> <operator>&amp;</operator> <name>cmask</name><operator>)</operator> <operator>-</operator>
<name>slice_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_height</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>slice_height</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bsrc</name> <operator>=</operator> <name>src</name> <operator>+</operator> <name>slice_start</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>bsrc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name><name>c</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred</name></name><argument_list>(<argument><expr><name>bsrc</name></expr></argument>, <argument><expr><name>bsrc</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_left_pred</name></name><argument_list>(<argument><expr><name>bsrc</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><name>bsrc</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bsrc</name> <operator>+=</operator> <name>stride2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slice_height</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>slice_height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bsrc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>bsrc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>bsrc</name><index>[<expr><operator>-</operator><name>stride2</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>min_width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 
<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>bsrc</name><index>[<expr><name>i</name> <operator>-</operator> <name>stride2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>B</name> <operator>=</operator> <name><name>bsrc</name><index>[<expr><name>i</name> <operator>-</operator> <operator>(</operator><name>stride2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>C</name> <operator>=</operator> <name><name>bsrc</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsrc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>A</name> <operator>-</operator> <name>B</name> <operator>+</operator> <name>C</name> <operator>+</operator> <name><name>bsrc</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>llviddsp</name><operator>.</operator><name>add_gradient_pred</name></name><argument_list>(<argument><expr><name>bsrc</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>stride2</name></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>bsrc</name><index>[<expr><operator>-</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>B</name> <operator>=</operator> <name><name>bsrc</name><index>[<expr><operator>-</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>stride</name> <operator>+</operator> <name>stride</name> <operator>-</operator> <name>width</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>C</name> <operator>=</operator> <name><name>bsrc</name><index>[<expr><name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsrc</name><index>[<expr><name>stride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>A</name> <operator>-</operator> <name>B</name> <operator>+</operator> <name>C</name> <operator>+</operator> <name><name>bsrc</name><index>[<expr><name>stride</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>bsrc</name><index>[<expr><name>i</name> <operator>-</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>B</name> <operator>=</operator> <name><name>bsrc</name><index>[<expr><name>i</name> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>stride</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>C</name> <operator>=</operator> <name><name>bsrc</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bsrc</name><index>[<expr><name>i</name> <operator>+</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>A</name> <operator>-</operator> <name>B</name> <operator>+</operator> <name>C</name> <operator>+</operator> <name><name>bsrc</name><index>[<expr><name>i</name> <operator>+</operator> <name>stride</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>bsrc</name> <operator>+=</operator> <name>stride2</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UtvideoContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>plane_start</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>plane_size</name></decl>, <decl><type ref="prev"/><name>max_slice_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>slice_start</name></decl>, <decl><type ref="prev"/><name>slice_end</name></decl>, <decl><type ref="prev"/><name>slice_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ThreadFrame</name></type> <name>frame</name> <init>= <expr><block>{ <expr><operator>.</operator><name>f</name> <operator>=</operator> <name>data</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_thread_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>pack</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>packed_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>control_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nb_cbs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>left</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frame_info</name></name> <operator>=</operator> <name>PRED_GRADIENT</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <literal type="number">8LL</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <literal type="number">8</literal> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_cbs</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nb_cbs</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>packed_stream</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>control_stream</name> <operator>=</operator> <name>packed_stream</name> <operator>+</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name>nb_cbs</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> <operator>=</operator> <name>control_stream</name> <operator>-</operator> <name>packed_stream</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>packed_stream</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>packed_stream</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>packed_stream_size</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>packed_stream_size</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name>left</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>left</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>packed_stream_size</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>packed_stream</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>packed_stream_size</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>left</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>buf_size</name> <operator>-</operator> <name>control_stream</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>control_stream</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>control_stream</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>control_stream_size</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>control_stream_size</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name>left</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>left</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>control_stream_size</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>control_stream</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>control_stream_size</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>pro</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>frame_info_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not enough data for frame information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frame_info</name></name> <operator>=</operator> <call><name>bytestream2_get_le32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>frame_info</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>plane_start</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>gb</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1024</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Insufficient data for a plane\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>slice_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>slice_end</name> <operator>=</operator> <call><name>bytestream2_get_le32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slice_end</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>slice_end</name> <operator>&lt;</operator> <name>slice_start</name> <operator>||</operator>
<call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>slice_end</name> <operator>+</operator> <literal type="number">1024LL</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Incorrect slice size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>slice_size</name> <operator>=</operator> <name>slice_end</name> <operator>-</operator> <name>slice_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_start</name> <operator>=</operator> <name>slice_end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>max_slice_size</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_slice_size</name></expr></argument>, <argument><expr><name>slice_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>plane_size</name> <operator>=</operator> <name>slice_end</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skipu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>plane_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skipu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>plane_start</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name></expr>]</index></name> <operator>=</operator> <name><name>gb</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>plane_start</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>gb</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">256</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Insufficient data for a plane\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream2_skipu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>slice_end</name> <operator>=</operator> <call><name>bytestream2_get_le32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slice_end</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>slice_end</name> <operator>&lt;</operator> <name>slice_start</name> <operator>||</operator>
<call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>slice_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Incorrect slice size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>slice_size</name> <operator>=</operator> <name>slice_end</name> <operator>-</operator> <name>slice_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_start</name> <operator>=</operator> <name>slice_end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>max_slice_size</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_slice_size</name></expr></argument>, <argument><expr><name>slice_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>plane_size</name> <operator>=</operator> <name>slice_end</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skipu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>plane_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>plane_start</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name></expr>]</index></name> <operator>=</operator> <name><name>gb</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>frame_info_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not enough data for frame information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frame_info</name></name> <operator>=</operator> <call><name>bytestream2_get_le32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"frame information flags %"</literal><name>PRIX32</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frame_pred</name></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>frame_info</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max_slice_size</name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>pack</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_fast_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>slice_bits</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>slice_bits_size</name></name></expr></argument>,
<argument><expr><name>max_slice_size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>slice_bits</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot allocate temporary buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_PIX_FMT_GBRP</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRAP</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_plane</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>plane_start</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame_pred</name></name> <operator>==</operator> <name>PRED_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>frame_pred</name></name> <operator>==</operator> <name>PRED_MEDIAN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>restore_median_planar</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>restore_median_planar_il</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>frame_pred</name></name> <operator>==</operator> <name>PRED_GRADIENT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>restore_gradient_planar</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>restore_gradient_planar_il</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>utdsp</name><operator>.</operator><name>restore_rgb_planes</name></name><argument_list>(<argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_GBRAP10</name></expr>:</case>
<case>case <expr><name>AV_PIX_FMT_GBRP10</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_plane10</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>plane_start</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>plane_start</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1024</literal></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame_pred</name></name> <operator>==</operator> <name>PRED_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>utdsp</name><operator>.</operator><name>restore_rgb_planes10</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_plane</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <operator>!</operator><operator>!</operator><name>i</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <operator>!</operator><operator>!</operator><name>i</name></expr></argument>,
<argument><expr><name><name>plane_start</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame_pred</name></name> <operator>==</operator> <name>PRED_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>frame_pred</name></name> <operator>==</operator> <name>PRED_MEDIAN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>restore_median_planar</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <operator>!</operator><operator>!</operator><name>i</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <operator>!</operator><operator>!</operator><name>i</name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>, <argument><expr><operator>!</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>restore_median_planar_il</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <operator>!</operator><operator>!</operator><name>i</name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <operator>!</operator><operator>!</operator><name>i</name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>, <argument><expr><operator>!</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>frame_pred</name></name> <operator>==</operator> <name>PRED_GRADIENT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>restore_gradient_planar</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <operator>!</operator><operator>!</operator><name>i</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <operator>!</operator><operator>!</operator><name>i</name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>, <argument><expr><operator>!</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>restore_gradient_planar_il</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <operator>!</operator><operator>!</operator><name>i</name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <operator>!</operator><operator>!</operator><name>i</name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>, <argument><expr><operator>!</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUV422P</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_plane</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <operator>!</operator><operator>!</operator><name>i</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name><name>plane_start</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame_pred</name></name> <operator>==</operator> <name>PRED_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>frame_pred</name></name> <operator>==</operator> <name>PRED_MEDIAN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>restore_median_planar</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <operator>!</operator><operator>!</operator><name>i</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>restore_median_planar_il</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <operator>!</operator><operator>!</operator><name>i</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>frame_pred</name></name> <operator>==</operator> <name>PRED_GRADIENT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>restore_gradient_planar</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <operator>!</operator><operator>!</operator><name>i</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>restore_gradient_planar_il</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <operator>!</operator><operator>!</operator><name>i</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_plane</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name><name>plane_start</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame_pred</name></name> <operator>==</operator> <name>PRED_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>frame_pred</name></name> <operator>==</operator> <name>PRED_MEDIAN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>restore_median_planar</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>restore_median_planar_il</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>frame_pred</name></name> <operator>==</operator> <name>PRED_GRADIENT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>interlaced</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>restore_gradient_planar</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>restore_gradient_planar_il</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUV420P10</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_plane10</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <operator>!</operator><operator>!</operator><name>i</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <operator>!</operator><operator>!</operator><name>i</name></expr></argument>,
<argument><expr><name><name>plane_start</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>plane_start</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame_pred</name></name> <operator>==</operator> <name>PRED_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_PIX_FMT_YUV422P10</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_plane10</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <operator>!</operator><operator>!</operator><name>i</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name><name>plane_start</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>plane_start</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame_pred</name></name> <operator>==</operator> <name>PRED_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>interlaced</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UtvideoContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h_shift</name></decl>, <decl><type ref="prev"/><name>v_shift</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_utvideodsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>utdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_bswapdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>bdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_llviddsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>llviddsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>slice_bits_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRAP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT470BG</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT470BG</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT470BG</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'Q'</literal></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pro</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P10</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'Q'</literal></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pro</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P10</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'Q'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pro</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP10</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'Q'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pro</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRAP10</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT709</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT709</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT709</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pack</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT470BG</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pack</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT709</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pack</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT470BG</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pack</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT709</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pack</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>planes</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pack</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRAP</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown Ut Video FOURCC provided (%08X)\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h_shift</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>h_shift</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>v_shift</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Odd dimensions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>pack</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Encoder version %d.%d.%d.%d\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Original format %"</literal><name>PRIX32</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>compression</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>compression</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Unknown compression type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>pro</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Encoder version %d.%d.%d.%d\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Original format %"</literal><name>PRIX32</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frame_info_size</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>frame_info_size</name></name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Frame info not 4 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Encoding parameters %08"</literal><name>PRIX32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>slices</name></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>compression</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">0x800</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>pro</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Encoder version %d.%d.%d.%d\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Original format %"</literal><name>PRIX32</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>interlaced</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frame_info_size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Insufficient extradata size %d, should be at least 16\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UtvideoContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>slice_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_utvideo_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"utvideo"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Ut Video"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_UTVIDEO</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>UtvideoContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>decode_end</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
