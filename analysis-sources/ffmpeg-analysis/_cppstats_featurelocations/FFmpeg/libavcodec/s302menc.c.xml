<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\s302menc.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AES3_HEADER_LEN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>S302MEncContext</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>framing_index</name></decl>;</decl_stmt> 
}</block></struct></type> <name>S302MEncContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>s302m_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>S302MEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Encoding %d channel(s) is not allowed. Only 2, 4, 6 and 8 channels are supported.\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_SAMPLE_FMT_S16</name></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_SAMPLE_FMT_S32</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&gt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"encoding as 24 bits-per-sample\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&lt;=</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <literal type="number">48000</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator>
<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>framing_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>s302m_encode2_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>S302MEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>buf_size</name> <init>= <expr><name>AES3_HEADER_LEN</name> <operator>+</operator>
<operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>*</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator>
<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>-</operator> <name>AES3_HEADER_LEN</name> <operator>&gt;</operator> <name>UINT16_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"number of samples in frame too big\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <name>AES3_HEADER_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name> <operator>+=</operator> <name>AES3_HEADER_LEN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>vucf</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>framing_index</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0x10</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>channels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channels</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channels</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_reverse</name><index>[<expr><operator>(</operator><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0000FF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_reverse</name><index>[<expr><operator>(</operator><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00FF0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_reverse</name><index>[<expr><operator>(</operator><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_reverse</name><index>[<expr><operator>(</operator><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00000F00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name> <operator>|</operator> <name>vucf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_reverse</name><index>[<expr><operator>(</operator><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x000FF000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_reverse</name><index>[<expr><operator>(</operator><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0FF00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_reverse</name><index>[<expr><operator>(</operator><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>samples</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>framing_index</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>framing_index</name></name> <operator>&gt;=</operator> <literal type="number">192</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>framing_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>vucf</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>framing_index</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0x80</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>channels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channels</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channels</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_reverse</name><index>[ <expr><operator>(</operator><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x000FF000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_reverse</name><index>[ <expr><operator>(</operator><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0FF00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_reverse</name><index>[<expr><operator>(</operator><operator>(</operator><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28</literal><operator>)</operator> <operator>|</operator> <name>vucf</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_reverse</name><index>[ <expr><operator>(</operator><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x000FF000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_reverse</name><index>[ <expr><operator>(</operator><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0FF00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_reverse</name><index>[ <expr><operator>(</operator><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">28</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>samples</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>framing_index</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>framing_index</name></name> <operator>&gt;=</operator> <literal type="number">192</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>framing_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>vucf</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>framing_index</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0x10</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>channels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>channels</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>channels</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_reverse</name><index>[ <expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_reverse</name><index>[<expr><operator>(</operator><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_reverse</name><index>[<expr><operator>(</operator><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>]</index></name> <operator>|</operator> <name>vucf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_reverse</name><index>[<expr><operator>(</operator><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0FF0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_reverse</name><index>[<expr><operator>(</operator><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>samples</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>framing_index</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>framing_index</name></name> <operator>&gt;=</operator> <literal type="number">192</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>framing_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_s302m_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"s302m"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"SMPTE 302M"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_S302M</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>S302MEncContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>s302m_encode_init</name></expr>,
<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>s302m_encode2_frame</name></expr>,
<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_SAMPLE_FMT_S32</name></expr>,
<expr><name>AV_SAMPLE_FMT_S16</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_VARIABLE_FRAME_SIZE</name> <operator>|</operator> <name>AV_CODEC_CAP_EXPERIMENTAL</name></expr>,
<expr><operator>.</operator><name>supported_samplerates</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>int</name><index>[]</index></name><operator>)</operator> <block>{ <expr><literal type="number">48000</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,





}</block></expr></init></decl>;</decl_stmt>
</unit>
