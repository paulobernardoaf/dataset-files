<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\fits.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fits.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>avpriv_fits_header_init</name><parameter_list>(<parameter><decl><type><name>FITSHeader</name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>FITSHeaderState</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>naxis_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>blank_found</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>pcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>gcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>groups</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>rgb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>image_extension</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>bscale</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>bzero</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>data_min_found</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>data_max_found</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dict_set_if_not_null</name><parameter_list>(<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>metadata</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>keyword</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>metadata</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_dict_set</name><argument_list>(<argument><expr><operator>*</operator><name>metadata</name></expr></argument>, <argument><expr><name>keyword</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>read_keyword_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr8</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>keyword</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>ptr8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>keyword</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ptr8</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>keyword</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptr8</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">80</literal> <operator>&amp;&amp;</operator> <name><name>ptr8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>value</name><operator>++</operator> <operator>=</operator> <name><name>ptr8</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ptr8</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">80</literal> <operator>&amp;&amp;</operator> <name><name>ptr8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\''</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>value</name><operator>++</operator> <operator>=</operator> <name><name>ptr8</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>value</name><operator>++</operator> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ptr8</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">80</literal> <operator>&amp;&amp;</operator> <name><name>ptr8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">')'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>value</name><operator>++</operator> <operator>=</operator> <name><name>ptr8</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>value</name><operator>++</operator> <operator>=</operator> <literal type="char">')'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">80</literal> <operator>&amp;&amp;</operator> <name><name>ptr8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name><name>ptr8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>value</name><operator>++</operator> <operator>=</operator> <name><name>ptr8</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_KEYWORD</name><parameter_list>(<parameter><type><name>key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (strcmp(keyword, key)) { av_log(avcl, AV_LOG_ERROR, "expected %s keyword, found %s = %s\n", key, keyword, value); return AVERROR_INVALIDDATA; }</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_VALUE</name><parameter_list>(<parameter><type><name>key</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (sscanf(value, "%d", &amp;header-&gt;val) != 1) { av_log(avcl, AV_LOG_ERROR, "invalid value of %s keyword, %s = %s\n", key, keyword, value); return AVERROR_INVALIDDATA; }</cpp:value></cpp:define>





<function><type><name>int</name></type> <name>avpriv_fits_header_parse_line</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>avcl</name></decl></parameter>, <parameter><decl><type><name>FITSHeader</name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>line</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>metadata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dim_no</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>keyword</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>value</name><index>[<expr><literal type="number">72</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>read_keyword_value</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>keyword</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>STATE_SIMPLE</name></expr>:</case>
<expr_stmt><expr><call><name>CHECK_KEYWORD</name><argument_list>(<argument><expr><literal type="string">"SIMPLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'F'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avcl</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"not a standard FITS file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'T'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avcl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid value of SIMPLE keyword, SIMPLE = %c\n"</literal></expr></argument>, <argument><expr><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>STATE_BITPIX</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>STATE_XTENSION</name></expr>:</case>
<expr_stmt><expr><call><name>CHECK_KEYWORD</name><argument_list>(<argument><expr><literal type="string">"XTENSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"'IMAGE '"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>image_extension</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>STATE_BITPIX</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>STATE_BITPIX</name></expr>:</case>
<expr_stmt><expr><call><name>CHECK_KEYWORD</name><argument_list>(<argument><expr><literal type="string">"BITPIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_VALUE</name><argument_list>(<argument><expr><literal type="string">"BITPIX"</literal></expr></argument>, <argument><expr><name>bitpix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>bitpix</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<case>case <expr><literal type="number">32</literal></expr>:</case> <case>case <expr><operator>-</operator><literal type="number">32</literal></expr>:</case>
<case>case <expr><literal type="number">64</literal></expr>:</case> <case>case <expr><operator>-</operator><literal type="number">64</literal></expr>:</case> <break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avcl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid value of BITPIX %d\n"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>bitpix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> \
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>dict_set_if_not_null</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>keyword</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>STATE_NAXIS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>STATE_NAXIS</name></expr>:</case>
<expr_stmt><expr><call><name>CHECK_KEYWORD</name><argument_list>(<argument><expr><literal type="string">"NAXIS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_VALUE</name><argument_list>(<argument><expr><literal type="string">"NAXIS"</literal></expr></argument>, <argument><expr><name>naxis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dict_set_if_not_null</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>keyword</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>naxis</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>STATE_NAXIS_N</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>STATE_REST</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>STATE_NAXIS_N</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>keyword</name></expr></argument>, <argument><expr><literal type="string">"NAXIS%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dim_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name>dim_no</name> <operator>!=</operator> <name><name>header</name><operator>-&gt;</operator><name>naxis_index</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avcl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"expected NAXIS%d keyword, found %s = %s\n"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>naxis_index</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>keyword</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>naxisn</name><index>[<expr><name><name>header</name><operator>-&gt;</operator><name>naxis_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avcl</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid value of NAXIS%d keyword, %s = %s\n"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>naxis_index</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>keyword</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dict_set_if_not_null</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>keyword</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>naxis_index</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>naxis_index</name></name> <operator>==</operator> <name><name>header</name><operator>-&gt;</operator><name>naxis</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>STATE_REST</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>STATE_REST</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>keyword</name></expr></argument>, <argument><expr><literal type="string">"BLANK"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>SCNd64</name><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>blank</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>blank_found</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>keyword</name></expr></argument>, <argument><expr><literal type="string">"BSCALE"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>bscale</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>keyword</name></expr></argument>, <argument><expr><literal type="string">"BZERO"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>bzero</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>keyword</name></expr></argument>, <argument><expr><literal type="string">"CTYPE3"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"'RGB"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>rgb</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>keyword</name></expr></argument>, <argument><expr><literal type="string">"DATAMAX"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>data_max_found</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>data_max</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>keyword</name></expr></argument>, <argument><expr><literal type="string">"DATAMIN"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>data_min_found</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>data_min</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>keyword</name></expr></argument>, <argument><expr><literal type="string">"END"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>keyword</name></expr></argument>, <argument><expr><literal type="string">"GROUPS"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>groups</name></name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'T'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>keyword</name></expr></argument>, <argument><expr><literal type="string">"GCOUNT"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>SCNd64</name><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>gcount</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>keyword</name></expr></argument>, <argument><expr><literal type="string">"PCOUNT"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>SCNd64</name><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>pcount</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dict_set_if_not_null</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>keyword</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
