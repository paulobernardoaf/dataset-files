<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\h264dsp.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264idct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"startcode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dsp_template.c"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dsp_template.c"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dsp_template.c"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dsp_template.c"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dsp_template.c"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264addpx_template.c"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264addpx_template.c"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_h264dsp_init</name><parameter_list>(<parameter><decl><type><name>H264DSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>bit_depth</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_format_idc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FUNC</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_ ##depth ##_c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDPX_DSP</name><parameter_list>(<parameter><type><name>depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c-&gt;h264_add_pixels4_clear = FUNC(ff_h264_add_pixels4, depth);c-&gt;h264_add_pixels8_clear = FUNC(ff_h264_add_pixels8, depth)</cpp:value></cpp:define>



<if_stmt><if>if <condition>(<expr><name>bit_depth</name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>bit_depth</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ADDPX_DSP</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ADDPX_DSP</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_DSP</name><parameter_list>(<parameter><type><name>depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c-&gt;h264_idct_add= FUNC(ff_h264_idct_add, depth);c-&gt;h264_idct8_add= FUNC(ff_h264_idct8_add, depth);c-&gt;h264_idct_dc_add= FUNC(ff_h264_idct_dc_add, depth);c-&gt;h264_idct8_dc_add= FUNC(ff_h264_idct8_dc_add, depth);c-&gt;h264_idct_add16 = FUNC(ff_h264_idct_add16, depth);c-&gt;h264_idct8_add4 = FUNC(ff_h264_idct8_add4, depth);if (chroma_format_idc &lt;= 1)c-&gt;h264_idct_add8 = FUNC(ff_h264_idct_add8, depth);elsec-&gt;h264_idct_add8 = FUNC(ff_h264_idct_add8_422, depth);c-&gt;h264_idct_add16intra= FUNC(ff_h264_idct_add16intra, depth);c-&gt;h264_luma_dc_dequant_idct= FUNC(ff_h264_luma_dc_dequant_idct, depth);if (chroma_format_idc &lt;= 1)c-&gt;h264_chroma_dc_dequant_idct= FUNC(ff_h264_chroma_dc_dequant_idct, depth);elsec-&gt;h264_chroma_dc_dequant_idct= FUNC(ff_h264_chroma422_dc_dequant_idct, depth);c-&gt;weight_h264_pixels_tab[0]= FUNC(weight_h264_pixels16, depth);c-&gt;weight_h264_pixels_tab[1]= FUNC(weight_h264_pixels8, depth);c-&gt;weight_h264_pixels_tab[2]= FUNC(weight_h264_pixels4, depth);c-&gt;weight_h264_pixels_tab[3]= FUNC(weight_h264_pixels2, depth);c-&gt;biweight_h264_pixels_tab[0]= FUNC(biweight_h264_pixels16, depth);c-&gt;biweight_h264_pixels_tab[1]= FUNC(biweight_h264_pixels8, depth);c-&gt;biweight_h264_pixels_tab[2]= FUNC(biweight_h264_pixels4, depth);c-&gt;biweight_h264_pixels_tab[3]= FUNC(biweight_h264_pixels2, depth);c-&gt;h264_v_loop_filter_luma= FUNC(h264_v_loop_filter_luma, depth);c-&gt;h264_h_loop_filter_luma= FUNC(h264_h_loop_filter_luma, depth);c-&gt;h264_h_loop_filter_luma_mbaff= FUNC(h264_h_loop_filter_luma_mbaff, depth);c-&gt;h264_v_loop_filter_luma_intra= FUNC(h264_v_loop_filter_luma_intra, depth);c-&gt;h264_h_loop_filter_luma_intra= FUNC(h264_h_loop_filter_luma_intra, depth);c-&gt;h264_h_loop_filter_luma_mbaff_intra= FUNC(h264_h_loop_filter_luma_mbaff_intra, depth);c-&gt;h264_v_loop_filter_chroma= FUNC(h264_v_loop_filter_chroma, depth);if (chroma_format_idc &lt;= 1)c-&gt;h264_h_loop_filter_chroma= FUNC(h264_h_loop_filter_chroma, depth);elsec-&gt;h264_h_loop_filter_chroma= FUNC(h264_h_loop_filter_chroma422, depth);if (chroma_format_idc &lt;= 1)c-&gt;h264_h_loop_filter_chroma_mbaff= FUNC(h264_h_loop_filter_chroma_mbaff, depth);elsec-&gt;h264_h_loop_filter_chroma_mbaff= FUNC(h264_h_loop_filter_chroma422_mbaff, depth);c-&gt;h264_v_loop_filter_chroma_intra= FUNC(h264_v_loop_filter_chroma_intra, depth);if (chroma_format_idc &lt;= 1)c-&gt;h264_h_loop_filter_chroma_intra= FUNC(h264_h_loop_filter_chroma_intra, depth);elsec-&gt;h264_h_loop_filter_chroma_intra= FUNC(h264_h_loop_filter_chroma422_intra, depth);if (chroma_format_idc &lt;= 1)c-&gt;h264_h_loop_filter_chroma_mbaff_intra= FUNC(h264_h_loop_filter_chroma_mbaff_intra, depth);elsec-&gt;h264_h_loop_filter_chroma_mbaff_intra= FUNC(h264_h_loop_filter_chroma422_mbaff_intra, depth);c-&gt;h264_loop_filter_strength= NULL;</cpp:value></cpp:define>




















































<switch>switch <condition>(<expr><name>bit_depth</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><call><name>H264_DSP</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<expr_stmt><expr><call><name>H264_DSP</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<expr_stmt><expr><call><name>H264_DSP</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">14</literal></expr>:</case>
<expr_stmt><expr><call><name>H264_DSP</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>bit_depth</name><operator>&lt;=</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H264_DSP</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>startcode_find_candidate</name></name> <operator>=</operator> <name>ff_startcode_find_candidate_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_AARCH64</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_h264dsp_init_aarch64</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>, <argument><expr><name>chroma_format_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_h264dsp_init_arm</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>, <argument><expr><name>chroma_format_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_PPC</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_h264dsp_init_ppc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>, <argument><expr><name>chroma_format_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_h264dsp_init_x86</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>, <argument><expr><name>chroma_format_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_MIPS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_h264dsp_init_mips</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>, <argument><expr><name>chroma_format_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
