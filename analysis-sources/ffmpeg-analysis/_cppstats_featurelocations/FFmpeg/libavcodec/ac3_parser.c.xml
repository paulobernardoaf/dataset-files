<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\ac3_parser.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ac3_parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ac3_parser_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aac_ac3_parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC3_HEADER_SIZE</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AC3_PARSER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>eac3_blocks</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>
}</block></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>center_levels</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>surround_levels</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<function><type><name>int</name></type> <name>ff_ac3_parse_header</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbc</name></decl></parameter>, <parameter><decl><type><name>AC3HeaderInfo</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>frame_size_code</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>sync_word</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>sync_word</name></name> <operator>!=</operator> <literal type="number">0x0B77</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AAC_AC3_PARSE_ERROR_SYNC</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>bitstream_id</name></name> <operator>=</operator> <call><name>show_bits_long</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>bitstream_id</name></name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AAC_AC3_PARSE_ERROR_BSID</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>center_mix_level</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>surround_mix_level</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt> 


<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>dolby_surround_mode</name></name> <operator>=</operator> <name>AC3_DSURMOD_NOTINDICATED</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>bitstream_id</name></name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>crc1</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>sr_code</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>sr_code</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AAC_AC3_PARSE_ERROR_SAMPLE_RATE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frame_size_code</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>frame_size_code</name> <operator>&gt;</operator> <literal type="number">37</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AAC_AC3_PARSE_ERROR_FRAME_SIZE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>bitstream_mode</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <name>AC3_CHMODE_STEREO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>dolby_surround_mode</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>hdr</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>!=</operator> <name>AC3_CHMODE_MONO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator> <name>center_mix_level</name></name> <operator>=</operator> <name><name>center_levels</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>surround_mix_level</name></name> <operator>=</operator> <name><name>surround_levels</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>lfe_on</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>sr_shift</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>bitstream_id</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>ff_ac3_sample_rate_tab</name><index>[<expr><name><name>hdr</name><operator>-&gt;</operator><name>sr_code</name></name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>sr_shift</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <operator>(</operator><name><name>ff_ac3_bitrate_tab</name><index>[<expr><name>frame_size_code</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>sr_shift</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>ff_ac3_channels_tab</name><index>[<expr><name><name>hdr</name><operator>-&gt;</operator><name>channel_mode</name></name></expr>]</index></name> <operator>+</operator> <name><name>hdr</name><operator>-&gt;</operator><name>lfe_on</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>ff_ac3_frame_size_tab</name><index>[<expr><name>frame_size_code</name></expr>]</index><index>[<expr><name><name>hdr</name><operator>-&gt;</operator><name>sr_code</name></name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>=</operator> <name>EAC3_FRAME_TYPE_AC3_CONVERT</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>substreamid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>crc1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>EAC3_FRAME_TYPE_RESERVED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AAC_AC3_PARSE_ERROR_FRAME_TYPE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>substreamid</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&lt;</operator> <name>AC3_HEADER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AAC_AC3_PARSE_ERROR_FRAME_SIZE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>sr_code</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>sr_code</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sr_code2</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>sr_code2</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AAC_AC3_PARSE_ERROR_SAMPLE_RATE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>ff_ac3_sample_rate_tab</name><index>[<expr><name>sr_code2</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>sr_shift</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>=</operator> <name><name>eac3_blocks</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>ff_ac3_sample_rate_tab</name><index>[<expr><name><name>hdr</name><operator>-&gt;</operator><name>sr_code</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>sr_shift</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>lfe_on</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <literal type="number">8LL</literal> <operator>*</operator> <name><name>hdr</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>*</operator> <name><name>hdr</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator>
<operator>(</operator><name><name>hdr</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>*</operator> <literal type="number">256</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>ff_ac3_channels_tab</name><index>[<expr><name><name>hdr</name><operator>-&gt;</operator><name>channel_mode</name></name></expr>]</index></name> <operator>+</operator> <name><name>hdr</name><operator>-&gt;</operator><name>lfe_on</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>avpriv_ac3_channel_layout_tab</name><index>[<expr><name><name>hdr</name><operator>-&gt;</operator><name>channel_mode</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>lfe_on</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>|=</operator> <name>AV_CH_LOW_FREQUENCY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>avpriv_ac3_parse_header</name><parameter_list>(<parameter><decl><type><name>AC3HeaderInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>phdr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AC3HeaderInfo</name> <modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>phdr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>phdr</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AC3HeaderInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>phdr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hdr</name> <operator>=</operator> <operator>*</operator><name>phdr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_ac3_parse_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_ac3_parse_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bitstream_id</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>frame_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AC3HeaderInfo</name></type> <name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_ac3_parse_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>bitstream_id</name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>bitstream_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>frame_size</name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>frame_size</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ac3_sync</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>AACAC3ParseContext</name> <modifier>*</modifier></type><name>hdr_info</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>need_next_header</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>new_frame_start</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>u64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>u8</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>tmp</name> <init>= <expr><block>{ <macro><name>av_be2ne64</name><argument_list>(<argument>state</argument>)</argument_list></macro> }</block></expr></init></decl>;</union>
<decl_stmt><decl><type><name>AC3HeaderInfo</name></type> <name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gbc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x77</literal> <operator>&amp;&amp;</operator> <name><name>tmp</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0b</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>u8</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>u8</name></name><operator>+</operator><literal type="number">8</literal><operator>-</operator><name>AC3_HEADER_SIZE</name></expr></argument>, <argument><expr><literal type="number">54</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_ac3_parse_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hdr_info</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr_info</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>bit_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr_info</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr_info</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>channel_layout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr_info</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>num_blocks</name></name> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr_info</name><operator>-&gt;</operator><name>service_type</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>bitstream_mode</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>.</operator><name>bitstream_mode</name></name> <operator>==</operator> <literal type="number">0x7</literal> <operator>&amp;&amp;</operator> <name><name>hdr</name><operator>.</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hdr_info</name><operator>-&gt;</operator><name>service_type</name></name> <operator>=</operator> <name>AV_AUDIO_SERVICE_TYPE_KARAOKE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>hdr</name><operator>.</operator><name>bitstream_id</name></name><operator>&gt;</operator><literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hdr_info</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_EAC3</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>hdr_info</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>hdr_info</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_AC3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>new_frame_start</name> <operator>=</operator> <operator>(</operator><name><name>hdr</name><operator>.</operator><name>frame_type</name></name> <operator>!=</operator> <name>EAC3_FRAME_TYPE_DEPENDENT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>need_next_header</name> <operator>=</operator> <operator>*</operator><name>new_frame_start</name> <operator>||</operator> <operator>(</operator><name><name>hdr</name><operator>.</operator><name>frame_type</name></name> <operator>!=</operator> <name>EAC3_FRAME_TYPE_AC3_CONVERT</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name><name>hdr</name><operator>.</operator><name>frame_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>ac3_parse_init</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AACAC3ParseContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>s1</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>header_size</name></name> <operator>=</operator> <name>AC3_HEADER_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sync</name></name> <operator>=</operator> <name>ac3_sync</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><name>AVCodecParser</name></type> <name>ff_ac3_parser</name> <init>= <expr><block>{
<expr><operator>.</operator><name>codec_ids</name> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_AC3</name></expr>, <expr><name>AV_CODEC_ID_EAC3</name></expr> }</block></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AACAC3ParseContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>parser_init</name> <operator>=</operator> <name>ac3_parse_init</name></expr>,
<expr><operator>.</operator><name>parser_parse</name> <operator>=</operator> <name>ff_aac_ac3_parse</name></expr>,
<expr><operator>.</operator><name>parser_close</name> <operator>=</operator> <name>ff_parse_close</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>int</name></type> <name>avpriv_ac3_parse_header</name><parameter_list>(<parameter><decl><type><name>AC3HeaderInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>phdr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_ac3_parse_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bitstream_id</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>frame_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
