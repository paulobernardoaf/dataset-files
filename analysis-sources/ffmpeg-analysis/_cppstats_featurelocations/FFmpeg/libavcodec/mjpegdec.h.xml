<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mjpegdec.h">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_MJPEGDEC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_MJPEGDEC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/stereo3d.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blockdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hpeldsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>near</name></cpp:undef> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_COMPONENTS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>MJpegDecodeContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_code</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>quant_matrixes</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC</name></type> <name><name>vlcs</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>qscale</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>org_height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>first_picture</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>interlaced</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>bottom_field</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>lossless</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>progressive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bayer</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>rgb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>upscale_h</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>upscale_v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rct</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>pegasus_rct</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>colr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xfrm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>adobe_transform</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>near</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>t1</name></decl>,<name>t2</name>,<name>t3</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_width</name></decl>, <name>mb_height</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_components</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>block_stride</name><index>[<expr><name>MAX_COMPONENTS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>component_id</name><index>[<expr><name>MAX_COMPONENTS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>h_count</name><index>[<expr><name>MAX_COMPONENTS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>v_count</name><index>[<expr><name>MAX_COMPONENTS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>comp_index</name><index>[<expr><name>MAX_COMPONENTS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dc_index</name><index>[<expr><name>MAX_COMPONENTS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ac_index</name><index>[<expr><name>MAX_COMPONENTS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>nb_blocks</name><index>[<expr><name>MAX_COMPONENTS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>h_scount</name><index>[<expr><name>MAX_COMPONENTS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>v_scount</name><index>[<expr><name>MAX_COMPONENTS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>quant_sindex</name><index>[<expr><name>MAX_COMPONENTS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h_max</name></decl>, <name>v_max</name>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>quant_index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>last_dc</name><index>[<expr><name>MAX_COMPONENTS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picture</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picture_ptr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>got_picture</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>linesize</name><index>[<expr><name>MAX_COMPONENTS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>qscale_table</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name><name>blocks</name><index>[<expr><name>MAX_COMPONENTS</name></expr>]</index></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>last_nnz</name><index>[<expr><name>MAX_COMPONENTS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>coefs_finished</name><index>[<expr><name>MAX_COMPONENTS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>palette_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ScanTable</name></type> <name>scantable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BlockDSPContext</name></type> <name>bdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HpelDSPContext</name></type> <name>hdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IDCTDSPContext</name></type> <name>idsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>restart_interval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>restart_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buggy_avid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cs_itu601</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>interlace_polarity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>multiscope</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mjpb_skiptosod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_scan</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>flipped</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>uint16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>ljpeg_buffer</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ljpeg_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extern_huff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>exif_metadata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStereo3D</name> <modifier>*</modifier></type><name>stereo3d</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>pix_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>iccdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>iccdatalens</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iccnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iccread</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>raw_image_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>raw_image_buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>raw_scan_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>raw_scan_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>raw_huffman_lengths</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>raw_huffman_values</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>hwaccel_sw_pix_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>hwaccel_pix_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hwaccel_picture_private</name></decl>;</decl_stmt>
}</block></struct></type> <name>MJpegDecodeContext</name>;</typedef>

<function_decl><type><name>int</name></type> <name>ff_mjpeg_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_mjpeg_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_mjpeg_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_mjpeg_decode_dqt</name><parameter_list>(<parameter><decl><type><name>MJpegDecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_mjpeg_decode_dht</name><parameter_list>(<parameter><decl><type><name>MJpegDecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_mjpeg_decode_sof</name><parameter_list>(<parameter><decl><type><name>MJpegDecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_mjpeg_decode_sos</name><parameter_list>(<parameter><decl><type><name>MJpegDecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mb_bitmask</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>mb_bitmask_size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>reference</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_mjpeg_find_marker</name><parameter_list>(<parameter><decl><type><name>MJpegDecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf_ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf_end</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>unescaped_buf_ptr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>unescaped_buf_size</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
