<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\truemotion1.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"truemotion1data.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>TrueMotion1Context</name> <block>{
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mb_change_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_change_bits_row_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>index_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index_stream_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <name>y</name>, <name>w</name>, <name>h</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>y_predictor_table</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>c_predictor_table</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>fat_y_predictor_table</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>fat_c_predictor_table</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>compression</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>ydt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>cdt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>fat_ydt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>fat_cdt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_deltaset</name></decl>, <name>last_vectable</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>vert_pred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vert_pred_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>TrueMotion1Context</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_SPRITE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_KEYFRAME</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_INTERFRAME</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_INTERPOLATED</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<struct>struct <name>frame_header</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>header_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>compression</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>deltaset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>vectable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>ysize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>xsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>checksum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>header_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>control</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>xoffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>yoffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>height</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALGO_NOP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALGO_RGB16V</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALGO_RGB16H</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALGO_RGB24H</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_2x2</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_2x4</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_4x2</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_4x4</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>comp_types</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>algorithm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_width</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>block_height</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>block_type</name></decl>;</decl_stmt>
}</block></struct></type> <name>comp_types</name>;</typedef>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>comp_types</name></type> <name><name>compression_types</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>ALGO_NOP</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ALGO_RGB16V</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>BLOCK_4x4</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ALGO_RGB16H</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>BLOCK_4x4</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ALGO_RGB16V</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>BLOCK_4x2</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ALGO_RGB16H</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>BLOCK_4x2</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ALGO_RGB16V</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>BLOCK_2x4</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ALGO_RGB16H</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>BLOCK_2x4</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ALGO_RGB16V</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>BLOCK_2x2</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ALGO_RGB16H</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>BLOCK_2x2</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ALGO_NOP</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>BLOCK_4x4</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ALGO_RGB24H</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>BLOCK_4x4</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ALGO_NOP</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>BLOCK_4x2</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ALGO_RGB24H</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>BLOCK_4x2</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ALGO_NOP</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>BLOCK_2x4</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ALGO_RGB24H</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>BLOCK_2x4</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ALGO_NOP</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>BLOCK_2x2</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ALGO_RGB24H</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>BLOCK_2x2</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>select_delta_tables</name><parameter_list>(<parameter><decl><type><name>TrueMotion1Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delta_table_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>delta_table_index</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ydt</name></name></expr></argument>, <argument><expr><name><name>ydts</name><index>[<expr><name>delta_table_index</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdt</name></name></expr></argument>, <argument><expr><name><name>cdts</name><index>[<expr><name>delta_table_index</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fat_ydt</name></name></expr></argument>, <argument><expr><name><name>fat_ydts</name><index>[<expr><name>delta_table_index</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fat_cdt</name></name></expr></argument>, <argument><expr><name><name>fat_cdts</name><index>[<expr><name>delta_table_index</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ydt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFFFE</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ydt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>make_ydt15_entry</name><argument_list>(<argument><expr><name>int</name> <name>p2</name></expr></argument>, <argument><expr><name>int</name> <name>p1</name></expr></argument>, <argument><expr><name>int16_t</name> <operator>*</operator><name>ydt</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
static <name>int</name> <name>make_ydt15_entry</name><argument_list>(<argument><expr><name>int</name> <name>p1</name></expr></argument>, <argument><expr><name>int</name> <name>p2</name></expr></argument>, <argument><expr><name>int16_t</name> <operator>*</operator><name>ydt</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lo</name></decl>, <decl><type ref="prev"/><name>hi</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lo</name> <operator>=</operator> <name><name>ydt</name><index>[<expr><name>p1</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lo</name> <operator>+=</operator> <operator>(</operator><name>lo</name> <operator>*</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>lo</name> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <name><name>ydt</name><index>[<expr><name>p2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hi</name> <operator>+=</operator> <operator>(</operator><name>hi</name> <operator>*</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>hi</name> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>lo</name> <operator>+</operator> <operator>(</operator><name>hi</name> <operator>*</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>make_cdt15_entry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p2</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>cdt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>lo</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>cdt</name><index>[<expr><name>p2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>cdt</name><index>[<expr><name>p1</name></expr>]</index></name> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <name>b</name> <operator>+</operator> <name>r</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>lo</name> <operator>+</operator> <operator>(</operator><name>lo</name> <operator>*</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>make_ydt16_entry</name><argument_list>(<argument><expr><name>int</name> <name>p2</name></expr></argument>, <argument><expr><name>int</name> <name>p1</name></expr></argument>, <argument><expr><name>int16_t</name> <operator>*</operator><name>ydt</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
static <name>int</name> <name>make_ydt16_entry</name><argument_list>(<argument><expr><name>int</name> <name>p1</name></expr></argument>, <argument><expr><name>int</name> <name>p2</name></expr></argument>, <argument><expr><name>int16_t</name> <operator>*</operator><name>ydt</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lo</name></decl>, <decl><type ref="prev"/><name>hi</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lo</name> <operator>=</operator> <name><name>ydt</name><index>[<expr><name>p1</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lo</name> <operator>+=</operator> <operator>(</operator><name>lo</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>lo</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <name><name>ydt</name><index>[<expr><name>p2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hi</name> <operator>+=</operator> <operator>(</operator><name>hi</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>hi</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>lo</name> <operator>+</operator> <operator>(</operator><name>hi</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>make_cdt16_entry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p2</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>cdt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>lo</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>cdt</name><index>[<expr><name>p2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>cdt</name><index>[<expr><name>p1</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <name>b</name> <operator>+</operator> <name>r</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>lo</name> <operator>+</operator> <operator>(</operator><name>lo</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>make_ydt24_entry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p2</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>ydt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lo</name></decl>, <decl><type ref="prev"/><name>hi</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lo</name> <operator>=</operator> <name><name>ydt</name><index>[<expr><name>p1</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <name><name>ydt</name><index>[<expr><name>p2</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>lo</name> <operator>+</operator> <operator>(</operator><name>hi</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name>hi</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>make_cdt24_entry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p2</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>cdt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>cdt</name><index>[<expr><name>p2</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>cdt</name><index>[<expr><name>p1</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>b</name><operator>+</operator><name>r</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gen_vector_table15</name><parameter_list>(<parameter><decl><type><name>TrueMotion1Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>sel_vector_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>delta_pair</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>sel_vector_table</name><operator>++</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>delta_pair</name> <operator>=</operator> <operator>*</operator><name>sel_vector_table</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y_predictor_table</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xfffffffe</literal> <operator>&amp;</operator>
<call><name>make_ydt15_entry</name><argument_list>(<argument><expr><name>delta_pair</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>delta_pair</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ydt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c_predictor_table</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xfffffffe</literal> <operator>&amp;</operator>
<call><name>make_cdt15_entry</name><argument_list>(<argument><expr><name>delta_pair</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>delta_pair</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y_predictor_table</name><index>[<expr><name>i</name><operator>+</operator><operator>(</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c_predictor_table</name><index>[<expr><name>i</name><operator>+</operator><operator>(</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gen_vector_table16</name><parameter_list>(<parameter><decl><type><name>TrueMotion1Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>sel_vector_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>delta_pair</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>sel_vector_table</name><operator>++</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>delta_pair</name> <operator>=</operator> <operator>*</operator><name>sel_vector_table</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y_predictor_table</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xfffffffe</literal> <operator>&amp;</operator>
<call><name>make_ydt16_entry</name><argument_list>(<argument><expr><name>delta_pair</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>delta_pair</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ydt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c_predictor_table</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xfffffffe</literal> <operator>&amp;</operator>
<call><name>make_cdt16_entry</name><argument_list>(<argument><expr><name>delta_pair</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>delta_pair</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y_predictor_table</name><index>[<expr><name>i</name><operator>+</operator><operator>(</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c_predictor_table</name><index>[<expr><name>i</name><operator>+</operator><operator>(</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gen_vector_table24</name><parameter_list>(<parameter><decl><type><name>TrueMotion1Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>sel_vector_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>delta_pair</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>sel_vector_table</name><operator>++</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>delta_pair</name> <operator>=</operator> <operator>*</operator><name>sel_vector_table</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y_predictor_table</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xfffffffe</literal> <operator>&amp;</operator>
<call><name>make_ydt24_entry</name><argument_list>(<argument><expr><name>delta_pair</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>delta_pair</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ydt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c_predictor_table</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xfffffffe</literal> <operator>&amp;</operator>
<call><name>make_cdt24_entry</name><argument_list>(<argument><expr><name>delta_pair</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>delta_pair</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fat_y_predictor_table</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xfffffffe</literal> <operator>&amp;</operator>
<call><name>make_ydt24_entry</name><argument_list>(<argument><expr><name>delta_pair</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>delta_pair</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fat_ydt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fat_c_predictor_table</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xfffffffe</literal> <operator>&amp;</operator>
<call><name>make_cdt24_entry</name><argument_list>(<argument><expr><name>delta_pair</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>delta_pair</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fat_cdt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y_predictor_table</name><index>[<expr><name>i</name><operator>+</operator><operator>(</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>c_predictor_table</name><index>[<expr><name>i</name><operator>+</operator><operator>(</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fat_y_predictor_table</name><index>[<expr><name>i</name><operator>+</operator><operator>(</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fat_c_predictor_table</name><index>[<expr><name>i</name><operator>+</operator><operator>(</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>truemotion1_decode_header</name><parameter_list>(<parameter><decl><type><name>TrueMotion1Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width_shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_pix_fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>frame_header</name></name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>header_buffer</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>sel_vector_table</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>header</name><operator>.</operator><name>header_size</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x10</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid header size (%d)\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>header_size</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Input packet too small.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>header</name><operator>.</operator><name>header_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>header_buffer</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>header</name><operator>.</operator><name>compression</name></name> <operator>=</operator> <name><name>header_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>.</operator><name>deltaset</name></name> <operator>=</operator> <name><name>header_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>.</operator><name>vectable</name></name> <operator>=</operator> <name><name>header_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>.</operator><name>ysize</name></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>.</operator><name>xsize</name></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header_buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>.</operator><name>checksum</name></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header_buffer</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>header_buffer</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>.</operator><name>header_type</name></name> <operator>=</operator> <name><name>header_buffer</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name><name>header_buffer</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>.</operator><name>control</name></name> <operator>=</operator> <name><name>header_buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>version</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>header_type</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid header type (%d)\n"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>header_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>header</name><operator>.</operator><name>header_type</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>header</name><operator>.</operator><name>header_type</name></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>flags</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_INTERFRAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FLAG_KEYFRAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>FLAG_KEYFRAME</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>FLAG_KEYFRAME</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_SPRITE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Frame with sprite"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>xsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>ysize</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>header_type</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>&lt;</operator> <literal type="number">213</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>&gt;=</operator> <literal type="number">176</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FLAG_INTERPOLATED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Interpolated frame"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>compression</name></name> <operator>&gt;=</operator> <literal type="number">17</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid compression type (%d)\n"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>header</name><operator>.</operator><name>deltaset</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_deltaset</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>header</name><operator>.</operator><name>vectable</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_vectable</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>select_delta_tables</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>deltaset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>header</name><operator>.</operator><name>compression</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>header</name><operator>.</operator><name>header_type</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sel_vector_table</name> <operator>=</operator> <name>pc_tbl2</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>vectable</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>header</name><operator>.</operator><name>vectable</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sel_vector_table</name> <operator>=</operator> <name><name>tables</name><index>[<expr><name><name>header</name><operator>.</operator><name>vectable</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid vector table id (%d)\n"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>vectable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>compression_types</name><index>[<expr><name><name>header</name><operator>.</operator><name>compression</name></name></expr>]</index></name><operator>.</operator><name>algorithm</name> <operator>==</operator> <name>ALGO_RGB24H</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_0RGB32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>width_shift</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>new_pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_RGB555</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>&gt;&gt;=</operator> <name>width_shift</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Frame with odd width"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator>
<name>new_pix_fmt</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{ <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>width_shift</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>new_pix_fmt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_set_sar</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fast_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vert_pred</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vert_pred_size</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>vert_pred</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_change_bits_row_size</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name>width_shift</name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>header</name><operator>.</operator><name>deltaset</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_deltaset</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>header</name><operator>.</operator><name>vectable</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_vectable</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>compression_types</name><index>[<expr><name><name>header</name><operator>.</operator><name>compression</name></name></expr>]</index></name><operator>.</operator><name>algorithm</name> <operator>==</operator> <name>ALGO_RGB24H</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gen_vector_table24</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sel_vector_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB555</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gen_vector_table15</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sel_vector_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gen_vector_table16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sel_vector_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_change_bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>header</name><operator>.</operator><name>header_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_KEYFRAME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>index_stream</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_change_bits</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">2048</literal> <operator>+</operator> <name><name>header</name><operator>.</operator><name>header_size</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>index_stream</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_change_bits</name></name> <operator>+</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_change_bits_row_size</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>index_stream_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>index_stream</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_deltaset</name></name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>deltaset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_vectable</name></name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>vectable</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>compression</name></name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>compression</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_width</name></name> <operator>=</operator> <name><name>compression_types</name><index>[<expr><name><name>header</name><operator>.</operator><name>compression</name></name></expr>]</index></name><operator>.</operator><name>block_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_height</name></name> <operator>=</operator> <name><name>compression_types</name><index>[<expr><name><name>header</name><operator>.</operator><name>compression</name></name></expr>]</index></name><operator>.</operator><name>block_height</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_type</name></name> <operator>=</operator> <name><name>compression_types</name><index>[<expr><name><name>header</name><operator>.</operator><name>compression</name></name></expr>]</index></name><operator>.</operator><name>block_type</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"tables: %d / %d c:%d %dx%d t:%d %s%s%s%s\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_deltaset</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_vectable</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>compression</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_width</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_height</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_type</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_KEYFRAME</name></expr> ?</condition><then> <expr><literal type="string">" KEY"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_INTERFRAME</name></expr> ?</condition><then> <expr><literal type="string">" INTER"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_SPRITE</name></expr> ?</condition><then> <expr><literal type="string">" SPRITE"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_INTERPOLATED</name></expr> ?</condition><then> <expr><literal type="string">" INTERPOL"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>header</name><operator>.</operator><name>header_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>truemotion1_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TrueMotion1Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>







<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>av_fast_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vert_pred</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vert_pred_size</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>vert_pred</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_NEXT_INDEX</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{if (index_stream_index &gt;= s-&gt;index_stream_size) { av_log(s-&gt;avctx, AV_LOG_INFO, " help! truemotion1 decoder went out of bounds\n"); return; } index = s-&gt;index_stream[index_stream_index++] * 4; }</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INC_INDEX</name></cpp:macro> <cpp:value>do { if (index &gt;= 1023) { av_log(s-&gt;avctx, AV_LOG_ERROR, "Invalid index value.\n"); return; } index++; } while (0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_C_PREDICTOR</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>predictor_pair = s-&gt;c_predictor_table[index]; horiz_pred += (predictor_pair &gt;&gt; 1); if (predictor_pair &amp; 1) { GET_NEXT_INDEX() if (!index) { GET_NEXT_INDEX() predictor_pair = s-&gt;c_predictor_table[index]; horiz_pred += ((predictor_pair &gt;&gt; 1) * 5); if (predictor_pair &amp; 1) GET_NEXT_INDEX() else INC_INDEX; } } else INC_INDEX;</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_C_PREDICTOR_24</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>predictor_pair = s-&gt;c_predictor_table[index]; horiz_pred += (predictor_pair &gt;&gt; 1); if (predictor_pair &amp; 1) { GET_NEXT_INDEX() if (!index) { GET_NEXT_INDEX() predictor_pair = s-&gt;fat_c_predictor_table[index]; horiz_pred += (predictor_pair &gt;&gt; 1); if (predictor_pair &amp; 1) GET_NEXT_INDEX() else INC_INDEX; } } else INC_INDEX;</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_Y_PREDICTOR</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>predictor_pair = s-&gt;y_predictor_table[index]; horiz_pred += (predictor_pair &gt;&gt; 1); if (predictor_pair &amp; 1) { GET_NEXT_INDEX() if (!index) { GET_NEXT_INDEX() predictor_pair = s-&gt;y_predictor_table[index]; horiz_pred += ((predictor_pair &gt;&gt; 1) * 5); if (predictor_pair &amp; 1) GET_NEXT_INDEX() else INC_INDEX; } } else INC_INDEX;</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_Y_PREDICTOR_24</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>predictor_pair = s-&gt;y_predictor_table[index]; horiz_pred += (predictor_pair &gt;&gt; 1); if (predictor_pair &amp; 1) { GET_NEXT_INDEX() if (!index) { GET_NEXT_INDEX() predictor_pair = s-&gt;fat_y_predictor_table[index]; horiz_pred += (predictor_pair &gt;&gt; 1); if (predictor_pair &amp; 1) GET_NEXT_INDEX() else INC_INDEX; } } else INC_INDEX;</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_PIXEL_PAIR</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>*current_pixel_pair = *vert_pred + horiz_pred; *vert_pred++ = *current_pixel_pair++;</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>void</name></type> <name>truemotion1_decode_16bit</name><parameter_list>(<parameter><decl><type><name>TrueMotion1Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pixels_left</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>predictor_pair</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>horiz_pred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>vert_pred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>current_pixel_pair</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>current_line</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keyframe</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_KEYFRAME</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mb_change_bits</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_change_bits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>mb_change_byte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>mb_change_byte_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_change_index</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>index_stream_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vert_pred</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_NEXT_INDEX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>


<expr_stmt><expr><name>horiz_pred</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>current_pixel_pair</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><name>current_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vert_pred</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>vert_pred</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_change_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keyframe</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mb_change_byte</name> <operator>=</operator> <name><name>mb_change_bits</name><index>[<expr><name>mb_change_index</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mb_change_byte_mask</name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels_left</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>pixels_left</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>keyframe</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>mb_change_byte</name> <operator>&amp;</operator> <name>mb_change_byte_mask</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>y</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>block_width</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>APPLY_C_PREDICTOR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_C_PREDICTOR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>APPLY_C_PREDICTOR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>block_type</name></name> <operator>==</operator> <name>BLOCK_2x2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>APPLY_C_PREDICTOR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_C_PREDICTOR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>block_type</name></name> <operator>==</operator> <name>BLOCK_4x2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>APPLY_C_PREDICTOR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>vert_pred</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>current_pixel_pair</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz_pred</name> <operator>=</operator> <operator>*</operator><name>current_pixel_pair</name> <operator>-</operator> <operator>*</operator><name>vert_pred</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>vert_pred</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>current_pixel_pair</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keyframe</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mb_change_byte_mask</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mb_change_byte_mask</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mb_change_byte</name> <operator>=</operator> <name><name>mb_change_bits</name><index>[<expr><name>mb_change_index</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_change_byte_mask</name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pixels_left</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mb_change_bits</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_change_bits_row_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_line</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>truemotion1_decode_24bit</name><parameter_list>(<parameter><decl><type><name>TrueMotion1Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pixels_left</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>predictor_pair</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>horiz_pred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>vert_pred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>current_pixel_pair</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>current_line</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keyframe</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_KEYFRAME</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mb_change_bits</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_change_bits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>mb_change_byte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>mb_change_byte_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_change_index</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>index_stream_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vert_pred</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_NEXT_INDEX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>


<expr_stmt><expr><name>horiz_pred</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>current_pixel_pair</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><name>current_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vert_pred</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>vert_pred</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_change_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_change_byte</name> <operator>=</operator> <name><name>mb_change_bits</name><index>[<expr><name>mb_change_index</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_change_byte_mask</name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels_left</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>pixels_left</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>keyframe</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>mb_change_byte</name> <operator>&amp;</operator> <name>mb_change_byte_mask</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>y</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>block_width</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>APPLY_C_PREDICTOR_24</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR_24</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_C_PREDICTOR_24</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR_24</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>APPLY_C_PREDICTOR_24</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR_24</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR_24</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR_24</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR_24</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>block_type</name></name> <operator>==</operator> <name>BLOCK_2x2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>APPLY_C_PREDICTOR_24</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR_24</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_C_PREDICTOR_24</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR_24</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>block_type</name></name> <operator>==</operator> <name>BLOCK_4x2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>APPLY_C_PREDICTOR_24</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR_24</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR_24</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR_24</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APPLY_Y_PREDICTOR_24</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OUTPUT_PIXEL_PAIR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>vert_pred</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>current_pixel_pair</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz_pred</name> <operator>=</operator> <operator>*</operator><name>current_pixel_pair</name> <operator>-</operator> <operator>*</operator><name>vert_pred</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>vert_pred</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>current_pixel_pair</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keyframe</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mb_change_byte_mask</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mb_change_byte_mask</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mb_change_byte</name> <operator>=</operator> <name><name>mb_change_bits</name><index>[<expr><name>mb_change_index</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_change_byte_mask</name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pixels_left</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mb_change_bits</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_change_bits_row_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_line</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>truemotion1_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TrueMotion1Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>truemotion1_decode_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_reget_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>compression_types</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>compression</name></name></expr>]</index></name><operator>.</operator><name>algorithm</name> <operator>==</operator> <name>ALGO_RGB24H</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>truemotion1_decode_24bit</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>compression_types</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>compression</name></name></expr>]</index></name><operator>.</operator><name>algorithm</name> <operator>!=</operator> <name>ALGO_NOP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>truemotion1_decode_16bit</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>truemotion1_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TrueMotion1Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vert_pred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_truemotion1_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"truemotion1"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Duck TrueMotion 1.0"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_TRUEMOTION1</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TrueMotion1Context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>truemotion1_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>truemotion1_decode_end</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>truemotion1_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
