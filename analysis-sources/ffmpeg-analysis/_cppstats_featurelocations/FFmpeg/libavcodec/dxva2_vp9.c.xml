<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\dxva2_vp9.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dxva2_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9shared.h"</cpp:file></cpp:include>

<struct>struct <name>vp9_dxva2_picture_context</name> <block>{
<decl_stmt><decl><type><name>DXVA_PicParams_VP9</name></type> <name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DXVA_Slice_VPx_Short</name></type> <name>slice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bitstream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bitstream_size</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_picture_entry</name><parameter_list>(<parameter><decl><type><name>DXVA_PicEntry_VPx</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>(</operator><name>index</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>==</operator> <name>index</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flag</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>==</operator> <name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>bPicEntry</name></name> <operator>=</operator> <name>index</name> <operator>|</operator> <operator>(</operator><name>flag</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fill_picture_parameters</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVDXVAContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VP9SharedContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><name>DXVA_PicParams_VP9</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type> <name>pixdesc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sw_pix_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pixdesc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_picture_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>CurrPic</name></name></expr></argument>, <argument><expr><call><name>ff_dxva2_get_surface_index</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>profile</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wFormatAndPictureInfoFlags</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>invisible</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>errorres</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><name><name>pixdesc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>refreshctx</name></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>parallelmode</name></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>intraonly</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>framectxid</name></name> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>resetctx</name></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><ternary><condition><expr><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>keyframe</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>highprecisionmvs</name></name></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>BitDepthMinus8Luma</name></name> <operator>=</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>BitDepthMinus8Chroma</name></name> <operator>=</operator> <name><name>pixdesc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>interp_filter</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>filtermode</name></name> <operator>^</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>filtermode</name></name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>Reserved8Bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fill_picture_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>ref_frame_map</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>ff_dxva2_get_surface_index</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>ref_frame_coded_width</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>ref_frame_coded_height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>ref_frame_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bPicEntry</name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>refidx</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>refidx</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fill_picture_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>frame_refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>ff_dxva2_get_surface_index</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>refidx</name></expr>]</index></name><operator>.</operator><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>frame_refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bPicEntry</name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>ref_frame_sign_bias</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>filter_level</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>filter</name><operator>.</operator><name>level</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>sharpness_level</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>filter</name><operator>.</operator><name>sharpness</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wControlInfoFlags</name></name> <operator>=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>lf_delta</name><operator>.</operator><name>enabled</name></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>lf_delta</name><operator>.</operator><name>updated</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>use_last_frame_mvs</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>ref_deltas</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>lf_delta</name><operator>.</operator><name>ref</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>mode_deltas</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>lf_delta</name><operator>.</operator><name>mode</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>base_qindex</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>yac_qi</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>y_dc_delta_q</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>ydc_qdelta</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>uv_dc_delta_q</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>uvdc_qdelta</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>uv_ac_delta_q</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>uvac_qdelta</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>stVP9Segments</name><operator>.</operator><name>wSegmentInfoFlags</name></name> <operator>=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>update_map</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>temporal</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>absolute_vals</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>stVP9Segments</name><operator>.</operator><name>tree_probs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>prob</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>temporal</name></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>stVP9Segments</name><operator>.</operator><name>pred_probs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>pred_prob</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>stVP9Segments</name><operator>.</operator><name>pred_probs</name></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>stVP9Segments</name><operator>.</operator><name>pred_probs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>stVP9Segments</name><operator>.</operator><name>feature_mask</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>q_enabled</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lf_enabled</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ref_enabled</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>skip_enabled</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>stVP9Segments</name><operator>.</operator><name>feature_data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>q_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>stVP9Segments</name><operator>.</operator><name>feature_data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lf_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>stVP9Segments</name><operator>.</operator><name>feature_data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ref_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>stVP9Segments</name><operator>.</operator><name>feature_data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></for>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>log2_tile_cols</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>log2_tile_cols</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>log2_tile_rows</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>log2_tile_rows</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>uncompressed_header_size_byte_aligned</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>uncompressed_header_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>first_partition_size</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>compressed_header_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>StatusReportFeedbackNumber</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>DXVA_CONTEXT_REPORT_ID</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_slice_short</name><parameter_list>(<parameter><decl><type><name>DXVA_Slice_VPx_Short</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>slice</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>BSNALunitDataLocation</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>SliceBytesInBuffer</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>wBadSliceChopping</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>commit_bitstream_and_slice_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>DECODER_BUFFER_DESC</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>,
<parameter><decl><type><name>DECODER_BUFFER_DESC</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VP9SharedContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDXVAContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>DXVA_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vp9_dxva2_picture_context</name></name> <modifier>*</modifier></type><name>ctx_pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name>hwaccel_picture_private</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dxva_data_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dxva_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>dxva_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>padding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>type</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ff_dxva2_is_d3d11</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>D3D11_VIDEO_DECODER_BUFFER_BITSTREAM</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>ID3D11VideoContext_GetDecoderBuffer</name><argument_list>(<argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>video_context</name></expr></argument>,
<argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>,
<argument><expr><name>type</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dxva_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dxva_data_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>DXVA2_BitStreamDateBufferType</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>IDirectXVideoDecoder_GetBuffer</name><argument_list>(<argument><expr><call><name>DXVA2_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>,
<argument><expr><name>type</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dxva_data_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dxva_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>dxva_data</name> <operator>=</operator> <name>dxva_data_ptr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>SliceBytesInBuffer</name></name> <operator>&gt;</operator> <name>dxva_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to build bitstream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dxva_data</name></expr></argument>, <argument><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream</name></name></expr></argument>, <argument><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>SliceBytesInBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>padding</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">128</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>SliceBytesInBuffer</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">127</literal><operator>)</operator></expr></argument>, <argument><expr><name>dxva_size</name> <operator>-</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>SliceBytesInBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>padding</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dxva_data</name> <operator>+</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>SliceBytesInBuffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>SliceBytesInBuffer</name></name> <operator>+=</operator> <name>padding</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ff_dxva2_is_d3d11</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>ID3D11VideoContext_ReleaseDecoderBuffer</name><argument_list>(<argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>video_context</name></expr></argument>, <argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>IDirectXVideoDecoder_ReleaseBuffer</name><argument_list>(<argument><expr><call><name>DXVA2_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ff_dxva2_is_d3d11</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>D3D11_VIDEO_DECODER_BUFFER_DESC</name> <modifier>*</modifier></type><name>dsc11</name> <init>= <expr><name>bs</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dsc11</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dsc11</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc11</name><operator>-&gt;</operator><name>BufferType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc11</name><operator>-&gt;</operator><name>DataSize</name></name> <operator>=</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>SliceBytesInBuffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc11</name><operator>-&gt;</operator><name>NumMBsInBuffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>D3D11_VIDEO_DECODER_BUFFER_SLICE_CONTROL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DXVA2_DecodeBufferDesc</name> <modifier>*</modifier></type><name>dsc2</name> <init>= <expr><name>bs</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dsc2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dsc2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc2</name><operator>-&gt;</operator><name>CompressedBufferType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc2</name><operator>-&gt;</operator><name>DataSize</name></name> <operator>=</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>SliceBytesInBuffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc2</name><operator>-&gt;</operator><name>NumMBsInBuffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>DXVA2_SliceControlBufferType</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>ff_dxva2_commit_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>,
<argument><expr><name>type</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_vp9_start_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>av_unused</name> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>av_unused</name> <name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VP9SharedContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDXVAContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>DXVA_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vp9_dxva2_picture_context</name></name> <modifier>*</modifier></type><name>ctx_pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name>hwaccel_picture_private</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DXVA_CONTEXT_VALID</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>ctx_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>fill_picture_parameters</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_vp9_decode_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VP9SharedContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vp9_dxva2_picture_context</name></name> <modifier>*</modifier></type><name>ctx_pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name>hwaccel_picture_private</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>position</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream_size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>position</name> <operator>=</operator> <name>buffer</name> <operator>-</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_slice_short</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_vp9_end_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VP9SharedContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vp9_dxva2_picture_context</name></name> <modifier>*</modifier></type><name>ctx_pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name>hwaccel_picture_private</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_dxva2_common_end_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>commit_bitstream_and_slice_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP9_DXVA2_HWACCEL</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_vp9_dxva2_hwaccel</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vp9_dxva2"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VP9</name></expr>,
<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_dxva2_decode_init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_dxva2_decode_uninit</name></expr>,
<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>dxva2_vp9_start_frame</name></expr>,
<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>dxva2_vp9_decode_slice</name></expr>,
<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>dxva2_vp9_end_frame</name></expr>,
<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>ff_dxva2_common_frame_params</name></expr>,
<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>vp9_dxva2_picture_context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFDXVASharedContext</name></expr></argument>)</argument_list></sizeof></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP9_D3D11VA_HWACCEL</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_vp9_d3d11va_hwaccel</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vp9_d3d11va"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VP9</name></expr>,
<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_D3D11VA_VLD</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_dxva2_decode_init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_dxva2_decode_uninit</name></expr>,
<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>dxva2_vp9_start_frame</name></expr>,
<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>dxva2_vp9_decode_slice</name></expr>,
<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>dxva2_vp9_end_frame</name></expr>,
<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>ff_dxva2_common_frame_params</name></expr>,
<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>vp9_dxva2_picture_context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFDXVASharedContext</name></expr></argument>)</argument_list></sizeof></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP9_D3D11VA2_HWACCEL</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_vp9_d3d11va2_hwaccel</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vp9_d3d11va2"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VP9</name></expr>,
<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_D3D11</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_dxva2_decode_init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_dxva2_decode_uninit</name></expr>,
<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>dxva2_vp9_start_frame</name></expr>,
<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>dxva2_vp9_decode_slice</name></expr>,
<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>dxva2_vp9_end_frame</name></expr>,
<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>ff_dxva2_common_frame_params</name></expr>,
<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>vp9_dxva2_picture_context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFDXVASharedContext</name></expr></argument>)</argument_list></sizeof></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
