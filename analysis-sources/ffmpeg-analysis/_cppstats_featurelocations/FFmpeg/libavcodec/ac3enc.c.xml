<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\ac3enc.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"me_cmp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audiodsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ac3dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ac3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ac3enc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eac3enc.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>AC3Mant</name> <block>{
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>qmant1_ptr</name></decl>, <modifier>*</modifier><name>qmant2_ptr</name>, <modifier>*</modifier><name>qmant4_ptr</name>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mant1_cnt</name></decl>, <name>mant2_cnt</name>, <name>mant4_cnt</name>;</decl_stmt> 
}</block></struct></type> <name>AC3Mant</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMIXLEV_NUM_OPTIONS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>cmixlev_options</name><index>[<expr><name>CMIXLEV_NUM_OPTIONS</name></expr>]</index></name> <init>= <expr><block>{
<expr><name>LEVEL_MINUS_3DB</name></expr>, <expr><name>LEVEL_MINUS_4POINT5DB</name></expr>, <expr><name>LEVEL_MINUS_6DB</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SURMIXLEV_NUM_OPTIONS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>surmixlev_options</name><index>[<expr><name>SURMIXLEV_NUM_OPTIONS</name></expr>]</index></name> <init>= <expr><block>{
<expr><name>LEVEL_MINUS_3DB</name></expr>, <expr><name>LEVEL_MINUS_6DB</name></expr>, <expr><name>LEVEL_ZERO</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTMIXLEV_NUM_OPTIONS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>extmixlev_options</name><index>[<expr><name>EXTMIXLEV_NUM_OPTIONS</name></expr>]</index></name> <init>= <expr><block>{
<expr><name>LEVEL_PLUS_3DB</name></expr>, <expr><name>LEVEL_PLUS_1POINT5DB</name></expr>, <expr><name>LEVEL_ONE</name></expr>, <expr><name>LEVEL_MINUS_4POINT5DB</name></expr>,
<expr><name>LEVEL_MINUS_3DB</name></expr>, <expr><name>LEVEL_MINUS_4POINT5DB</name></expr>, <expr><name>LEVEL_MINUS_6DB</name></expr>, <expr><name>LEVEL_ZERO</name></expr>
}</block></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>exponent_group_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name><name>ff_ac3_channel_layouts</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>AV_CH_LAYOUT_MONO</name></expr>,
<expr><name>AV_CH_LAYOUT_STEREO</name></expr>,
<expr><name>AV_CH_LAYOUT_2_1</name></expr>,
<expr><name>AV_CH_LAYOUT_SURROUND</name></expr>,
<expr><name>AV_CH_LAYOUT_2_2</name></expr>,
<expr><name>AV_CH_LAYOUT_QUAD</name></expr>,
<expr><name>AV_CH_LAYOUT_4POINT0</name></expr>,
<expr><name>AV_CH_LAYOUT_5POINT0</name></expr>,
<expr><name>AV_CH_LAYOUT_5POINT0_BACK</name></expr>,
<expr><operator>(</operator><name>AV_CH_LAYOUT_MONO</name> <operator>|</operator> <name>AV_CH_LOW_FREQUENCY</name><operator>)</operator></expr>,
<expr><operator>(</operator><name>AV_CH_LAYOUT_STEREO</name> <operator>|</operator> <name>AV_CH_LOW_FREQUENCY</name><operator>)</operator></expr>,
<expr><operator>(</operator><name>AV_CH_LAYOUT_2_1</name> <operator>|</operator> <name>AV_CH_LOW_FREQUENCY</name><operator>)</operator></expr>,
<expr><operator>(</operator><name>AV_CH_LAYOUT_SURROUND</name> <operator>|</operator> <name>AV_CH_LOW_FREQUENCY</name><operator>)</operator></expr>,
<expr><operator>(</operator><name>AV_CH_LAYOUT_2_2</name> <operator>|</operator> <name>AV_CH_LOW_FREQUENCY</name><operator>)</operator></expr>,
<expr><operator>(</operator><name>AV_CH_LAYOUT_QUAD</name> <operator>|</operator> <name>AV_CH_LOW_FREQUENCY</name><operator>)</operator></expr>,
<expr><operator>(</operator><name>AV_CH_LAYOUT_4POINT0</name> <operator>|</operator> <name>AV_CH_LOW_FREQUENCY</name><operator>)</operator></expr>,
<expr><name>AV_CH_LAYOUT_5POINT1</name></expr>,
<expr><name>AV_CH_LAYOUT_5POINT1_BACK</name></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>







<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ac3_bandwidth_tab</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">19</literal></expr>]</index></name> <init>= <expr><block>{


<expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">56</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr> }</block></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>










<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>ac3_coupling_start_tab</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">19</literal></expr>]</index></name> <init>= <expr><block>{



<expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,


<expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,


<expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,


<expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,


<expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,


<expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>








<function><type><name>void</name></type> <name>ff_ac3_adjust_frame_size</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits_written</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>samples_written</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bits_written</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samples_written</name></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size_min</name></name> <operator>+</operator>
<literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bits_written</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>samples_written</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bits_written</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samples_written</name></name> <operator>+=</operator> <name>AC3_BLOCK_SIZE</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>ff_ac3_compute_coupling_strategy</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>got_cpl_snr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_cpl_blocks</name></decl>;</decl_stmt>



<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cpl_on</name></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>



<expr_stmt><expr><name>got_cpl_snr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num_cpl_blocks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>num_cpl_channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>num_cpl_channels</name></name> <operator>+=</operator> <name><name>block</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>num_cpl_channels</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num_cpl_blocks</name> <operator>+=</operator> <name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>num_cpl_channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>new_cpl_strategy</name></name> <operator>=</operator> <operator>!</operator><name>blk</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>blk</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>new_cpl_strategy</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>new_cpl_leak</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>new_cpl_strategy</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>blk</name> <operator>||</operator> <operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_cpl_snr</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>new_snr_offsets</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>got_cpl_snr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>new_snr_offsets</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num_cpl_blocks</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cpl_on</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>CPL_CH</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bandwidth_code</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">73</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>ff_ac3_apply_rematrixing</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nb_coefs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>, <decl><type ref="prev"/><name>bnd</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>flags</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rematrixing_enabled</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>new_rematrixing_strategy</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>rematrixing_flags</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nb_coefs</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>bnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bnd</name> <operator>&lt;</operator> <name><name>block</name><operator>-&gt;</operator><name>num_rematrixing_bands</name></name></expr>;</condition> <incr><expr><name>bnd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>flags</name><index>[<expr><name>bnd</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>ff_ac3_rematrix_band_tab</name><index>[<expr><name>bnd</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>nb_coefs</name></expr></argument>, <argument><expr><name><name>ff_ac3_rematrix_band_tab</name><index>[<expr><name>bnd</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>lt</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>fixed_coef</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>rt</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>fixed_coef</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>fixed_coef</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>lt</name> <operator>+</operator> <name>rt</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>fixed_coef</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>lt</name> <operator>-</operator> <name>rt</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>exponent_init</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>expstr</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>grpsize</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>expstr</name> <operator>=</operator> <name>EXP_D15</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>expstr</name> <operator>&lt;=</operator> <name>EXP_D45</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>expstr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>grpsize</name> <operator>=</operator> <literal type="number">3</literal> <operator>&lt;&lt;</operator> <name>expstr</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">12</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>exponent_group_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>expstr</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name>grpsize</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator> <operator>/</operator> <name>grpsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>exponent_group_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>expstr</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>)</operator> <operator>/</operator> <name>grpsize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>exponent_group_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_EAC3_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_eac3_exponent_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>extract_exponents</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cpl_on</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chan_size</name> <init>= <expr><name>AC3_MAX_COEFS</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <name>ch</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>ac3dsp</name><operator>.</operator><name>extract_exponents</name></name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>exp</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>fixed_coef</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>chan_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXP_DIFF_THRESHOLD</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>exp_strategy_reuse_tab</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>EXP_D15</name></expr>, <expr><name>EXP_D15</name></expr>, <expr><name>EXP_D15</name></expr>, <expr><name>EXP_D15</name></expr>, <expr><name>EXP_D15</name></expr>, <expr><name>EXP_D15</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXP_D15</name></expr>, <expr><name>EXP_D15</name></expr>, <expr><name>EXP_D15</name></expr>, <expr><name>EXP_D15</name></expr>, <expr><name>EXP_D15</name></expr>, <expr><name>EXP_D15</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXP_D25</name></expr>, <expr><name>EXP_D25</name></expr>, <expr><name>EXP_D15</name></expr>, <expr><name>EXP_D15</name></expr>, <expr><name>EXP_D15</name></expr>, <expr><name>EXP_D15</name></expr> }</block></expr>,
<expr><block>{ <expr><name>EXP_D45</name></expr>, <expr><name>EXP_D25</name></expr>, <expr><name>EXP_D25</name></expr>, <expr><name>EXP_D15</name></expr>, <expr><name>EXP_D15</name></expr>, <expr><name>EXP_D15</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_exp_strategy</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>blk</name></decl>, <decl><type ref="prev"/><name>blk1</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cpl_on</name></name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>exp_strategy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>exp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>exp</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exp_diff</name></decl>;</decl_stmt>



<expr_stmt><expr><name><name>exp_strategy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>EXP_NEW</name></expr>;</expr_stmt>
<expr_stmt><expr><name>exp</name> <operator>+=</operator> <name>AC3_MAX_COEFS</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr><operator>,</operator> <expr><name>exp</name> <operator>+=</operator> <name>AC3_MAX_COEFS</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>CPL_CH</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cpl_in_use</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>exp_strategy</name><index>[<expr><name>blk</name></expr>]</index></name> <operator>=</operator> <name>EXP_NEW</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name><operator>.</operator><name>cpl_in_use</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>exp_strategy</name><index>[<expr><name>blk</name></expr>]</index></name> <operator>=</operator> <name>EXP_REUSE</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name><operator>.</operator><name><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>exp_strategy</name><index>[<expr><name>blk</name></expr>]</index></name> <operator>=</operator> <name>EXP_NEW</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>exp_diff</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>sad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>NULL</name><operator>,</operator> <name>exp</name><operator>,</operator> <name>exp</name> <operator>-</operator> <name>AC3_MAX_COEFS</name><operator>,</operator> <literal type="number">16</literal><operator>,</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>exp_strategy</name><index>[<expr><name>blk</name></expr>]</index></name> <operator>=</operator> <name>EXP_REUSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>CPL_CH</name> <operator>&amp;&amp;</operator> <name>exp_diff</name> <operator>&gt;</operator> <operator>(</operator><name>EXP_DIFF_THRESHOLD</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name><operator>.</operator><name><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <name>AC3_MAX_COEFS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>exp_strategy</name><index>[<expr><name>blk</name></expr>]</index></name> <operator>=</operator> <name>EXP_NEW</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&gt;</operator> <name>CPL_CH</name> <operator>&amp;&amp;</operator> <name>exp_diff</name> <operator>&gt;</operator> <name>EXP_DIFF_THRESHOLD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>exp_strategy</name><index>[<expr><name>blk</name></expr>]</index></name> <operator>=</operator> <name>EXP_NEW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>



<expr_stmt><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>blk1</name> <operator>=</operator> <name>blk</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>blk1</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>&amp;&amp;</operator> <name><name>exp_strategy</name><index>[<expr><name>blk1</name></expr>]</index></name> <operator>==</operator> <name>EXP_REUSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>blk1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>exp_strategy</name><index>[<expr><name>blk</name></expr>]</index></name> <operator>=</operator> <name><name>exp_strategy_reuse_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>num_blks_code</name></name></expr>]</index><index>[<expr><name>blk1</name><operator>-</operator><name>blk</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>blk</name> <operator>=</operator> <name>blk1</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lfe_on</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lfe_channel</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>EXP_D15</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name> <operator>=</operator> <name>EXP_REUSE</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>CONFIG_EAC3_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_eac3_get_frame_exp_strategy</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_exponents_blk_ch</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_exps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exp_strategy</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>cpl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nb_groups</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nb_groups</name> <operator>=</operator> <name><name>exponent_group_tab</name><index>[<expr><name>cpl</name></expr>]</index><index>[<expr><name>exp_strategy</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>nb_exps</name></expr>]</index></name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>


<switch>switch<condition>(<expr><name>exp_strategy</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EXP_D25</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">1</literal><operator>-</operator><name>cpl</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>nb_groups</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>exp_min</name> <init>= <expr><name><name>exp</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>exp</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>exp_min</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>exp_min</name> <operator>=</operator> <name><name>exp</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>exp</name><index>[<expr><name>i</name><operator>-</operator><name>cpl</name></expr>]</index></name> <operator>=</operator> <name>exp_min</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>EXP_D45</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">1</literal><operator>-</operator><name>cpl</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>nb_groups</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>exp_min</name> <init>= <expr><name><name>exp</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>exp</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>exp_min</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>exp_min</name> <operator>=</operator> <name><name>exp</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>exp</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <name>exp_min</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>exp_min</name> <operator>=</operator> <name><name>exp</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>exp</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>&lt;</operator> <name>exp_min</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>exp_min</name> <operator>=</operator> <name><name>exp</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>exp</name><index>[<expr><name>i</name><operator>-</operator><name>cpl</name></expr>]</index></name> <operator>=</operator> <name>exp_min</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cpl</name> <operator>&amp;&amp;</operator> <name><name>exp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>exp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>nb_groups</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>exp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>exp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>exp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>exp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>exp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>exp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>cpl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>exp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>exp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<switch>switch <condition>(<expr><name>exp_strategy</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EXP_D25</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>nb_groups</name></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <operator>(</operator><name>nb_groups</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>-</operator><name>cpl</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>exp1</name> <init>= <expr><name><name>exp</name><index>[<expr><name>i</name><operator>-</operator><name>cpl</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>exp</name><index>[<expr><name>k</name><operator>--</operator></expr>]</index></name> <operator>=</operator> <name>exp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>exp</name><index>[<expr><name>k</name><operator>--</operator></expr>]</index></name> <operator>=</operator> <name>exp1</name></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>EXP_D45</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>nb_groups</name></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <operator>(</operator><name>nb_groups</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator><operator>-</operator><name>cpl</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>exp</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>exp</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>exp</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>exp</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>exp</name><index>[<expr><name>i</name><operator>-</operator><name>cpl</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_exponents</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>, <decl><type ref="prev"/><name>blk1</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>cpl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>exp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>exp_strategy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_coefs</name></decl>, <decl><type ref="prev"/><name>num_reuse_blocks</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cpl_on</name></name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>exp</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>exp_strategy</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cpl</name> <operator>=</operator> <operator>(</operator><name>ch</name> <operator>==</operator> <name>CPL_CH</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cpl</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>exp</name> <operator>+=</operator> <name>AC3_MAX_COEFS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>blk</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nb_coefs</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>blk1</name> <operator>=</operator> <name>blk</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>



<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>exp_ref_block</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name> <operator>=</operator> <name>blk</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>blk1</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>&amp;&amp;</operator> <name><name>exp_strategy</name><index>[<expr><name>blk1</name></expr>]</index></name> <operator>==</operator> <name>EXP_REUSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>exp_ref_block</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>blk1</name></expr>]</index></name> <operator>=</operator> <name>blk</name></expr>;</expr_stmt>
<expr_stmt><expr><name>blk1</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>num_reuse_blocks</name> <operator>=</operator> <name>blk1</name> <operator>-</operator> <name>blk</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>ac3dsp</name><operator>.</operator><name>ac3_exponent_min</name></name><argument_list>(<argument><expr><name>exp</name><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>num_reuse_blocks</name></expr></argument>,
<argument><expr><name>AC3_MAX_COEFS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_exponents_blk_ch</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>nb_coefs</name></expr></argument>, <argument><expr><name><name>exp_strategy</name><index>[<expr><name>blk</name></expr>]</index></name></expr></argument>, <argument><expr><name>cpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>exp</name> <operator>+=</operator> <name>AC3_MAX_COEFS</name> <operator>*</operator> <operator>(</operator><name>num_reuse_blocks</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>blk</name> <operator>=</operator> <name>blk1</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ref_bap_set</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>count_exponent_bits</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_groups</name></decl>, <decl><type ref="prev"/><name>bit_count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bit_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>exp_strategy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cpl</name> <init>= <expr><operator>(</operator><name>ch</name> <operator>==</operator> <name>CPL_CH</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_coefs</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>exp_strategy</name> <operator>==</operator> <name>EXP_REUSE</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nb_groups</name> <operator>=</operator> <name><name>exponent_group_tab</name><index>[<expr><name>cpl</name></expr>]</index><index>[<expr><name>exp_strategy</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>nb_coefs</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bit_count</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name>nb_groups</name> <operator>*</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>bit_count</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>ff_ac3_group_exponents</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>cpl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>group_size</name></decl>, <decl><type ref="prev"/><name>nb_groups</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>delta0</name></decl>, <decl><type ref="prev"/><name>delta1</name></decl>, <decl><type ref="prev"/><name>delta2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exp0</name></decl>, <decl><type ref="prev"/><name>exp1</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>exp_strategy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>exp_strategy</name> <operator>==</operator> <name>EXP_REUSE</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cpl</name> <operator>=</operator> <operator>(</operator><name>ch</name> <operator>==</operator> <name>CPL_CH</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>group_size</name> <operator>=</operator> <name>exp_strategy</name> <operator>+</operator> <operator>(</operator><name>exp_strategy</name> <operator>==</operator> <name>EXP_D45</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_groups</name> <operator>=</operator> <name><name>exponent_group_tab</name><index>[<expr><name>cpl</name></expr>]</index><index>[<expr><name>exp_strategy</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>block</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>exp</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>-</operator> <name>cpl</name></expr>;</expr_stmt>


<expr_stmt><expr><name>exp1</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>grouped_exp</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>exp1</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>nb_groups</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>exp0</name> <operator>=</operator> <name>exp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>exp1</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>group_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>delta0</name> <operator>=</operator> <name>exp1</name> <operator>-</operator> <name>exp0</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>delta0</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>delta0</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>exp0</name> <operator>=</operator> <name>exp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>exp1</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>group_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>delta1</name> <operator>=</operator> <name>exp1</name> <operator>-</operator> <name>exp0</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>delta1</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>delta1</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>exp0</name> <operator>=</operator> <name>exp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>exp1</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>group_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>delta2</name> <operator>=</operator> <name>exp1</name> <operator>-</operator> <name>exp0</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>delta2</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>delta2</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>grouped_exp</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>delta0</name> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <name>delta1</name><operator>)</operator> <operator>*</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <name>delta2</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>ff_ac3_process_exponents</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>extract_exponents</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>compute_exp_strategy</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_exponents</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>count_frame_bits_fixed</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>frame_bits_inc</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_bits</name></decl>;</decl_stmt>











<expr_stmt><expr><name>frame_bits</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">35</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>!=</operator> <literal type="number">0x6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>use_frame_exp_strategy</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">5</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lfe_on</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>num_blks_code</name></name> <operator>!=</operator> <literal type="number">0x3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">49</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <name><name>frame_bits_inc</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lfe_on</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>blk</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_bits_fixed</name></name> <operator>=</operator> <name>frame_bits</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>bit_alloc_init</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>slow_decay_code</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fast_decay_code</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>slow_gain_code</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>db_per_bit_code</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>floor_code</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fast_gain_code</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coarse_snr_offset</name></name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>




<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc</name><operator>.</operator><name>slow_decay</name></name> <operator>=</operator> <name><name>ff_ac3_slow_decay_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>slow_decay_code</name></name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_alloc</name><operator>.</operator><name>sr_shift</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc</name><operator>.</operator><name>fast_decay</name></name> <operator>=</operator> <name><name>ff_ac3_fast_decay_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fast_decay_code</name></name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_alloc</name><operator>.</operator><name>sr_shift</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc</name><operator>.</operator><name>slow_gain</name></name> <operator>=</operator> <name><name>ff_ac3_slow_gain_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>slow_gain_code</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc</name><operator>.</operator><name>db_per_bit</name></name> <operator>=</operator> <name><name>ff_ac3_db_per_bit_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>db_per_bit_code</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc</name><operator>.</operator><name>floor</name></name> <operator>=</operator> <name><name>ff_ac3_floor_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>floor_code</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc</name><operator>.</operator><name>cpl_fast_leak</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc</name><operator>.</operator><name>cpl_slow_leak</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>count_frame_bits_fixed</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>count_frame_bits</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AC3EncOptions</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>options</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>eac3_mixing_metadata</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&gt;</operator> <name>AC3_CHMODE_STEREO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>has_center</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>has_surround</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>lfe_on</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&lt;</operator> <name>AC3_CHMODE_STEREO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>eac3_info_metadata</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <name>AC3_CHMODE_STEREO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&gt;=</operator> <name>AC3_CHMODE_2F2R</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>audio_production_info</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&gt;</operator> <name>AC3_CHMODE_MONO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>new_cpl_strategy</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cpl_on</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>use_frame_exp_strategy</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">5</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>cpl_on</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name><operator>.</operator><name>cpl_in_use</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>audio_production_info</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_id</name></name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>extended_bsi_1</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>extended_bsi_2</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>new_cpl_strategy</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>!=</operator> <name>AC3_CHMODE_STEREO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <name>AC3_CHMODE_STEREO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>num_cpl_subbands</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>||</operator> <name><name>block</name><operator>-&gt;</operator><name>new_cpl_coords</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>new_cpl_coords</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>num_cpl_bands</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <name>AC3_CHMODE_STEREO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>||</operator> <name>blk</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name><operator>.</operator><name>new_rematrixing_strategy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <name><name>block</name><operator>-&gt;</operator><name>num_rematrixing_bands</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name> <operator>!=</operator> <name>EXP_REUSE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>&amp;&amp;</operator> <name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>new_snr_offsets</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">6</literal> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>||</operator> <name><name>block</name><operator>-&gt;</operator><name>new_cpl_leak</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>new_cpl_leak</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_bits_fixed</name></name> <operator>+</operator> <name>frame_bits</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>bit_alloc_masking</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name> <operator>!=</operator> <name>EXP_REUSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_ac3_bit_alloc_calc_psd</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>exp</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>block</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>psd</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>block</name><operator>-&gt;</operator><name>band_psd</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_ac3_bit_alloc_calc_mask</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bit_alloc</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>band_psd</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>ff_ac3_fast_gain_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fast_gain_code</name><index>[<expr><name>ch</name></expr>]</index></name></expr>]</index></name></expr></argument>,
<argument><expr><name>ch</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>lfe_channel</name></name></expr></argument>,
<argument><expr><name>DBA_NONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>block</name><operator>-&gt;</operator><name>mask</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_block_bap</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref_bap</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ref_bap</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>bap_buffer</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ref_bap_set</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ref_bap</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bap_buffer</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ref_bap</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name> <operator>=</operator> <name>ref_bap</name> <operator>+</operator> <name>AC3_MAX_COEFS</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>exp_ref_block</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>ref_bap</name> <operator>+=</operator> <name>AC3_MAX_COEFS</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ref_bap_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type> <name>count_mantissa_bits_init</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name><name>mant_cnt</name><index>[<expr><name>AC3_MAX_BLOCKS</name></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name>AC3_MAX_BLOCKS</name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>mant_cnt</name><index>[<expr><name>blk</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>mant_cnt</name><index>[<expr><name>blk</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mant_cnt</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>mant_cnt</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mant_cnt</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>void</name></type> <name>count_mantissa_bits_update_ch</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name><name>mant_cnt</name><index>[<expr><name>AC3_MAX_BLOCKS</name></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>CPL_CH</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>ac3dsp</name><operator>.</operator><name>update_bap_counts</name></name><argument_list>(<argument><expr><name><name>mant_cnt</name><index>[<expr><name>blk</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ref_bap</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name> <operator>+</operator> <name>start</name></expr></argument>,
<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>count_mantissa_bits</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>max_end_freq</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><name>mant_cnt</name></expr></argument>, <argument><expr><index>[<expr><name>AC3_MAX_BLOCKS</name></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">16</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>count_mantissa_bits_init</name><argument_list>(<argument><expr><name>mant_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_end_freq</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bandwidth_code</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">73</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cpl_enabled</name></name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>count_mantissa_bits_update_ch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>mant_cnt</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,
<argument><expr><name>max_end_freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><call><name><name>s</name><operator>-&gt;</operator><name>ac3dsp</name><operator>.</operator><name>compute_mantissa_size</name></name><argument_list>(<argument><expr><name>mant_cnt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>int</name></type> <name>bit_alloc</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>snr_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<expr_stmt><expr><name>snr_offset</name> <operator>=</operator> <operator>(</operator><name>snr_offset</name> <operator>-</operator> <literal type="number">240</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_block_bap</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name> <operator>!=</operator> <name>EXP_REUSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>ac3dsp</name><operator>.</operator><name>bit_alloc_calc_bap</name></name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>mask</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>psd</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,
<argument><expr><name>snr_offset</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc</name><operator>.</operator><name>floor</name></name></expr></argument>,
<argument><expr><name>ff_ac3_bap_tab</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ref_bap</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><call><name>count_mantissa_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>cbr_bit_allocation</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits_left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>snr_offset</name></decl>, <decl><type ref="prev"/><name>snr_incr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bits_left</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>-</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>exponent_bits</name></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bits_left</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>snr_offset</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>coarse_snr_offset</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>snr_offset</name> <operator>|</operator> <name><name>s</name><operator>-&gt;</operator><name>fine_snr_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">1023</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bit_alloc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>bits_left</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>snr_offset</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>bit_alloc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>snr_offset</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>bits_left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>snr_offset</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>snr_offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bap_buffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bap1_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>snr_incr</name> <operator>=</operator> <literal type="number">64</literal></expr>;</init> <condition><expr><name>snr_incr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>snr_incr</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<while>while <condition>(<expr><name>snr_offset</name> <operator>+</operator> <name>snr_incr</name> <operator>&lt;=</operator> <literal type="number">1023</literal> <operator>&amp;&amp;</operator>
<call><name>bit_alloc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>snr_offset</name> <operator>+</operator> <name>snr_incr</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>bits_left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>snr_offset</name> <operator>+=</operator> <name>snr_incr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bap_buffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bap1_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bap_buffer</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bap1_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_block_bap</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coarse_snr_offset</name></name> <operator>=</operator> <name>snr_offset</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cpl_on</name></name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fine_snr_offset</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name>snr_offset</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>ff_ac3_compute_bit_allocation</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>count_frame_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>exponent_bits</name></name> <operator>=</operator> <call><name>count_exponent_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bit_alloc_masking</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>cbr_bit_allocation</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>sym_quant</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>levels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>levels</name> <operator>*</operator> <name>c</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">24</literal> <operator>-</operator> <name>e</name><operator>)</operator><operator>)</operator> <operator>+</operator> <name>levels</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>v</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;</operator> <name>levels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>asym_quant</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qbits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>e</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">24</literal> <operator>-</operator> <name>qbits</name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>qbits</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>c</name> <operator>&gt;=</operator> <operator>-</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>void</name></type> <name>quantize_mantissas_blk_ch</name><parameter_list>(<parameter><decl><type><name>AC3Mant</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>fixed_coef</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bap</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>qmant</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_freq</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>end_freq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start_freq</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end_freq</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>fixed_coef</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name><name>exp</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>bap</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sym_quant</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mant1_cnt</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qmant1_ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>qmant</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">9</literal> <operator>*</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mant1_cnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>qmant1_ptr</name></name> <operator>+=</operator> <literal type="number">3</literal> <operator>*</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mant1_cnt</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>qmant1_ptr</name></name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mant1_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sym_quant</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mant2_cnt</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qmant2_ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>qmant</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">25</literal> <operator>*</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mant2_cnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>qmant2_ptr</name></name> <operator>+=</operator> <literal type="number">5</literal> <operator>*</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mant2_cnt</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>qmant2_ptr</name></name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mant2_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sym_quant</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sym_quant</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mant4_cnt</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qmant4_ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>qmant</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">11</literal> <operator>*</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mant4_cnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>qmant4_ptr</name></name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mant4_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sym_quant</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">14</literal></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>asym_quant</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">15</literal></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>asym_quant</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>asym_quant</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>v</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>qmant</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><name>void</name></type> <name>ff_ac3_quantize_mantissas</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>ch0</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>got_cpl</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AC3Mant</name></type> <name>m</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>got_cpl</name> <operator>=</operator> <operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_cpl</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>block</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ch0</name> <operator>=</operator> <name>ch</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>CPL_CH</name></expr>;</expr_stmt>
<expr_stmt><expr><name>got_cpl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>quantize_mantissas_blk_ch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>fixed_coef</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>exp_ref_block</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>exp</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ref_bap</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>qmant</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>CPL_CH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>ch0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>ac3_output_frame_header</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AC3EncOptions</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>options</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x0b77</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc</name><operator>.</operator><name>sr_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size_code</name></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size_min</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>!=</operator> <name>AC3_CHMODE_MONO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>center_mix_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&amp;</operator> <literal type="number">0x04</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>surround_mix_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <name>AC3_CHMODE_STEREO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>dolby_surround_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_on</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>-</operator><name><name>opt</name><operator>-&gt;</operator><name>dialogue_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>audio_production_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>audio_production_info</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>mixing_level</name></name> <operator>-</operator> <literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>room_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>copyright</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>original</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_id</name></name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>extended_bsi_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>extended_bsi_1</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>preferred_stereo_downmix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ltrt_center_mix_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ltrt_surround_mix_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>loro_center_mix_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>loro_surround_mix_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>extended_bsi_2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>extended_bsi_2</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>dolby_surround_ex_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>dolby_headphone_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>ad_converter_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>output_audio_block</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>baie</name></decl>, <decl><type ref="prev"/><name>bnd</name></decl>, <decl><type ref="prev"/><name>got_cpl</name></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>ch0</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>new_cpl_strategy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>new_cpl_strategy</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>start_sub</name></decl>, <decl><type ref="prev"/><name>end_sub</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>!=</operator> <name>AC3_CHMODE_STEREO</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <name>AC3_CHMODE_STEREO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>start_sub</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>CPL_CH</name></expr>]</index></name> <operator>-</operator> <literal type="number">37</literal><operator>)</operator> <operator>/</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>end_sub</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>cpl_end_freq</name></name> <operator>-</operator> <literal type="number">37</literal><operator>)</operator> <operator>/</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>start_sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>end_sub</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>bnd</name> <operator>=</operator> <name>start_sub</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>bnd</name> <operator>&lt;</operator> <name>end_sub</name></expr>;</condition> <incr><expr><name>bnd</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ff_eac3_default_cpl_band_struct</name><index>[<expr><name>bnd</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>||</operator> <name><name>block</name><operator>-&gt;</operator><name>new_cpl_coords</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>new_cpl_coords</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>new_cpl_coords</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>cpl_master_exp</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>bnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bnd</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_cpl_bands</name></name></expr>;</condition> <incr><expr><name>bnd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>cpl_coord_exp</name> <index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>cpl_coord_mant</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <name>AC3_CHMODE_STEREO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>||</operator> <name>blk</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>new_rematrixing_strategy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>new_rematrixing_strategy</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>bnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bnd</name> <operator>&lt;</operator> <name><name>block</name><operator>-&gt;</operator><name>num_rematrixing_bands</name></name></expr>;</condition> <incr><expr><name>bnd</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>rematrixing_flags</name><index>[<expr><name>bnd</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lfe_on</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>lfe_channel</name></name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name> <operator>!=</operator> <name>EXP_REUSE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bandwidth_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nb_groups</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cpl</name> <init>= <expr><operator>(</operator><name>ch</name> <operator>==</operator> <name>CPL_CH</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name> <operator>==</operator> <name>EXP_REUSE</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>grouped_exp</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>cpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>nb_groups</name> <operator>=</operator> <name><name>exponent_group_tab</name><index>[<expr><name>cpl</name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>block</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>nb_groups</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>grouped_exp</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>lfe_channel</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>cpl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>baie</name> <operator>=</operator> <operator>(</operator><name>blk</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>baie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>baie</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>slow_decay_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fast_decay_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>slow_gain_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>db_per_bit_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>floor_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>new_snr_offsets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>new_snr_offsets</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>coarse_snr_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fine_snr_offset</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fast_gain_code</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>||</operator> <name><name>block</name><operator>-&gt;</operator><name>new_cpl_leak</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>new_cpl_leak</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>new_cpl_leak</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc</name><operator>.</operator><name>cpl_fast_leak</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc</name><operator>.</operator><name>cpl_slow_leak</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>got_cpl</name> <operator>=</operator> <operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_cpl</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>block</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ch0</name> <operator>=</operator> <name>ch</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>CPL_CH</name></expr>;</expr_stmt>
<expr_stmt><expr><name>got_cpl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>block</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>qmant</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ref_bap</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>put_bits</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>put_bits</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>put_bits</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <break>break;</break>
<case>case <expr><literal type="number">14</literal></expr>:</case> <expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">15</literal></expr>:</case> <expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>CPL_CH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>ch0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRC16_POLY</name></cpp:macro> <cpp:value>((1 &lt;&lt; 0) | (1 &lt;&lt; 2) | (1 &lt;&lt; 15) | (1 &lt;&lt; 16))</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>mul_poly</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>poly</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>a</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>^=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>^=</operator> <name>poly</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>pow_poly</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>poly</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mul_poly</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>poly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>mul_poly</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>poly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>output_frame_end</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCRC</name> <modifier>*</modifier></type><name>crc_ctx</name> <init>= <expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_16_ANSI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_size_58</name></decl>, <decl><type ref="prev"/><name>pad_bytes</name></decl>, <decl><type ref="prev"/><name>crc1</name></decl>, <decl><type ref="prev"/><name>crc2_partial</name></decl>, <decl><type ref="prev"/><name>crc2</name></decl>, <decl><type ref="prev"/><name>crc_inv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<expr_stmt><expr><name>frame_size_58</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>frame</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pad_bytes</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>-</operator> <operator>(</operator><call><name>put_bits_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>frame</name><operator>)</operator> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>pad_bytes</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pad_bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>put_bits_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pad_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>crc2_partial</name> <operator>=</operator> <call><name>av_crc</name><argument_list>(<argument><expr><name>crc_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>frame</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>-</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>crc1</name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><call><name>av_crc</name><argument_list>(<argument><expr><name>crc_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>frame</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>frame_size_58</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>crc_inv</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>crc_inv</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size_min</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>crc1</name> <operator>=</operator> <call><name>mul_poly</name><argument_list>(<argument><expr><name>crc_inv</name></expr></argument>, <argument><expr><name>crc1</name></expr></argument>, <argument><expr><name>CRC16_POLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>frame</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>crc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>crc2_partial</name> <operator>=</operator> <call><name>av_crc</name><argument_list>(<argument><expr><name>crc_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>frame</name> <operator>+</operator> <name>frame_size_58</name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>-</operator> <name>frame_size_58</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>crc2</name> <operator>=</operator> <call><name>av_crc</name><argument_list>(<argument><expr><name>crc_ctx</name></expr></argument>, <argument><expr><name>crc2_partial</name></expr></argument>, <argument><expr><name>frame</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>crc2</name> <operator>==</operator> <literal type="number">0x770B</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>^=</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>crc2</name> <operator>=</operator> <call><name>av_crc</name><argument_list>(<argument><expr><name>crc_ctx</name></expr></argument>, <argument><expr><name>crc2_partial</name></expr></argument>, <argument><expr><name>frame</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>crc2</name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><name>crc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>frame</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>crc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>ff_ac3_output_frame</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AC3_MAX_CODED_FRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>output_frame_header</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>output_audio_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>output_frame_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>dprint_options</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AC3EncOptions</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>options</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>strbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"AC-3 (alt syntax)"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"AC-3 (standard)"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"AC-3 (dnet half-rate)"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"AC-3 (dnet quater-rate)"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">16</literal></expr>:</case> <expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"E-AC-3 (enhanced)"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"ERROR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"bitstream_id: %s (%d)\n"</literal></expr></argument>, <argument><expr><name>strbuf</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"sample_fmt: %s\n"</literal></expr></argument>, <argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_get_channel_layout_string</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"channel_layout: %s\n"</literal></expr></argument>, <argument><expr><name>strbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"sample_rate: %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"bit_rate: %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"blocks/frame: %d (code=%d)\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>num_blks_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cutoff</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"cutoff: %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cutoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"per_frame_metadata: %s\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>opt</name><operator>-&gt;</operator><name>allow_per_frame_metadata</name></name></expr>?</condition><then><expr><literal type="string">"on"</literal></expr></then><else>:<expr><literal type="string">"off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>has_center</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"center_mixlev: %0.3f (%d)\n"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>center_mix_level</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>center_mix_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"center_mixlev: {not written}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>has_surround</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"surround_mixlev: %0.3f (%d)\n"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>surround_mix_level</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>surround_mix_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"surround_mixlev: {not written}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>audio_production_info</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"mixing_level: %ddB\n"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>mixing_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>room_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AC3ENC_OPT_NOT_INDICATED</name></expr>:</case> <expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"notindicated"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AC3ENC_OPT_LARGE_ROOM</name></expr>:</case> <expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"large"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AC3ENC_OPT_SMALL_ROOM</name></expr>:</case> <expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"small"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"ERROR (%d)"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>room_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"room_type: %s\n"</literal></expr></argument>, <argument><expr><name>strbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"mixing_level: {not written}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"room_type: {not written}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"copyright: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>opt</name><operator>-&gt;</operator><name>copyright</name></name></expr>?</condition><then><expr><literal type="string">"on"</literal></expr></then><else>:<expr><literal type="string">"off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"dialnorm: %ddB\n"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>dialogue_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <name>AC3_CHMODE_STEREO</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>dolby_surround_mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AC3ENC_OPT_NOT_INDICATED</name></expr>:</case> <expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"notindicated"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AC3ENC_OPT_MODE_ON</name></expr>:</case> <expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AC3ENC_OPT_MODE_OFF</name></expr>:</case> <expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"ERROR (%d)"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>dolby_surround_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"dsur_mode: %s\n"</literal></expr></argument>, <argument><expr><name>strbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"dsur_mode: {not written}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"original: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>opt</name><operator>-&gt;</operator><name>original</name></name></expr>?</condition><then><expr><literal type="string">"on"</literal></expr></then><else>:<expr><literal type="string">"off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_id</name></name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>extended_bsi_1</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>preferred_stereo_downmix</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AC3ENC_OPT_NOT_INDICATED</name></expr>:</case> <expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"notindicated"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AC3ENC_OPT_DOWNMIX_LTRT</name></expr>:</case> <expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"ltrt"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AC3ENC_OPT_DOWNMIX_LORO</name></expr>:</case> <expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"loro"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"ERROR (%d)"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>preferred_stereo_downmix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"dmix_mode: %s\n"</literal></expr></argument>, <argument><expr><name>strbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"ltrt_cmixlev: %0.3f (%d)\n"</literal></expr></argument>,
<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>ltrt_center_mix_level</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ltrt_center_mix_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"ltrt_surmixlev: %0.3f (%d)\n"</literal></expr></argument>,
<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>ltrt_surround_mix_level</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ltrt_surround_mix_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"loro_cmixlev: %0.3f (%d)\n"</literal></expr></argument>,
<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>loro_center_mix_level</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>loro_center_mix_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"loro_surmixlev: %0.3f (%d)\n"</literal></expr></argument>,
<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>loro_surround_mix_level</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>loro_surround_mix_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"extended bitstream info 1: {not written}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>extended_bsi_2</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>dolby_surround_ex_mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AC3ENC_OPT_NOT_INDICATED</name></expr>:</case> <expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"notindicated"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AC3ENC_OPT_MODE_ON</name></expr>:</case> <expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AC3ENC_OPT_MODE_OFF</name></expr>:</case> <expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"ERROR (%d)"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>dolby_surround_ex_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"dsurex_mode: %s\n"</literal></expr></argument>, <argument><expr><name>strbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>dolby_headphone_mode</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AC3ENC_OPT_NOT_INDICATED</name></expr>:</case> <expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"notindicated"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AC3ENC_OPT_MODE_ON</name></expr>:</case> <expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AC3ENC_OPT_MODE_OFF</name></expr>:</case> <expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"ERROR (%d)"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>dolby_headphone_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"dheadphone_mode: %s\n"</literal></expr></argument>, <argument><expr><name>strbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>ad_converter_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AC3ENC_OPT_ADCONV_STANDARD</name></expr>:</case> <expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"standard"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AC3ENC_OPT_ADCONV_HDCD</name></expr>:</case> <expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"hdcd"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"ERROR (%d)"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>ad_converter_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"ad_conv_type: %s\n"</literal></expr></argument>, <argument><expr><name>strbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"extended bitstream info 2: {not written}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_OPTION_THRESHOLD</name></cpp:macro> <cpp:value>0.01</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>validate_float_option</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>v_list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v_list_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>v_list_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>v</name> <argument_list type="generic">&lt; <argument><expr><operator>(</operator><name><name>v_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>FLT_OPTION_THRESHOLD</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name>v</name></expr></argument> &gt;</argument_list></name> <argument_list>(<argument><expr><name><name>v_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>FLT_OPTION_THRESHOLD</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>v_list_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>validate_mix_level</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt_name</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>opt_param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>list</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>list_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>default_value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_value</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ctx_param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mixlev</name> <init>= <expr><call><name>validate_float_option</name><argument_list>(<argument><expr><operator>*</operator><name>opt_param</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>list_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mixlev</name> <operator>&lt;</operator> <name>min_value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mixlev</name> <operator>=</operator> <name>default_value</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>opt_param</name> <operator>&gt;=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"requested %s is not valid. using "</literal>
<literal type="string">"default value: %0.3f\n"</literal></expr></argument>, <argument><expr><name>opt_name</name></expr></argument>, <argument><expr><name><name>list</name><index>[<expr><name>mixlev</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>opt_param</name> <operator>=</operator> <name><name>list</name><index>[<expr><name>mixlev</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ctx_param</name> <operator>=</operator> <name>mixlev</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>ff_ac3_validate_metadata</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AC3EncOptions</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>options</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>audio_production_info</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>extended_bsi_1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>extended_bsi_2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>eac3_mixing_metadata</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>eac3_info_metadata</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&gt;</operator> <name>AC3_CHMODE_STEREO</name> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>preferred_stereo_downmix</name></name> <operator>!=</operator> <name>AC3ENC_OPT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>extended_bsi_1</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>eac3_mixing_metadata</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>has_center</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>ltrt_center_mix_level</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>loro_center_mix_level</name></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>extended_bsi_1</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>eac3_mixing_metadata</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>has_surround</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>ltrt_surround_mix_level</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>loro_surround_mix_level</name></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>extended_bsi_1</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>eac3_mixing_metadata</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>audio_service_type</name></name> <operator>!=</operator> <name>AV_AUDIO_SERVICE_TYPE_MAIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>eac3_info_metadata</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>copyright</name></name> <operator>!=</operator> <name>AC3ENC_OPT_NONE</name> <operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>original</name></name> <operator>!=</operator> <name>AC3ENC_OPT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>eac3_info_metadata</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <name>AC3_CHMODE_STEREO</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>dolby_headphone_mode</name></name> <operator>!=</operator> <name>AC3ENC_OPT_NONE</name> <operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>dolby_surround_mode</name></name> <operator>!=</operator> <name>AC3ENC_OPT_NONE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>eac3_info_metadata</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&gt;=</operator> <name>AC3_CHMODE_2F2R</name> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>dolby_surround_ex_mode</name></name> <operator>!=</operator> <name>AC3ENC_OPT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>eac3_info_metadata</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>mixing_level</name></name> <operator>!=</operator> <name>AC3ENC_OPT_NONE</name> <operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>room_type</name></name> <operator>!=</operator> <name>AC3ENC_OPT_NONE</name> <operator>||</operator>
<name><name>opt</name><operator>-&gt;</operator><name>ad_converter_type</name></name> <operator>!=</operator> <name>AC3ENC_OPT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>audio_production_info</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>eac3_info_metadata</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>mixing_level</name></name> <operator>!=</operator> <name>AC3ENC_OPT_NONE</name> <operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>room_type</name></name> <operator>!=</operator> <name>AC3ENC_OPT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>audio_production_info</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&gt;=</operator> <name>AC3_CHMODE_2F2R</name> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>dolby_surround_ex_mode</name></name> <operator>!=</operator> <name>AC3ENC_OPT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>extended_bsi_2</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <name>AC3_CHMODE_STEREO</name> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>dolby_headphone_mode</name></name> <operator>!=</operator> <name>AC3ENC_OPT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>extended_bsi_2</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>ad_converter_type</name></name> <operator>!=</operator> <name>AC3ENC_OPT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>extended_bsi_2</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>has_center</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>validate_mix_level</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"center_mix_level"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>center_mix_level</name></name></expr></argument>,
<argument><expr><name>cmixlev_options</name></expr></argument>, <argument><expr><name>CMIXLEV_NUM_OPTIONS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>center_mix_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>has_surround</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>validate_mix_level</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"surround_mix_level"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>surround_mix_level</name></name></expr></argument>,
<argument><expr><name>surmixlev_options</name></expr></argument>, <argument><expr><name>SURMIXLEV_NUM_OPTIONS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>surround_mix_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>extended_bsi_1</name></name> <operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>eac3_mixing_metadata</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>preferred_stereo_downmix</name></name> <operator>==</operator> <name>AC3ENC_OPT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>preferred_stereo_downmix</name></name> <operator>=</operator> <name>AC3ENC_OPT_NOT_INDICATED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>has_center</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>validate_mix_level</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"ltrt_center_mix_level"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>ltrt_center_mix_level</name></name></expr></argument>, <argument><expr><name>extmixlev_options</name></expr></argument>,
<argument><expr><name>EXTMIXLEV_NUM_OPTIONS</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ltrt_center_mix_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>validate_mix_level</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"loro_center_mix_level"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>loro_center_mix_level</name></name></expr></argument>, <argument><expr><name>extmixlev_options</name></expr></argument>,
<argument><expr><name>EXTMIXLEV_NUM_OPTIONS</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>loro_center_mix_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>has_surround</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>validate_mix_level</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"ltrt_surround_mix_level"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>ltrt_surround_mix_level</name></name></expr></argument>, <argument><expr><name>extmixlev_options</name></expr></argument>,
<argument><expr><name>EXTMIXLEV_NUM_OPTIONS</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ltrt_surround_mix_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>validate_mix_level</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"loro_surround_mix_level"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>loro_surround_mix_level</name></name></expr></argument>, <argument><expr><name>extmixlev_options</name></expr></argument>,
<argument><expr><name>EXTMIXLEV_NUM_OPTIONS</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>loro_surround_mix_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>audio_service_type</name></name> <operator>==</operator> <name>AV_AUDIO_SERVICE_TYPE_KARAOKE</name> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>audio_service_type</name></name> <operator>==</operator> <name>AV_AUDIO_SERVICE_TYPE_COMMENTARY</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>audio_service_type</name></name> <operator>==</operator> <name>AV_AUDIO_SERVICE_TYPE_EMERGENCY</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>audio_service_type</name></name> <operator>==</operator> <name>AV_AUDIO_SERVICE_TYPE_VOICE_OVER</name><operator>)</operator>
<operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid audio service type for the "</literal>
<literal type="string">"specified number of channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>extended_bsi_2</name></name> <operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>eac3_info_metadata</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>dolby_headphone_mode</name></name> <operator>==</operator> <name>AC3ENC_OPT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>dolby_headphone_mode</name></name> <operator>=</operator> <name>AC3ENC_OPT_NOT_INDICATED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>dolby_surround_ex_mode</name></name> <operator>==</operator> <name>AC3ENC_OPT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>dolby_surround_ex_mode</name></name> <operator>=</operator> <name>AC3ENC_OPT_NOT_INDICATED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>ad_converter_type</name></name> <operator>==</operator> <name>AC3ENC_OPT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>ad_converter_type</name></name> <operator>=</operator> <name>AC3ENC_OPT_ADCONV_STANDARD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>eac3_info_metadata</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>copyright</name></name> <operator>==</operator> <name>AC3ENC_OPT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>copyright</name></name> <operator>=</operator> <name>AC3ENC_OPT_OFF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>original</name></name> <operator>==</operator> <name>AC3ENC_OPT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>original</name></name> <operator>=</operator> <name>AC3ENC_OPT_ON</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>eac3_info_metadata</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>dolby_surround_mode</name></name> <operator>==</operator> <name>AC3ENC_OPT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>dolby_surround_mode</name></name> <operator>=</operator> <name>AC3ENC_OPT_NOT_INDICATED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>audio_production_info</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>mixing_level</name></name> <operator>==</operator> <name>AC3ENC_OPT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mixing_level must be set if "</literal>
<literal type="string">"room_type is set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>mixing_level</name></name> <operator>&lt;</operator> <literal type="number">80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid mixing level. must be between "</literal>
<literal type="string">"80dB and 111dB\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>room_type</name></name> <operator>==</operator> <name>AC3ENC_OPT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>room_type</name></name> <operator>=</operator> <name>AC3ENC_OPT_NOT_INDICATED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>extended_bsi_1</name></name> <operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>extended_bsi_2</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_id</name></name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>bitstream_id</name></name> <operator>&lt;</operator> <literal type="number">11</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>warned_alternate_bitstream</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"alternate bitstream syntax is "</literal>
<literal type="string">"not compatible with reduced samplerates. writing of "</literal>
<literal type="string">"extended bitstream information will be disabled.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>warned_alternate_bitstream</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_id</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><name>av_cold</name> <name>int</name></type> <name>ff_ac3_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>windowed_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bap_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bap1_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mdct_coef_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fixed_coef_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>exp_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>grouped_exp_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psd_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>band_psd_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mask_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>qmant_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cpl_coord_exp_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cpl_coord_mant_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>mdct_coef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>fixed_coef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>exp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>grouped_exp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>psd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>band_psd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>qmant</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>cpl_coord_exp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>cpl_coord_mant</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mdct_end</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mdct_end</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>set_channel_info</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>channel_layout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch_layout</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channels</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>channels</name></expr></argument> &gt;</argument_list></name> <name>AC3_MAX_CHANNELS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>channel_layout</name> <operator>&gt;</operator> <literal type="number">0x7FF</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ch_layout</name> <operator>=</operator> <operator>*</operator><name>channel_layout</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ch_layout</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch_layout</name> <operator>=</operator> <call><name>av_get_default_channel_layout</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_on</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>ch_layout</name> <operator>&amp;</operator> <name>AV_CH_LOW_FREQUENCY</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name> <operator>=</operator> <name>channels</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>lfe_on</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_channel</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_on</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lfe_on</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch_layout</name> <operator>-=</operator> <name>AV_CH_LOW_FREQUENCY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>ch_layout</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CH_LAYOUT_MONO</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>=</operator> <name>AC3_CHMODE_MONO</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_CH_LAYOUT_STEREO</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>=</operator> <name>AC3_CHMODE_STEREO</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_CH_LAYOUT_SURROUND</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>=</operator> <name>AC3_CHMODE_3F</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_CH_LAYOUT_2_1</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>=</operator> <name>AC3_CHMODE_2F1R</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_CH_LAYOUT_4POINT0</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>=</operator> <name>AC3_CHMODE_3F1R</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_CH_LAYOUT_QUAD</name></expr>:</case>
<case>case <expr><name>AV_CH_LAYOUT_2_2</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>=</operator> <name>AC3_CHMODE_2F2R</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>AV_CH_LAYOUT_5POINT0</name></expr>:</case>
<case>case <expr><name>AV_CH_LAYOUT_5POINT0_BACK</name></expr>:</case> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>=</operator> <name>AC3_CHMODE_3F2R</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>has_center</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>!=</operator> <name>AC3_CHMODE_MONO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>has_surround</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&amp;</operator> <literal type="number">0x04</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_map</name></name> <operator>=</operator> <name><name>ff_ac3_enc_channel_map</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>lfe_on</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>channel_layout</name> <operator>=</operator> <name>ch_layout</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lfe_on</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>channel_layout</name> <operator>|=</operator> <name>AV_CH_LOW_FREQUENCY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>validate_options</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>max_sr</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No channel layout specified. The "</literal>
<literal type="string">"encoder will guess the layout, but it "</literal>
<literal type="string">"might be incorrect.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>set_channel_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid channel layout\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>max_sr</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>max_sr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ff_ac3_sample_rate_tab</name><index>[<expr><name>i</name> <operator>%</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>max_sr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid sample rate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc</name><operator>.</operator><name>sr_shift</name></name> <operator>=</operator> <name>i</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc</name><operator>.</operator><name>sr_code</name></name> <operator>=</operator> <name>i</name> <operator>%</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_id</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">8</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_alloc</name><operator>.</operator><name>sr_shift</name></name></expr></else></ternary></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <literal type="number">96000</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <literal type="number">192000</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <literal type="number">320000</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <literal type="number">384000</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <literal type="number">448000</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>max_br</name></decl>, <decl><type ref="prev"/><name>min_br</name></decl>, <decl><type ref="prev"/><name>wpf</name></decl>, <decl><type ref="prev"/><name>min_br_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_blks_code</name></decl>, <decl><type ref="prev"/><name>num_blocks</name></decl>, <decl><type ref="prev"/><name>frame_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>min_br_dist</name></decl>;</decl_stmt>





<for>for <control>(<init><expr><name>num_blks_code</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>num_blks_code</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>num_blks_code</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>num_blocks</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>int</name><index>[]</index></name><operator>)</operator><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr> }</block><operator>)</operator><index>[<expr><name>num_blks_code</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_samples</name> <operator>=</operator> <name>AC3_BLOCK_SIZE</name> <operator>*</operator> <name>num_blocks</name></expr>;</expr_stmt>
<expr_stmt><expr><name>max_br</name> <operator>=</operator> <literal type="number">2048</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <name>frame_samples</name> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>min_br</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>+</operator> <operator>(</operator><name>frame_samples</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>frame_samples</name><operator>)</operator> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&lt;=</operator> <name>max_br</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&lt;</operator> <name>min_br</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <name>max_br</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid bit rate. must be %d to %d "</literal>
<literal type="string">"for this sample rate\n"</literal></expr></argument>, <argument><expr><name>min_br</name></expr></argument>, <argument><expr><name>max_br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_blks_code</name></name> <operator>=</operator> <name>num_blks_code</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>=</operator> <name>num_blocks</name></expr>;</expr_stmt>


<expr_stmt><expr><name>wpf</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <name>frame_samples</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>wpf</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>wpf</name> <operator>&lt;=</operator> <literal type="number">2048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>min_br_code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>min_br_dist</name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">19</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>br_dist</name> <init>= <expr><call><name>llabs</name><argument_list>(<argument><expr><name><name>ff_ac3_bitrate_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">1000</literal> <operator>-</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>br_dist</name> <operator>&lt;</operator> <name>min_br_dist</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>min_br_dist</name> <operator>=</operator> <name>br_dist</name></expr>;</expr_stmt>
<expr_stmt><expr><name>min_br_code</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size_code</name></name> <operator>=</operator> <name>min_br_code</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>wpf</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>wpf</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <name>AC3_FRAME_SIZE</name> <operator>*</operator> <literal type="number">16</literal> <operator>&gt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wpf</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size_min</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>wpf</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>best_br</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>best_code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>best_diff</name> <init>= <expr><name>INT64_MAX</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">19</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>br</name> <init>= <expr><operator>(</operator><name><name>ff_ac3_bitrate_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_alloc</name><operator>.</operator><name>sr_shift</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>diff</name> <init>= <expr><call><name>llabs</name><argument_list>(<argument><expr><name>br</name> <operator>-</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <name>best_diff</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>best_br</name> <operator>=</operator> <name>br</name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_code</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_diff</name> <operator>=</operator> <name>diff</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>best_diff</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name>best_br</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size_code</name></name> <operator>=</operator> <name>best_code</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size_min</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ff_ac3_frame_size_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>frame_size_code</name></name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc</name><operator>.</operator><name>sr_code</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_blks_code</name></name> <operator>=</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size_min</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>cutoff</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid cutoff frequency\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cutoff</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>cutoff</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cutoff</name></name> <operator>&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cutoff</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_ac3_validate_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rematrixing_enabled</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>stereo_rematrixing</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <name>AC3_CHMODE_STEREO</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cpl_enabled</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>channel_coupling</name></name> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&gt;=</operator> <name>AC3_CHMODE_STEREO</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>set_bandwidth</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>cpl_start</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cutoff</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fbw_coeffs</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fbw_coeffs</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cutoff</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>AC3_MAX_COEFS</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bandwidth_code</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name>fbw_coeffs</name> <operator>-</operator> <literal type="number">73</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bandwidth_code</name></name> <operator>=</operator> <name><name>ac3_bandwidth_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc</name><operator>.</operator><name>sr_code</name></name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>frame_size_code</name></name><operator>/</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name><operator>.</operator><name><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bandwidth_code</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">73</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lfe_on</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>lfe_channel</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name><operator>.</operator><name><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cpl_enabled</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>cpl_start</name></name> <operator>!=</operator> <name>AC3ENC_OPT_AUTO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cpl_start</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>cpl_start</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cpl_start</name> <operator>=</operator> <name><name>ac3_coupling_start_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name><operator>-</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc</name><operator>.</operator><name>sr_code</name></name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>frame_size_code</name></name><operator>/</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cpl_start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>channel_coupling</name></name> <operator>==</operator> <name>AC3ENC_OPT_AUTO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cpl_enabled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>cpl_start</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cpl_enabled</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>cpl_start_band</name></decl>, <decl><type ref="prev"/><name>cpl_end_band</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cpl_band_sizes</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cpl_band_sizes</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cpl_end_band</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bandwidth_code</name></name> <operator>/</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cpl_start_band</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>cpl_start</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>cpl_end_band</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_cpl_subbands</name></name> <operator>=</operator> <name>cpl_end_band</name> <operator>-</operator> <name>cpl_start_band</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_cpl_bands</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cpl_band_sizes</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>cpl_start_band</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cpl_end_band</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ff_eac3_default_cpl_band_struct</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cpl_band_sizes</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_cpl_bands</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cpl_band_sizes</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cpl_band_sizes</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>CPL_CH</name></expr>]</index></name> <operator>=</operator> <name>cpl_start_band</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">37</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cpl_end_freq</name></name> <operator>=</operator> <name>cpl_end_band</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">37</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name><operator>.</operator><name><name>end_freq</name><index>[<expr><name>CPL_CH</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cpl_end_freq</name></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>allocate_buffers</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>channel_blocks</name> <init>= <expr><name>channels</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total_coefs</name> <init>= <expr><name>AC3_MAX_COEFS</name> <operator>*</operator> <name>channel_blocks</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>-&gt;</operator><name>allocate_sample_buffers</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>alloc_fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FF_ALLOC_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bap_buffer</name></name></expr></argument>, <argument><expr><name>total_coefs</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>bap_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_ALLOC_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bap1_buffer</name></name></expr></argument>, <argument><expr><name>total_coefs</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>bap1_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mdct_coef_buffer</name></name></expr></argument>, <argument><expr><name>total_coefs</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mdct_coef_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_ALLOC_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>exp_buffer</name></name></expr></argument>, <argument><expr><name>total_coefs</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>exp_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_ALLOC_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>grouped_exp_buffer</name></name></expr></argument>, <argument><expr><name>channel_blocks</name></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>grouped_exp_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_ALLOC_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>psd_buffer</name></name></expr></argument>, <argument><expr><name>total_coefs</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>psd_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_ALLOC_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>band_psd_buffer</name></name></expr></argument>, <argument><expr><name>channel_blocks</name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>band_psd_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_ALLOC_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mask_buffer</name></name></expr></argument>, <argument><expr><name>channel_blocks</name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mask_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_ALLOC_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qmant_buffer</name></name></expr></argument>, <argument><expr><name>total_coefs</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>qmant_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cpl_enabled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FF_ALLOC_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cpl_coord_exp_buffer</name></name></expr></argument>, <argument><expr><name>channel_blocks</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>cpl_coord_exp_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_ALLOC_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cpl_coord_mant_buffer</name></name></expr></argument>, <argument><expr><name>channel_blocks</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>cpl_coord_mant_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>mdct_coef</name></name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>block</name><operator>-&gt;</operator><name>mdct_coef</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>exp</name></name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>block</name><operator>-&gt;</operator><name>exp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>grouped_exp</name></name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>block</name><operator>-&gt;</operator><name>grouped_exp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>psd</name></name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>block</name><operator>-&gt;</operator><name>psd</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>band_psd</name></name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>block</name><operator>-&gt;</operator><name>band_psd</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>block</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>qmant</name></name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>block</name><operator>-&gt;</operator><name>qmant</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cpl_enabled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>cpl_coord_exp</name></name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>block</name><operator>-&gt;</operator><name>cpl_coord_exp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>cpl_coord_mant</name></name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>block</name><operator>-&gt;</operator><name>cpl_coord_mant</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>grouped_exp</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>grouped_exp_buffer</name><index>[<expr><literal type="number">128</literal> <operator>*</operator> <operator>(</operator><name>blk</name> <operator>*</operator> <name>channels</name> <operator>+</operator> <name>ch</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>psd</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psd_buffer</name> <index>[<expr><name>AC3_MAX_COEFS</name> <operator>*</operator> <operator>(</operator><name>blk</name> <operator>*</operator> <name>channels</name> <operator>+</operator> <name>ch</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>band_psd</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>band_psd_buffer</name> <index>[<expr><literal type="number">64</literal> <operator>*</operator> <operator>(</operator><name>blk</name> <operator>*</operator> <name>channels</name> <operator>+</operator> <name>ch</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>mask</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mask_buffer</name> <index>[<expr><literal type="number">64</literal> <operator>*</operator> <operator>(</operator><name>blk</name> <operator>*</operator> <name>channels</name> <operator>+</operator> <name>ch</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>qmant</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>qmant_buffer</name> <index>[<expr><name>AC3_MAX_COEFS</name> <operator>*</operator> <operator>(</operator><name>blk</name> <operator>*</operator> <name>channels</name> <operator>+</operator> <name>ch</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cpl_enabled</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>cpl_coord_exp</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cpl_coord_exp_buffer</name> <index>[<expr><literal type="number">16</literal> <operator>*</operator> <operator>(</operator><name>blk</name> <operator>*</operator> <name>channels</name> <operator>+</operator> <name>ch</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>cpl_coord_mant</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cpl_coord_mant_buffer</name><index>[<expr><literal type="number">16</literal> <operator>*</operator> <operator>(</operator><name>blk</name> <operator>*</operator> <name>channels</name> <operator>+</operator> <name>ch</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>exp</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>exp_buffer</name> <index>[<expr><name>AC3_MAX_COEFS</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>*</operator> <name>ch</name> <operator>+</operator> <name>blk</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>mdct_coef</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mdct_coef_buffer</name> <index>[<expr><name>AC3_MAX_COEFS</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>*</operator> <name>ch</name> <operator>+</operator> <name>blk</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fixed_point</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fixed_coef_buffer</name></name></expr></argument>, <argument><expr><name>total_coefs</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>fixed_coef_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>fixed_coef</name></name></expr></argument>, <argument><expr><name>channels</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>block</name><operator>-&gt;</operator><name>fixed_coef</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>fixed_coef</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fixed_coef_buffer</name><index>[<expr><name>AC3_MAX_COEFS</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>*</operator> <name>ch</name> <operator>+</operator> <name>blk</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>fixed_coef</name></name></expr></argument>, <argument><expr><name>channels</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>block</name><operator>-&gt;</operator><name>fixed_coef</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>fixed_coef</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>block</name><operator>-&gt;</operator><name>mdct_coef</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>alloc_fail</name>:</label>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>av_cold</name> <name>int</name></type> <name>ff_ac3_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>frame_size_58</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_EAC3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>validate_options</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>init_fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name>AC3_BLOCK_SIZE</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>initial_padding</name></name> <operator>=</operator> <name>AC3_BLOCK_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_mode</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>audio_service_type</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_mode</name></name> <operator>==</operator> <name>AV_AUDIO_SERVICE_TYPE_KARAOKE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_mode</name></name> <operator>=</operator> <literal type="number">0x7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bits_written</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samples_written</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>frame_size_58</name> <operator>=</operator> <operator>(</operator><operator>(</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>crc_inv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>pow_poly</name><argument_list>(<argument><expr><operator>(</operator><name>CRC16_POLY</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>frame_size_58</name><operator>)</operator> <operator>-</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>CRC16_POLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc</name><operator>.</operator><name>sr_code</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>frame_size_58</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>crc_inv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>pow_poly</name><argument_list>(<argument><expr><operator>(</operator><name>CRC16_POLY</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>frame_size_58</name><operator>)</operator> <operator>-</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>CRC16_POLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>CONFIG_AC3_FIXED_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>fixed_point</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mdct_end</name></name> <operator>=</operator> <name>ff_ac3_fixed_mdct_end</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mdct_init</name></name> <operator>=</operator> <name>ff_ac3_fixed_mdct_init</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>allocate_sample_buffers</name></name> <operator>=</operator> <name>ff_ac3_fixed_allocate_sample_buffers</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>CONFIG_AC3_ENCODER</name> <operator>||</operator> <name>CONFIG_EAC3_ENCODER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mdct_end</name></name> <operator>=</operator> <name>ff_ac3_float_mdct_end</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mdct_init</name></name> <operator>=</operator> <name>ff_ac3_float_mdct_init</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>allocate_sample_buffers</name></name> <operator>=</operator> <name>ff_ac3_float_allocate_sample_buffers</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>CONFIG_EAC3_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_frame_header</name></name> <operator>=</operator> <name>ff_eac3_output_frame_header</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_frame_header</name></name> <operator>=</operator> <name>ac3_output_frame_header</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>set_bandwidth</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exponent_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bit_alloc_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>mdct_init</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>init_fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>allocate_buffers</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>init_fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_audiodsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>adsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_me_cmp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mecc</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_ac3dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ac3dsp</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dprint_options</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>init_fail</name>:</label>
<expr_stmt><expr><call><name>ff_ac3_encode_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
