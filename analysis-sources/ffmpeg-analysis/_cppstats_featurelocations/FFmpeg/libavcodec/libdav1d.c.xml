<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\libdav1d.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dav1d/dav1d.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mastering_display_metadata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>Libdav1dContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dav1dContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBufferPool</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pool_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Dav1dData</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tile_threads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_threads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>apply_grain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>operating_point</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>all_layers</name></decl>;</decl_stmt>
}</block></struct></type> <name>Libdav1dContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmt</name><index>[]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>DAV1D_PIXEL_LAYOUT_I400</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_GRAY10</name></expr>, <expr><name>AV_PIX_FMT_GRAY12</name></expr> }</block></expr>,
<expr><index>[<expr><name>DAV1D_PIXEL_LAYOUT_I420</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV420P10</name></expr>, <expr><name>AV_PIX_FMT_YUV420P12</name></expr> }</block></expr>,
<expr><index>[<expr><name>DAV1D_PIXEL_LAYOUT_I422</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12</name></expr> }</block></expr>,
<expr><index>[<expr><name>DAV1D_PIXEL_LAYOUT_I444</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P10</name></expr>, <expr><name>AV_PIX_FMT_YUV444P12</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmt_rgb</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><name>AV_PIX_FMT_GBRP10</name></expr>, <expr><name>AV_PIX_FMT_GBRP12</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>libdav1d_log_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_vlog</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libdav1d_picture_allocator</name><parameter_list>(<parameter><decl><type><name>Dav1dPicture</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Libdav1dContext</name> <modifier>*</modifier></type><name>dav1d</name> <init>= <expr><name>cookie</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>format</name> <init>= <expr><name><name>pix_fmt</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>layout</name></name></expr>]</index><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>hbd</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name><name>linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>aligned_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_image_fill_arrays</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>h</name></expr></argument>, <argument><expr><name>DAV1D_PICTURE_ALIGNMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name><name>dav1d</name><operator>-&gt;</operator><name>pool_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_buffer_pool_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dav1d</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dav1d</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <call><name>av_buffer_pool_init</name><argument_list>(<argument><expr><name>ret</name> <operator>+</operator> <name>DAV1D_PICTURE_ALIGNMENT</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dav1d</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dav1d</name><operator>-&gt;</operator><name>pool_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dav1d</name><operator>-&gt;</operator><name>pool_size</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>av_buffer_pool_get</name><argument_list>(<argument><expr><name><name>dav1d</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>aligned_ptr</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>FFALIGN</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>DAV1D_PICTURE_ALIGNMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_image_fill_pointers</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>aligned_ptr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>allocator_data</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>libdav1d_picture_release</name><parameter_list>(<parameter><decl><type><name>Dav1dPicture</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>allocator_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>libdav1d_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Libdav1dContext</name> <modifier>*</modifier></type><name>dav1d</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dav1dSettings</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>threads</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>thread_count</name></name></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>thread_count</name></name></expr> </then><else>: <expr><call><name>av_cpu_count</name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"libdav1d %s\n"</literal></expr></argument>, <argument><expr><call><name>dav1d_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dav1d_default_settings</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>logger</name><operator>.</operator><name>cookie</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>logger</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>libdav1d_log_callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>allocator</name><operator>.</operator><name>cookie</name></name> <operator>=</operator> <name>dav1d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>allocator</name><operator>.</operator><name>alloc_picture_callback</name></name> <operator>=</operator> <name>libdav1d_picture_allocator</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>allocator</name><operator>.</operator><name>release_picture_callback</name></name> <operator>=</operator> <name>libdav1d_picture_release</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>frame_size_limit</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>max_pixels</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dav1d</name><operator>-&gt;</operator><name>apply_grain</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>apply_grain</name></name> <operator>=</operator> <name><name>dav1d</name><operator>-&gt;</operator><name>apply_grain</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>all_layers</name></name> <operator>=</operator> <name><name>dav1d</name><operator>-&gt;</operator><name>all_layers</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dav1d</name><operator>-&gt;</operator><name>operating_point</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>operating_point</name></name> <operator>=</operator> <name><name>dav1d</name><operator>-&gt;</operator><name>operating_point</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>n_tile_threads</name></name> <operator>=</operator> <ternary><condition><expr><name><name>dav1d</name><operator>-&gt;</operator><name>tile_threads</name></name></expr>
?</condition><then> <expr><name><name>dav1d</name><operator>-&gt;</operator><name>tile_threads</name></name></expr>
</then><else>: <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>floor</name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DAV1D_MAX_TILE_THREADS</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>n_frame_threads</name></name> <operator>=</operator> <ternary><condition><expr><name><name>dav1d</name><operator>-&gt;</operator><name>frame_threads</name></name></expr>
?</condition><then> <expr><name><name>dav1d</name><operator>-&gt;</operator><name>frame_threads</name></name></expr>
</then><else>: <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>ceil</name><argument_list>(<argument><expr><name>threads</name> <operator>/</operator> <name><name>s</name><operator>.</operator><name>n_tile_threads</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DAV1D_MAX_FRAME_THREADS</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Using %d frame threads, %d tile threads\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>.</operator><name>n_frame_threads</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>n_tile_threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>dav1d_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dav1d</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>libdav1d_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Libdav1dContext</name> <modifier>*</modifier></type><name>dav1d</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dav1d_data_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dav1d</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dav1d_flush</name><argument_list>(<argument><expr><name><name>dav1d</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>libdav1d_data_free</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>libdav1d_user_data_free</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>data</name> <operator>==</operator> <name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libdav1d_receive_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Libdav1dContext</name> <modifier>*</modifier></type><name>dav1d</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dav1dData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>&amp;</operator><name><name>dav1d</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dav1dPicture</name></type> <name>pic</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name>pic</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>sz</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ff_decode_get_packet</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>res</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>dav1d_data_wrap</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>libdav1d_data_free</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name><name>pkt</name><operator>.</operator><name>pts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name><name>pkt</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>duration</name></name> <operator>=</operator> <name><name>pkt</name><operator>.</operator><name>duration</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>reordered_opaque</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>reordered_opaque</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>reordered_opaque</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reordered_opaque</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dav1d_data_unref</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>reordered_opaque</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>reordered_opaque</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>reordered_opaque</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>dav1d_data_wrap_user_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>reordered_opaque</name></expr></argument>,
<argument><expr><name>libdav1d_user_data_free</name></expr></argument>, <argument><expr><name>reordered_opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>reordered_opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dav1d_data_unref</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>dav1d_send_data</name><argument_list>(<argument><expr><name><name>dav1d</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>dav1d_get_picture</name><argument_list>(<argument><expr><name><name>dav1d</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>res</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>draining</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>AVERROR_EOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>allocator_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>allocator_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dav1d_picture_unref</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>stride</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>stride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>stride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>profile</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>operating_points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>major_level</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator>
<operator>|</operator> <name><name>p</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>operating_points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>minor_level</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>h</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>w</name></name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>h</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>chr</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DAV1D_CHR_VERTICAL</name></expr>:</case>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>chroma_location</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>chroma_sample_location</name></name> <operator>=</operator> <name>AVCHROMA_LOC_LEFT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DAV1D_CHR_COLOCATED</name></expr>:</case>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>chroma_location</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>chroma_sample_location</name></name> <operator>=</operator> <name>AVCHROMA_LOC_TOPLEFT</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <operator>(</operator>enum <name>AVColorSpace</name><operator>)</operator> <name><name>p</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>mtrx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <operator>(</operator>enum <name>AVColorPrimaries</name><operator>)</operator> <name><name>p</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>pri</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <operator>(</operator>enum <name>AVColorTransferCharacteristic</name><operator>)</operator> <name><name>p</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>trc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>color_range</name></name></expr> ?</condition><then> <expr><name>AVCOL_RANGE_JPEG</name></expr> </then><else>: <expr><name>AVCOL_RANGE_MPEG</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>layout</name></name> <operator>==</operator> <name>DAV1D_PIXEL_LAYOUT_I444</name> <operator>&amp;&amp;</operator>
<name><name>p</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>mtrx</name></name> <operator>==</operator> <name>DAV1D_MC_IDENTITY</name> <operator>&amp;&amp;</operator>
<name><name>p</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>pri</name></name> <operator>==</operator> <name>DAV1D_COLOR_PRI_BT709</name> <operator>&amp;&amp;</operator>
<name><name>p</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>trc</name></name> <operator>==</operator> <name>DAV1D_TRC_SRGB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name><name>pix_fmt_rgb</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>hbd</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name><name>pix_fmt</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>layout</name></name></expr>]</index><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>hbd</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>user_data</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>reordered_opaque</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>user_data</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>reordered_opaque</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>reordered_opaque</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>num_units_in_tick</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>time_scale</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>p</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>num_units_in_tick</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>time_scale</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>equal_picture_interval</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ticks_per_frame</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>seq_hdr</name><operator>-&gt;</operator><name>num_ticks_per_picture</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>best_effort_timestamp</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>timestamp</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PKT_PTS</name></expr></cpp:if>
<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>
<name><name>frame</name><operator>-&gt;</operator><name>pkt_pts</name></name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>timestamp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name><name>frame</name><operator>-&gt;</operator><name>pkt_dts</name></name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>timestamp</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_pos</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_size</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pkt_duration</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>duration</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>frame_hdr</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>DAV1D_FRAME_TYPE_KEY</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>frame_hdr</name><operator>-&gt;</operator><name>frame_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>DAV1D_FRAME_TYPE_KEY</name></expr>:</case>
<case>case <expr><name>DAV1D_FRAME_TYPE_INTRA</name></expr>:</case>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DAV1D_FRAME_TYPE_INTER</name></expr>:</case>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DAV1D_FRAME_TYPE_SWITCH</name></expr>:</case>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_SP</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>mastering_display</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVMasteringDisplayMetadata</name> <modifier>*</modifier></type><name>mastering</name> <init>= <expr><call><name>av_mastering_display_metadata_create_side_data</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mastering</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>mastering</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_make_q</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mastering_display</name><operator>-&gt;</operator><name>primaries</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mastering</name><operator>-&gt;</operator><name>display_primaries</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_make_q</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mastering_display</name><operator>-&gt;</operator><name>primaries</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>mastering</name><operator>-&gt;</operator><name>white_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_make_q</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mastering_display</name><operator>-&gt;</operator><name>white_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mastering</name><operator>-&gt;</operator><name>white_point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_make_q</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mastering_display</name><operator>-&gt;</operator><name>white_point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mastering</name><operator>-&gt;</operator><name>max_luminance</name></name> <operator>=</operator> <call><name>av_make_q</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mastering_display</name><operator>-&gt;</operator><name>max_luminance</name></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mastering</name><operator>-&gt;</operator><name>min_luminance</name></name> <operator>=</operator> <call><name>av_make_q</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>mastering_display</name><operator>-&gt;</operator><name>min_luminance</name></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mastering</name><operator>-&gt;</operator><name>has_primaries</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mastering</name><operator>-&gt;</operator><name>has_luminance</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>content_light</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVContentLightMetadata</name> <modifier>*</modifier></type><name>light</name> <init>= <expr><call><name>av_content_light_metadata_create_side_data</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>light</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>light</name><operator>-&gt;</operator><name>MaxCLL</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>content_light</name><operator>-&gt;</operator><name>max_content_light_level</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>light</name><operator>-&gt;</operator><name>MaxFALL</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>content_light</name><operator>-&gt;</operator><name>max_frame_average_light_level</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>dav1d_picture_unref</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>libdav1d_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Libdav1dContext</name> <modifier>*</modifier></type><name>dav1d</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_pool_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dav1d</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dav1d_data_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dav1d</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dav1d_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dav1d</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(Libdav1dContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VD</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>libdav1d_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"tilethreads"</literal></expr>, <expr><literal type="string">"Tile threads"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tile_threads</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DAV1D_MAX_TILE_THREADS</name></expr>, <expr><name>VD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"framethreads"</literal></expr>, <expr><literal type="string">"Frame threads"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>frame_threads</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DAV1D_MAX_FRAME_THREADS</name></expr>, <expr><name>VD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"filmgrain"</literal></expr>, <expr><literal type="string">"Apply Film Grain"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>apply_grain</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"oppoint"</literal></expr>, <expr><literal type="string">"Select an operating point of the scalable bitstream"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>operating_point</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><name>VD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"alllayers"</literal></expr>, <expr><literal type="string">"Output all spatial layers"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>all_layers</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VD</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>libdav1d_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"libdav1d decoder"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>libdav1d_options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libdav1d_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libdav1d"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"dav1d AV1 decoder by VideoLAN"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_AV1</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Libdav1dContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>libdav1d_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>libdav1d_close</name></expr>,
<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>libdav1d_flush</name></expr>,
<expr><operator>.</operator><name>receive_frame</name> <operator>=</operator> <name>libdav1d_receive_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>|</operator> <name>AV_CODEC_CAP_AUTO_THREADS</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name> <operator>|</operator> <name>FF_CODEC_CAP_SETS_PKT_DTS</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>libdav1d_class</name></expr>,
<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libdav1d"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
