<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\aacps_tablegen.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_AACPS_TABLEGEN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_AACPS_TABLEGEN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_HARDCODED_TABLES</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ps_tableinit</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TABLE_CONST</name></cpp:macro> <cpp:value>const</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/aacps_tables.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NR_ALLPASS_BANDS20</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NR_ALLPASS_BANDS34</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PS_AP_LINKS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TABLE_CONST</name></cpp:macro></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>pd_re_smooth</name><index>[<expr><literal type="number">8</literal><operator>*</operator><literal type="number">8</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>pd_im_smooth</name><index>[<expr><literal type="number">8</literal><operator>*</operator><literal type="number">8</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>HA</name><index>[<expr><literal type="number">46</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>HB</name><index>[<expr><literal type="number">46</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><specifier>static</specifier> <call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>f20_0_8</name></expr></argument>)</argument_list></call> <index>[ <expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>f34_0_12</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>f34_1_8</name></expr></argument>)</argument_list></call> <index>[ <expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>f34_2_4</name></expr></argument>)</argument_list></call> <index>[ <expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>TABLE_CONST</name></type> <name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>Q_fract_allpass</name></expr></argument>)</argument_list>[2][50][3][2]</decl>;</decl_stmt>
<expr_stmt><expr><specifier>static</specifier> <call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>phi_fract</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">50</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>g0_Q8</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0.00746082949812f</literal></expr>, <expr><literal type="number">0.02270420949825f</literal></expr>, <expr><literal type="number">0.04546865930473f</literal></expr>, <expr><literal type="number">0.07266113929591f</literal></expr>,
<expr><literal type="number">0.09885108575264f</literal></expr>, <expr><literal type="number">0.11793710567217f</literal></expr>, <expr><literal type="number">0.125f</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>g0_Q12</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0.04081179924692f</literal></expr>, <expr><literal type="number">0.03812810994926f</literal></expr>, <expr><literal type="number">0.05144908135699f</literal></expr>, <expr><literal type="number">0.06399831151592f</literal></expr>,
<expr><literal type="number">0.07428313801106f</literal></expr>, <expr><literal type="number">0.08100347892914f</literal></expr>, <expr><literal type="number">0.08333333333333f</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>g1_Q8</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0.01565675600122f</literal></expr>, <expr><literal type="number">0.03752716391991f</literal></expr>, <expr><literal type="number">0.05417891378782f</literal></expr>, <expr><literal type="number">0.08417044116767f</literal></expr>,
<expr><literal type="number">0.10307344158036f</literal></expr>, <expr><literal type="number">0.12222452249753f</literal></expr>, <expr><literal type="number">0.125f</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>g2_Q4</name><index>[]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">0.05908211155639f</literal></expr>, <expr><operator>-</operator><literal type="number">0.04871498374946f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.07778723915851f</literal></expr>,
<expr><literal type="number">0.16486303567403f</literal></expr>, <expr><literal type="number">0.23279856662996f</literal></expr>, <expr><literal type="number">0.25f</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>make_filters_from_proto</name><argument_list>(<argument><expr><call><name>float</name> <argument_list>(<argument><expr><operator>*</operator><name>filter</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><specifier>const</specifier> <name>float</name> <operator>*</operator><name>proto</name></expr></argument>, <argument><expr><name>int</name> <name>bands</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <name>bands</name></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>theta</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <operator>(</operator><name>q</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">6</literal><operator>)</operator> <operator>/</operator> <name>bands</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>filter</name><index>[<expr><name>q</name></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>proto</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><index>[<expr><name>q</name></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>proto</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <operator>-</operator><call><name>sin</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>ps_tableinit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>ipdopd_sin</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>M_SQRT1_2</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>M_SQRT1_2</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><name>M_SQRT1_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><name>M_SQRT1_2</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>ipdopd_cos</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>M_SQRT1_2</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><name>M_SQRT1_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><name>M_SQRT1_2</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>M_SQRT1_2</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pd0</name></decl>, <decl><type ref="prev"/><name>pd1</name></decl>, <decl><type ref="prev"/><name>pd2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>iid_par_dequant</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0.05623413251903</literal></expr>, <expr><literal type="number">0.12589254117942</literal></expr>, <expr><literal type="number">0.19952623149689</literal></expr>, <expr><literal type="number">0.31622776601684</literal></expr>,
<expr><literal type="number">0.44668359215096</literal></expr>, <expr><literal type="number">0.63095734448019</literal></expr>, <expr><literal type="number">0.79432823472428</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1.25892541179417</literal></expr>, <expr><literal type="number">1.58489319246111</literal></expr>, <expr><literal type="number">2.23872113856834</literal></expr>, <expr><literal type="number">3.16227766016838</literal></expr>,
<expr><literal type="number">5.01187233627272</literal></expr>, <expr><literal type="number">7.94328234724282</literal></expr>, <expr><literal type="number">17.7827941003892</literal></expr>,

<expr><literal type="number">0.00316227766017</literal></expr>, <expr><literal type="number">0.00562341325190</literal></expr>, <expr><literal type="number">0.01</literal></expr>, <expr><literal type="number">0.01778279410039</literal></expr>,
<expr><literal type="number">0.03162277660168</literal></expr>, <expr><literal type="number">0.05623413251903</literal></expr>, <expr><literal type="number">0.07943282347243</literal></expr>, <expr><literal type="number">0.11220184543020</literal></expr>,
<expr><literal type="number">0.15848931924611</literal></expr>, <expr><literal type="number">0.22387211385683</literal></expr>, <expr><literal type="number">0.31622776601684</literal></expr>, <expr><literal type="number">0.39810717055350</literal></expr>,
<expr><literal type="number">0.50118723362727</literal></expr>, <expr><literal type="number">0.63095734448019</literal></expr>, <expr><literal type="number">0.79432823472428</literal></expr>, <expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1.25892541179417</literal></expr>, <expr><literal type="number">1.58489319246111</literal></expr>, <expr><literal type="number">1.99526231496888</literal></expr>, <expr><literal type="number">2.51188643150958</literal></expr>,
<expr><literal type="number">3.16227766016838</literal></expr>, <expr><literal type="number">4.46683592150963</literal></expr>, <expr><literal type="number">6.30957344480193</literal></expr>, <expr><literal type="number">8.91250938133745</literal></expr>,
<expr><literal type="number">12.5892541179417</literal></expr>, <expr><literal type="number">17.7827941003892</literal></expr>, <expr><literal type="number">31.6227766016838</literal></expr>, <expr><literal type="number">56.2341325190349</literal></expr>,
<expr><literal type="number">100</literal></expr>, <expr><literal type="number">177.827941003892</literal></expr>, <expr><literal type="number">316.227766016837</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>icc_invq</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0.937</literal></expr>, <expr><literal type="number">0.84118</literal></expr>, <expr><literal type="number">0.60092</literal></expr>, <expr><literal type="number">0.36764</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">0.589</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>acos_icc_invq</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0.35685527</literal></expr>, <expr><literal type="number">0.57133466</literal></expr>, <expr><literal type="number">0.92614472</literal></expr>, <expr><literal type="number">1.1943263</literal></expr>, <expr><name>M_PI</name><operator>/</operator><literal type="number">2</literal></expr>, <expr><literal type="number">2.2006171</literal></expr>, <expr><name>M_PI</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iid</name></decl>, <decl><type ref="prev"/><name>icc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>f_center_20</name><index>[]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">22</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>f_center_34</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">30</literal></expr>,
<expr><literal type="number">34</literal></expr>,<expr><operator>-</operator><literal type="number">10</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">21</literal></expr>,
<expr><literal type="number">27</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">42</literal></expr>,
<expr><literal type="number">102</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">90</literal></expr>,<expr><literal type="number">102</literal></expr>,<expr><literal type="number">114</literal></expr>,<expr><literal type="number">126</literal></expr>, <expr><literal type="number">90</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>fractional_delay_links</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0.43f</literal></expr>, <expr><literal type="number">0.75f</literal></expr>, <expr><literal type="number">0.347f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>fractional_delay_gain</name> <init>= <expr><literal type="number">0.39f</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pd0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pd0</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>pd0</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>pd0_re</name> <init>= <expr><name><name>ipdopd_cos</name><index>[<expr><name>pd0</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>pd0_im</name> <init>= <expr><name><name>ipdopd_sin</name><index>[<expr><name>pd0</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>pd1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pd1</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>pd1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>pd1_re</name> <init>= <expr><name><name>ipdopd_cos</name><index>[<expr><name>pd1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>pd1_im</name> <init>= <expr><name><name>ipdopd_sin</name><index>[<expr><name>pd1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>pd2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pd2</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>pd2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>pd2_re</name> <init>= <expr><name><name>ipdopd_cos</name><index>[<expr><name>pd2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>pd2_im</name> <init>= <expr><name><name>ipdopd_sin</name><index>[<expr><name>pd2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>re_smooth</name> <init>= <expr><literal type="number">0.25f</literal> <operator>*</operator> <name>pd0_re</name> <operator>+</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name>pd1_re</name> <operator>+</operator> <name>pd2_re</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>im_smooth</name> <init>= <expr><literal type="number">0.25f</literal> <operator>*</operator> <name>pd0_im</name> <operator>+</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name>pd1_im</name> <operator>+</operator> <name>pd2_im</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>pd_mag</name> <init>= <expr><literal type="number">1</literal> <operator>/</operator> <call><name>hypot</name><argument_list>(<argument><expr><name>im_smooth</name></expr></argument>, <argument><expr><name>re_smooth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pd_re_smooth</name><index>[<expr><name>pd0</name><operator>*</operator><literal type="number">64</literal><operator>+</operator><name>pd1</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><name>pd2</name></expr>]</index></name> <operator>=</operator> <name>re_smooth</name> <operator>*</operator> <name>pd_mag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pd_im_smooth</name><index>[<expr><name>pd0</name><operator>*</operator><literal type="number">64</literal><operator>+</operator><name>pd1</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><name>pd2</name></expr>]</index></name> <operator>=</operator> <name>im_smooth</name> <operator>*</operator> <name>pd_mag</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>iid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iid</name> <operator>&lt;</operator> <literal type="number">46</literal></expr>;</condition> <incr><expr><name>iid</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>c</name> <init>= <expr><name><name>iid_par_dequant</name><index>[<expr><name>iid</name></expr>]</index></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name></type> <name>c1</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>M_SQRT2</name> <operator>/</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>+</operator> <name>c</name><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>c2</name> <init>= <expr><name>c</name> <operator>*</operator> <name>c1</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>icc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>icc</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>icc</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>alpha</name> <init>= <expr><literal type="number">0.5f</literal> <operator>*</operator> <name><name>acos_icc_invq</name><index>[<expr><name>icc</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>beta</name> <init>= <expr><name>alpha</name> <operator>*</operator> <operator>(</operator><name>c1</name> <operator>-</operator> <name>c2</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name>M_SQRT1_2</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>HA</name><index>[<expr><name>iid</name></expr>]</index><index>[<expr><name>icc</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c2</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>beta</name> <operator>+</operator> <name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>HA</name><index>[<expr><name>iid</name></expr>]</index><index>[<expr><name>icc</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c1</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>beta</name> <operator>-</operator> <name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>HA</name><index>[<expr><name>iid</name></expr>]</index><index>[<expr><name>icc</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>c2</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>beta</name> <operator>+</operator> <name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>HA</name><index>[<expr><name>iid</name></expr>]</index><index>[<expr><name>icc</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>c1</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>beta</name> <operator>-</operator> <name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>alpha</name></decl>, <decl><type ref="prev"/><name>gamma</name></decl>, <decl><type ref="prev"/><name>mu</name></decl>, <decl><type ref="prev"/><name>rho</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>alpha_c</name></decl>, <decl><type ref="prev"/><name>alpha_s</name></decl>, <decl><type ref="prev"/><name>gamma_c</name></decl>, <decl><type ref="prev"/><name>gamma_s</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rho</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>icc_invq</name><index>[<expr><name>icc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0.05f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <call><name>atan2f</name><argument_list>(<argument><expr><literal type="number">2.0f</literal> <operator>*</operator> <name>c</name> <operator>*</operator> <name>rho</name></expr></argument>, <argument><expr><name>c</name><operator>*</operator><name>c</name> <operator>-</operator> <literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mu</name> <operator>=</operator> <name>c</name> <operator>+</operator> <literal type="number">1.0f</literal> <operator>/</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mu</name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>rho</name> <operator>*</operator> <name>rho</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator><operator>/</operator><operator>(</operator><name>mu</name> <operator>*</operator> <name>mu</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gamma</name> <operator>=</operator> <call><name>atanf</name><argument_list>(<argument><expr><call><name>sqrtf</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>mu</name><operator>)</operator><operator>/</operator><operator>(</operator><literal type="number">1.0f</literal> <operator>+</operator> <name>mu</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>alpha</name> <operator>+=</operator> <name>M_PI</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>alpha_c</name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>alpha_s</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gamma_c</name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gamma_s</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>HB</name><index>[<expr><name>iid</name></expr>]</index><index>[<expr><name>icc</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>M_SQRT2</name> <operator>*</operator> <name>alpha_c</name> <operator>*</operator> <name>gamma_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>HB</name><index>[<expr><name>iid</name></expr>]</index><index>[<expr><name>icc</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>M_SQRT2</name> <operator>*</operator> <name>alpha_s</name> <operator>*</operator> <name>gamma_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>HB</name><index>[<expr><name>iid</name></expr>]</index><index>[<expr><name>icc</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>M_SQRT2</name> <operator>*</operator> <name>alpha_s</name> <operator>*</operator> <name>gamma_s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>HB</name><index>[<expr><name>iid</name></expr>]</index><index>[<expr><name>icc</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>M_SQRT2</name> <operator>*</operator> <name>alpha_c</name> <operator>*</operator> <name>gamma_s</name></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>NR_ALLPASS_BANDS20</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>f_center</name></decl>, <decl><type ref="prev"/><name>theta</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>f_center_20</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f_center</name> <operator>=</operator> <name><name>f_center_20</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <literal type="number">0.125</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>f_center</name> <operator>=</operator> <name>k</name> <operator>-</operator> <literal type="number">6.5f</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>PS_AP_LINKS</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>theta</name> <operator>=</operator> <operator>-</operator><name>M_PI</name> <operator>*</operator> <name><name>fractional_delay_links</name><index>[<expr><name>m</name></expr>]</index></name> <operator>*</operator> <name>f_center</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Q_fract_allpass</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Q_fract_allpass</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>theta</name> <operator>=</operator> <operator>-</operator><name>M_PI</name><operator>*</operator><name>fractional_delay_gain</name><operator>*</operator><name>f_center</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>phi_fract</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>phi_fract</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>NR_ALLPASS_BANDS34</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>f_center</name></decl>, <decl><type ref="prev"/><name>theta</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>f_center_34</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f_center</name> <operator>=</operator> <name><name>f_center_34</name><index>[<expr><name>k</name></expr>]</index></name> <operator>/</operator> <literal type="number">24.0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>f_center</name> <operator>=</operator> <name>k</name> <operator>-</operator> <literal type="number">26.5f</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>PS_AP_LINKS</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>theta</name> <operator>=</operator> <operator>-</operator><name>M_PI</name> <operator>*</operator> <name><name>fractional_delay_links</name><index>[<expr><name>m</name></expr>]</index></name> <operator>*</operator> <name>f_center</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Q_fract_allpass</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Q_fract_allpass</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>theta</name> <operator>=</operator> <operator>-</operator><name>M_PI</name><operator>*</operator><name>fractional_delay_gain</name><operator>*</operator><name>f_center</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>phi_fract</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>phi_fract</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>make_filters_from_proto</name><argument_list>(<argument><expr><name>f20_0_8</name></expr></argument>, <argument><expr><name>g0_Q8</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>make_filters_from_proto</name><argument_list>(<argument><expr><name>f34_0_12</name></expr></argument>, <argument><expr><name>g0_Q12</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>make_filters_from_proto</name><argument_list>(<argument><expr><name>f34_1_8</name></expr></argument>, <argument><expr><name>g1_Q8</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>make_filters_from_proto</name><argument_list>(<argument><expr><name>f34_2_4</name></expr></argument>, <argument><expr><name>g2_Q4</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
