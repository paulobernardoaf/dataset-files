<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\wmalosslessdec.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lossless_audiodsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wma.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wma_common.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WMALL_MAX_CHANNELS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SUBFRAMES</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BANDS</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FRAMESIZE</name></cpp:macro> <cpp:value>32768</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ORDER</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WMALL_BLOCK_MIN_BITS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WMALL_BLOCK_MAX_BITS</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WMALL_BLOCK_MAX_SIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; WMALL_BLOCK_MAX_BITS)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WMALL_BLOCK_SIZES</name></cpp:macro> <cpp:value>(WMALL_BLOCK_MAX_BITS - WMALL_BLOCK_MIN_BITS + 1)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WMALL_COEFF_PAD_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 




<typedef>typedef <type><struct>struct <name>WmallChannelCtx</name> <block>{
<decl_stmt><decl><type><name>int16_t</name></type> <name>prev_block_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>transmit_coefs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>num_subframes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>subframe_len</name><index>[<expr><name>MAX_SUBFRAMES</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>subframe_offsets</name><index>[<expr><name>MAX_SUBFRAMES</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>cur_subframe</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>decoded_samples</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>quant_step</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>transient_counter</name></decl>;</decl_stmt> 
}</block></struct></type> <name>WmallChannelCtx</name>;</typedef>




<typedef>typedef <type><struct>struct <name>WmallDecodeCtx</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LLAudDSPContext</name></type> <name>dsp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>frame_data</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>max_frame_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>uint32_t</name></type> <name>decode_flags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>len_prefix</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>dynamic_range_compression</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>bits_per_sample</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>samples_per_frame</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>log2_frame_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>num_channels</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int8_t</name></type> <name>lfe_channel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>max_num_subframes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>subframe_len_bits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>max_subframe_len_bit</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint16_t</name></type> <name>min_samples_per_subframe</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>GetBitContext</name></type> <name>pgb</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>next_packet_start</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>packet_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>packet_sequence_number</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>num_saved_bits</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>frame_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>subframe_offset</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>packet_loss</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>packet_done</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>uint32_t</name></type> <name>frame_num</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>buf_bit_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name><name>samples_16</name><index>[<expr><name>WMALL_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name><name>samples_32</name><index>[<expr><name>WMALL_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>drc_gain</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int8_t</name></type> <name>skip_frame</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int8_t</name></type> <name>parsed_all_subframes</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>int16_t</name></type> <name>subframe_len</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int8_t</name></type> <name>channels_for_cur_subframe</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int8_t</name></type> <name><name>channel_indexes_for_cur_subframe</name><index>[<expr><name>WMALL_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WmallChannelCtx</name></type> <name><name>channel</name><index>[<expr><name>WMALL_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 



<decl_stmt><decl><type><name>uint8_t</name></type> <name>do_arith_coding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>do_ac_filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>do_inter_ch_decorr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>do_mclms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>do_lpc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>acfilter_order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>acfilter_scaling</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>acfilter_coeffs</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>acfilter_prevvalues</name><index>[<expr><name>WMALL_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>mclms_order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name>mclms_scaling</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>mclms_coeffs</name><index>[<expr><name>WMALL_MAX_CHANNELS</name> <operator>*</operator> <name>WMALL_MAX_CHANNELS</name> <operator>*</operator> <literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>mclms_coeffs_cur</name><index>[<expr><name>WMALL_MAX_CHANNELS</name> <operator>*</operator> <name>WMALL_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>mclms_prevvalues</name><index>[<expr><name>WMALL_MAX_CHANNELS</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>mclms_updates</name><index>[<expr><name>WMALL_MAX_CHANNELS</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mclms_recent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>movave_scaling</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quant_stepsize</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scaling</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>coefsend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bitsend</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>coefs</name></expr></argument>)</argument_list></call><index>[<expr><name>MAX_ORDER</name> <operator>+</operator> <name>WMALL_COEFF_PAD_SIZE</name><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>lms_prevvalues</name></expr></argument>)</argument_list></call><index>[<expr><name>MAX_ORDER</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>WMALL_COEFF_PAD_SIZE</name><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>lms_updates</name></expr></argument>)</argument_list></call><index>[<expr><name>MAX_ORDER</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>WMALL_COEFF_PAD_SIZE</name><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>recent</name></decl>;</decl_stmt>
}</block> <decl><name><name>cdlms</name><index>[<expr><name>WMALL_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name><name>cdlms_ttl</name><index>[<expr><name>WMALL_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bV3RTM</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>is_channel_coded</name><index>[<expr><name>WMALL_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>update_speed</name><index>[<expr><name>WMALL_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>transient</name><index>[<expr><name>WMALL_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>transient_pos</name><index>[<expr><name>WMALL_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seekable_tile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>ave_sum</name><index>[<expr><name>WMALL_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>channel_residues</name><index>[<expr><name>WMALL_MAX_CHANNELS</name></expr>]</index><index>[<expr><name>WMALL_BLOCK_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>lpc_coefs</name><index>[<expr><name>WMALL_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lpc_order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lpc_scaling</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lpc_intbits</name></decl>;</decl_stmt>
}</block></struct></type> <name>WmallDecodeCtx</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WMASIGN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt; 0) - ((x) &lt; 0))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>edata_ptr</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>channel_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>log2_max_num_subframes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"block_align is not set or invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <name>WMALL_MAX_CHANNELS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,
<argument><expr><literal type="string">"More than "</literal> <call><name>AV_STRINGIFY</name><argument_list>(<argument><expr><name>WMALL_MAX_CHANNELS</name></expr></argument>)</argument_list></call> <literal type="string">" channels"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_frame_size</name></name> <operator>=</operator> <name>MAX_FRAMESIZE</name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_data</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_frame_size</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>frame_data</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_llauddsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;=</operator> <literal type="number">18</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decode_flags</name></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>edata_ptr</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>channel_mask</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>edata_ptr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bits_per_sample</name></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>edata_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits_per_sample</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits_per_sample</name></name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown bit-depth: %"</literal><name>PRIu8</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bits_per_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"[%x] "</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Unsupported extradata size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>log2_frame_size</name></name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>skip_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_loss</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>len_prefix</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decode_flags</name></name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samples_per_frame</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>ff_wma_get_frame_len_bits</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,
<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>decode_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples_per_frame</name></name> <operator>&lt;=</operator> <name>WMALL_BLOCK_MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prev_block_len</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>samples_per_frame</name></name></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name>log2_max_num_subframes</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>decode_flags</name></name> <operator>&amp;</operator> <literal type="number">0x38</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_num_subframes</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_max_num_subframes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_subframe_len_bit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subframe_len_bits</name></name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>log2_max_num_subframes</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>min_samples_per_subframe</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>samples_per_frame</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>max_num_subframes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dynamic_range_compression</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decode_flags</name></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bV3RTM</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decode_flags</name></name> <operator>&amp;</operator> <literal type="number">0x100</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>max_num_subframes</name></name> <operator>&gt;</operator> <name>MAX_SUBFRAMES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid number of subframes %"</literal><name>PRIu8</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_num_subframes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_channel</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channel_mask</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>mask</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>mask</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>channel_mask</name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>lfe_channel</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>channel_mask</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_subframe_length</name><parameter_list>(<parameter><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>frame_len_ratio</name></decl>, <decl><type ref="prev"/><name>subframe_len</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>samples_per_frame</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>min_samples_per_subframe</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>min_samples_per_subframe</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_num_subframes</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_len_ratio</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subframe_len</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>min_samples_per_subframe</name></name> <operator>*</operator> <operator>(</operator><name>frame_len_ratio</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>subframe_len</name> <argument_list type="generic">&lt; <argument><expr><name><name>s</name><operator>-&gt;</operator><name>min_samples_per_subframe</name></name> <operator>||</operator>
<name>subframe_len</name></expr></argument> &gt;</argument_list></name> <name><name>s</name><operator>-&gt;</operator><name>samples_per_frame</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"broken frame: subframe_len %i\n"</literal></expr></argument>,
<argument><expr><name>subframe_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>subframe_len</name></expr>;</return>
</block_content>}</block></function>





















<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_tilehdr</name><parameter_list>(<parameter><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>num_samples</name><index>[<expr><name>WMALL_MAX_CHANNELS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>contains_subframe</name><index>[<expr><name>WMALL_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>channels_for_cur_subframe</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>fixed_channel_layout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>min_channel_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>tile_aligned</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>num_subframes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>tile_aligned</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>max_num_subframes</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>tile_aligned</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fixed_channel_layout</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>subframe_len</name></decl>, <decl><type ref="prev"/><name>in_use</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>num_samples</name><index>[<expr><name>c</name></expr>]</index></name> <operator>==</operator> <name>min_channel_len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fixed_channel_layout</name> <operator>||</operator> <name>channels_for_cur_subframe</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator>
<operator>(</operator><name>min_channel_len</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>samples_per_frame</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>min_samples_per_subframe</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>contains_subframe</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>contains_subframe</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>in_use</name> <operator>|=</operator> <name><name>contains_subframe</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>contains_subframe</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_use</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Found empty subframe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>subframe_len</name> <operator>=</operator> <call><name>decode_subframe_length</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>min_channel_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>min_channel_len</name> <operator>+=</operator> <name>subframe_len</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>WmallChannelCtx</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>contains_subframe</name><index>[<expr><name>c</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>num_subframes</name></name> <operator>&gt;=</operator> <name>MAX_SUBFRAMES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"broken frame: num subframes &gt; 31\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>subframe_len</name><index>[<expr><name><name>chan</name><operator>-&gt;</operator><name>num_subframes</name></name></expr>]</index></name> <operator>=</operator> <name>subframe_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>num_samples</name><index>[<expr><name>c</name></expr>]</index></name> <operator>+=</operator> <name>subframe_len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>chan</name><operator>-&gt;</operator><name>num_subframes</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>num_samples</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>samples_per_frame</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"broken frame: "</literal>
<literal type="string">"channel len(%"</literal><name>PRIu16</name><literal type="string">") &gt; samples_per_frame(%"</literal><name>PRIu16</name><literal type="string">")\n"</literal></expr></argument>,
<argument><expr><name><name>num_samples</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples_per_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>num_samples</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&lt;=</operator> <name>min_channel_len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>num_samples</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&lt;</operator> <name>min_channel_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>channels_for_cur_subframe</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>min_channel_len</name> <operator>=</operator> <name><name>num_samples</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>channels_for_cur_subframe</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block> while <condition>(<expr><name>min_channel_len</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>samples_per_frame</name></name></expr>)</condition>;</do>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>num_subframes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name><name>subframe_offsets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name><name>subframe_len</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_ac_filter</name><parameter_list>(<parameter><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>acfilter_order</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>acfilter_scaling</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>acfilter_order</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>acfilter_coeffs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bitsz</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>acfilter_scaling</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_mclms</name><parameter_list>(<parameter><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_order</name></name> <operator>=</operator> <operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_scaling</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>send_coef_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cbits</name> <init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_scaling</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>cbits</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mclms_scaling</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cbits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>send_coef_bits</name> <operator>=</operator> <call><name>get_bitsz</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>cbits</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mclms_order</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_coeffs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>send_coef_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_coeffs_cur</name><index>[<expr><name>i</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>send_coef_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_cdlms</name><parameter_list>(<parameter><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cdlms_send_coef</name> <init>= <expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms_ttl</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cdlms_ttl</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>order</name> <operator>=</operator> <operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>order</name> <operator>&gt;</operator> <name>MAX_ORDER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Order[%d][%d] %d &gt; max (%d), not supported\n"</literal></expr></argument>,
<argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>order</name></expr></argument>, <argument><expr><name>MAX_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>order</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>order</name> <operator>&amp;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>bits_per_sample</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>warned</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>warned</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"CDLMS of order %d"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>warned</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cdlms_ttl</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scaling</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>cdlms_send_coef</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cdlms_ttl</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cbits</name></decl>, <decl><type ref="prev"/><name>shift_l</name></decl>, <decl><type ref="prev"/><name>shift_r</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cbits</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>cbits</name><operator>)</operator> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>order</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cbits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coefsend</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>cbits</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cbits</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scaling</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>cbits</name><operator>)</operator> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scaling</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cbits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bitsend</name> <operator>=</operator> <call><name>get_bitsz</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>cbits</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>shift_l</name> <operator>=</operator> <literal type="number">32</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bitsend</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shift_r</name> <operator>=</operator> <literal type="number">32</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scaling</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coefsend</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>coefs</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>
<operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bitsend</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>shift_l</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift_r</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cdlms_ttl</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coefs</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>order</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WMALL_COEFF_PAD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_channel_residues</name><parameter_list>(<parameter><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tile_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ave_mean</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transient</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>transient</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transient_pos</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name>tile_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>transient_pos</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transient</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>transient_counter</name> <operator>=</operator>
<call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>transient_counter</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples_per_frame</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>transient_counter</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transient</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>seekable_tile</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ave_mean</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bits_per_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ave_sum</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name>ave_mean</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>movave_scaling</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>seekable_tile</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>do_inter_ch_decorr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_sbits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bits_per_sample</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_sbits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bits_per_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tile_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rem</name></decl>, <decl><type ref="prev"/><name>rem_bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>quo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>residue</name></decl>;</decl_stmt>
<while>while<condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>quo</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>quo</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quo</name> <operator>+=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ave_mean</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ave_sum</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>movave_scaling</name></name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>movave_scaling</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ave_mean</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>residue</name> <operator>=</operator> <name>quo</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>rem_bits</name> <operator>=</operator> <call><name>av_ceil_log2</name><argument_list>(<argument><expr><name>ave_mean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rem</name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>rem_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>residue</name> <operator>=</operator> <operator>(</operator><name>quo</name> <operator>&lt;&lt;</operator> <name>rem_bits</name><operator>)</operator> <operator>+</operator> <name>rem</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ave_sum</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name>residue</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>ave_sum</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>-</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ave_sum</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>movave_scaling</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>residue</name> <operator>=</operator> <operator>(</operator><name>residue</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>-</operator><operator>(</operator><name>residue</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>residue</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_lpc</name><parameter_list>(<parameter><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>cbits</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lpc_order</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lpc_scaling</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lpc_intbits</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cbits</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lpc_scaling</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>lpc_intbits</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>lpc_order</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lpc_coefs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_sbits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>cbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_codec_buffers</name><parameter_list>(<parameter><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ich</name></decl>, <decl><type ref="prev"/><name>ilms</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>acfilter_coeffs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>acfilter_coeffs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>acfilter_prevvalues</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>acfilter_prevvalues</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lpc_coefs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lpc_coefs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_coeffs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_coeffs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_coeffs_cur</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_coeffs_cur</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_prevvalues</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_prevvalues</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_updates</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_updates</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ich</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ich</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>ich</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>ilms</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ilms</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cdlms_ttl</name><index>[<expr><name>ich</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ilms</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>ilms</name></expr>]</index></name><operator>.</operator><name>coefs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>ilms</name></expr>]</index></name><operator>.</operator><name>coefs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>ilms</name></expr>]</index></name><operator>.</operator><name>lms_prevvalues</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>ilms</name></expr>]</index></name><operator>.</operator><name>lms_prevvalues</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>ilms</name></expr>]</index></name><operator>.</operator><name>lms_updates</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>ilms</name></expr>]</index></name><operator>.</operator><name>lms_updates</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ave_sum</name><index>[<expr><name>ich</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_codec</name><parameter_list>(<parameter><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ich</name></decl>, <decl><type ref="prev"/><name>ilms</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_recent</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mclms_order</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ich</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ich</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>ich</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>ilms</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ilms</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cdlms_ttl</name><index>[<expr><name>ich</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ilms</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>ilms</name></expr>]</index></name><operator>.</operator><name>recent</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>ilms</name></expr>]</index></name><operator>.</operator><name>order</name></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>ich</name></expr>]</index></name><operator>.</operator><name>transient_counter</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>samples_per_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transient</name><index>[<expr><name>ich</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>transient_pos</name><index>[<expr><name>ich</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mclms_update</name><parameter_list>(<parameter><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>icoef</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ich</name></decl>, <decl><type ref="prev"/><name>pred_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>order</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mclms_order</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_channels</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>range</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bits_per_sample</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ich</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ich</name> <operator>&lt;</operator> <name>num_channels</name></expr>;</condition> <incr><expr><name>ich</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pred_error</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>icoef</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pred</name><index>[<expr><name>ich</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pred_error</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name> <operator>*</operator> <name>num_channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_coeffs</name><index>[<expr><name>i</name> <operator>+</operator> <name>ich</name> <operator>*</operator> <name>order</name> <operator>*</operator> <name>num_channels</name></expr>]</index></name> <operator>+=</operator>
<name><name>s</name><operator>-&gt;</operator><name>mclms_updates</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mclms_recent</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ich</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_coeffs_cur</name><index>[<expr><name>ich</name> <operator>*</operator> <name>num_channels</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>+=</operator> <call><name>WMASIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>icoef</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pred_error</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name> <operator>*</operator> <name>num_channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_coeffs</name><index>[<expr><name>i</name> <operator>+</operator> <name>ich</name> <operator>*</operator> <name>order</name> <operator>*</operator> <name>num_channels</name></expr>]</index></name> <operator>-=</operator>
<name><name>s</name><operator>-&gt;</operator><name>mclms_updates</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mclms_recent</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ich</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_coeffs_cur</name><index>[<expr><name>ich</name> <operator>*</operator> <name>num_channels</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>-=</operator> <call><name>WMASIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>icoef</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>ich</name> <operator>=</operator> <name>num_channels</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ich</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ich</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_recent</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_prevvalues</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mclms_recent</name></name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>icoef</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>-</operator><name>range</name></expr></argument>, <argument><expr><name>range</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_updates</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>mclms_recent</name></name></expr>]</index></name> <operator>=</operator> <call><name>WMASIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>icoef</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mclms_recent</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mclms_prevvalues</name><index>[<expr><name>order</name> <operator>*</operator> <name>num_channels</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_prevvalues</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>order</name> <operator>*</operator> <name>num_channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mclms_updates</name><index>[<expr><name>order</name> <operator>*</operator> <name>num_channels</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_updates</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>order</name> <operator>*</operator> <name>num_channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mclms_recent</name></name> <operator>=</operator> <name>num_channels</name> <operator>*</operator> <name>order</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mclms_predict</name><parameter_list>(<parameter><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>icoef</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pred</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ich</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>order</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mclms_order</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_channels</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ich</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ich</name> <operator>&lt;</operator> <name>num_channels</name></expr>;</condition> <incr><expr><name>ich</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pred</name><index>[<expr><name>ich</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>is_channel_coded</name><index>[<expr><name>ich</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name> <operator>*</operator> <name>num_channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pred</name><index>[<expr><name>ich</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>mclms_prevvalues</name><index>[<expr><name>i</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mclms_recent</name></name></expr>]</index></name> <operator>*</operator>
<name><name>s</name><operator>-&gt;</operator><name>mclms_coeffs</name><index>[<expr><name>i</name> <operator>+</operator> <name>order</name> <operator>*</operator> <name>num_channels</name> <operator>*</operator> <name>ich</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ich</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pred</name><index>[<expr><name>ich</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>icoef</name></expr>]</index></name> <operator>*</operator>
<name><name>s</name><operator>-&gt;</operator><name>mclms_coeffs_cur</name><index>[<expr><name>i</name> <operator>+</operator> <name>num_channels</name> <operator>*</operator> <name>ich</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>pred</name><index>[<expr><name>ich</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mclms_scaling</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pred</name><index>[<expr><name>ich</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>mclms_scaling</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>icoef</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pred</name><index>[<expr><name>ich</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>revert_mclms</name><parameter_list>(<parameter><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tile_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>icoef</name></decl>, <decl><type ref="prev"/><name><name>pred</name><index>[<expr><name>WMALL_MAX_CHANNELS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>icoef</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>icoef</name> <operator>&lt;</operator> <name>tile_size</name></expr>;</condition> <incr><expr><name>icoef</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>mclms_predict</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>icoef</name></expr></argument>, <argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mclms_update</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>icoef</name></expr></argument>, <argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>use_high_update_speed</name><parameter_list>(<parameter><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ich</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ilms</name></decl>, <decl><type ref="prev"/><name>recent</name></decl>, <decl><type ref="prev"/><name>icoef</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ilms</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cdlms_ttl</name><index>[<expr><name>ich</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ilms</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ilms</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>recent</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>ilms</name></expr>]</index></name><operator>.</operator><name>recent</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>update_speed</name><index>[<expr><name>ich</name></expr>]</index></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bV3RTM</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>icoef</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>icoef</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>ilms</name></expr>]</index></name><operator>.</operator><name>order</name></expr>;</condition> <incr><expr><name>icoef</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>ilms</name></expr>]</index></name><operator>.</operator><name><name>lms_updates</name><index>[<expr><name>icoef</name> <operator>+</operator> <name>recent</name></expr>]</index></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>icoef</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>icoef</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>ilms</name></expr>]</index></name><operator>.</operator><name>order</name></expr>;</condition> <incr><expr><name>icoef</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>ilms</name></expr>]</index></name><operator>.</operator><name><name>lms_updates</name><index>[<expr><name>icoef</name></expr>]</index></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update_speed</name><index>[<expr><name>ich</name></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>use_normal_update_speed</name><parameter_list>(<parameter><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ich</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ilms</name></decl>, <decl><type ref="prev"/><name>recent</name></decl>, <decl><type ref="prev"/><name>icoef</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ilms</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cdlms_ttl</name><index>[<expr><name>ich</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ilms</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ilms</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>recent</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>ilms</name></expr>]</index></name><operator>.</operator><name>recent</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>update_speed</name><index>[<expr><name>ich</name></expr>]</index></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bV3RTM</name></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>icoef</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>icoef</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>ilms</name></expr>]</index></name><operator>.</operator><name>order</name></expr>;</condition> <incr><expr><name>icoef</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>ilms</name></expr>]</index></name><operator>.</operator><name><name>lms_updates</name><index>[<expr><name>icoef</name> <operator>+</operator> <name>recent</name></expr>]</index></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>icoef</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>icoef</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>ilms</name></expr>]</index></name><operator>.</operator><name>order</name></expr>;</condition> <incr><expr><name>icoef</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>ilms</name></expr>]</index></name><operator>.</operator><name><name>lms_updates</name><index>[<expr><name>icoef</name></expr>]</index></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>update_speed</name><index>[<expr><name>ich</name></expr>]</index></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CD_LMS</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>, <parameter><type><name>ROUND</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void lms_update ##bits (WmallDecodeCtx *s, int ich, int ilms, int input) { int recent = s-&gt;cdlms[ich][ilms].recent; int range = 1 &lt;&lt; s-&gt;bits_per_sample - 1; int order = s-&gt;cdlms[ich][ilms].order; int ##bits##_t *prev = (int##bits##_t *)s-&gt;cdlms[ich][ilms].lms_prevvalues; if (recent) recent--; else { memcpy(prev + order, prev, (bits/8) * order); memcpy(s-&gt;cdlms[ich][ilms].lms_updates + order, s-&gt;cdlms[ich][ilms].lms_updates, sizeof(*s-&gt;cdlms[ich][ilms].lms_updates) * order); recent = order - 1; } prev[recent] = av_clip(input, -range, range - 1); s-&gt;cdlms[ich][ilms].lms_updates[recent] = WMASIGN(input) * s-&gt;update_speed[ich]; s-&gt;cdlms[ich][ilms].lms_updates[recent + (order &gt;&gt; 4)] &gt;&gt;= 2; s-&gt;cdlms[ich][ilms].lms_updates[recent + (order &gt;&gt; 3)] &gt;&gt;= 1; s-&gt;cdlms[ich][ilms].recent = recent; memset(s-&gt;cdlms[ich][ilms].lms_updates + recent + order, 0, sizeof(s-&gt;cdlms[ich][ilms].lms_updates) - sizeof(*s-&gt;cdlms[ich][ilms].lms_updates)*(recent+order)); } static void revert_cdlms ##bits (WmallDecodeCtx *s, int ch, int coef_begin, int coef_end) { int icoef, pred, ilms, num_lms, residue, input; num_lms = s-&gt;cdlms_ttl[ch]; for (ilms = num_lms - 1; ilms &gt;= 0; ilms--) { for (icoef = coef_begin; icoef &lt; coef_end; icoef++) { int##bits##_t *prevvalues = (int##bits##_t *)s-&gt;cdlms[ch][ilms].lms_prevvalues; pred = (1 &lt;&lt; s-&gt;cdlms[ch][ilms].scaling) &gt;&gt; 1; residue = s-&gt;channel_residues[ch][icoef]; pred += s-&gt;dsp.scalarproduct_and_madd_int##bits (s-&gt;cdlms[ch][ilms].coefs, prevvalues + s-&gt;cdlms[ch][ilms].recent, s-&gt;cdlms[ch][ilms].lms_updates + s-&gt;cdlms[ch][ilms].recent, FFALIGN(s-&gt;cdlms[ch][ilms].order, ROUND), WMASIGN(residue)); input = residue + (unsigned)(pred &gt;&gt; s-&gt;cdlms[ch][ilms].scaling); lms_update ##bits(s, ch, ilms, input); s-&gt;channel_residues[ch][icoef] = input; } } if (bits &lt;= 16) emms_c(); }</cpp:value></cpp:define>





















































<macro><name>CD_LMS</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>WMALL_COEFF_PAD_SIZE</argument>)</argument_list></macro>
<macro><name>CD_LMS</name><argument_list>(<argument><literal type="number">32</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>revert_inter_ch_decorr</name><parameter_list>(<parameter><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tile_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_channel_coded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>is_channel_coded</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>icoef</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>icoef</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>icoef</name> <operator>&lt;</operator> <name>tile_size</name></expr>;</condition> <incr><expr><name>icoef</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>icoef</name></expr>]</index></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>icoef</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>icoef</name></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>icoef</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>revert_acfilter</name><parameter_list>(<parameter><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tile_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ich</name></decl>, <decl><type ref="prev"/><name>pred</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>filter_coeffs</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>acfilter_coeffs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scaling</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>acfilter_scaling</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>order</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>acfilter_order</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ich</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ich</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>ich</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>prevvalues</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>acfilter_prevvalues</name><index>[<expr><name>ich</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pred</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pred</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>filter_coeffs</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>prevvalues</name><index>[<expr><name>j</name> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pred</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>filter_coeffs</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>pred</name> <operator>&gt;&gt;=</operator> <name>scaling</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>pred</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>order</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tile_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>pred</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>pred</name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>filter_coeffs</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>pred</name> <operator>&gt;&gt;=</operator> <name>scaling</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>pred</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>order</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>tile_size</name> <operator>&lt;=</operator> <name>j</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>prevvalues</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>prevvalues</name><index>[<expr><name>j</name> <operator>-</operator> <name>tile_size</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prevvalues</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><name>ich</name></expr>]</index><index>[<expr><name>tile_size</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_subframe</name><parameter_list>(<parameter><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>samples_per_frame</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>subframe_len</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>samples_per_frame</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total_samples</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>samples_per_frame</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>rawpcm_tile</name></decl>, <decl><type ref="prev"/><name>padding_zeroes</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subframe_offset</name></name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>decoded_samples</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>decoded_samples</name></expr>;</expr_stmt>
<expr_stmt><expr><name>subframe_len</name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>subframe_len</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cur_subframe</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channels_for_cur_subframe</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cur_subframe</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cur_subframe</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>total_samples</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>decoded_samples</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>decoded_samples</name> <operator>&amp;&amp;</operator>
<name>subframe_len</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>subframe_len</name><index>[<expr><name>cur_subframe</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>total_samples</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>subframe_len</name><index>[<expr><name>cur_subframe</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>decoded_samples</name> <operator>+=</operator>
<name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>subframe_len</name><index>[<expr><name>cur_subframe</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_indexes_for_cur_subframe</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channels_for_cur_subframe</name></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>channels_for_cur_subframe</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>total_samples</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parsed_all_subframes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>seekable_tile</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>seekable_tile</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clear_codec_buffers</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>do_arith_coding</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>do_arith_coding</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Arithmetic coding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>do_ac_filter</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>do_inter_ch_decorr</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>do_mclms</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>do_ac_filter</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decode_ac_filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>do_mclms</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decode_mclms</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>decode_cdlms</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>movave_scaling</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quant_stepsize</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_codec</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rawpcm_tile</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rawpcm_tile</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>order</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Waiting for seekable tile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_channel_coded</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rawpcm_tile</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_channel_coded</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bV3RTM</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>do_lpc</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>do_lpc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_lpc</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Expect wrong output since "</literal>
<literal type="string">"inverse LPC filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>do_lpc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>padding_zeroes</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>padding_zeroes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rawpcm_tile</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bits_per_sample</name></name> <operator>-</operator> <name>padding_zeroes</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Invalid number of padding bits in raw PCM tile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"RAWPCM %d bits per sample. "</literal>
<literal type="string">"total %d bits, remain=%d\n"</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>,
<argument><expr><name>bits</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name> <operator>*</operator> <name>subframe_len</name></expr></argument>, <argument><expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>subframe_len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_sbits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits_per_sample</name></name> <operator>&lt;</operator> <name>padding_zeroes</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_channel_coded</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_channel_residues</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>subframe_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>seekable_tile</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>use_high_update_speed</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>use_normal_update_speed</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits_per_sample</name></name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>revert_cdlms32</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>subframe_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>revert_cdlms16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>subframe_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>channel_residues</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>subframe_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>do_mclms</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>revert_mclms</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>subframe_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>do_inter_ch_decorr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>revert_inter_ch_decorr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>subframe_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>do_ac_filter</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>revert_acfilter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>subframe_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>quant_stepsize</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>subframe_len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>quant_stepsize</name></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels_for_cur_subframe</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>channel_indexes_for_cur_subframe</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>subframe_len</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name><name>subframe_len</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>cur_subframe</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>subframe_len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits_per_sample</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>samples_16</name><index>[<expr><name>c</name></expr>]</index></name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>padding_zeroes</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>samples_32</name><index>[<expr><name>c</name></expr>]</index></name><operator>++</operator> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_residues</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">256U</literal> <operator>&lt;&lt;</operator> <name>padding_zeroes</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels_for_cur_subframe</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>channel_indexes_for_cur_subframe</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>cur_subframe</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>num_subframes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"broken subframe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>cur_subframe</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame</name><parameter_list>(<parameter><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetBitContext</name><modifier>*</modifier></type> <name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>more_frames</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>samples_per_frame</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_loss</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samples_16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samples_32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>len_prefix</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>log2_frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_tilehdr</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_loss</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dynamic_range_compression</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>drc_gain</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>skip</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples_per_frame</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"start skip: %i\n"</literal></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples_per_frame</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"end skip: %i\n"</literal></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>-=</operator> <name>skip</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parsed_all_subframes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>decoded_samples</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cur_subframe</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<while>while <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>parsed_all_subframes</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>decoded_samples</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>decoded_samples</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>decode_subframe</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_loss</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>decoded_samples</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Frame done\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>skip_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>len_prefix</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_offset</name></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"frame[%"</literal><name>PRIu32</name><literal type="string">"] would have to skip %i bits\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_num</name></name></expr></argument>,
<argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_offset</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_loss</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_offset</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>more_frames</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>frame_num</name></name></expr>;</expr_stmt>
<return>return <expr><name>more_frames</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>remaining_bits</name><parameter_list>(<parameter><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>buf_bit_size</name></name> <operator>-</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type> <name>save_bits</name><parameter_list>(<parameter><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name><modifier>*</modifier></type> <name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>append</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>buflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PutBitContext</name></type> <name>tmp</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name>append</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_offset</name></name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_saved_bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>num_saved_bits</name></name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>buflen</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_frame_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Too small input buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_loss</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_saved_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_saved_bits</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>append</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_copy_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>gb</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>num_saved_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>align</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>align</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>align</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>align</name></expr></argument>, <argument><expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>align</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>align</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avpriv_copy_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>gb</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>num_saved_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_packet</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name><modifier>*</modifier></type> <name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name><modifier>*</modifier></type> <name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pgb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_bits_prev_frame</name></decl>, <decl><type ref="prev"/><name>packet_sequence_number</name></decl>, <decl><type ref="prev"/><name>spliced_packet</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf_size</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_saved_bits</name></name> <operator>&gt;</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>decode_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_saved_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>packet_done</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>packet_loss</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_packet_start</name></name> <operator>=</operator> <name>buf_size</name> <operator>-</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_bit_size</name></name> <operator>=</operator> <name>buf_size</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_bit_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>packet_sequence_number</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>spliced_packet</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>spliced_packet</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Bitstream splicing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>num_bits_prev_frame</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>log2_frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>packet_loss</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>packet_sequence_number</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>!=</operator> <name>packet_sequence_number</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_loss</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Packet loss detected! seq %"</literal><name>PRIx8</name><literal type="string">" vs %x\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>packet_sequence_number</name></name></expr></argument>, <argument><expr><name>packet_sequence_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_sequence_number</name></name> <operator>=</operator> <name>packet_sequence_number</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_bits_prev_frame</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>remaining_packet_bits</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>buf_bit_size</name></name> <operator>-</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>num_bits_prev_frame</name> <operator>&gt;=</operator> <name>remaining_packet_bits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num_bits_prev_frame</name> <operator>=</operator> <name>remaining_packet_bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>save_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>num_bits_prev_frame</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>num_bits_prev_frame</name> <operator>&lt;</operator> <name>remaining_packet_bits</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>packet_loss</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>decode_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>num_saved_bits</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_offset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"ignoring %x previously saved bits\n"</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>num_saved_bits</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>packet_loss</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_saved_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_loss</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_bit_size</name></name> <operator>=</operator> <operator>(</operator><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>next_packet_start</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_bit_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>packet_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>len_prefix</name></name> <operator>&amp;&amp;</operator> <call><name>remaining_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>log2_frame_size</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>frame_size</name> <operator>=</operator> <call><name>show_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>log2_frame_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<name>frame_size</name> <operator>&lt;=</operator> <call><name>remaining_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>save_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>packet_loss</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_done</name></name> <operator>=</operator> <operator>!</operator><call><name>decode_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>len_prefix</name></name>
<operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_saved_bits</name></name> <operator>&gt;</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_done</name></name> <operator>=</operator> <operator>!</operator><call><name>decode_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>remaining_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Overread %d\n"</literal></expr></argument>, <argument><expr><operator>-</operator><call><name>remaining_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_loss</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>packet_done</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>packet_loss</name></name> <operator>&amp;&amp;</operator>
<call><name>remaining_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>save_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><call><name>remaining_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_move_ref</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_offset</name></name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>packet_loss</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>AVERROR_INVALIDDATA</name></expr> </then><else>: <expr><ternary><condition><expr><name>buf_size</name></expr> ?</condition><then> <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_loss</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>packet_done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_saved_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_packet_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cdlms</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>order</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WmallDecodeCtx</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_wmalossless_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"wmalossless"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Windows Media Audio Lossless"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_WMALOSSLESS</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WmallDecodeCtx</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>decode_close</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode_packet</name></expr>,
<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>flush</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SUBFRAMES</name> <operator>|</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_DELAY</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,
<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_SAMPLE_FMT_S16P</name></expr>,
<expr><name>AV_SAMPLE_FMT_S32P</name></expr>,
<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
