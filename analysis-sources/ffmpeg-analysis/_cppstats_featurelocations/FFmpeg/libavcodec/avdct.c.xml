<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\avdct.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fdctdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pixblockdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avdct.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(AVDCT,x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>AV_OPT_FLAG_AUDIO_PARAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>avdct_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"dct"</literal></expr>, <expr><literal type="string">"DCT algorithm"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dct_algo</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>DEFAULT</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>E</name></expr>, <expr><literal type="string">"dct"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"auto"</literal></expr>, <expr><literal type="string">"autoselect a good one"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_DCT_AUTO</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>E</name></expr>, <expr><literal type="string">"dct"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"fastint"</literal></expr>, <expr><literal type="string">"fast integer (experimental / for debugging)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_DCT_FASTINT</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>E</name></expr>, <expr><literal type="string">"dct"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"int"</literal></expr>, <expr><literal type="string">"accurate integer"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_DCT_INT</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>E</name></expr>, <expr><literal type="string">"dct"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"mmx"</literal></expr>, <expr><literal type="string">"experimental / for debugging"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_DCT_MMX</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>E</name></expr>, <expr><literal type="string">"dct"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"altivec"</literal></expr>, <expr><literal type="string">"experimental / for debugging"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_DCT_ALTIVEC</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>E</name></expr>, <expr><literal type="string">"dct"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"faan"</literal></expr>, <expr><literal type="string">"floating point AAN DCT (experimental / for debugging)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_DCT_FAAN</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>E</name></expr>, <expr><literal type="string">"dct"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"idct"</literal></expr>, <expr><literal type="string">"select IDCT implementation"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>idct_algo</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>DEFAULT</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>E</name><operator>|</operator><name>D</name></expr>, <expr><literal type="string">"idct"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"auto"</literal></expr>, <expr><literal type="string">"autoselect a good one"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_IDCT_AUTO</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>E</name><operator>|</operator><name>D</name></expr>, <expr><literal type="string">"idct"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"int"</literal></expr>, <expr><literal type="string">"experimental / for debugging"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_IDCT_INT</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>E</name><operator>|</operator><name>D</name></expr>, <expr><literal type="string">"idct"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"simple"</literal></expr>, <expr><literal type="string">"experimental / for debugging"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_IDCT_SIMPLE</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>E</name><operator>|</operator><name>D</name></expr>, <expr><literal type="string">"idct"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"simplemmx"</literal></expr>, <expr><literal type="string">"experimental / for debugging"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_IDCT_SIMPLEMMX</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>E</name><operator>|</operator><name>D</name></expr>, <expr><literal type="string">"idct"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"arm"</literal></expr>, <expr><literal type="string">"experimental / for debugging"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_IDCT_ARM</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>E</name><operator>|</operator><name>D</name></expr>, <expr><literal type="string">"idct"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"altivec"</literal></expr>, <expr><literal type="string">"experimental / for debugging"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_IDCT_ALTIVEC</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>E</name><operator>|</operator><name>D</name></expr>, <expr><literal type="string">"idct"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"simplearm"</literal></expr>, <expr><literal type="string">"experimental / for debugging"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_IDCT_SIMPLEARM</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>E</name><operator>|</operator><name>D</name></expr>, <expr><literal type="string">"idct"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"simplearmv5te"</literal></expr>, <expr><literal type="string">"experimental / for debugging"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_IDCT_SIMPLEARMV5TE</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>E</name><operator>|</operator><name>D</name></expr>, <expr><literal type="string">"idct"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"simplearmv6"</literal></expr>, <expr><literal type="string">"experimental / for debugging"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_IDCT_SIMPLEARMV6</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>E</name><operator>|</operator><name>D</name></expr>, <expr><literal type="string">"idct"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"simpleneon"</literal></expr>, <expr><literal type="string">"experimental / for debugging"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_IDCT_SIMPLENEON</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>E</name><operator>|</operator><name>D</name></expr>, <expr><literal type="string">"idct"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"xvid"</literal></expr>, <expr><literal type="string">"experimental / for debugging"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_IDCT_XVID</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>E</name><operator>|</operator><name>D</name></expr>, <expr><literal type="string">"idct"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"xvidmmx"</literal></expr>, <expr><literal type="string">"experimental / for debugging"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_IDCT_XVID</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>E</name><operator>|</operator><name>D</name></expr>, <expr><literal type="string">"idct"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"faani"</literal></expr>, <expr><literal type="string">"floating point AAN IDCT (experimental / for debugging)"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_IDCT_FAAN</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>D</name><operator>|</operator><name>E</name></expr>, <expr><literal type="string">"idct"</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"simpleauto"</literal></expr>, <expr><literal type="string">"experimental / for debugging"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_IDCT_SIMPLEAUTO</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>V</name><operator>|</operator><name>E</name><operator>|</operator><name>D</name></expr>, <expr><literal type="string">"idct"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"bits_per_sample"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bits_per_sample</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">8</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">0</literal></expr>,}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>avdct_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"AVDCT"</literal></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>avdct_options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>avcodec_dct_get_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>&amp;</operator><name>avdct_class</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AVDCT</name> <modifier>*</modifier></type><name>avcodec_dct_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVDCT</name> <modifier>*</modifier></type><name>dsp</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVDCT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dsp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>av_class</name></name> <operator>=</operator> <operator>&amp;</operator><name>avdct_class</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_opt_set_defaults</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dsp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avcodec_dct_init</name><parameter_list>(<parameter><decl><type><name>AVDCT</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><call><name>avcodec_alloc_context3</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>avctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>=</operator> <name><name>dsp</name><operator>-&gt;</operator><name>idct_algo</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>dct_algo</name></name> <operator>=</operator> <name><name>dsp</name><operator>-&gt;</operator><name>dct_algo</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <name><name>dsp</name><operator>-&gt;</operator><name>bits_per_sample</name></name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcpy(&amp;dsp-&gt;name, &amp;src.name, sizeof(dsp-&gt;name))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_IDCTDSP</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>IDCTDSPContext</name></type> <name>idsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_idctdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>idsp</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>idsp</name></expr></argument>, <argument><expr><name>idct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>idsp</name></expr></argument>, <argument><expr><name>idct_permutation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_FDCTDSP</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>FDCTDSPContext</name></type> <name>fdsp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_fdctdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdsp</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>fdsp</name></expr></argument>, <argument><expr><name>fdct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_PIXBLOCKDSP</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>PixblockDSPContext</name></type> <name>pdsp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_pixblockdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pdsp</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COPY</name><argument_list>(<argument><expr><name>pdsp</name></expr></argument>, <argument><expr><name>get_pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
