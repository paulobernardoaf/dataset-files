<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vaapi_encode_h264.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va_enc_h264.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_h264.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_levels.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_sei.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vaapi_encode.h"</cpp:file></cpp:include>

<enum>enum <block>{
<decl><name>SEI_TIMING</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>SEI_IDENTIFIER</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>SEI_RECOVERY_POINT</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,
}</block>;</enum>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>vaapi_encode_h264_sei_identifier_uuid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xaf</literal></expr>,
<expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x4d</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>VAAPIEncodeH264Picture</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>frame_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pic_order_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_idr_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>idr_pic_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>primary_pic_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slice_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cpb_delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dpb_delay</name></decl>;</decl_stmt>
}</block></struct></type> <name>VAAPIEncodeH264Picture</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VAAPIEncodeH264Context</name> <block>{
<decl_stmt><decl><type><name>VAAPIEncodeContext</name></type> <name>common</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>qp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>coder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aud</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sei</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>mb_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fixed_qp_idr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fixed_qp_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fixed_qp_b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dpb_frames</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>cbc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodedBitstreamFragment</name></type> <name>current_access_unit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H264RawAUD</name></type> <name>raw_aud</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264RawSPS</name></type> <name>raw_sps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264RawPPS</name></type> <name>raw_pps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264RawSEI</name></type> <name>raw_sei</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264RawSlice</name></type> <name>raw_slice</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H264RawSEIBufferingPeriod</name></type> <name>sei_buffering_period</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264RawSEIPicTiming</name></type> <name>sei_pic_timing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264RawSEIRecoveryPoint</name></type> <name>sei_recovery_point</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264RawSEIUserDataUnregistered</name></type> <name>sei_identifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sei_identifier_string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>aud_needed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sei_needed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sei_cbr_workaround_needed</name></decl>;</decl_stmt>
}</block></struct></type> <name>VAAPIEncodeH264Context</name>;</typedef>


<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_h264_write_access_unit</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>au</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeH264Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_write_fragment_data</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write packed header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data_len</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>au</name><operator>-&gt;</operator><name>data_size</name></name> <operator>-</operator> <name><name>au</name><operator>-&gt;</operator><name>data_bit_padding</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Access unit too large: "</literal>
<literal type="string">"%zu &lt; %zu.\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>data_len</name></expr></argument>,
<argument><expr><literal type="number">8</literal> <operator>*</operator> <name><name>au</name><operator>-&gt;</operator><name>data_size</name></name> <operator>-</operator> <name><name>au</name><operator>-&gt;</operator><name>data_bit_padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSPC</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>au</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>au</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>data_len</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>au</name><operator>-&gt;</operator><name>data_size</name></name> <operator>-</operator> <name><name>au</name><operator>-&gt;</operator><name>data_bit_padding</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_h264_add_nal</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>au</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>nal_unit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeH264Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264RawNALUnitHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><name>nal_unit</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_insert_unit_content</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>header</name><operator>-&gt;</operator><name>nal_unit_type</name></name></expr></argument>, <argument><expr><name>nal_unit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to add NAL unit: "</literal>
<literal type="string">"type = %d.\n"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>nal_unit_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_h264_write_sequence_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeH264Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>au</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>current_access_unit</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>aud_needed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_h264_add_nal</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_aud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>aud_needed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_h264_add_nal</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_sps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_h264_add_nal</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_pps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_h264_write_access_unit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_h264_write_slice_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodeSlice</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeH264Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>au</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>current_access_unit</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>aud_needed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_h264_add_nal</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_aud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>aud_needed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_h264_add_nal</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_slice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_h264_write_access_unit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_h264_write_extra_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeH264Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>au</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>current_access_unit</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>sei_needed</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>H264RawSEI</name> <modifier>*</modifier></type><name>sei</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_sei</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>aud_needed</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_h264_add_nal</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_aud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>aud_needed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>sei</name> <operator>=</operator> <operator>(</operator><name>H264RawSEI</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>nal_unit_header</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>nal_unit_type</name> <operator>=</operator> <name>H264_NAL_SEI</name></expr>,
}</block></expr>,
}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>sei_needed</name></name> <operator>&amp;</operator> <name>SEI_IDENTIFIER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>payload_type</name> <operator>=</operator> <name>H264_SEI_TYPE_USER_DATA_UNREGISTERED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>payload</name><operator>.</operator><name>user_data_unregistered</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>sei_identifier</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>sei_needed</name></name> <operator>&amp;</operator> <name>SEI_TIMING</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_IDR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>payload_type</name> <operator>=</operator> <name>H264_SEI_TYPE_BUFFERING_PERIOD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>payload</name><operator>.</operator><name>buffering_period</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>sei_buffering_period</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>payload_type</name> <operator>=</operator> <name>H264_SEI_TYPE_PIC_TIMING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>payload</name><operator>.</operator><name>pic_timing</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>sei_pic_timing</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>sei_needed</name></name> <operator>&amp;</operator> <name>SEI_RECOVERY_POINT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>payload_type</name> <operator>=</operator> <name>H264_SEI_TYPE_RECOVERY_POINT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>payload</name><operator>.</operator><name>recovery_point</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>sei_recovery_point</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sei</name><operator>-&gt;</operator><name>payload_count</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>sei</name><operator>-&gt;</operator><name>payload_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_h264_add_nal</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>au</name></expr></argument>, <argument><expr><name>sei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sei_needed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_h264_write_access_unit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>VAEncPackedHeaderRawData</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>CONFIG_VAAPI_1</name></expr></cpp:if>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>sei_cbr_workaround_needed</name></name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><operator>*</operator><name>data_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>VAEncPackedHeaderH264_SEI</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sei_cbr_workaround_needed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>AVERROR_EOF</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_h264_init_sequence_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIEncodeH264Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264RawSPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_sps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264RawPPS</name> <modifier>*</modifier></type><name>pps</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_pps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAEncSequenceParameterBufferH264</name> <modifier>*</modifier></type><name>vseq</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>codec_sequence_params</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAEncPictureParameterBufferH264</name> <modifier>*</modifier></type><name>vpic</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>codec_picture_params</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>nal_unit_header</name><operator>.</operator><name>nal_ref_idc</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>nal_unit_header</name><operator>.</operator><name>nal_unit_type</name></name> <operator>=</operator> <name>H264_NAL_SPS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_H264_CONSTRAINED_BASELINE</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_H264_MAIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>constraint_set1_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_H264_HIGH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>constraint_set3_flag</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>==</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_H264_MAIN</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_H264_HIGH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>constraint_set4_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>constraint_set5_flag</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>b_per_p</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>dpb_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>dpb_frames</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>max_b_depth</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name> <operator>!=</operator> <name>FF_LEVEL_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>level_idc</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>H264LevelDescriptor</name> <modifier>*</modifier></type><name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>framerate</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>framerate</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>framerate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>ff_h264_guess_level</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>,
<argument><expr><name>framerate</name></expr></argument>,
<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <literal type="number">16</literal></expr></argument>,
<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <literal type="number">16</literal></expr></argument>,
<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>dpb_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Using level %s.\n"</literal></expr></argument>, <argument><expr><name><name>level</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>level</name><operator>-&gt;</operator><name>constraint_set3_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>constraint_set3_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>level_idc</name></name> <operator>=</operator> <name><name>level</name><operator>-&gt;</operator><name>level_idc</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Stream will not conform "</literal>
<literal type="string">"to any level: using level 6.2.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>level_idc</name></name> <operator>=</operator> <literal type="number">62</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>seq_parameter_set_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_max_frame_num_minus4</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pic_order_cnt_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_max_pic_order_cnt_lsb_minus4</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>max_num_ref_frames</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>dpb_frames</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pic_width_in_mbs_minus1</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pic_height_in_map_units_minus1</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>direct_8x8_inference_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>priv</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>priv</name><operator>-&gt;</operator><name>mb_height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>frame_cropping_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>frame_crop_left_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>frame_crop_right_offset</name></name> <operator>=</operator>
<operator>(</operator><literal type="number">16</literal> <operator>*</operator> <name><name>priv</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>frame_crop_top_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>frame_crop_bottom_offset</name></name> <operator>=</operator>
<operator>(</operator><literal type="number">16</literal> <operator>*</operator> <name><name>priv</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>frame_cropping_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui_parameters_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVRational</name></type> <name><name>sar_idc</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">80</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">160</literal></expr>, <expr><literal type="number">99</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sar_idc</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <name><name>sar_idc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num</name> <operator>&amp;&amp;</operator>
<name>den</name> <operator>==</operator> <name><name>sar_idc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>den</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>aspect_ratio_idc</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>sar_idc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>aspect_ratio_idc</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>sar_width</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>sar_height</name></name> <operator>=</operator> <name>den</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>aspect_ratio_info_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>!=</operator> <name>AVCOL_RANGE_UNSPECIFIED</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>!=</operator> <name>AVCOL_PRI_UNSPECIFIED</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>!=</operator> <name>AVCOL_TRC_UNSPECIFIED</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>!=</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>video_signal_type_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>video_format</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>video_full_range_flag</name></name> <operator>=</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>AVCOL_RANGE_JPEG</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>!=</operator> <name>AVCOL_PRI_UNSPECIFIED</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>!=</operator> <name>AVCOL_TRC_UNSPECIFIED</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>!=</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>colour_description_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>colour_primaries</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>transfer_characteristics</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>matrix_coefficients</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>video_format</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>video_full_range_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>colour_primaries</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>transfer_characteristics</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>matrix_coefficients</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>chroma_sample_location</name></name> <operator>!=</operator> <name>AVCHROMA_LOC_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>chroma_loc_info_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>chroma_sample_loc_type_top_field</name></name> <operator>=</operator>
<name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>chroma_sample_loc_type_bottom_field</name></name> <operator>=</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>chroma_sample_location</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>timing_info_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>num_units_in_tick</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>time_scale</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>fixed_frame_rate_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>num_units_in_tick</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>time_scale</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>fixed_frame_rate_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>sei</name></name> <operator>&amp;</operator> <name>SEI_TIMING</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>H264RawHRD</name> <modifier>*</modifier></type><name>hrd</name> <init>= <expr><operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>nal_hrd_parameters</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264RawSEIBufferingPeriod</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>sei_buffering_period</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>nal_hrd_parameters_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hrd</name><operator>-&gt;</operator><name>cpb_cnt_minus1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><name><name>hrd</name><operator>-&gt;</operator><name>bit_rate_scale</name></name> <operator>=</operator>
<call><name>av_clip_uintp2</name><argument_list>(<argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_bit_rate</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">15</literal> <operator>-</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hrd</name><operator>-&gt;</operator><name>bit_rate_value_minus1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>va_bit_rate</name></name> <operator>&gt;&gt;</operator> <name><name>hrd</name><operator>-&gt;</operator><name>bit_rate_scale</name></name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hrd</name><operator>-&gt;</operator><name>cpb_size_scale</name></name> <operator>=</operator>
<call><name>av_clip_uintp2</name><argument_list>(<argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hrd_params</name><operator>.</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">15</literal> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hrd</name><operator>-&gt;</operator><name>cpb_size_value_minus1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>hrd_params</name><operator>.</operator><name>buffer_size</name></name> <operator>&gt;&gt;</operator> <name><name>hrd</name><operator>-&gt;</operator><name>cpb_size_scale</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>



<expr_stmt><expr><name><name>hrd</name><operator>-&gt;</operator><name>cbr_flag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hrd</name><operator>-&gt;</operator><name>initial_cpb_removal_delay_length_minus1</name></name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hrd</name><operator>-&gt;</operator><name>cpb_removal_delay_length_minus1</name></name> <operator>=</operator> <literal type="number">23</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hrd</name><operator>-&gt;</operator><name>dpb_output_delay_length_minus1</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hrd</name><operator>-&gt;</operator><name>time_offset_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>seq_parameter_set_id</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>seq_parameter_set_id</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>nal</name><operator>.</operator><name>initial_cpb_removal_delay</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">90000</literal> <operator>*</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>hrd_params</name><operator>.</operator><name>initial_buffer_fullness</name></name> <operator>/</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>hrd_params</name><operator>.</operator><name>buffer_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>nal</name><operator>.</operator><name>initial_cpb_removal_delay_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>nal_hrd_parameters_present_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>low_delay_hrd_flag</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>fixed_frame_rate_flag</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>bitstream_restriction_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>motion_vectors_over_pic_boundaries_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>log2_max_mv_length_horizontal</name></name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>log2_max_mv_length_vertical</name></name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>max_num_reorder_frames</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>max_b_depth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>max_dec_frame_buffering</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>max_b_depth</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>nal_unit_header</name><operator>.</operator><name>nal_ref_idc</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>nal_unit_header</name><operator>.</operator><name>nal_unit_type</name></name> <operator>=</operator> <name>H264_NAL_PPS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>pic_parameter_set_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>seq_parameter_set_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>entropy_coding_mode_flag</name></name> <operator>=</operator>
<operator>!</operator><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <name>FF_PROFILE_H264_BASELINE</name> <operator>||</operator>
<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <name>FF_PROFILE_H264_EXTENDED</name> <operator>||</operator>
<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <name>FF_PROFILE_H264_CAVLC_444</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>coder</name></name> <operator>&amp;&amp;</operator> <name><name>pps</name><operator>-&gt;</operator><name>entropy_coding_mode_flag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>entropy_coding_mode_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l0_default_active_minus1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l1_default_active_minus1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>pic_init_qp_minus26</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_idr</name></name> <operator>-</operator> <literal type="number">26</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <name>FF_PROFILE_H264_BASELINE</name> <operator>||</operator>
<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <name>FF_PROFILE_H264_EXTENDED</name> <operator>||</operator>
<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <name>FF_PROFILE_H264_MAIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>more_rbsp_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>more_rbsp_data</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>transform_8x8_mode_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>vseq</name> <operator>=</operator> <operator>(</operator><name>VAEncSequenceParameterBufferH264</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>seq_parameter_set_id</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>seq_parameter_set_id</name></name></expr>,
<expr><operator>.</operator><name>level_idc</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>level_idc</name></name></expr>,
<expr><operator>.</operator><name>intra_period</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr>,
<expr><operator>.</operator><name>intra_idr_period</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr>,
<expr><operator>.</operator><name>ip_period</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>b_per_p</name></name> <operator>+</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>bits_per_second</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>va_bit_rate</name></name></expr>,
<expr><operator>.</operator><name>max_num_ref_frames</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>max_num_ref_frames</name></name></expr>,
<expr><operator>.</operator><name>picture_width_in_mbs</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pic_width_in_mbs_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>picture_height_in_mbs</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pic_height_in_map_units_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name><name>seq_fields</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>chroma_format_idc</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>,
<expr><operator>.</operator><name>frame_mbs_only_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name></expr>,
<expr><operator>.</operator><name>mb_adaptive_frame_field_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>mb_adaptive_frame_field_flag</name></name></expr>,
<expr><operator>.</operator><name>seq_scaling_matrix_present_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>seq_scaling_matrix_present_flag</name></name></expr>,
<expr><operator>.</operator><name>direct_8x8_inference_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>direct_8x8_inference_flag</name></name></expr>,
<expr><operator>.</operator><name>log2_max_frame_num_minus4</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_frame_num_minus4</name></name></expr>,
<expr><operator>.</operator><name>pic_order_cnt_type</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pic_order_cnt_type</name></name></expr>,
<expr><operator>.</operator><name>log2_max_pic_order_cnt_lsb_minus4</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_pic_order_cnt_lsb_minus4</name></name></expr>,
<expr><operator>.</operator><name>delta_pic_order_always_zero_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>delta_pic_order_always_zero_flag</name></name></expr>,
}</block></expr>,

<expr><operator>.</operator><name>bit_depth_luma_minus8</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma_minus8</name></name></expr>,
<expr><operator>.</operator><name>bit_depth_chroma_minus8</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma_minus8</name></name></expr>,

<expr><operator>.</operator><name>frame_cropping_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>frame_cropping_flag</name></name></expr>,
<expr><operator>.</operator><name>frame_crop_left_offset</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>frame_crop_left_offset</name></name></expr>,
<expr><operator>.</operator><name>frame_crop_right_offset</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>frame_crop_right_offset</name></name></expr>,
<expr><operator>.</operator><name>frame_crop_top_offset</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>frame_crop_top_offset</name></name></expr>,
<expr><operator>.</operator><name>frame_crop_bottom_offset</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>frame_crop_bottom_offset</name></name></expr>,

<expr><operator>.</operator><name>vui_parameters_present_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui_parameters_present_flag</name></name></expr>,

<expr><operator>.</operator><name><name>vui_fields</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>aspect_ratio_info_present_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>aspect_ratio_info_present_flag</name></name></expr>,
<expr><operator>.</operator><name>timing_info_present_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>timing_info_present_flag</name></name></expr>,
<expr><operator>.</operator><name>bitstream_restriction_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>bitstream_restriction_flag</name></name></expr>,
<expr><operator>.</operator><name>log2_max_mv_length_horizontal</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>log2_max_mv_length_horizontal</name></name></expr>,
<expr><operator>.</operator><name>log2_max_mv_length_vertical</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>log2_max_mv_length_vertical</name></name></expr>,
}</block></expr>,

<expr><operator>.</operator><name>aspect_ratio_idc</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>aspect_ratio_idc</name></name></expr>,
<expr><operator>.</operator><name>sar_width</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>sar_width</name></name></expr>,
<expr><operator>.</operator><name>sar_height</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>sar_height</name></name></expr>,
<expr><operator>.</operator><name>num_units_in_tick</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>num_units_in_tick</name></name></expr>,
<expr><operator>.</operator><name>time_scale</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>time_scale</name></name></expr>,
}</block></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>vpic</name> <operator>=</operator> <operator>(</operator><name>VAEncPictureParameterBufferH264</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>CurrPic</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>picture_id</name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VA_PICTURE_H264_INVALID</name></expr>,
}</block></expr>,

<expr><operator>.</operator><name>coded_buf</name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>,

<expr><operator>.</operator><name>pic_parameter_set_id</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>pic_parameter_set_id</name></name></expr>,
<expr><operator>.</operator><name>seq_parameter_set_id</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>seq_parameter_set_id</name></name></expr>,

<expr><operator>.</operator><name>pic_init_qp</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>pic_init_qp_minus26</name></name> <operator>+</operator> <literal type="number">26</literal></expr>,
<expr><operator>.</operator><name>num_ref_idx_l0_active_minus1</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l0_default_active_minus1</name></name></expr>,
<expr><operator>.</operator><name>num_ref_idx_l1_active_minus1</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l1_default_active_minus1</name></name></expr>,

<expr><operator>.</operator><name>chroma_qp_index_offset</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name></name></expr>,
<expr><operator>.</operator><name>second_chroma_qp_index_offset</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>second_chroma_qp_index_offset</name></name></expr>,

<expr><operator>.</operator><name><name>pic_fields</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>entropy_coding_mode_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>entropy_coding_mode_flag</name></name></expr>,
<expr><operator>.</operator><name>weighted_pred_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>weighted_pred_flag</name></name></expr>,
<expr><operator>.</operator><name>weighted_bipred_idc</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>weighted_bipred_idc</name></name></expr>,
<expr><operator>.</operator><name>constrained_intra_pred_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>constrained_intra_pred_flag</name></name></expr>,
<expr><operator>.</operator><name>transform_8x8_mode_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>transform_8x8_mode_flag</name></name></expr>,
<expr><operator>.</operator><name>deblocking_filter_control_present_flag</name> <operator>=</operator>
<name><name>pps</name><operator>-&gt;</operator><name>deblocking_filter_control_present_flag</name></name></expr>,
<expr><operator>.</operator><name>redundant_pic_cnt_present_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>redundant_pic_cnt_present_flag</name></name></expr>,
<expr><operator>.</operator><name>pic_order_present_flag</name> <operator>=</operator>
<name><name>pps</name><operator>-&gt;</operator><name>bottom_field_pic_order_in_frame_present_flag</name></name></expr>,
<expr><operator>.</operator><name>pic_scaling_matrix_present_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>pic_scaling_matrix_present_flag</name></name></expr>,
}</block></expr>,
}</block></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_h264_init_picture_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIEncodeH264Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIEncodeH264Picture</name> <modifier>*</modifier></type><name>hpic</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>prev</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIEncodeH264Picture</name> <modifier>*</modifier></type><name>hprev</name> <init>= <expr><ternary><condition><expr><name>prev</name></expr> ?</condition><then> <expr><name><name>prev</name><operator>-&gt;</operator><name>priv_data</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAEncPictureParameterBufferH264</name> <modifier>*</modifier></type><name>vpic</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>codec_picture_params</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_IDR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>display_order</name></name> <operator>==</operator> <name><name>pic</name><operator>-&gt;</operator><name>encode_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>last_idr_frame</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>display_order</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>idr_pic_id</name></name> <operator>=</operator> <ternary><condition><expr><name>hprev</name></expr> ?</condition><then> <expr><name><name>hprev</name><operator>-&gt;</operator><name>idr_pic_id</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>primary_pic_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>=</operator> <name><name>hprev</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>+</operator> <name><name>prev</name><operator>-&gt;</operator><name>is_reference</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>last_idr_frame</name></name> <operator>=</operator> <name><name>hprev</name><operator>-&gt;</operator><name>last_idr_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>idr_pic_id</name></name> <operator>=</operator> <name><name>hprev</name><operator>-&gt;</operator><name>idr_pic_id</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_I</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>primary_pic_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_P</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>primary_pic_type</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>primary_pic_type</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>pic_order_cnt</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>display_order</name></name> <operator>-</operator> <name><name>hpic</name><operator>-&gt;</operator><name>last_idr_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>dpb_delay</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>display_order</name></name> <operator>-</operator> <name><name>pic</name><operator>-&gt;</operator><name>encode_order</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>max_b_depth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hpic</name><operator>-&gt;</operator><name>cpb_delay</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>encode_order</name></name> <operator>-</operator> <name><name>hpic</name><operator>-&gt;</operator><name>last_idr_frame</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>aud</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>aud_needed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>raw_aud</name></name> <operator>=</operator> <operator>(</operator><name>H264RawAUD</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>nal_unit_header</name> <operator>=</operator> <block>{
<expr><operator>.</operator><name>nal_unit_type</name> <operator>=</operator> <name>H264_NAL_AUD</name></expr>,
}</block></expr>,
<expr><operator>.</operator><name>primary_pic_type</name> <operator>=</operator> <name><name>hpic</name><operator>-&gt;</operator><name>primary_pic_type</name></name></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>aud_needed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sei_needed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>sei</name></name> <operator>&amp;</operator> <name>SEI_IDENTIFIER</name> <operator>&amp;&amp;</operator> <name><name>pic</name><operator>-&gt;</operator><name>encode_order</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sei_needed</name></name> <operator>|=</operator> <name>SEI_IDENTIFIER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>CONFIG_VAAPI_1</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>va_rc_mode</name></name> <operator>==</operator> <name>VA_RC_CBR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sei_cbr_workaround_needed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>sei</name></name> <operator>&amp;</operator> <name>SEI_TIMING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sei_pic_timing</name></name> <operator>=</operator> <operator>(</operator><name>H264RawSEIPicTiming</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>cpb_removal_delay</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>hpic</name><operator>-&gt;</operator><name>cpb_delay</name></name></expr>,
<expr><operator>.</operator><name>dpb_output_delay</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>hpic</name><operator>-&gt;</operator><name>dpb_delay</name></name></expr>,
}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sei_needed</name></name> <operator>|=</operator> <name>SEI_TIMING</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>sei</name></name> <operator>&amp;</operator> <name>SEI_RECOVERY_POINT</name> <operator>&amp;&amp;</operator> <name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_I</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sei_recovery_point</name></name> <operator>=</operator> <operator>(</operator><name>H264RawSEIRecoveryPoint</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>recovery_frame_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>exact_match_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>broken_link_flag</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>b_per_p</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>,
}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sei_needed</name></name> <operator>|=</operator> <name>SEI_RECOVERY_POINT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>CurrPic</name></name> <operator>=</operator> <operator>(</operator><name>VAPictureH264</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>picture_id</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>recon_surface</name></name></expr>,
<expr><operator>.</operator><name>frame_idx</name> <operator>=</operator> <name><name>hpic</name><operator>-&gt;</operator><name>frame_num</name></name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><operator>.</operator><name>TopFieldOrderCnt</name> <operator>=</operator> <name><name>hpic</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr>,
<expr><operator>.</operator><name>BottomFieldOrderCnt</name> <operator>=</operator> <name><name>hpic</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr>,
}</block></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIEncodeH264Picture</name> <modifier>*</modifier></type><name>href</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>ref</name> <operator>&amp;&amp;</operator> <name><name>ref</name><operator>-&gt;</operator><name>encode_order</name></name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>encode_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>href</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>priv_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>ReferenceFrames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>VAPictureH264</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>picture_id</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>recon_surface</name></name></expr>,
<expr><operator>.</operator><name>frame_idx</name> <operator>=</operator> <name><name>href</name><operator>-&gt;</operator><name>frame_num</name></name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VA_PICTURE_H264_SHORT_TERM_REFERENCE</name></expr>,
<expr><operator>.</operator><name>TopFieldOrderCnt</name> <operator>=</operator> <name><name>href</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr>,
<expr><operator>.</operator><name>BottomFieldOrderCnt</name> <operator>=</operator> <name><name>href</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>vpic</name><operator>-&gt;</operator><name>ReferenceFrames</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>ReferenceFrames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>VAPictureH264</name><operator>)</operator> <block>{
<expr><operator>.</operator><name>picture_id</name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>,
<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>VA_PICTURE_H264_INVALID</name></expr>,
}</block></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>coded_buf</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>output_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>=</operator> <name><name>hpic</name><operator>-&gt;</operator><name>frame_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>pic_fields</name><operator>.</operator><name>bits</name><operator>.</operator><name>idr_pic_flag</name></name> <operator>=</operator> <operator>(</operator><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_IDR</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>pic_fields</name><operator>.</operator><name>bits</name><operator>.</operator><name>reference_pic_flag</name></name> <operator>=</operator> <operator>(</operator><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PICTURE_TYPE_B</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vaapi_encode_h264_default_ref_pic_list</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier><modifier>*</modifier></type><name>rpl0</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier><modifier>*</modifier></type><name>rpl1</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rpl_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIEncodeH264Picture</name> <modifier>*</modifier></type><name>hp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hn</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>priv_data</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>nb_dpb_pics</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hn</name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>dpb</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>hn</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>&lt;</operator> <name><name>hp</name><operator>-&gt;</operator><name>frame_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_P</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>n</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hc</name> <operator>=</operator> <name><name>rpl0</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>hc</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>!=</operator> <name><name>hn</name><operator>-&gt;</operator><name>frame_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hc</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>&gt;</operator> <name><name>hn</name><operator>-&gt;</operator><name>frame_num</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rpl0</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>rpl0</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>rpl0</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>dpb</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>n</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hc</name> <operator>=</operator> <name><name>rpl0</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>hc</name><operator>-&gt;</operator><name>pic_order_cnt</name></name> <operator>!=</operator> <name><name>hp</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hc</name><operator>-&gt;</operator><name>pic_order_cnt</name></name> <operator>&lt;</operator> <name><name>hp</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hn</name><operator>-&gt;</operator><name>pic_order_cnt</name></name> <operator>&gt;</operator> <name><name>hp</name><operator>-&gt;</operator><name>pic_order_cnt</name></name> <operator>||</operator>
<name><name>hn</name><operator>-&gt;</operator><name>pic_order_cnt</name></name> <operator>&lt;</operator> <name><name>hc</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hn</name><operator>-&gt;</operator><name>pic_order_cnt</name></name> <operator>&gt;</operator> <name><name>hc</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>rpl0</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>rpl0</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>rpl0</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>dpb</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>n</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hc</name> <operator>=</operator> <name><name>rpl1</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>hc</name><operator>-&gt;</operator><name>pic_order_cnt</name></name> <operator>!=</operator> <name><name>hp</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hc</name><operator>-&gt;</operator><name>pic_order_cnt</name></name> <operator>&gt;</operator> <name><name>hp</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hn</name><operator>-&gt;</operator><name>pic_order_cnt</name></name> <operator>&lt;</operator> <name><name>hp</name><operator>-&gt;</operator><name>pic_order_cnt</name></name> <operator>||</operator>
<name><name>hn</name><operator>-&gt;</operator><name>pic_order_cnt</name></name> <operator>&gt;</operator> <name><name>hc</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>hn</name><operator>-&gt;</operator><name>pic_order_cnt</name></name> <operator>&lt;</operator> <name><name>hc</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>rpl1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>rpl1</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>rpl1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>dpb</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rpl0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>rpl1</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>VAAPIEncodePicture</name><operator>*</operator></expr></argument>, <argument><expr><name><name>rpl1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rpl1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_P</name> <operator>||</operator>
<name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Default RefPicList0 for fn=%d/poc=%d:"</literal></expr></argument>,
<argument><expr><name><name>hp</name><operator>-&gt;</operator><name>frame_num</name></name></expr></argument>, <argument><expr><name><name>hp</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hn</name> <operator>=</operator> <name><name>rpl0</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" fn=%d/poc=%d"</literal></expr></argument>,
<argument><expr><name><name>hn</name><operator>-&gt;</operator><name>frame_num</name></name></expr></argument>, <argument><expr><name><name>hn</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Default RefPicList1 for fn=%d/poc=%d:"</literal></expr></argument>,
<argument><expr><name><name>hp</name><operator>-&gt;</operator><name>frame_num</name></name></expr></argument>, <argument><expr><name><name>hp</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hn</name> <operator>=</operator> <name><name>rpl1</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" fn=%d/poc=%d"</literal></expr></argument>,
<argument><expr><name><name>hn</name><operator>-&gt;</operator><name>frame_num</name></name></expr></argument>, <argument><expr><name><name>hn</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>rpl_size</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_h264_init_slice_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,
<parameter><decl><type><name>VAAPIEncodeSlice</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeH264Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIEncodeH264Picture</name> <modifier>*</modifier></type><name>hpic</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>prev</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264RawSPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_sps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264RawPPS</name> <modifier>*</modifier></type><name>pps</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_pps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264RawSliceHeader</name> <modifier>*</modifier></type><name>sh</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>raw_slice</name><operator>.</operator><name>header</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAEncPictureParameterBufferH264</name> <modifier>*</modifier></type><name>vpic</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>codec_picture_params</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAEncSliceParameterBufferH264</name> <modifier>*</modifier></type><name>vslice</name> <init>= <expr><name><name>slice</name><operator>-&gt;</operator><name>codec_slice_params</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_IDR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>nal_unit_header</name><operator>.</operator><name>nal_unit_type</name></name> <operator>=</operator> <name>H264_NAL_IDR_SLICE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>nal_unit_header</name><operator>.</operator><name>nal_ref_idc</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>nal_unit_header</name><operator>.</operator><name>nal_unit_type</name></name> <operator>=</operator> <name>H264_NAL_SLICE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>nal_unit_header</name><operator>.</operator><name>nal_ref_idc</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>is_reference</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>first_mb_in_slice</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>block_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>=</operator> <name><name>hpic</name><operator>-&gt;</operator><name>slice_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>pic_parameter_set_id</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>pic_parameter_set_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>=</operator> <name><name>hpic</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>&amp;</operator>
<operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_frame_num_minus4</name></name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>idr_pic_id</name></name> <operator>=</operator> <name><name>hpic</name><operator>-&gt;</operator><name>idr_pic_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>pic_order_cnt_lsb</name></name> <operator>=</operator> <name><name>hpic</name><operator>-&gt;</operator><name>pic_order_cnt</name></name> <operator>&amp;</operator>
<operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_pic_order_cnt_lsb_minus4</name></name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>direct_spatial_mv_pred_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>slice_qp_delta</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_b</name></name> <operator>-</operator> <operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>pic_init_qp_minus26</name></name> <operator>+</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_P</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>slice_qp_delta</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_p</name></name> <operator>-</operator> <operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>pic_init_qp_minus26</name></name> <operator>+</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>slice_qp_delta</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_idr</name></name> <operator>-</operator> <operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>pic_init_qp_minus26</name></name> <operator>+</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>is_reference</name></name> <operator>&amp;&amp;</operator> <name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PICTURE_TYPE_IDR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name><name>discard_list</name><index>[<expr><name>MAX_DPB_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>discard</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>keep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>prev</name><operator>-&gt;</operator><name>nb_dpb_pics</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_dpb_pics</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>prev</name><operator>-&gt;</operator><name>dpb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>pic</name><operator>-&gt;</operator><name>dpb</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_dpb_pics</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>discard_list</name><index>[<expr><name>discard</name></expr>]</index></name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>dpb</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>discard</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>keep</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>keep</name> <operator>&lt;=</operator> <name><name>priv</name><operator>-&gt;</operator><name>dpb_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>discard</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>adaptive_ref_pic_marking_mode_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>adaptive_ref_pic_marking_mode_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>discard</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeH264Picture</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><name><name>discard_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>old</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>&lt;</operator> <name><name>hpic</name><operator>-&gt;</operator><name>frame_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>memory_management_control_operation</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>difference_of_pic_nums_minus1</name> <operator>=</operator>
<name><name>hpic</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>-</operator> <name><name>old</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>memory_management_control_operation</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_P</name> <operator>||</operator> <name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name><name>def_l0</name><index>[<expr><name>MAX_DPB_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>def_l1</name><index>[<expr><name>MAX_DPB_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIEncodeH264Picture</name> <modifier>*</modifier></type><name>href</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vaapi_encode_h264_default_ref_pic_list</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>,
<argument><expr><name>def_l0</name></expr></argument>, <argument><expr><name>def_l1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_P</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>need_rplm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>def_l0</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_rplm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>ref_pic_list_modification_flag_l0</name></name> <operator>=</operator> <name>need_rplm</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>need_rplm</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pic_num</name> <init>= <expr><name><name>hpic</name><operator>-&gt;</operator><name>frame_num</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>href</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>href</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>!=</operator> <name>pic_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>href</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>&lt;</operator> <name>pic_num</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>rplm_l0</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>modification_of_pic_nums_idc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>rplm_l0</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>abs_diff_pic_num_minus1</name> <operator>=</operator>
<name>pic_num</name> <operator>-</operator> <name><name>href</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>rplm_l0</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>modification_of_pic_nums_idc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>rplm_l0</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>abs_diff_pic_num_minus1</name> <operator>=</operator>
<name><name>href</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>-</operator> <name>pic_num</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>pic_num</name> <operator>=</operator> <name><name>href</name><operator>-&gt;</operator><name>frame_num</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>rplm_l0</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>modification_of_pic_nums_idc</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>need_rplm_l0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>need_rplm_l1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>href</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>href</name><operator>-&gt;</operator><name>pic_order_cnt</name></name> <operator>!=</operator> <name><name>hpic</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>href</name><operator>-&gt;</operator><name>pic_order_cnt</name></name> <operator>&lt;</operator> <name><name>hpic</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>def_l0</name><index>[<expr><name>n0</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_rplm_l0</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>n0</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>def_l1</name><index>[<expr><name>n1</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>need_rplm_l1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>n1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>ref_pic_list_modification_flag_l0</name></name> <operator>=</operator> <name>need_rplm_l0</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>need_rplm_l0</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pic_num</name> <init>= <expr><name><name>hpic</name><operator>-&gt;</operator><name>frame_num</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>href</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>href</name><operator>-&gt;</operator><name>pic_order_cnt</name></name> <operator>&gt;</operator> <name><name>hpic</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>href</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>!=</operator> <name>pic_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>href</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>&lt;</operator> <name>pic_num</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>rplm_l0</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>modification_of_pic_nums_idc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>rplm_l0</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>abs_diff_pic_num_minus1</name> <operator>=</operator>
<name>pic_num</name> <operator>-</operator> <name><name>href</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>rplm_l0</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>modification_of_pic_nums_idc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>rplm_l0</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>abs_diff_pic_num_minus1</name> <operator>=</operator>
<name><name>href</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>-</operator> <name>pic_num</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>pic_num</name> <operator>=</operator> <name><name>href</name><operator>-&gt;</operator><name>frame_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>j</name> <operator>==</operator> <name>n0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>rplm_l0</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>modification_of_pic_nums_idc</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>ref_pic_list_modification_flag_l1</name></name> <operator>=</operator> <name>need_rplm_l1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>need_rplm_l1</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pic_num</name> <init>= <expr><name><name>hpic</name><operator>-&gt;</operator><name>frame_num</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>href</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>priv_data</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>href</name><operator>-&gt;</operator><name>pic_order_cnt</name></name> <operator>&lt;</operator> <name><name>hpic</name><operator>-&gt;</operator><name>pic_order_cnt</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>href</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>!=</operator> <name>pic_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>href</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>&lt;</operator> <name>pic_num</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>rplm_l1</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>modification_of_pic_nums_idc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>rplm_l1</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>abs_diff_pic_num_minus1</name> <operator>=</operator>
<name>pic_num</name> <operator>-</operator> <name><name>href</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>rplm_l1</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>modification_of_pic_nums_idc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>rplm_l1</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>abs_diff_pic_num_minus1</name> <operator>=</operator>
<name><name>href</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>-</operator> <name>pic_num</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>pic_num</name> <operator>=</operator> <name><name>href</name><operator>-&gt;</operator><name>frame_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>j</name> <operator>==</operator> <name>n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>rplm_l1</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>modification_of_pic_nums_idc</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>macroblock_address</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>block_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>num_macroblocks</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>macroblock_info</name></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>%</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>pic_parameter_set_id</name></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>pic_parameter_set_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>idr_pic_id</name></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>idr_pic_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>pic_order_cnt_lsb</name></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>pic_order_cnt_lsb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>direct_spatial_mv_pred_flag</name></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>direct_spatial_mv_pred_flag</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>vslice</name><operator>-&gt;</operator><name>RefPicList0</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>RefPicList0</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>picture_id</name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>RefPicList0</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>VA_PICTURE_H264_INVALID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>RefPicList1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>picture_id</name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>RefPicList1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>VA_PICTURE_H264_INVALID</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_P</name> <operator>||</operator>
<name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>RefPicList0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>vpic</name><operator>-&gt;</operator><name>ReferenceFrames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>RefPicList1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>vpic</name><operator>-&gt;</operator><name>ReferenceFrames</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>slice_qp_delta</name></name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>slice_qp_delta</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vaapi_encode_h264_configure</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIEncodeH264Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>AV_CODEC_ID_H264</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>va_rc_mode</name></name> <operator>==</operator> <name>VA_RC_CQP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_p</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc_quality</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>i_quant_factor</name></name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_idr</name></name> <operator>=</operator>
<call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>i_quant_factor</name></name> <operator>*</operator> <name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_p</name></name> <operator>+</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>i_quant_offset</name></name><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_idr</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_p</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>b_quant_factor</name></name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_b</name></name> <operator>=</operator>
<call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>b_quant_factor</name></name> <operator>*</operator> <name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_p</name></name> <operator>+</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>b_quant_offset</name></name><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_b</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_p</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Using fixed QP = "</literal>
<literal type="string">"%d / %d / %d for IDR- / P- / B-frames.\n"</literal></expr></argument>,
<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_idr</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_p</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_idr</name></name> <operator>=</operator> <literal type="number">26</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_p</name></name> <operator>=</operator> <literal type="number">26</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>fixed_qp_b</name></name> <operator>=</operator> <literal type="number">26</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>rc_mode</name><operator>-&gt;</operator><name>hrd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sei</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SEI_TIMING</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>sei</name></name> <operator>&amp;</operator> <name>SEI_IDENTIFIER</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lavc</name> <init>= <expr><name>LIBAVCODEC_IDENT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vaapi</name> <init>= <expr><name>VA_VERSION_S</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>driver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>sei_identifier</name><operator>.</operator><name>uuid_iso_iec_11578</name></name></expr></argument>,
<argument><expr><name>vaapi_encode_h264_sei_identifier_uuid</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>sei_identifier</name><operator>.</operator><name>uuid_iso_iec_11578</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>driver</name> <operator>=</operator> <call><name>vaQueryVendorString</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>driver</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>driver</name> <operator>=</operator> <literal type="string">"unknown driver"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s / VAAPI %s / %s"</literal></expr></argument>, <argument><expr><name>lavc</name></expr></argument>, <argument><expr><name>vaapi</name></expr></argument>, <argument><expr><name>driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sei_identifier_string</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>sei_identifier_string</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>sei_identifier_string</name></name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="string">"%s / VAAPI %s / %s"</literal></expr></argument>, <argument><expr><name>lavc</name></expr></argument>, <argument><expr><name>vaapi</name></expr></argument>, <argument><expr><name>driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sei_identifier</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>sei_identifier_string</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sei_identifier</name><operator>.</operator><name>data_length</name></name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>roi_quant_range</name></name> <operator>=</operator> <literal type="number">51</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>profile</name><operator>-&gt;</operator><name>depth</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VAAPIEncodeProfile</name></type> <name><name>vaapi_encode_h264_profiles</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>FF_PROFILE_H264_HIGH</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VAProfileH264High</name></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_H264_MAIN</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VAProfileH264Main</name></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_H264_CONSTRAINED_BASELINE</name></expr>,
<expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VAProfileH264ConstrainedBaseline</name></expr> }</block></expr>,
<expr><block>{ <expr><name>FF_PROFILE_UNKNOWN</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VAAPIEncodeType</name></type> <name>vaapi_encode_type_h264</name> <init>= <expr><block>{
<expr><operator>.</operator><name>profiles</name> <operator>=</operator> <name>vaapi_encode_h264_profiles</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAG_SLICE_CONTROL</name> <operator>|</operator>
<name>FLAG_B_PICTURES</name> <operator>|</operator>
<name>FLAG_B_PICTURE_REFERENCES</name> <operator>|</operator>
<name>FLAG_NON_IDR_KEY_PICTURES</name></expr>,

<expr><operator>.</operator><name>default_quality</name> <operator>=</operator> <literal type="number">20</literal></expr>,

<expr><operator>.</operator><name>configure</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_h264_configure</name></expr>,

<expr><operator>.</operator><name>picture_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAAPIEncodeH264Picture</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>sequence_params_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAEncSequenceParameterBufferH264</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init_sequence_params</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_h264_init_sequence_params</name></expr>,

<expr><operator>.</operator><name>picture_params_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAEncPictureParameterBufferH264</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init_picture_params</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_h264_init_picture_params</name></expr>,

<expr><operator>.</operator><name>slice_params_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAEncSliceParameterBufferH264</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init_slice_params</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_h264_init_slice_params</name></expr>,

<expr><operator>.</operator><name>sequence_header_type</name> <operator>=</operator> <name>VAEncPackedHeaderSequence</name></expr>,
<expr><operator>.</operator><name>write_sequence_header</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_h264_write_sequence_header</name></expr>,

<expr><operator>.</operator><name>slice_header_type</name> <operator>=</operator> <name>VAEncPackedHeaderH264_Slice</name></expr>,
<expr><operator>.</operator><name>write_slice_header</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_h264_write_slice_header</name></expr>,

<expr><operator>.</operator><name>write_extra_header</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_h264_write_extra_header</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vaapi_encode_h264_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VAAPIEncodeH264Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_type_h264</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>profile</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <name>FF_LEVEL_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>==</operator> <name>FF_COMPRESSION_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>quality</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FF_PROFILE_H264_BASELINE</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"H.264 baseline profile is not "</literal>
<literal type="string">"supported, using constrained baseline profile instead.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_H264_CONSTRAINED_BASELINE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_PROFILE_H264_EXTENDED</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"H.264 extended profile "</literal>
<literal type="string">"is not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
<case>case <expr><name>FF_PROFILE_H264_HIGH_10</name></expr>:</case>
<case>case <expr><name>FF_PROFILE_H264_HIGH_10_INTRA</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"H.264 10-bit profiles "</literal>
<literal type="string">"are not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
<case>case <expr><name>FF_PROFILE_H264_HIGH_422</name></expr>:</case>
<case>case <expr><name>FF_PROFILE_H264_HIGH_422_INTRA</name></expr>:</case>
<case>case <expr><name>FF_PROFILE_H264_HIGH_444</name></expr>:</case>
<case>case <expr><name>FF_PROFILE_H264_HIGH_444_PREDICTIVE</name></expr>:</case>
<case>case <expr><name>FF_PROFILE_H264_HIGH_444_INTRA</name></expr>:</case>
<case>case <expr><name>FF_PROFILE_H264_CAVLC_444</name></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"H.264 non-4:2:0 profiles "</literal>
<literal type="string">"are not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name> <operator>!=</operator> <name>FF_LEVEL_UNKNOWN</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>level</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid level %d: must fit "</literal>
<literal type="string">"in 8-bit unsigned integer.\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>desired_packed_headers</name></name> <operator>=</operator>
<name>VA_ENC_PACKED_HEADER_SEQUENCE</name> <operator>|</operator> 
<name>VA_ENC_PACKED_HEADER_SLICE</name> <operator>|</operator> 
<name>VA_ENC_PACKED_HEADER_MISC</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>surface_width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>surface_height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_block_height</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_block_width</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>qp</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>explicit_qp</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>qp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_vaapi_encode_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vaapi_encode_h264_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VAAPIEncodeH264Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_cbs_fragment_free</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>current_access_unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_cbs_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>sei_identifier_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_vaapi_encode_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(VAAPIEncodeH264Context, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>vaapi_encode_h264_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>VAAPI_ENCODE_COMMON_OPTIONS</name></expr>,
<expr><name>VAAPI_ENCODE_RC_OPTIONS</name></expr>,

<expr><block>{ <expr><literal type="string">"qp"</literal></expr>, <expr><literal type="string">"Constant QP (for P-frames; scaled by qfactor/qoffset for I/B)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>qp</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"quality"</literal></expr>, <expr><literal type="string">"Set encode quality (trades off against speed, higher is faster)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>quality</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"coder"</literal></expr>, <expr><literal type="string">"Entropy coder type"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>coder</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"coder"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cavlc"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"coder"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cabac"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"coder"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"vlc"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"coder"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ac"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"coder"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"aud"</literal></expr>, <expr><literal type="string">"Include AUD"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>aud</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sei"</literal></expr>, <expr><literal type="string">"Set SEI to include"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sei</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SEI_IDENTIFIER</name> <operator>|</operator> <name>SEI_TIMING</name> <operator>|</operator> <name>SEI_RECOVERY_POINT</name></expr> }</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"sei"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"identifier"</literal></expr>, <expr><literal type="string">"Include encoder version identifier"</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SEI_IDENTIFIER</name></expr> }</block></expr>,
<expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"sei"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"timing"</literal></expr>, <expr><literal type="string">"Include timing parameters (buffering_period and pic_timing)"</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SEI_TIMING</name></expr> }</block></expr>,
<expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"sei"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"recovery_point"</literal></expr>, <expr><literal type="string">"Include recovery points where appropriate"</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>SEI_RECOVERY_POINT</name></expr> }</block></expr>,
<expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"sei"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"profile"</literal></expr>, <expr><literal type="string">"Set profile (profile_idc and constraint_set*_flag)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_PROFILE_UNKNOWN</name></expr> }</block></expr>, <expr><name>FF_PROFILE_UNKNOWN</name></expr>, <expr><literal type="number">0xffff</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFILE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name, NULL, 0, AV_OPT_TYPE_CONST, { .i64 = value }, 0, 0, FLAGS, "profile"</cpp:value></cpp:define>

<expr><block>{ <macro><name>PROFILE</name><argument_list>(<argument><literal type="string">"constrained_baseline"</literal></argument>, <argument>FF_PROFILE_H264_CONSTRAINED_BASELINE</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>PROFILE</name><argument_list>(<argument><literal type="string">"main"</literal></argument>, <argument>FF_PROFILE_H264_MAIN</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>PROFILE</name><argument_list>(<argument><literal type="string">"high"</literal></argument>, <argument>FF_PROFILE_H264_HIGH</argument>)</argument_list></macro> }</block></expr>,
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROFILE</name></cpp:undef>

<expr><block>{ <expr><literal type="string">"level"</literal></expr>, <expr><literal type="string">"Set level (level_idc)"</literal></expr>,
<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,
<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_LEVEL_UNKNOWN</name></expr> }</block></expr>, <expr><name>FF_LEVEL_UNKNOWN</name></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name, NULL, 0, AV_OPT_TYPE_CONST, { .i64 = value }, 0, 0, FLAGS, "level"</cpp:value></cpp:define>

<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"1"</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"1.1"</literal></argument>, <argument><literal type="number">11</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"1.2"</literal></argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"1.3"</literal></argument>, <argument><literal type="number">13</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"2"</literal></argument>, <argument><literal type="number">20</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"2.1"</literal></argument>, <argument><literal type="number">21</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"2.2"</literal></argument>, <argument><literal type="number">22</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"3"</literal></argument>, <argument><literal type="number">30</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"3.1"</literal></argument>, <argument><literal type="number">31</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"3.2"</literal></argument>, <argument><literal type="number">32</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"4"</literal></argument>, <argument><literal type="number">40</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"4.1"</literal></argument>, <argument><literal type="number">41</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"4.2"</literal></argument>, <argument><literal type="number">42</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"5"</literal></argument>, <argument><literal type="number">50</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"5.1"</literal></argument>, <argument><literal type="number">51</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"5.2"</literal></argument>, <argument><literal type="number">52</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"6"</literal></argument>, <argument><literal type="number">60</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"6.1"</literal></argument>, <argument><literal type="number">61</literal></argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"6.2"</literal></argument>, <argument><literal type="number">62</literal></argument>)</argument_list></macro> }</block></expr>,
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LEVEL</name></cpp:undef>

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecDefault</name></type> <name><name>vaapi_encode_h264_defaults</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"bf"</literal></expr>, <expr><literal type="string">"2"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"120"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"i_qfactor"</literal></expr>, <expr><literal type="string">"1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"i_qoffset"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"b_qfactor"</literal></expr>, <expr><literal type="string">"6/5"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"b_qoffset"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"qmin"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"qmax"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>vaapi_encode_h264_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"h264_vaapi"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>vaapi_encode_h264_options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_h264_vaapi_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"h264_vaapi"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"H.264/AVC (VAAPI)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_H264</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAAPIEncodeH264Context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_h264_init</name></expr>,
<expr><operator>.</operator><name>send_frame</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_encode_send_frame</name></expr>,
<expr><operator>.</operator><name>receive_packet</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_encode_receive_packet</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_h264_close</name></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_h264_class</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>|</operator> <name>AV_CODEC_CAP_HARDWARE</name></expr>,
<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>vaapi_encode_h264_defaults</name></expr>,
<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{
<expr><name>AV_PIX_FMT_VAAPI</name></expr>,
<expr><name>AV_PIX_FMT_NONE</name></expr>,
}</block></expr>,
<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"vaapi"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
