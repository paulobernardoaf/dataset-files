<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\librsvgdec.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"librsvg-2.0/librsvg/rsvg.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>LibRSVGContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keep_ar</name></decl>;</decl_stmt>
}</block></struct></type> <name>LibRSVGContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>librsvg_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LibRSVGContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RsvgHandle</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RsvgDimensionData</name></type> <name>unscaled_dimensions</name></decl>, <decl><type ref="prev"/><name>dimensions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cairo_surface_t</name> <modifier>*</modifier></type><name>image</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cairo_t</name> <modifier>*</modifier></type><name>crender</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GError</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>rsvg_handle_new_from_data</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error parsing svg!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_error_free</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rsvg_handle_get_dimensions</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dimensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsvg_handle_get_dimensions</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unscaled_dimensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dimensions</name><operator>.</operator><name>width</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr> </then><else>: <expr><name><name>dimensions</name><operator>.</operator><name>width</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dimensions</name><operator>.</operator><name>height</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr> </then><else>: <expr><name><name>dimensions</name><operator>.</operator><name>height</name></name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>keep_ar</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>default_ar</name> <init>= <expr><name><name>unscaled_dimensions</name><operator>.</operator><name>width</name></name><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>unscaled_dimensions</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dimensions</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name><name>dimensions</name><operator>.</operator><name>height</name></name> <operator>*</operator> <name>default_ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dimensions</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name><name>dimensions</name><operator>.</operator><name>width</name></name> <operator>/</operator> <name>default_ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>dimensions</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>dimensions</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGB32</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>image</name> <operator>=</operator> <call><name>cairo_image_surface_create_for_data</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>CAIRO_FORMAT_ARGB32</name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cairo_surface_status</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CAIRO_STATUS_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>crender</name> <operator>=</operator> <call><name>cairo_create</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_save</name><argument_list>(<argument><expr><name>crender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cairo_set_operator</name><argument_list>(<argument><expr><name>crender</name></expr></argument>, <argument><expr><name>CAIRO_OPERATOR_CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cairo_paint</name><argument_list>(<argument><expr><name>crender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cairo_restore</name><argument_list>(<argument><expr><name>crender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_scale</name><argument_list>(<argument><expr><name>crender</name></expr></argument>, <argument><expr><name><name>dimensions</name><operator>.</operator><name>width</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>unscaled_dimensions</name><operator>.</operator><name>width</name></name></expr></argument>,
<argument><expr><name><name>dimensions</name><operator>.</operator><name>height</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>unscaled_dimensions</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rsvg_handle_render_cairo</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>crender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cairo_destroy</name><argument_list>(<argument><expr><name>crender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cairo_surface_destroy</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>g_object_unref</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(LibRSVGContext, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEC</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_DECODING_PARAM | AV_OPT_FLAG_VIDEO_PARAM)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"width"</literal></expr>, <expr><literal type="string">"Width to render to (0 for default)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"height"</literal></expr>, <expr><literal type="string">"Height to render to (0 for default)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"keep_ar"</literal></expr>, <expr><literal type="string">"Keep aspect ratio with custom width/height"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>keep_ar</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>DEC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>librsvg_decoder_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"Librsvg"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_librsvg_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"librsvg"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Librsvg rasterizer"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>librsvg_decoder_class</name></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_SVG</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>librsvg_decode_frame</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LibRSVGContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_LOSSLESS</name> <operator>|</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"librsvg"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
