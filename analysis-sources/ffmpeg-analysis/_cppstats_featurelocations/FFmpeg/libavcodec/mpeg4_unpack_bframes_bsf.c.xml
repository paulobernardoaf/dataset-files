<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mpeg4_unpack_bframes_bsf.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg4video.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>UnpackBFramesBSFContext</name> <block>{
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>b_frame_ref</name></decl>;</decl_stmt>
}</block></struct></type> <name>UnpackBFramesBSFContext</name>;</typedef>



<function><type><specifier>static</specifier> <name>void</name></type> <name>scan_buffer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pos_p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nb_vop</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pos_vop2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>startcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>buf_size</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pos</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>startcode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>avpriv_find_start_code</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>startcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>startcode</name> <operator>==</operator> <name>USER_DATA_STARTCODE</name> <operator>&amp;&amp;</operator> <name>pos_p</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">255</literal> <operator>&amp;&amp;</operator> <name>pos</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal> <operator>&amp;&amp;</operator> <name><name>pos</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pos_p</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <name>i</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>startcode</name> <operator>==</operator> <name>VOP_STARTCODE</name> <operator>&amp;&amp;</operator> <name>nb_vop</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>nb_vop</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>nb_vop</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>pos_vop2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pos_vop2</name> <operator>=</operator> <name>pos</name> <operator>-</operator> <name>buf</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpeg4_unpack_bframes_filter</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UnpackBFramesBSFContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos_p</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>nb_vop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pos_vop2</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_bsf_get_packet_ref</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>scan_buffer</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nb_vop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos_vop2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Found %d VOP startcode(s) in this packet.\n"</literal></expr></argument>, <argument><expr><name>nb_vop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos_vop2</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>b_frame_ref</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Missing one N-VOP packet, discarding one B-frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>b_frame_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_frame_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>b_frame_ref</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_frame_ref</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos_vop2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_frame_ref</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>pos_vop2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_vop</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Found %d VOP headers in one packet, only unpacking one.\n"</literal></expr></argument>, <argument><expr><name>nb_vop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_vop</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>b_frame_ref</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_frame_ref</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_frame_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_frame_ref</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_frame_ref</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>b_frame_ref</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <name>MAX_NVOP_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Skipping N-VOP.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>b_frame_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nb_vop</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>pos_vop2</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pos_p</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_packet_make_writable</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Updating DivX userdata (remove trailing 'p').\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>pos_p</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mpeg4_unpack_bframes_init</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>par_in</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos_p_ext</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>scan_buffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>par_in</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>par_in</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos_p_ext</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos_p_ext</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Updating DivX userdata (remove trailing 'p') in extradata.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>par_out</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><name>pos_p_ext</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mpeg4_unpack_bframes_close_flush</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsfc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UnpackBFramesBSFContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>bsfc</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>b_frame_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVCodecID</name></name></type> <name><name>codec_ids</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_CODEC_ID_MPEG4</name></expr>, <expr><name>AV_CODEC_ID_NONE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVBitStreamFilter</name></type> <name>ff_mpeg4_unpack_bframes_bsf</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mpeg4_unpack_bframes"</literal></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>UnpackBFramesBSFContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>mpeg4_unpack_bframes_init</name></expr>,
<expr><operator>.</operator><name>filter</name> <operator>=</operator> <name>mpeg4_unpack_bframes_filter</name></expr>,
<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>mpeg4_unpack_bframes_close_flush</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>mpeg4_unpack_bframes_close_flush</name></expr>,
<expr><operator>.</operator><name>codec_ids</name> <operator>=</operator> <name>codec_ids</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
