<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mpeg4audio.h">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_MPEG4AUDIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_MPEG4AUDIO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>MPEG4AudioConfig</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>object_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sampling_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chan_config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sbr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ext_object_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ext_sampling_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ext_sample_rate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ext_chan_config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ps</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>frame_length_short</name></decl>;</decl_stmt>
}</block></struct></type> <name>MPEG4AudioConfig</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>av_export_avcodec</name> <specifier>const</specifier> <name>int</name></type> <name><name>avpriv_mpeg4audio_sample_rates</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_mpeg4audio_channels</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>









<function_decl><type><name>int</name></type> <name>ff_mpeg4audio_get_config_gb</name><parameter_list>(<parameter><decl><type><name>MPEG4AudioConfig</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>sync_extension</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBAVCODEC_VERSION_MAJOR</name> <operator>&lt;</operator> <literal type="number">59</literal></expr></cpp:if>








<function_decl><type><name>int</name></type> <name>avpriv_mpeg4audio_get_config</name><parameter_list>(<parameter><decl><type><name>MPEG4AudioConfig</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bit_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sync_extension</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<function_decl><type><name>int</name></type> <name>avpriv_mpeg4audio_get_config2</name><parameter_list>(<parameter><decl><type><name>MPEG4AudioConfig</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sync_extension</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>AudioObjectType</name> <block>{
<decl><name>AOT_NULL</name></decl>,

<decl><name>AOT_AAC_MAIN</name></decl>, 
<decl><name>AOT_AAC_LC</name></decl>, 
<decl><name>AOT_AAC_SSR</name></decl>, 
<decl><name>AOT_AAC_LTP</name></decl>, 
<decl><name>AOT_SBR</name></decl>, 
<decl><name>AOT_AAC_SCALABLE</name></decl>, 
<decl><name>AOT_TWINVQ</name></decl>, 
<decl><name>AOT_CELP</name></decl>, 
<decl><name>AOT_HVXC</name></decl>, 
<decl><name>AOT_TTSI</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>, 
<decl><name>AOT_MAINSYNTH</name></decl>, 
<decl><name>AOT_WAVESYNTH</name></decl>, 
<decl><name>AOT_MIDI</name></decl>, 
<decl><name>AOT_SAFX</name></decl>, 
<decl><name>AOT_ER_AAC_LC</name></decl>, 
<decl><name>AOT_ER_AAC_LTP</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>, 
<decl><name>AOT_ER_AAC_SCALABLE</name></decl>, 
<decl><name>AOT_ER_TWINVQ</name></decl>, 
<decl><name>AOT_ER_BSAC</name></decl>, 
<decl><name>AOT_ER_AAC_LD</name></decl>, 
<decl><name>AOT_ER_CELP</name></decl>, 
<decl><name>AOT_ER_HVXC</name></decl>, 
<decl><name>AOT_ER_HILN</name></decl>, 
<decl><name>AOT_ER_PARAM</name></decl>, 
<decl><name>AOT_SSC</name></decl>, 
<decl><name>AOT_PS</name></decl>, 
<decl><name>AOT_SURROUND</name></decl>, 
<decl><name>AOT_ESCAPE</name></decl>, 
<decl><name>AOT_L1</name></decl>, 
<decl><name>AOT_L2</name></decl>, 
<decl><name>AOT_L3</name></decl>, 
<decl><name>AOT_DST</name></decl>, 
<decl><name>AOT_ALS</name></decl>, 
<decl><name>AOT_SLS</name></decl>, 
<decl><name>AOT_SLS_NON_CORE</name></decl>, 
<decl><name>AOT_ER_AAC_ELD</name></decl>, 
<decl><name>AOT_SMR_SIMPLE</name></decl>, 
<decl><name>AOT_SMR_MAIN</name></decl>, 
<decl><name>AOT_USAC_NOSBR</name></decl>, 
<decl><name>AOT_SAOC</name></decl>, 
<decl><name>AOT_LD_SURROUND</name></decl>, 
<decl><name>AOT_USAC</name></decl>, 
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PCE_SIZE</name></cpp:macro> <cpp:value>320</cpp:value></cpp:define> 


<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>unsigned</name> <name>int</name></type> <name>ff_pce_copy_bits</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,
<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>el</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>el</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ff_copy_pce_data</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>five_bit_ch</name></decl>, <decl><type ref="prev"/><name>four_bit_ch</name></decl>, <decl><type ref="prev"/><name>comment_size</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><call><name>put_bits_count</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_pce_copy_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>five_bit_ch</name> <operator>=</operator> <call><name>ff_pce_copy_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>five_bit_ch</name> <operator>+=</operator> <call><name>ff_pce_copy_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>five_bit_ch</name> <operator>+=</operator> <call><name>ff_pce_copy_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>four_bit_ch</name> <operator>=</operator> <call><name>ff_pce_copy_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>four_bit_ch</name> <operator>+=</operator> <call><name>ff_pce_copy_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>five_bit_ch</name> <operator>+=</operator> <call><name>ff_pce_copy_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>ff_pce_copy_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>ff_pce_copy_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_pce_copy_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>ff_pce_copy_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_pce_copy_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>ff_pce_copy_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>bits</name> <operator>=</operator> <name>five_bit_ch</name><operator>*</operator><literal type="number">5</literal><operator>+</operator><name>four_bit_ch</name><operator>*</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>bits</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>bits</name> <operator>-=</operator> <literal type="number">16</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_pce_copy_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_pce_copy_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>avpriv_align_put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>comment_size</name> <operator>=</operator> <call><name>ff_pce_copy_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>comment_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>comment_size</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_pce_copy_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><call><name>put_bits_count</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>offset</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
