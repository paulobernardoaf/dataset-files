<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\qsvenc.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mfx/mfxvideo.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext_qsv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qsv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qsv_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qsvenc.h"</cpp:file></cpp:include>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>mfxU16</name></type> <name>profile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block> <decl><name><name>profile_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>MFX_PROFILE_AVC_BASELINE</name></expr>, <expr><literal type="string">"baseline"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>MFX_PROFILE_AVC_MAIN</name></expr>, <expr><literal type="string">"main"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>MFX_PROFILE_AVC_EXTENDED</name></expr>, <expr><literal type="string">"extended"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>MFX_PROFILE_AVC_HIGH</name></expr>, <expr><literal type="string">"high"</literal></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>QSV_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>MFX_PROFILE_AVC_HIGH_422</name></expr>, <expr><literal type="string">"high 422"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>QSV_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>MFX_PROFILE_AVC_CONSTRAINED_BASELINE</name></expr>, <expr><literal type="string">"constrained baseline"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>MFX_PROFILE_AVC_CONSTRAINED_HIGH</name></expr>, <expr><literal type="string">"constrained high"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>MFX_PROFILE_AVC_PROGRESSIVE_HIGH</name></expr>, <expr><literal type="string">"progressive high"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><name>MFX_PROFILE_MPEG2_SIMPLE</name></expr>, <expr><literal type="string">"simple"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>MFX_PROFILE_MPEG2_MAIN</name></expr>, <expr><literal type="string">"main"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>MFX_PROFILE_MPEG2_HIGH</name></expr>, <expr><literal type="string">"high"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>MFX_PROFILE_VC1_SIMPLE</name></expr>, <expr><literal type="string">"simple"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>MFX_PROFILE_VC1_MAIN</name></expr>, <expr><literal type="string">"main"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>MFX_PROFILE_VC1_ADVANCED</name></expr>, <expr><literal type="string">"advanced"</literal></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>QSV_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>MFX_PROFILE_HEVC_MAIN</name></expr>, <expr><literal type="string">"main"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>MFX_PROFILE_HEVC_MAIN10</name></expr>, <expr><literal type="string">"main10"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>MFX_PROFILE_HEVC_MAINSP</name></expr>, <expr><literal type="string">"mainsp"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>print_profile</name><parameter_list>(<parameter><decl><type><name>mfxU16</name></type> <name>profile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>profile_names</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>profile</name> <operator>==</operator> <name><name>profile_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>profile</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>profile_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>mfxU16</name></type> <name>rc_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block> <decl><name><name>rc_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>MFX_RATECONTROL_CBR</name></expr>, <expr><literal type="string">"CBR"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>MFX_RATECONTROL_VBR</name></expr>, <expr><literal type="string">"VBR"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>MFX_RATECONTROL_CQP</name></expr>, <expr><literal type="string">"CQP"</literal></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_AVBR</name></expr></cpp:if>
<expr><block>{ <expr><name>MFX_RATECONTROL_AVBR</name></expr>, <expr><literal type="string">"AVBR"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_LA</name></expr></cpp:if>
<expr><block>{ <expr><name>MFX_RATECONTROL_LA</name></expr>, <expr><literal type="string">"LA"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_ICQ</name></expr></cpp:if>
<expr><block>{ <expr><name>MFX_RATECONTROL_ICQ</name></expr>, <expr><literal type="string">"ICQ"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>MFX_RATECONTROL_LA_ICQ</name></expr>, <expr><literal type="string">"LA_ICQ"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_VCM</name></expr></cpp:if>
<expr><block>{ <expr><name>MFX_RATECONTROL_VCM</name></expr>, <expr><literal type="string">"VCM"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>QSV_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>MFX_RATECONTROL_LA_EXT</name></expr>, <expr><literal type="string">"LA_EXT"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_LA_HRD</name></expr></cpp:if>
<expr><block>{ <expr><name>MFX_RATECONTROL_LA_HRD</name></expr>, <expr><literal type="string">"LA_HRD"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_QVBR</name></expr></cpp:if>
<expr><block>{ <expr><name>MFX_RATECONTROL_QVBR</name></expr>, <expr><literal type="string">"QVBR"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>print_ratecontrol</name><parameter_list>(<parameter><decl><type><name>mfxU16</name></type> <name>rc_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>rc_names</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>rc_mode</name> <operator>==</operator> <name><name>rc_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rc_mode</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>rc_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>print_threestate</name><parameter_list>(<parameter><decl><type><name>mfxU16</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>MFX_CODINGOPTION_ON</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"ON"</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>val</name> <operator>==</operator> <name>MFX_CODINGOPTION_OFF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"OFF"</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_video_param</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVEncContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>,
<parameter><decl><type><name>mfxExtBuffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>coding_opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mfxInfoMFX</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxExtCodingOption</name> <modifier>*</modifier></type><name>co</name> <init>= <expr><operator>(</operator><name>mfxExtCodingOption</name><operator>*</operator><operator>)</operator><name><name>coding_opts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO2</name></expr></cpp:if>
<decl_stmt><decl><type><name>mfxExtCodingOption2</name> <modifier>*</modifier></type><name>co2</name> <init>= <expr><operator>(</operator><name>mfxExtCodingOption2</name><operator>*</operator><operator>)</operator><name><name>coding_opts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO3</name></expr></cpp:if>
<decl_stmt><decl><type><name>mfxExtCodingOption3</name> <modifier>*</modifier></type><name>co3</name> <init>= <expr><operator>(</operator><name>mfxExtCodingOption3</name><operator>*</operator><operator>)</operator><name><name>coding_opts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_EXT_HEVC_TILES</name></expr></cpp:if>
<decl_stmt><decl><type><name>mfxExtHEVCTiles</name> <modifier>*</modifier></type><name>exthevctiles</name> <init>= <expr><operator>(</operator><name>mfxExtHEVCTiles</name> <operator>*</operator><operator>)</operator><name><name>coding_opts</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>QSV_HAVE_CO_VPS</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"profile: %s; level: %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><call><name>print_profile</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>CodecProfile</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>CodecLevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"GopPicSize: %"</literal><name>PRIu16</name><literal type="string">"; GopRefDist: %"</literal><name>PRIu16</name><literal type="string">"; GopOptFlag: "</literal></expr></argument>,
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>GopPicSize</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>GopRefDist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>GopOptFlag</name></name> <operator>&amp;</operator> <name>MFX_GOP_CLOSED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"closed "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>GopOptFlag</name></name> <operator>&amp;</operator> <name>MFX_GOP_STRICT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"strict "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"; IdrInterval: %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>IdrInterval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"TargetUsage: %"</literal><name>PRIu16</name><literal type="string">"; RateControlMethod: %s\n"</literal></expr></argument>,
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>TargetUsage</name></name></expr></argument>, <argument><expr><call><name>print_ratecontrol</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>RateControlMethod</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>RateControlMethod</name></name> <operator>==</operator> <name>MFX_RATECONTROL_CBR</name> <operator>||</operator>
<name><name>info</name><operator>-&gt;</operator><name>RateControlMethod</name></name> <operator>==</operator> <name>MFX_RATECONTROL_VBR</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_VCM</name></expr></cpp:if>
<operator>||</operator> <name><name>info</name><operator>-&gt;</operator><name>RateControlMethod</name></name> <operator>==</operator> <name>MFX_RATECONTROL_VCM</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"BufferSizeInKB: %"</literal><name>PRIu16</name><literal type="string">"; InitialDelayInKB: %"</literal><name>PRIu16</name><literal type="string">"; TargetKbps: %"</literal><name>PRIu16</name><literal type="string">"; MaxKbps: %"</literal><name>PRIu16</name><literal type="string">"; BRCParamMultiplier: %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>BufferSizeInKB</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>InitialDelayInKB</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>TargetKbps</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>MaxKbps</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>BRCParamMultiplier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>RateControlMethod</name></name> <operator>==</operator> <name>MFX_RATECONTROL_CQP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"QPI: %"</literal><name>PRIu16</name><literal type="string">"; QPP: %"</literal><name>PRIu16</name><literal type="string">"; QPB: %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>QPI</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>QPP</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>QPB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_AVBR</name></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>RateControlMethod</name></name> <operator>==</operator> <name>MFX_RATECONTROL_AVBR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"TargetKbps: %"</literal><name>PRIu16</name><literal type="string">"; Accuracy: %"</literal><name>PRIu16</name><literal type="string">"; Convergence: %"</literal><name>PRIu16</name><literal type="string">"; BRCParamMultiplier: %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>TargetKbps</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>Accuracy</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>Convergence</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>BRCParamMultiplier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_LA</name></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>RateControlMethod</name></name> <operator>==</operator> <name>MFX_RATECONTROL_LA</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_LA_HRD</name></expr></cpp:if>
<operator>||</operator> <name><name>info</name><operator>-&gt;</operator><name>RateControlMethod</name></name> <operator>==</operator> <name>MFX_RATECONTROL_LA_HRD</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"TargetKbps: %"</literal><name>PRIu16</name><literal type="string">"; LookAheadDepth: %"</literal><name>PRIu16</name><literal type="string">"; BRCParamMultiplier: %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>TargetKbps</name></name></expr></argument>, <argument><expr><name><name>co2</name><operator>-&gt;</operator><name>LookAheadDepth</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>BRCParamMultiplier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_ICQ</name></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>RateControlMethod</name></name> <operator>==</operator> <name>MFX_RATECONTROL_ICQ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"ICQQuality: %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>ICQQuality</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>RateControlMethod</name></name> <operator>==</operator> <name>MFX_RATECONTROL_LA_ICQ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"ICQQuality: %"</literal><name>PRIu16</name><literal type="string">"; LookAheadDepth: %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>ICQQuality</name></name></expr></argument>, <argument><expr><name><name>co2</name><operator>-&gt;</operator><name>LookAheadDepth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_QVBR</name></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>RateControlMethod</name></name> <operator>==</operator> <name>MFX_RATECONTROL_QVBR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"QVBRQuality: %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>co3</name><operator>-&gt;</operator><name>QVBRQuality</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"NumSlice: %"</literal><name>PRIu16</name><literal type="string">"; NumRefFrame: %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>NumSlice</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>NumRefFrame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"RateDistortionOpt: %s\n"</literal></expr></argument>,
<argument><expr><call><name>print_threestate</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>RateDistortionOpt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_EXT_HEVC_TILES</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_HEVC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"NumTileColumns: %"</literal><name>PRIu16</name><literal type="string">"; NumTileRows: %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>exthevctiles</name><operator>-&gt;</operator><name>NumTileColumns</name></name></expr></argument>, <argument><expr><name><name>exthevctiles</name><operator>-&gt;</operator><name>NumTileRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO2</name></expr></cpp:if>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"RecoveryPointSEI: %s IntRefType: %"</literal><name>PRIu16</name><literal type="string">"; IntRefCycleSize: %"</literal><name>PRIu16</name><literal type="string">"; IntRefQPDelta: %"</literal><name>PRId16</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><call><name>print_threestate</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>RecoveryPointSEI</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>co2</name><operator>-&gt;</operator><name>IntRefType</name></name></expr></argument>, <argument><expr><name><name>co2</name><operator>-&gt;</operator><name>IntRefCycleSize</name></name></expr></argument>, <argument><expr><name><name>co2</name><operator>-&gt;</operator><name>IntRefQPDelta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"MaxFrameSize: %"</literal><name>PRIu16</name><literal type="string">"; "</literal></expr></argument>, <argument><expr><name><name>co2</name><operator>-&gt;</operator><name>MaxFrameSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_MAX_SLICE_SIZE</name></expr></cpp:if>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"MaxSliceSize: %"</literal><name>PRIu16</name><literal type="string">"; "</literal></expr></argument>, <argument><expr><name><name>co2</name><operator>-&gt;</operator><name>MaxSliceSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"BitrateLimit: %s; MBBRC: %s; ExtBRC: %s\n"</literal></expr></argument>,
<argument><expr><call><name>print_threestate</name><argument_list>(<argument><expr><name><name>co2</name><operator>-&gt;</operator><name>BitrateLimit</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>print_threestate</name><argument_list>(<argument><expr><name><name>co2</name><operator>-&gt;</operator><name>MBBRC</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>print_threestate</name><argument_list>(<argument><expr><name><name>co2</name><operator>-&gt;</operator><name>ExtBRC</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_TRELLIS</name></expr></cpp:if>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Trellis: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>co2</name><operator>-&gt;</operator><name>Trellis</name></name> <operator>&amp;</operator> <name>MFX_TRELLIS_OFF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>co2</name><operator>-&gt;</operator><name>Trellis</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>co2</name><operator>-&gt;</operator><name>Trellis</name></name> <operator>&amp;</operator> <name>MFX_TRELLIS_I</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"I"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>co2</name><operator>-&gt;</operator><name>Trellis</name></name> <operator>&amp;</operator> <name>MFX_TRELLIS_P</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"P"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>co2</name><operator>-&gt;</operator><name>Trellis</name></name> <operator>&amp;</operator> <name>MFX_TRELLIS_B</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_VDENC</name></expr></cpp:if>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"VDENC: %s\n"</literal></expr></argument>, <argument><expr><call><name>print_threestate</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>LowPower</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>QSV_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"RepeatPPS: %s; NumMbPerSlice: %"</literal><name>PRIu16</name><literal type="string">"; LookAheadDS: "</literal></expr></argument>,
<argument><expr><call><name>print_threestate</name><argument_list>(<argument><expr><name><name>co2</name><operator>-&gt;</operator><name>RepeatPPS</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>co2</name><operator>-&gt;</operator><name>NumMbPerSlice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>co2</name><operator>-&gt;</operator><name>LookAheadDS</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MFX_LOOKAHEAD_DS_OFF</name></expr>:</case> <expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>MFX_LOOKAHEAD_DS_2x</name></expr>:</case> <expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"2x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>MFX_LOOKAHEAD_DS_4x</name></expr>:</case> <expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"4x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"AdaptiveI: %s; AdaptiveB: %s; BRefType: "</literal></expr></argument>,
<argument><expr><call><name>print_threestate</name><argument_list>(<argument><expr><name><name>co2</name><operator>-&gt;</operator><name>AdaptiveI</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>print_threestate</name><argument_list>(<argument><expr><name><name>co2</name><operator>-&gt;</operator><name>AdaptiveB</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>co2</name><operator>-&gt;</operator><name>BRefType</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MFX_B_REF_OFF</name></expr>:</case> <expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>MFX_B_REF_PYRAMID</name></expr>:</case> <expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"pyramid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>QSV_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"MinQPI: %"</literal><name>PRIu8</name><literal type="string">"; MaxQPI: %"</literal><name>PRIu8</name><literal type="string">"; MinQPP: %"</literal><name>PRIu8</name><literal type="string">"; MaxQPP: %"</literal><name>PRIu8</name><literal type="string">"; MinQPB: %"</literal><name>PRIu8</name><literal type="string">"; MaxQPB: %"</literal><name>PRIu8</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name><name>co2</name><operator>-&gt;</operator><name>MinQPI</name></name></expr></argument>, <argument><expr><name><name>co2</name><operator>-&gt;</operator><name>MaxQPI</name></name></expr></argument>, <argument><expr><name><name>co2</name><operator>-&gt;</operator><name>MinQPP</name></name></expr></argument>, <argument><expr><name><name>co2</name><operator>-&gt;</operator><name>MaxQPP</name></name></expr></argument>, <argument><expr><name><name>co2</name><operator>-&gt;</operator><name>MinQPB</name></name></expr></argument>, <argument><expr><name><name>co2</name><operator>-&gt;</operator><name>MaxQPB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_GPB</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_HEVC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,<argument><expr><literal type="string">"GPB: %s\n"</literal></expr></argument>, <argument><expr><call><name>print_threestate</name><argument_list>(<argument><expr><name><name>co3</name><operator>-&gt;</operator><name>GPB</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Entropy coding: %s; MaxDecFrameBuffering: %"</literal><name>PRIu16</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>co</name><operator>-&gt;</operator><name>CAVLC</name></name> <operator>==</operator> <name>MFX_CODINGOPTION_ON</name></expr> ?</condition><then> <expr><literal type="string">"CAVLC"</literal></expr> </then><else>: <expr><literal type="string">"CABAC"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>co</name><operator>-&gt;</operator><name>MaxDecFrameBuffering</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"NalHrdConformance: %s; SingleSeiNalUnit: %s; VuiVclHrdParameters: %s VuiNalHrdParameters: %s\n"</literal></expr></argument>,
<argument><expr><call><name>print_threestate</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>NalHrdConformance</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>print_threestate</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>SingleSeiNalUnit</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>print_threestate</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>VuiVclHrdParameters</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>print_threestate</name><argument_list>(<argument><expr><name><name>co</name><operator>-&gt;</operator><name>VuiNalHrdParameters</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"FrameRateExtD: %"</literal><name>PRIu32</name><literal type="string">"; FrameRateExtN: %"</literal><name>PRIu32</name><literal type="string">" \n"</literal></expr></argument>,
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>FrameInfo</name><operator>.</operator><name>FrameRateExtD</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>FrameInfo</name><operator>.</operator><name>FrameRateExtN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>select_rc_mode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVEncContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rc_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxU16</name></type> <name>rc_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>want_la</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>look_ahead</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>want_qscale</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>want_vcm</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>vcm</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>want_la</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>QSV_HAVE_LA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Lookahead ratecontrol mode requested, but is not supported by this SDK version\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>want_vcm</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>QSV_HAVE_VCM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"VCM ratecontrol mode requested, but is not supported by this SDK version\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>want_la</name> <operator>+</operator> <name>want_qscale</name> <operator>+</operator> <name>want_vcm</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"More than one of: { constant qscale, lookahead, VCM } requested, "</literal>
<literal type="string">"only one of them can be used at a time.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>want_qscale</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>QSV_HAVE_ICQ</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"ICQ ratecontrol mode requested, but is not supported by this SDK version\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>want_qscale</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc_mode</name> <operator>=</operator> <name>MFX_RATECONTROL_CQP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc_desc</name> <operator>=</operator> <literal type="string">"constant quantization parameter (CQP)"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_VCM</name></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>want_vcm</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc_mode</name> <operator>=</operator> <name>MFX_RATECONTROL_VCM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc_desc</name> <operator>=</operator> <literal type="string">"video conferencing mode (VCM)"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_LA</name></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>want_la</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc_mode</name> <operator>=</operator> <name>MFX_RATECONTROL_LA</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc_desc</name> <operator>=</operator> <literal type="string">"VBR with lookahead (LA)"</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_ICQ</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc_mode</name> <operator>=</operator> <name>MFX_RATECONTROL_LA_ICQ</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc_desc</name> <operator>=</operator> <literal type="string">"intelligent constant quality with lookahead (LA_ICQ)"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_ICQ</name></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc_mode</name> <operator>=</operator> <name>MFX_RATECONTROL_ICQ</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc_desc</name> <operator>=</operator> <literal type="string">"intelligent constant quality (ICQ)"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>==</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc_mode</name> <operator>=</operator> <name>MFX_RATECONTROL_CBR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc_desc</name> <operator>=</operator> <literal type="string">"constant bitrate (CBR)"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_AVBR</name></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc_mode</name> <operator>=</operator> <name>MFX_RATECONTROL_AVBR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc_desc</name> <operator>=</operator> <literal type="string">"average variable bitrate (AVBR)"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_QVBR</name></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc_mode</name> <operator>=</operator> <name>MFX_RATECONTROL_QVBR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc_desc</name> <operator>=</operator> <literal type="string">"constant quality with VBR algorithm (QVBR)"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else <block>{<block_content>
<expr_stmt><expr><name>rc_mode</name> <operator>=</operator> <name>MFX_RATECONTROL_VBR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc_desc</name> <operator>=</operator> <literal type="string">"variable bitrate (VBR)"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>RateControlMethod</name></name> <operator>=</operator> <name>rc_mode</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Using the %s ratecontrol method\n"</literal></expr></argument>, <argument><expr><name>rc_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_enc_param</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVEncContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>mfxVideoParam</name></type> <name>param_out</name> <init>= <expr><block>{ <expr><operator>.</operator><name><name>mfx</name><operator>.</operator><name>CodecId</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>CodecId</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxStatus</name></type> <name>ret</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNMATCH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(param_out.mfx.x != q-&gt;param.mfx.x)</cpp:value></cpp:define>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXVideoENCODE_Query</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>UNMATCH</name><argument_list>(<argument><expr><name>CodecId</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Current codec type is unsupported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNMATCH</name><argument_list>(<argument><expr><name>CodecProfile</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Current profile is unsupported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNMATCH</name><argument_list>(<argument><expr><name>RateControlMethod</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Selected ratecontrol mode is unsupported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNMATCH</name><argument_list>(<argument><expr><name>LowPower</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Low power mode is unsupported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNMATCH</name><argument_list>(<argument><expr><name><name>FrameInfo</name><operator>.</operator><name>FrameRateExtN</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>UNMATCH</name><argument_list>(<argument><expr><name><name>FrameInfo</name><operator>.</operator><name>FrameRateExtD</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Current frame rate is unsupported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNMATCH</name><argument_list>(<argument><expr><name><name>FrameInfo</name><operator>.</operator><name>PicStruct</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Current picture structure is unsupported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNMATCH</name><argument_list>(<argument><expr><name><name>FrameInfo</name><operator>.</operator><name>Width</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>UNMATCH</name><argument_list>(<argument><expr><name><name>FrameInfo</name><operator>.</operator><name>Height</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Current resolution is unsupported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>UNMATCH</name><argument_list>(<argument><expr><name><name>FrameInfo</name><operator>.</operator><name>FourCC</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Current pixel format is unsupported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_video_param_jpeg</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVEncContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>sw_format</name> <init>= <expr><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_QSV</name></expr> ?</condition><then>
<expr><name><name>avctx</name><operator>-&gt;</operator><name>sw_pix_fmt</name></name></expr> </then><else>: <expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_qsv_codec_id_to_mfx</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_BUG</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>CodecId</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>CodecLevel</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>CodecProfile</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>profile</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>sw_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_BUG</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_qsv_map_pixfmt</name><argument_list>(<argument><expr><name>sw_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>FourCC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>CropX</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>CropY</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>CropW</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>CropH</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>AspectRatioW</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>AspectRatioH</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>ChromaFormat</name></name> <operator>=</operator> <name>MFX_CHROMAFORMAT_YUV420</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>BitDepthLuma</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>BitDepthChroma</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Shift</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name> <operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>frames_hwctx</name> <init>= <expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Width</name></name> <operator>=</operator> <name><name>frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>Info</name><operator>.</operator><name>Width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Height</name></name> <operator>=</operator> <name><name>frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>Info</name><operator>.</operator><name>Height</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>FrameRateExtN</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>FrameRateExtD</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>FrameRateExtN</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>FrameRateExtD</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>Interleaved</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>Quality</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>RestartInterval</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>width_align</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>height_align</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>width_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>height_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_video_param</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVEncContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>sw_format</name> <init>= <expr><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_QSV</name></expr> ?</condition><then>
<expr><name><name>avctx</name><operator>-&gt;</operator><name>sw_pix_fmt</name></name></expr> </then><else>: <expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>quant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>target_bitrate_kbps</name></decl>, <decl><type ref="prev"/><name>max_bitrate_kbps</name></decl>, <decl><type ref="prev"/><name>brc_param_multiplier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buffer_size_in_kilobytes</name></decl>, <decl><type ref="prev"/><name>initial_delay_in_kilobytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_qsv_codec_id_to_mfx</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_BUG</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>CodecId</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>CodecLevel</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>==</operator> <name>FF_COMPRESSION_DEFAULT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>preset</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>&gt;</operator> <name>MFX_TARGETUSAGE_BEST_SPEED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid compression level: "</literal>
<literal type="string">"valid range is 0-%d, using %d instead\n"</literal></expr></argument>,
<argument><expr><name>MFX_TARGETUSAGE_BEST_SPEED</name></expr></argument>, <argument><expr><name>MFX_TARGETUSAGE_BEST_SPEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>=</operator> <name>MFX_TARGETUSAGE_BEST_SPEED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>low_power</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_VDENC</name></expr></cpp:if>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>LowPower</name></name> <operator>=</operator> <name>MFX_CODINGOPTION_ON</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"The low_power option is "</literal>
<literal type="string">"not supported with this MSDK version.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>low_power</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>LowPower</name></name> <operator>=</operator> <name>MFX_CODINGOPTION_OFF</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>LowPower</name></name> <operator>=</operator> <name>MFX_CODINGOPTION_OFF</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>CodecProfile</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>profile</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>TargetUsage</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>GopPicSize</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>GopRefDist</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>GopOptFlag</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_CLOSED_GOP</name></expr> ?</condition><then>
<expr><name>MFX_GOP_CLOSED</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>IdrInterval</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>idr_interval</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>NumSlice</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>NumRefFrame</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>EncodedOrder</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>BufferSizeInKB</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>sw_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_BUG</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_qsv_map_pixfmt</name><argument_list>(<argument><expr><name>sw_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>FourCC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>CropX</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>CropY</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>CropW</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>CropH</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>AspectRatioW</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>AspectRatioH</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>ChromaFormat</name></name> <operator>=</operator> <name>MFX_CHROMAFORMAT_YUV420</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>BitDepthLuma</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>BitDepthChroma</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Shift</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>



<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>width_align</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_HEVC</name> <operator>||</operator>
<call><name>QSV_RUNTIME_VERSION_ATLEAST</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>ver</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>width_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_INTERLACED_DCT</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>PicStruct</name></name> <operator>=</operator> <name>MFX_PICSTRUCT_FIELD_TFF</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>height_align</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>PicStruct</name></name> <operator>=</operator> <name>MFX_PICSTRUCT_PROGRESSIVE</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>height_align</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_HEVC</name></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>height_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>frames_hwctx</name> <init>= <expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Width</name></name> <operator>=</operator> <name><name>frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>Info</name><operator>.</operator><name>Width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Height</name></name> <operator>=</operator> <name><name>frames_hwctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>Info</name><operator>.</operator><name>Height</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>FrameRateExtN</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>FrameRateExtD</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>FrameRateExtN</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>FrameRateExtD</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>select_rc_mode</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>buffer_size_in_kilobytes</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>/</operator> <literal type="number">8000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>initial_delay_in_kilobytes</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_initial_buffer_occupancy</name></name> <operator>/</operator> <literal type="number">8000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>target_bitrate_kbps</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>max_bitrate_kbps</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>brc_param_multiplier</name> <operator>=</operator> <operator>(</operator><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>FFMAX3</name><argument_list>(<argument><expr><name>target_bitrate_kbps</name></expr></argument>, <argument><expr><name>max_bitrate_kbps</name></expr></argument>, <argument><expr><name>buffer_size_in_kilobytes</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>initial_delay_in_kilobytes</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>/</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>RateControlMethod</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MFX_RATECONTROL_CBR</name></expr>:</case>
<case>case <expr><name>MFX_RATECONTROL_VBR</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_VCM</name></expr></cpp:if>
<case>case <expr><name>MFX_RATECONTROL_VCM</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_QVBR</name></expr></cpp:if>
<case>case <expr><name>MFX_RATECONTROL_QVBR</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>BufferSizeInKB</name></name> <operator>=</operator> <name>buffer_size_in_kilobytes</name> <operator>/</operator> <name>brc_param_multiplier</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>InitialDelayInKB</name></name> <operator>=</operator> <name>initial_delay_in_kilobytes</name> <operator>/</operator> <name>brc_param_multiplier</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>TargetKbps</name></name> <operator>=</operator> <name>target_bitrate_kbps</name> <operator>/</operator> <name>brc_param_multiplier</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>MaxKbps</name></name> <operator>=</operator> <name>max_bitrate_kbps</name> <operator>/</operator> <name>brc_param_multiplier</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>BRCParamMultiplier</name></name> <operator>=</operator> <name>brc_param_multiplier</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_QVBR</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>RateControlMethod</name></name> <operator>==</operator> <name>MFX_RATECONTROL_QVBR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco3</name><operator>.</operator><name>QVBRQuality</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>MFX_RATECONTROL_CQP</name></expr>:</case>
<expr_stmt><expr><name>quant</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>/</operator> <name>FF_QP2LAMBDA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>QPI</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>quant</name> <operator>*</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>i_quant_factor</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>i_quant_offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>QPP</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>quant</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>QPB</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>quant</name> <operator>*</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>b_quant_factor</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>b_quant_offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_AVBR</name></expr></cpp:if>
<case>case <expr><name>MFX_RATECONTROL_AVBR</name></expr>:</case>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>TargetKbps</name></name> <operator>=</operator> <name>target_bitrate_kbps</name> <operator>/</operator> <name>brc_param_multiplier</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>Convergence</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>avbr_convergence</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>Accuracy</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>avbr_accuracy</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>BRCParamMultiplier</name></name> <operator>=</operator> <name>brc_param_multiplier</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_LA</name></expr></cpp:if>
<case>case <expr><name>MFX_RATECONTROL_LA</name></expr>:</case>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>TargetKbps</name></name> <operator>=</operator> <name>target_bitrate_kbps</name> <operator>/</operator> <name>brc_param_multiplier</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>LookAheadDepth</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>look_ahead_depth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>BRCParamMultiplier</name></name> <operator>=</operator> <name>brc_param_multiplier</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_ICQ</name></expr></cpp:if>
<case>case <expr><name>MFX_RATECONTROL_LA_ICQ</name></expr>:</case>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>LookAheadDepth</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>look_ahead_depth</name></name></expr>;</expr_stmt>
<case>case <expr><name>MFX_RATECONTROL_ICQ</name></expr>:</case>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>ICQQuality</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>




<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_HEVC</name><operator>)</operator> <operator>||</operator> <call><name>QSV_RUNTIME_VERSION_ATLEAST</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>ver</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_VP9</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_CODING_OPTION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>extco</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco</name><operator>.</operator><name>PicTimingSEI</name></name> <operator>=</operator> <ternary><condition><expr><name><name>q</name><operator>-&gt;</operator><name>pic_timing_sei</name></name></expr> ?</condition><then>
<expr><name>MFX_CODINGOPTION_ON</name></expr> </then><else>: <expr><name>MFX_CODINGOPTION_UNKNOWN</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>rdo</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco</name><operator>.</operator><name>RateDistortionOpt</name></name> <operator>=</operator> <ternary><condition><expr><name><name>q</name><operator>-&gt;</operator><name>rdo</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>MFX_CODINGOPTION_ON</name></expr> </then><else>: <expr><name>MFX_CODINGOPTION_OFF</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODER_TYPE</name></expr></cpp:if>
<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>coder_type</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>cavlc</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coder_type</name></name> <operator>==</operator> <name>FF_CODER_TYPE_VLC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name><name>q</name><operator>-&gt;</operator><name>extco</name><operator>.</operator><name>CAVLC</name></name> <init>= <expr><ternary><condition><expr><name><name>q</name><operator>-&gt;</operator><name>cavlc</name></name></expr> ?</condition><then> <expr><name>MFX_CODINGOPTION_ON</name></expr>
</then><else>: <expr><name>MFX_CODINGOPTION_UNKNOWN</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>!=</operator> <name>FF_COMPLIANCE_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco</name><operator>.</operator><name>NalHrdConformance</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&gt;</operator> <name>FF_COMPLIANCE_NORMAL</name></expr> ?</condition><then>
<expr><name>MFX_CODINGOPTION_ON</name></expr> </then><else>: <expr><name>MFX_CODINGOPTION_OFF</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>single_sei_nal_unit</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco</name><operator>.</operator><name>SingleSeiNalUnit</name></name> <operator>=</operator> <ternary><condition><expr><name><name>q</name><operator>-&gt;</operator><name>single_sei_nal_unit</name></name></expr> ?</condition><then> <expr><name>MFX_CODINGOPTION_ON</name></expr> </then><else>: <expr><name>MFX_CODINGOPTION_OFF</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>recovery_point_sei</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco</name><operator>.</operator><name>RecoveryPointSEI</name></name> <operator>=</operator> <ternary><condition><expr><name><name>q</name><operator>-&gt;</operator><name>recovery_point_sei</name></name></expr> ?</condition><then> <expr><name>MFX_CODINGOPTION_ON</name></expr> </then><else>: <expr><name>MFX_CODINGOPTION_OFF</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco</name><operator>.</operator><name>MaxDecFrameBuffering</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>max_dec_frame_buffering</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco</name><operator>.</operator><name>AUDelimiter</name></name> <operator>=</operator> <ternary><condition><expr><name><name>q</name><operator>-&gt;</operator><name>aud</name></name></expr> ?</condition><then> <expr><name>MFX_CODINGOPTION_ON</name></expr> </then><else>: <expr><name>MFX_CODINGOPTION_OFF</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extparam_internal</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>nb_extparam_internal</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>extco</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>int_ref_type</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>IntRefType</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>int_ref_type</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>int_ref_cycle_size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>IntRefCycleSize</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>int_ref_cycle_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>int_ref_qp_delta</name></name> <operator>!=</operator> <name>INT16_MIN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>IntRefQPDelta</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>int_ref_qp_delta</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>bitrate_limit</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>BitrateLimit</name></name> <operator>=</operator> <ternary><condition><expr><name><name>q</name><operator>-&gt;</operator><name>bitrate_limit</name></name></expr> ?</condition><then> <expr><name>MFX_CODINGOPTION_ON</name></expr> </then><else>: <expr><name>MFX_CODINGOPTION_OFF</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>mbbrc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>MBBRC</name></name> <operator>=</operator> <ternary><condition><expr><name><name>q</name><operator>-&gt;</operator><name>mbbrc</name></name></expr> ?</condition><then> <expr><name>MFX_CODINGOPTION_ON</name></expr> </then><else>: <expr><name>MFX_CODINGOPTION_OFF</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>max_frame_size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>MaxFrameSize</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>max_frame_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_MAX_SLICE_SIZE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>max_slice_size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>MaxSliceSize</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>max_slice_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_TRELLIS</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>Trellis</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>MFX_TRELLIS_OFF</name></expr> </then><else>: <expr><operator>(</operator><name>MFX_TRELLIS_I</name> <operator>|</operator> <name>MFX_TRELLIS_P</name> <operator>|</operator> <name>MFX_TRELLIS_B</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>Trellis</name></name> <operator>=</operator> <name>MFX_TRELLIS_UNKNOWN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>QSV_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>LookAheadDS</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>look_ahead_downsampling</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>RepeatPPS</name></name> <operator>=</operator> <ternary><condition><expr><name><name>q</name><operator>-&gt;</operator><name>repeat_pps</name></name></expr> ?</condition><then> <expr><name>MFX_CODINGOPTION_ON</name></expr> </then><else>: <expr><name>MFX_CODINGOPTION_OFF</name></expr></else></ternary></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>
<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>b_frame_strategy</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>b_strategy</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>b_frame_strategy</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>b_strategy</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>BRefType</name></name> <operator>=</operator> <ternary><condition><expr><name><name>q</name><operator>-&gt;</operator><name>b_strategy</name></name></expr> ?</condition><then> <expr><name>MFX_B_REF_PYRAMID</name></expr> </then><else>: <expr><name>MFX_B_REF_OFF</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>adaptive_i</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>AdaptiveI</name></name> <operator>=</operator> <ternary><condition><expr><name><name>q</name><operator>-&gt;</operator><name>adaptive_i</name></name></expr> ?</condition><then> <expr><name>MFX_CODINGOPTION_ON</name></expr> </then><else>: <expr><name>MFX_CODINGOPTION_OFF</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>adaptive_b</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>AdaptiveB</name></name> <operator>=</operator> <ternary><condition><expr><name><name>q</name><operator>-&gt;</operator><name>adaptive_b</name></name></expr> ?</condition><then> <expr><name>MFX_CODINGOPTION_ON</name></expr> </then><else>: <expr><name>MFX_CODINGOPTION_OFF</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>QSV_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>&gt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"qmin and or qmax are set but invalid, please make sure min &lt;= max\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>MinQPI</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>&gt;</operator> <literal type="number">51</literal></expr> ?</condition><then> <expr><literal type="number">51</literal></expr> </then><else>: <expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>MinQPP</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>MinQPB</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>MinQPI</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>MaxQPI</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>&gt;</operator> <literal type="number">51</literal></expr> ?</condition><then> <expr><literal type="number">51</literal></expr> </then><else>: <expr><name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>MaxQPP</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>MaxQPB</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>MaxQPI</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_HEVC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>extbrc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>ExtBRC</name></name> <operator>=</operator> <ternary><condition><expr><name><name>q</name><operator>-&gt;</operator><name>extbrc</name></name></expr> ?</condition><then> <expr><name>MFX_CODINGOPTION_ON</name></expr> </then><else>: <expr><name>MFX_CODINGOPTION_OFF</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_CODING_OPTION2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>extco2</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extparam_internal</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>nb_extparam_internal</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>extco2</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_MF</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>QSV_RUNTIME_VERSION_ATLEAST</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>ver</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extmfp</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_MULTI_FRAME_PARAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extmfp</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>extmfp</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extmfp</name><operator>.</operator><name>MFMode</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>mfmode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,<argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,<argument><expr><literal type="string">"MFMode:%d\n"</literal></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>extmfp</name><operator>.</operator><name>MFMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extparam_internal</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>nb_extparam_internal</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>extmfp</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO3</name></expr></cpp:if>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco3</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_CODING_OPTION3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco3</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>extco3</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_GPB</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_HEVC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extco3</name><operator>.</operator><name>GPB</name></name> <operator>=</operator> <ternary><condition><expr><name><name>q</name><operator>-&gt;</operator><name>gpb</name></name></expr> ?</condition><then> <expr><name>MFX_CODINGOPTION_ON</name></expr> </then><else>: <expr><name>MFX_CODINGOPTION_OFF</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extparam_internal</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>nb_extparam_internal</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>extco3</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_EXT_VP9_PARAM</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VP9</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extvp9param</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_VP9_PARAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extvp9param</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>extvp9param</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extvp9param</name><operator>.</operator><name>WriteIVFHeaders</name></name> <operator>=</operator> <name>MFX_CODINGOPTION_OFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extparam_internal</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>nb_extparam_internal</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>extvp9param</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_EXT_HEVC_TILES</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_HEVC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>exthevctiles</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_HEVC_TILES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>exthevctiles</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>exthevctiles</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>exthevctiles</name><operator>.</operator><name>NumTileColumns</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>tile_cols</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>exthevctiles</name><operator>.</operator><name>NumTileRows</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>tile_rows</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extparam_internal</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>nb_extparam_internal</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>exthevctiles</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_enc_param</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"some encoding parameters are not supported by the QSV "</literal>
<literal type="string">"runtime. Please double check the input parameters.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_retrieve_enc_jpeg_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVEncContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXVideoENCODE_GetVideoParam</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_qsv_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>,
<argument><expr><literal type="string">"Error calling GetVideoParam"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>BufferSizeInKB</name></name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>BRCParamMultiplier</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Height</name></name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Width</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_retrieve_enc_vp9_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVEncContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_EXT_VP9_PARAM</name></expr></cpp:if>
<decl_stmt><decl><type><name>mfxExtVP9Param</name></type> <name>vp9_extend_buf</name> <init>= <expr><block>{
<expr><operator>.</operator><name><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_VP9_PARAM</name></expr>,
<expr><operator>.</operator><name><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>vp9_extend_buf</name></expr></argument>)</argument_list></sizeof></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO2</name></expr></cpp:if>
<decl_stmt><decl><type><name>mfxExtCodingOption2</name></type> <name>co2</name> <init>= <expr><block>{
<expr><operator>.</operator><name><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_CODING_OPTION2</name></expr>,
<expr><operator>.</operator><name><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>co2</name></expr></argument>)</argument_list></sizeof></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO3</name></expr></cpp:if>
<decl_stmt><decl><type><name>mfxExtCodingOption3</name></type> <name>co3</name> <init>= <expr><block>{
<expr><operator>.</operator><name><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_CODING_OPTION3</name></expr>,
<expr><operator>.</operator><name><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>co3</name></expr></argument>)</argument_list></sizeof></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>mfxExtBuffer</name> <modifier>*</modifier></type><name><name>ext_buffers</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_EXT_VP9_PARAM</name></expr></cpp:if>
<expr><operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>vp9_extend_buf</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO2</name></expr></cpp:if>
<expr><operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>co2</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO3</name></expr></cpp:if>
<expr><operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>co3</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>ExtParam</name></name> <operator>=</operator> <name>ext_buffers</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>NumExtParam</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ext_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXVideoENCODE_GetVideoParam</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_qsv_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>,
<argument><expr><literal type="string">"Error calling GetVideoParam"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>BufferSizeInKB</name></name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>BRCParamMultiplier</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_retrieve_enc_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVEncContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCPBProperties</name> <modifier>*</modifier></type><name>cpb_props</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>sps_buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pps_buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxExtCodingOptionSPSPPS</name></type> <name>extradata</name> <init>= <expr><block>{
<expr><operator>.</operator><name><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_CODING_OPTION_SPSPPS</name></expr>,
<expr><operator>.</operator><name><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>extradata</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>SPSBuffer</name> <operator>=</operator> <name>sps_buf</name></expr>, <expr><operator>.</operator><name>SPSBufSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sps_buf</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>PPSBuffer</name> <operator>=</operator> <name>pps_buf</name></expr>, <expr><operator>.</operator><name>PPSBufSize</name> <operator>=</operator> sizeof<operator>(</operator><name>pps_buf</name><operator>)</operator></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxExtCodingOption</name></type> <name>co</name> <init>= <expr><block>{
<expr><operator>.</operator><name><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_CODING_OPTION</name></expr>,
<expr><operator>.</operator><name><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>co</name></expr></argument>)</argument_list></sizeof></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO2</name></expr></cpp:if>
<decl_stmt><decl><type><name>mfxExtCodingOption2</name></type> <name>co2</name> <init>= <expr><block>{
<expr><operator>.</operator><name><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_CODING_OPTION2</name></expr>,
<expr><operator>.</operator><name><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>co2</name></expr></argument>)</argument_list></sizeof></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO3</name></expr></cpp:if>
<decl_stmt><decl><type><name>mfxExtCodingOption3</name></type> <name>co3</name> <init>= <expr><block>{
<expr><operator>.</operator><name><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_CODING_OPTION3</name></expr>,
<expr><operator>.</operator><name><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>co3</name></expr></argument>)</argument_list></sizeof></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO_VPS</name></expr></cpp:if>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>vps_buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxExtCodingOptionVPS</name></type> <name>extradata_vps</name> <init>= <expr><block>{
<expr><operator>.</operator><name><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_CODING_OPTION_VPS</name></expr>,
<expr><operator>.</operator><name><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>extradata_vps</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>VPSBuffer</name> <operator>=</operator> <name>vps_buf</name></expr>,
<expr><operator>.</operator><name>VPSBufSize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>vps_buf</name></expr></argument>)</argument_list></sizeof></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_EXT_HEVC_TILES</name></expr></cpp:if>
<decl_stmt><decl><type><name>mfxExtHEVCTiles</name></type> <name>hevc_tile_buf</name> <init>= <expr><block>{
<expr><operator>.</operator><name><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_HEVC_TILES</name></expr>,
<expr><operator>.</operator><name><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>hevc_tile_buf</name></expr></argument>)</argument_list></sizeof></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>mfxExtBuffer</name> <modifier>*</modifier></type><name><name>ext_buffers</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>QSV_HAVE_CO2</name> <operator>+</operator> <name>QSV_HAVE_CO3</name> <operator>+</operator> <name>QSV_HAVE_CO_VPS</name> <operator>+</operator> <name>QSV_HAVE_EXT_HEVC_TILES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>need_pps</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>ext_buf_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>extradata_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ext_buffers</name><index>[<expr><name>ext_buf_num</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>extradata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ext_buffers</name><index>[<expr><name>ext_buf_num</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>co</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO2</name></expr></cpp:if>
<expr_stmt><expr><name><name>ext_buffers</name><index>[<expr><name>ext_buf_num</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>co2</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO3</name></expr></cpp:if>
<expr_stmt><expr><name><name>ext_buffers</name><index>[<expr><name>ext_buf_num</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>co3</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO_VPS</name></expr></cpp:if>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>hevc_vps</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_HEVC</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>QSV_RUNTIME_VERSION_ATLEAST</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>ver</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>hevc_vps</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ext_buffers</name><index>[<expr><name>ext_buf_num</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>extradata_vps</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_EXT_HEVC_TILES</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_HEVC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ext_buffers</name><index>[<expr><name>ext_buf_num</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>hevc_tile_buf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>ExtParam</name></name> <operator>=</operator> <name>ext_buffers</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>NumExtParam</name></name> <operator>=</operator> <name>ext_buf_num</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXVideoENCODE_GetVideoParam</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_qsv_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>,
<argument><expr><literal type="string">"Error calling GetVideoParam"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>BufferSizeInKB</name></name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>BRCParamMultiplier</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>extradata</name><operator>.</operator><name>SPSBufSize</name></name> <operator>||</operator> <operator>(</operator><name>need_pps</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>extradata</name><operator>.</operator><name>PPSBufSize</name></name><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO_VPS</name></expr></cpp:if>
<operator>||</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>hevc_vps</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>extradata_vps</name><operator>.</operator><name>VPSBufSize</name></name><operator>)</operator></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No extradata returned from libmfx.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name><name>extradata</name><operator>.</operator><name>SPSBufSize</name></name> <operator>+</operator> <name>need_pps</name> <operator>*</operator> <name><name>extradata</name><operator>.</operator><name>PPSBufSize</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO_VPS</name></expr></cpp:if>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>+=</operator> <name><name>q</name><operator>-&gt;</operator><name>hevc_vps</name></name> <operator>*</operator> <name><name>extradata_vps</name><operator>.</operator><name>VPSBufSize</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QSV_HAVE_CO_VPS</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>hevc_vps</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name>vps_buf</name></expr></argument>, <argument><expr><name><name>extradata_vps</name><operator>.</operator><name>VPSBufSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extradata_offset</name> <operator>+=</operator> <name><name>extradata_vps</name><operator>.</operator><name>VPSBufSize</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <name>extradata_offset</name></expr></argument>, <argument><expr><name>sps_buf</name></expr></argument>, <argument><expr><name><name>extradata</name><operator>.</operator><name>SPSBufSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extradata_offset</name> <operator>+=</operator> <name><name>extradata</name><operator>.</operator><name>SPSBufSize</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>need_pps</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <name>extradata_offset</name></expr></argument>, <argument><expr><name>pps_buf</name></expr></argument>, <argument><expr><name><name>extradata</name><operator>.</operator><name>PPSBufSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extradata_offset</name> <operator>+=</operator> <name><name>extradata</name><operator>.</operator><name>PPSBufSize</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cpb_props</name> <operator>=</operator> <call><name>ff_add_cpb_side_data</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cpb_props</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cpb_props</name><operator>-&gt;</operator><name>max_bitrate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cpb_props</name><operator>-&gt;</operator><name>min_bitrate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_min_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cpb_props</name><operator>-&gt;</operator><name>avg_bitrate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cpb_props</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dump_video_param</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>ext_buffers</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_init_opaque_alloc</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVEncContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVQSVContext</name> <modifier>*</modifier></type><name>qsv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>surfaces</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nb_surfaces</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nb_surfaces</name> <operator>=</operator> <name><name>qsv</name><operator>-&gt;</operator><name>nb_opaque_surfaces</name></name> <operator>+</operator> <name><name>q</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>NumFrameSuggested</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>opaque_alloc_buf</name></name> <operator>=</operator> <call><name>av_buffer_allocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>surfaces</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nb_surfaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>opaque_alloc_buf</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>opaque_surfaces</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>nb_surfaces</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>q</name><operator>-&gt;</operator><name>opaque_surfaces</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>opaque_surfaces</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>surfaces</name> <operator>=</operator> <operator>(</operator><name>mfxFrameSurface1</name><operator>*</operator><operator>)</operator><name><name>q</name><operator>-&gt;</operator><name>opaque_alloc_buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_surfaces</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>surfaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Info</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>Info</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>opaque_surfaces</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>surfaces</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_OPAQUE_SURFACE_ALLOCATION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>opaque_alloc</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>In</name><operator>.</operator><name>Surfaces</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>opaque_surfaces</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>In</name><operator>.</operator><name>NumSurface</name></name> <operator>=</operator> <name>nb_surfaces</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>opaque_alloc</name><operator>.</operator><name>In</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>Type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extparam_internal</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>nb_extparam_internal</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>opaque_alloc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qsv</name><operator>-&gt;</operator><name>nb_opaque_surfaces</name></name> <operator>=</operator> <name>nb_surfaces</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qsv</name><operator>-&gt;</operator><name>opaque_surfaces</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>opaque_alloc_buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qsv</name><operator>-&gt;</operator><name>opaque_alloc_type</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>Type</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsvenc_init_session</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVEncContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVQSVContext</name> <modifier>*</modifier></type><name>qsv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name><name>qsv</name><operator>-&gt;</operator><name>session</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>frames_ctx</name><operator>.</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>frames_ctx</name><operator>.</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_qsv_init_session_frames</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>internal_qs</name><operator>.</operator><name>session</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>frames_ctx</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>load_plugins</name></name></expr></argument>,
<argument><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>IOPattern</name></name> <operator>==</operator> <name>MFX_IOPATTERN_IN_OPAQUE_MEMORY</name></expr></argument>,
<argument><expr><name>MFX_GPUCOPY_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>frames_ctx</name><operator>.</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>internal_qs</name><operator>.</operator><name>session</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_qsv_init_session_device</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>internal_qs</name><operator>.</operator><name>session</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>load_plugins</name></name></expr></argument>,
<argument><expr><name>MFX_GPUCOPY_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>internal_qs</name><operator>.</operator><name>session</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_qsv_init_internal_session</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>internal_qs</name></name></expr></argument>,
<argument><expr><name><name>q</name><operator>-&gt;</operator><name>load_plugins</name></name></expr></argument>, <argument><expr><name>MFX_GPUCOPY_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>internal_qs</name><operator>.</operator><name>session</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>qsv_fifo_item_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVPacket</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mfxSyncPoint</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mfxBitstream</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>qsv_fifo_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVFifoBuffer</name><modifier>*</modifier></type> <name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call><operator>/</operator><call><name>qsv_fifo_item_size</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_qsv_enc_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVEncContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>iopattern</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opaque_alloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>AsyncDepth</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>async_depth</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name> <operator>=</operator> <call><name>av_fifo_alloc</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_depth</name></name> <operator>*</operator> <call><name>qsv_fifo_item_size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVQSVContext</name> <modifier>*</modifier></type><name>qsv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>iopattern</name> <operator>=</operator> <name><name>qsv</name><operator>-&gt;</operator><name>iopattern</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>opaque_alloc</name> <operator>=</operator> <name><name>qsv</name><operator>-&gt;</operator><name>opaque_alloc</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>frames_hwctx</name> <init>= <expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iopattern</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>&amp;</operator> <name>MFX_MEMTYPE_OPAQUE_FRAME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>iopattern</name> <operator>=</operator> <name>MFX_IOPATTERN_IN_OPAQUE_MEMORY</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>&amp;</operator>
<operator>(</operator><name>MFX_MEMTYPE_VIDEO_MEMORY_DECODER_TARGET</name> <operator>|</operator> <name>MFX_MEMTYPE_VIDEO_MEMORY_PROCESSOR_TARGET</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>iopattern</name> <operator>=</operator> <name>MFX_IOPATTERN_IN_VIDEO_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iopattern</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>iopattern</name> <operator>=</operator> <name>MFX_IOPATTERN_IN_SYSTEM_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>IOPattern</name></name> <operator>=</operator> <name>iopattern</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>qsvenc_init_session</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXQueryVersion</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>ver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ff_qsv_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>,
<argument><expr><literal type="string">"Error querying mfx version"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_MJPEG</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_video_param_jpeg</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_video_param</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVQSVContext</name> <modifier>*</modifier></type><name>qsv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>extparam</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>qsv</name><operator>-&gt;</operator><name>nb_ext_buffers</name></name> <operator>+</operator> <name><name>q</name><operator>-&gt;</operator><name>nb_extparam_internal</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>q</name><operator>-&gt;</operator><name>extparam</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>extparam</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>ExtParam</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>extparam</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>qsv</name><operator>-&gt;</operator><name>nb_ext_buffers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>ExtParam</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>qsv</name><operator>-&gt;</operator><name>ext_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>NumExtParam</name></name> <operator>=</operator> <name><name>qsv</name><operator>-&gt;</operator><name>nb_ext_buffers</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nb_extparam_internal</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>qsv</name><operator>-&gt;</operator><name>nb_ext_buffers</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>qsv</name><operator>-&gt;</operator><name>ext_buffers</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>BufferId</name> <operator>==</operator> <name><name>q</name><operator>-&gt;</operator><name>extparam_internal</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>BufferId</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>qsv</name><operator>-&gt;</operator><name>nb_ext_buffers</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>ExtParam</name><index>[<expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>NumExtParam</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>extparam_internal</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>ExtParam</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>extparam_internal</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>NumExtParam</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>nb_extparam_internal</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXVideoENCODE_Query</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>MFX_WRN_PARTIAL_ACCELERATION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Encoder will work with partial HW acceleration\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ff_qsv_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>,
<argument><expr><literal type="string">"Error querying encoder params"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXVideoENCODE_QueryIOSurf</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_qsv_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>,
<argument><expr><literal type="string">"Error querying (IOSurf) the encoding parameters"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opaque_alloc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>qsv_init_opaque_alloc</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXVideoENCODE_Init</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_qsv_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>,
<argument><expr><literal type="string">"Error initializing the encoder"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_qsv_print_warning</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>,
<argument><expr><literal type="string">"Warning in encoder initialization"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_MJPEG</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>qsv_retrieve_enc_jpeg_params</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_VP9</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>qsv_retrieve_enc_vp9_params</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>qsv_retrieve_enc_params</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error retrieving encoding parameters.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_encoder_ctrl_payloads</name><parameter_list>(<parameter><decl><type><name>mfxEncodeCtrl</name><modifier>*</modifier></type> <name>enc_ctrl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>enc_ctrl</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>enc_ctrl</name><operator>-&gt;</operator><name>NumPayload</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>QSV_MAX_ENC_PAYLOAD</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>enc_ctrl</name><operator>-&gt;</operator><name>Payload</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>enc_ctrl</name><operator>-&gt;</operator><name>NumPayload</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_unused_frames</name><parameter_list>(<parameter><decl><type><name>QSVEncContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>work_frames</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>used</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Data</name><operator>.</operator><name>Locked</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free_encoder_ctrl_payloads</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>enc_ctrl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_QSV</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_free_frame</name><parameter_list>(<parameter><decl><type><name>QSVEncContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>QSVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clear_unused_frames</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>work_frames</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>work_frames</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>used</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>f</name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>frame</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>frame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>enc_ctrl</name><operator>.</operator><name>Payload</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mfxPayload</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>QSV_MAX_ENC_PAYLOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>enc_ctrl</name><operator>.</operator><name>Payload</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>f</name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>submit_frame</name><parameter_list>(<parameter><decl><type><name>QSVEncContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><name>QSVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>new_frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>qf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_free_frame</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_QSV</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name><name>qf</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>surface</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>mfxFrameSurface1</name><operator>*</operator><operator>)</operator><name><name>qf</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>frames_ctx</name><operator>.</operator><name>mids</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_qsv_find_surface_idx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>frames_ctx</name></name></expr></argument>, <argument><expr><name>qf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Data</name><operator>.</operator><name>MemId</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>frames_ctx</name><operator>.</operator><name>mids</name><index>[<expr><name>ret</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;</operator> <literal type="number">31</literal> <operator>||</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>width_align</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>qf</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>height_align</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>height_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>width_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>qf</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_get_buffer</name><argument_list>(<argument><expr><name><name>qf</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>width_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_copy</name><argument_list>(<argument><expr><name><name>qf</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>qf</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name><name>qf</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Info</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Info</name><operator>.</operator><name>PicStruct</name></name> <operator>=</operator>
<ternary><condition><expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>interlaced_frame</name></name></expr> ?</condition><then> <expr><name>MFX_PICSTRUCT_PROGRESSIVE</name></expr> </then><else>:
<expr><ternary><condition><expr><name><name>frame</name><operator>-&gt;</operator><name>top_field_first</name></name></expr> ?</condition><then> <expr><name>MFX_PICSTRUCT_FIELD_TFF</name></expr> </then><else>:
<expr><name>MFX_PICSTRUCT_FIELD_BFF</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Info</name><operator>.</operator><name>PicStruct</name></name> <operator>|=</operator> <name>MFX_PICSTRUCT_FIELD_REPEATED</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Info</name><operator>.</operator><name>PicStruct</name></name> <operator>|=</operator> <name>MFX_PICSTRUCT_FRAME_DOUBLING</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Info</name><operator>.</operator><name>PicStruct</name></name> <operator>|=</operator> <name>MFX_PICSTRUCT_FRAME_TRIPLING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Data</name><operator>.</operator><name>PitchLow</name></name> <operator>=</operator> <name><name>qf</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Data</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>qf</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Data</name><operator>.</operator><name>UV</name></name> <operator>=</operator> <name><name>qf</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>qf</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Data</name><operator>.</operator><name>TimeStamp</name></name> <operator>=</operator> <macro><name>av_rescale_q</name><argument_list>(<argument>frame-&gt;pts</argument>, <argument>q-&gt;avctx-&gt;time_base</argument>, <argument>(AVRational){<literal type="number">1</literal></argument>, <argument><literal type="number">90000</literal>}</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>new_frame</name> <operator>=</operator> <name>qf</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_interlace_msg</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVEncContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>CodecId</name></name> <operator>==</operator> <name>MFX_CODEC_AVC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>CodecProfile</name></name> <operator>==</operator> <name>MFX_PROFILE_AVC_BASELINE</name> <operator>||</operator>
<name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>CodecLevel</name></name> <operator>&lt;</operator> <name>MFX_LEVEL_AVC_21</name> <operator>||</operator>
<name><name>q</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>CodecLevel</name></name> <operator>&gt;</operator> <name>MFX_LEVEL_AVC_41</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Interlaced coding is supported"</literal>
<literal type="string">" at Main/High Profile Level 2.2-4.0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVEncContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>new_pkt</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxBitstream</name> <modifier>*</modifier></type><name>bs</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>QSV_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">26</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>mfxExtAVCEncodedFrameInfo</name> <modifier>*</modifier></type><name>enc_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxExtBuffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>enc_buf</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>surf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxSyncPoint</name> <modifier>*</modifier></type><name>sync</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>qsv_frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxEncodeCtrl</name><modifier>*</modifier></type> <name>enc_ctrl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>submit_frame</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qsv_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error submitting the frame for encoding.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>qsv_frame</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>surf</name> <operator>=</operator> <operator>&amp;</operator><name><name>qsv_frame</name><operator>-&gt;</operator><name>surface</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>enc_ctrl</name> <operator>=</operator> <operator>&amp;</operator><name><name>qsv_frame</name><operator>-&gt;</operator><name>enc_ctrl</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>enc_ctrl</name><operator>-&gt;</operator><name>FrameType</name></name> <operator>=</operator> <name>MFX_FRAMETYPE_I</name> <operator>|</operator> <name>MFX_FRAMETYPE_REF</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>forced_idr</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enc_ctrl</name><operator>-&gt;</operator><name>FrameType</name></name> <operator>|=</operator> <name>MFX_FRAMETYPE_IDR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_pkt</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error allocating the output packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>Data</name></name> <operator>=</operator> <name><name>new_pkt</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>MaxLength</name></name> <operator>=</operator> <name><name>new_pkt</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>QSV_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">26</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>enc_info</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>enc_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc_info</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>enc_info</name><operator>-&gt;</operator><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_ENCODED_FRAME_INFO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enc_info</name><operator>-&gt;</operator><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>enc_info</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>NumExtParam</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>enc_buf</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mfxExtBuffer</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc_buf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>enc_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name> <operator>*</operator><operator>)</operator><name>enc_info</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>ExtParam</name></name> <operator>=</operator> <name>enc_buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>set_encode_ctrl_cb</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>q</name><operator>-&gt;</operator><name>set_encode_ctrl_cb</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qsv_frame</name><operator>-&gt;</operator><name>enc_ctrl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sync</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sync</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sync</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>QSV_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">26</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>enc_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>enc_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXVideoENCODE_EncodeFrameAsync</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name>enc_ctrl</name></expr></argument>, <argument><expr><name>surf</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>, <argument><expr><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>MFX_WRN_DEVICE_BUSY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_usleep</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>ret</name> <operator>==</operator> <name>MFX_WRN_DEVICE_BUSY</name> <operator>||</operator> <name>ret</name> <operator>==</operator> <name>MFX_WRN_IN_EXECUTION</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_qsv_print_warning</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"Warning during encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>QSV_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">26</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>enc_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>enc_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>ret</name> <operator>==</operator> <name>MFX_ERR_MORE_DATA</name><operator>)</operator></expr> ?</condition><then>
<expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>ff_qsv_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"Error during encoding"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>MFX_WRN_INCOMPATIBLE_VIDEO_PARAM</name> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>interlaced_frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>print_interlace_msg</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sync</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_fifo_generic_write</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_pkt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_pkt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_fifo_generic_write</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sync</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sync</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_fifo_generic_write</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>QSV_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">26</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>enc_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>enc_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_qsv_encode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVEncContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>encode_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>qsv_fifo_size</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>q</name><operator>-&gt;</operator><name>async_depth</name></name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>!</operator><name>frame</name> <operator>&amp;&amp;</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>new_pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxBitstream</name> <modifier>*</modifier></type><name>bs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxSyncPoint</name> <modifier>*</modifier></type><name>sync</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>QSV_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">26</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>mfxExtAVCEncodedFrameInfo</name> <modifier>*</modifier></type><name>enc_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxExtBuffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>enc_buf</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPictureType</name></name></type> <name>pict_type</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_pkt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_pkt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sync</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sync</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXVideoCORE_SyncOperation</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>*</operator><name>sync</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>ret</name> <operator>==</operator> <name>MFX_WRN_IN_EXECUTION</name></expr>)</condition>;</do>

<expr_stmt><expr><name><name>new_pkt</name><operator>.</operator><name>dts</name></name> <operator>=</operator> <macro><name>av_rescale_q</name><argument_list>(<argument>bs-&gt;DecodeTimeStamp</argument>, <argument>(AVRational){<literal type="number">1</literal></argument>, <argument><literal type="number">90000</literal>}</argument>, <argument>avctx-&gt;time_base</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_pkt</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <macro><name>av_rescale_q</name><argument_list>(<argument>bs-&gt;TimeStamp</argument>, <argument>(AVRational){<literal type="number">1</literal></argument>, <argument><literal type="number">90000</literal>}</argument>, <argument>avctx-&gt;time_base</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_pkt</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>DataLength</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>FrameType</name></name> <operator>&amp;</operator> <name>MFX_FRAMETYPE_IDR</name> <operator>||</operator> <name><name>bs</name><operator>-&gt;</operator><name>FrameType</name></name> <operator>&amp;</operator> <name>MFX_FRAMETYPE_xIDR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>new_pkt</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>FrameType</name></name> <operator>&amp;</operator> <name>MFX_FRAMETYPE_I</name> <operator>||</operator> <name><name>bs</name><operator>-&gt;</operator><name>FrameType</name></name> <operator>&amp;</operator> <name>MFX_FRAMETYPE_xI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>FrameType</name></name> <operator>&amp;</operator> <name>MFX_FRAMETYPE_P</name> <operator>||</operator> <name><name>bs</name><operator>-&gt;</operator><name>FrameType</name></name> <operator>&amp;</operator> <name>MFX_FRAMETYPE_xP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>FrameType</name></name> <operator>&amp;</operator> <name>MFX_FRAMETYPE_B</name> <operator>||</operator> <name><name>bs</name><operator>-&gt;</operator><name>FrameType</name></name> <operator>&amp;</operator> <name>MFX_FRAMETYPE_xB</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_B</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>bs</name><operator>-&gt;</operator><name>FrameType</name></name> <operator>==</operator> <name>MFX_FRAMETYPE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unknown FrameType, set pict_type to AV_PICTURE_TYPE_NONE.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid FrameType:%d.\n"</literal></expr></argument>, <argument><expr><name><name>bs</name><operator>-&gt;</operator><name>FrameType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>
<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>
<name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>pict_type</name></name> <init>= <expr><name>pict_type</name></expr></init></decl>;</decl_stmt>
<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>QSV_VERSION_ATLEAST</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">26</literal></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>enc_buf</name> <operator>=</operator> <name><name>bs</name><operator>-&gt;</operator><name>ExtParam</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>enc_info</name> <operator>=</operator> <operator>(</operator><name>mfxExtAVCEncodedFrameInfo</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name><name>bs</name><operator>-&gt;</operator><name>ExtParam</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_side_data_set_encoder_stats</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_pkt</name></expr></argument>,
<argument><expr><name><name>enc_info</name><operator>-&gt;</operator><name>QP</name></name> <operator>*</operator> <name>FF_QP2LAMBDA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pict_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>enc_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>enc_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name><name>new_pkt</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Submitted buffer not large enough: %d &lt; %d\n"</literal></expr></argument>,
<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>new_pkt</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>new_pkt</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>new_pkt</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>new_pkt</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_packet_copy_props</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pkt</name> <operator>=</operator> <name>new_pkt</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_qsv_enc_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVEncContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>MFXVideoENCODE_Close</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_qsv_close_internal_session</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>internal_qs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>frames_ctx</name><operator>.</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>frames_ctx</name><operator>.</operator><name>mids_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>work_frames</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>work_frames</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>enc_ctrl</name><operator>.</operator><name>Payload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>work_frames</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name> <operator>&amp;&amp;</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxSyncPoint</name> <modifier>*</modifier></type><name>sync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mfxBitstream</name> <modifier>*</modifier></type><name>bs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sync</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sync</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>av_fifo_free</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>opaque_surfaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>opaque_alloc_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>extparam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
