<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\audiotoolboxdec.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;AudioToolbox/AudioToolbox.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ac3_parser_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudiodecheader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__MAC_OS_X_VERSION_MIN_REQUIRED</name> <operator>&lt;</operator> <literal type="number">101100</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kAudioFormatEnhancedAC3</name></cpp:macro> <cpp:value>'ec-3'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>ATDecodeContext</name> <block>{
<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>av_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioConverterRef</name></type> <name>converter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioStreamPacketDescription</name></type> <name>pkt_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>in_pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVPacket</name></type> <name>new_in_pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>decoded_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>channel_map</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>extradata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extradata_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_pts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eof</name></decl>;</decl_stmt>
}</block></struct></type> <name>ATDecodeContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>UInt32</name></type> <name>ffat_get_format_id</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>profile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>codec</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_AAC</name></expr>:</case>
<return>return <expr><name>kAudioFormatMPEG4AAC</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_AC3</name></expr>:</case>
<return>return <expr><name>kAudioFormatAC3</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_QT</name></expr>:</case>
<return>return <expr><name>kAudioFormatAppleIMA4</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_ALAC</name></expr>:</case>
<return>return <expr><name>kAudioFormatAppleLossless</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_AMR_NB</name></expr>:</case>
<return>return <expr><name>kAudioFormatAMR</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_EAC3</name></expr>:</case>
<return>return <expr><name>kAudioFormatEnhancedAC3</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_GSM_MS</name></expr>:</case>
<return>return <expr><name>kAudioFormatMicrosoftGSM</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_ILBC</name></expr>:</case>
<return>return <expr><name>kAudioFormatiLBC</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_MP1</name></expr>:</case>
<return>return <expr><name>kAudioFormatMPEGLayer1</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_MP2</name></expr>:</case>
<return>return <expr><name>kAudioFormatMPEGLayer2</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_MP3</name></expr>:</case>
<return>return <expr><name>kAudioFormatMPEGLayer3</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_PCM_ALAW</name></expr>:</case>
<return>return <expr><name>kAudioFormatALaw</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_PCM_MULAW</name></expr>:</case>
<return>return <expr><name>kAudioFormatULaw</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_QDMC</name></expr>:</case>
<return>return <expr><name>kAudioFormatQDesign</name></expr>;</return>
<case>case <expr><name>AV_CODEC_ID_QDM2</name></expr>:</case>
<return>return <expr><name>kAudioFormatQDesign2</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"Invalid codec ID!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ffat_get_channel_id</name><parameter_list>(<parameter><decl><type><name>AudioChannelLabel</name></type> <name>label</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>label</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>label</name> <operator>&lt;=</operator> <name>kAudioChannelLabel_LFEScreen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>label</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>label</name> <operator>&lt;=</operator> <name>kAudioChannelLabel_RightSurround</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>label</name> <operator>+</operator> <literal type="number">4</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>label</name> <operator>&lt;=</operator> <name>kAudioChannelLabel_CenterSurround</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>label</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>label</name> <operator>&lt;=</operator> <name>kAudioChannelLabel_RightSurroundDirect</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>label</name> <operator>+</operator> <literal type="number">23</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>label</name> <operator>&lt;=</operator> <name>kAudioChannelLabel_TopBackRight</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>label</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>label</name> <operator>&lt;</operator> <name>kAudioChannelLabel_RearSurroundLeft</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>label</name> <operator>&lt;=</operator> <name>kAudioChannelLabel_RearSurroundRight</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>label</name> <operator>-</operator> <literal type="number">29</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>label</name> <operator>&lt;=</operator> <name>kAudioChannelLabel_RightWide</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>label</name> <operator>-</operator> <literal type="number">4</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>label</name> <operator>==</operator> <name>kAudioChannelLabel_LFE2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_ctzll</name><argument_list>(<argument><expr><name>AV_CH_LOW_FREQUENCY_2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>label</name> <operator>==</operator> <name>kAudioChannelLabel_Mono</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_ctzll</name><argument_list>(<argument><expr><name>AV_CH_FRONT_CENTER</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ffat_compare_channel_descriptions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AudioChannelDescription</name><modifier>*</modifier></type> <name>da</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AudioChannelDescription</name><modifier>*</modifier></type> <name>db</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ffat_get_channel_id</name><argument_list>(<argument><expr><name><name>da</name><operator>-&gt;</operator><name>mChannelLabel</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>ffat_get_channel_id</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mChannelLabel</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AudioChannelLayout</name> <modifier>*</modifier></type><name>ffat_convert_layout</name><parameter_list>(<parameter><decl><type><name>AudioChannelLayout</name> <modifier>*</modifier></type><name>layout</name></decl></parameter>, <parameter><decl><type><name>UInt32</name><modifier>*</modifier></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AudioChannelLayoutTag</name></type> <name>tag</name> <init>= <expr><name><name>layout</name><operator>-&gt;</operator><name>mChannelLayoutTag</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioChannelLayout</name> <modifier>*</modifier></type><name>new_layout</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <name>kAudioChannelLayoutTag_UseChannelDescriptions</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>layout</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>tag</name> <operator>==</operator> <name>kAudioChannelLayoutTag_UseChannelBitmap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AudioFormatGetPropertyInfo</name><argument_list>(<argument><expr><name>kAudioFormatProperty_ChannelLayoutForBitmap</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UInt32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>layout</name><operator>-&gt;</operator><name>mChannelBitmap</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AudioFormatGetPropertyInfo</name><argument_list>(<argument><expr><name>kAudioFormatProperty_ChannelLayoutForTag</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AudioChannelLayoutTag</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>new_layout</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_layout</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <name>kAudioChannelLayoutTag_UseChannelBitmap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AudioFormatGetProperty</name><argument_list>(<argument><expr><name>kAudioFormatProperty_ChannelLayoutForBitmap</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UInt32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>layout</name><operator>-&gt;</operator><name>mChannelBitmap</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>new_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AudioFormatGetProperty</name><argument_list>(<argument><expr><name>kAudioFormatProperty_ChannelLayoutForTag</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AudioChannelLayoutTag</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>new_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>new_layout</name><operator>-&gt;</operator><name>mChannelLayoutTag</name></name> <operator>=</operator> <name>kAudioChannelLayoutTag_UseChannelDescriptions</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new_layout</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ffat_update_ctx</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ATDecodeContext</name> <modifier>*</modifier></type><name>at</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioStreamBasicDescription</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AudioConverterGetProperty</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>,
<argument><expr><name>kAudioConverterCurrentInputStreamDescription</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>format</name><operator>.</operator><name>mSampleRate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>format</name><operator>.</operator><name>mSampleRate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>format</name><operator>.</operator><name>mChannelsPerFrame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <call><name>av_get_default_channel_layout</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>format</name><operator>.</operator><name>mFramesPerPacket</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AudioConverterGetProperty</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>,
<argument><expr><name>kAudioConverterCurrentOutputStreamDescription</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>mSampleRate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>format</name><operator>.</operator><name>mChannelsPerFrame</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AudioConverterSetProperty</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>,
<argument><expr><name>kAudioConverterCurrentOutputStreamDescription</name></expr></argument>,
<argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AudioConverterGetPropertyInfo</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>, <argument><expr><name>kAudioConverterOutputChannelLayout</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AudioChannelLayout</name> <modifier>*</modifier></type><name>layout</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>layout_mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layout</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>AudioConverterGetProperty</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>, <argument><expr><name>kAudioConverterOutputChannelLayout</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>layout</name> <operator>=</operator> <call><name>ffat_convert_layout</name><argument_list>(<argument><expr><name>layout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>layout</name><operator>-&gt;</operator><name>mNumberChannelDescriptions</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>ffat_get_channel_id</name><argument_list>(<argument><expr><name><name>layout</name><operator>-&gt;</operator><name>mChannelDescriptions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mChannelLabel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>layout_mask</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>id</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>layout_mask</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>layout</name><operator>-&gt;</operator><name>mChannelDescriptions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mChannelFlags</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> 
</block_content>}</block></for>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>layout_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>layout</name><operator>-&gt;</operator><name>mChannelDescriptions</name></name></expr></argument>, <argument><expr><name><name>layout</name><operator>-&gt;</operator><name>mNumberChannelDescriptions</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AudioChannelDescription</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>ffat_compare_channel_descriptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>layout</name><operator>-&gt;</operator><name>mNumberChannelDescriptions</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>channel_map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>layout</name><operator>-&gt;</operator><name>mChannelDescriptions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mChannelFlags</name></expr>;</expr_stmt></block_content></block></for>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <literal type="number">2048</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_descr</name><parameter_list>(<parameter><decl><type><name>PutByteContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>(</operator><name>size</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>*</operator> <name>i</name><operator>)</operator><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>ffat_get_magic_cookie</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>UInt32</name> <modifier>*</modifier></type><name>cookie_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ATDecodeContext</name> <modifier>*</modifier></type><name>at</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>extradata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PutByteContext</name></type> <name>pb</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>cookie_size</name> <operator>=</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">5</literal><operator>+</operator><literal type="number">13</literal> <operator>+</operator> <literal type="number">5</literal><operator>+</operator><name><name>at</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>extradata</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><operator>*</operator><name>cookie_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init_writer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>extradata</name></expr></argument>, <argument><expr><operator>*</operator><name>cookie_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>put_descr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x03</literal></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">5</literal><operator>+</operator><literal type="number">13</literal> <operator>+</operator> <literal type="number">5</literal><operator>+</operator><name><name>at</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>put_descr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument>, <argument><expr><literal type="number">13</literal> <operator>+</operator> <literal type="number">5</literal><operator>+</operator><name><name>at</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream2_put_be24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream2_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>bytestream2_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>put_descr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>at</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>extradata</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cookie_size</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>at</name><operator>-&gt;</operator><name>extradata</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>ffat_usable_extradata</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ATDecodeContext</name> <modifier>*</modifier></type><name>at</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>at</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ALAC</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_QDM2</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_QDMC</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ffat_set_extradata</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ATDecodeContext</name> <modifier>*</modifier></type><name>at</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ffat_usable_extradata</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>cookie_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cookie</name> <init>= <expr><call><name>ffat_get_magic_cookie</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cookie_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cookie</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>AudioConverterSetProperty</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>,
<argument><expr><name>kAudioConverterDecompressionMagicCookie</name></expr></argument>,
<argument><expr><name>cookie_size</name></expr></argument>, <argument><expr><name>cookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"AudioToolbox cookie error: %i\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cookie</name> <operator>!=</operator> <name><name>at</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>cookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>ffat_create_decoder</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ATDecodeContext</name> <modifier>*</modifier></type><name>at</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>==</operator> <literal type="number">32</literal><operator>)</operator></expr> ?</condition><then>
<expr><name>AV_SAMPLE_FMT_S32</name></expr> </then><else>: <expr><name>AV_SAMPLE_FMT_S16</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioStreamBasicDescription</name></type> <name>in_format</name> <init>= <expr><block>{
<expr><operator>.</operator><name>mFormatID</name> <operator>=</operator> <call><name>ffat_get_format_id</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>mBytesPerPacket</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ILBC</name><operator>)</operator> <operator>?</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>:</operator> <literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioStreamBasicDescription</name></type> <name>out_format</name> <init>= <expr><block>{
<expr><operator>.</operator><name>mFormatID</name> <operator>=</operator> <name>kAudioFormatLinearPCM</name></expr>,
<expr><operator>.</operator><name>mFormatFlags</name> <operator>=</operator> <name>kAudioFormatFlagIsSignedInteger</name> <operator>|</operator> <name>kAudioFormatFlagIsPacked</name></expr>,
<expr><operator>.</operator><name>mFramesPerPacket</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>mBitsPerChannel</name> <operator>=</operator> <call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name>sample_fmt</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>sample_fmt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ffat_usable_extradata</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>UInt32</name></type> <name>format_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>in_format</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>cookie_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cookie</name> <init>= <expr><call><name>ffat_get_magic_cookie</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cookie_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cookie</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>AudioFormatGetProperty</name><argument_list>(<argument><expr><name>kAudioFormatProperty_FormatInfo</name></expr></argument>,
<argument><expr><name>cookie_size</name></expr></argument>, <argument><expr><name>cookie</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cookie</name> <operator>!=</operator> <name><name>at</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>cookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AudioToolbox header-parse error: %i\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MP1_AT_DECODER</name> <operator>||</operator> <name>CONFIG_MP2_AT_DECODER</name> <operator>||</operator> <name>CONFIG_MP3_AT_DECODER</name></expr></cpp:if>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pkt</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MP1</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MP2</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MP3</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bit_rate</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_mpa_decode_header</name><argument_list>(<argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>in_format</name><operator>.</operator><name>mChannelsPerFrame</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>bit_rate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>codec_id</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name>bit_rate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in_format</name><operator>.</operator><name>mSampleRate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AC3_AT_DECODER</name> <operator>||</operator> <name>CONFIG_EAC3_AT_DECODER</name></expr></cpp:if>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pkt</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AC3</name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_EAC3</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AC3HeaderInfo</name></type> <name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gbc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_ac3_parse_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>in_format</name><operator>.</operator><name>mSampleRate</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in_format</name><operator>.</operator><name>mChannelsPerFrame</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>num_blocks</name></name> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>bit_rate</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>in_format</name><operator>.</operator><name>mSampleRate</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr> ?</condition><then> <expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr> </then><else>: <expr><literal type="number">44100</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in_format</name><operator>.</operator><name>mChannelsPerFrame</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr> ?</condition><then> <expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>out_format</name><operator>.</operator><name>mSampleRate</name></name> <operator>=</operator> <name><name>in_format</name><operator>.</operator><name>mSampleRate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>out_format</name><operator>.</operator><name>mChannelsPerFrame</name></name> <operator>=</operator> <name><name>in_format</name><operator>.</operator><name>mChannelsPerFrame</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_IMA_QT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>in_format</name><operator>.</operator><name>mFramesPerPacket</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>AudioConverterNew</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AudioToolbox init error: %i\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>ffat_set_extradata</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>channel_map</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>channel_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>channel_map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ffat_update_ctx</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>at</name><operator>-&gt;</operator><name>decoded_data</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call>
<operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>last_pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>ffat_init_decoder</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ATDecodeContext</name> <modifier>*</modifier></type><name>at</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>at</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name><operator>)</operator> <operator>||</operator> <call><name>ffat_usable_extradata</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ffat_create_decoder</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OSStatus</name></type> <name>ffat_decode_callback</name><parameter_list>(<parameter><decl><type><name>AudioConverterRef</name></type> <name>converter</name></decl></parameter>, <parameter><decl><type><name>UInt32</name> <modifier>*</modifier></type><name>nb_packets</name></decl></parameter>,
<parameter><decl><type><name>AudioBufferList</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>AudioStreamPacketDescription</name> <modifier>*</modifier><modifier>*</modifier></type><name>packets</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>inctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name>inctx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ATDecodeContext</name> <modifier>*</modifier></type><name>at</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>nb_packets</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>packets</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>packets</name> <operator>=</operator> <operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>pkt_desc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>pkt_desc</name><operator>.</operator><name>mDataByteSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>in_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_move_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>in_pkt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>new_in_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>at</name><operator>-&gt;</operator><name>in_pkt</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>nb_packets</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>mNumberBuffers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>mBuffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mNumberChannels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>mBuffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mDataByteSize</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>in_pkt</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>mBuffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mData</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>in_pkt</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nb_packets</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>packets</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>packets</name> <operator>=</operator> <operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>pkt_desc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>pkt_desc</name><operator>.</operator><name>mDataByteSize</name></name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>in_pkt</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_SAMPLES</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type *in_ptr = (type*)at-&gt;decoded_data; type *end_ptr = in_ptr + frame-&gt;nb_samples * avctx-&gt;channels; type *out_ptr = (type*)frame-&gt;data[0]; for (; in_ptr &lt; end_ptr; in_ptr += avctx-&gt;channels, out_ptr += avctx-&gt;channels) { int c; for (c = 0; c &lt; avctx-&gt;channels; c++) out_ptr[c] = in_ptr[at-&gt;channel_map[c]]; }</cpp:value></cpp:define>









<function><type><specifier>static</specifier> <name>void</name></type> <name>ffat_copy_samples</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ATDecodeContext</name> <modifier>*</modifier></type><name>at</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>COPY_SAMPLES</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>COPY_SAMPLES</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ffat_decode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ATDecodeContext</name> <modifier>*</modifier></type><name>at</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pkt_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OSStatus</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AudioBufferList</name></type> <name>out_buffers</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_AAC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>at</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>side_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>side_data_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>side_data</name> <operator>=</operator> <call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_NEW_EXTRADATA</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>side_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>side_data_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>side_data_size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>at</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name>side_data_size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name>side_data</name></expr></argument>, <argument><expr><name>side_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ffat_create_decoder</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>out_buffers</name> <operator>=</operator> <operator>(</operator><name>AudioBufferList</name><operator>)</operator><block>{
<expr><operator>.</operator><name>mNumberBuffers</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><operator>.</operator><name>mBuffers</name> <operator>=</operator> <block>{
<expr><block>{
<expr><operator>.</operator><name>mNumberChannels</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>,
<expr><operator>.</operator><name>mDataByteSize</name> <operator>=</operator> <call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name>
<operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>,
}</block></expr>
}</block></expr>
}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>new_in_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_packet_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>new_in_pkt</name></name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_buffers</name><operator>.</operator><name>mBuffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mData</name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>decoded_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AudioConverterFillComplexBuffer</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>, <argument><expr><name>ffat_decode_callback</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_buffers</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>ret</name> <operator>||</operator> <name>ret</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ffat_copy_samples</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>last_pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>at</name><operator>-&gt;</operator><name>last_pts</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PKT_PTS</name></expr></cpp:if>
<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>
<name><name>frame</name><operator>-&gt;</operator><name>pkt_pts</name></name> <init>= <expr><name><name>at</name><operator>-&gt;</operator><name>last_pts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name><name>at</name><operator>-&gt;</operator><name>last_pts</name></name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name></expr></init></decl>;</decl_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Decode error: %i\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>at</name><operator>-&gt;</operator><name>last_pts</name></name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>pkt_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>ffat_decode_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ATDecodeContext</name> <modifier>*</modifier></type><name>at</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AudioConverterReset</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>new_in_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>in_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>ffat_close_decoder</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ATDecodeContext</name> <modifier>*</modifier></type><name>at</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AudioConverterDispose</name><argument_list>(<argument><expr><name><name>at</name><operator>-&gt;</operator><name>converter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>new_in_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>in_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>decoded_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>at</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFAT_DEC_CLASS</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static const AVClass ffat_##NAME##_dec_class = { .class_name = "at_" #NAME "_dec", .version = LIBAVUTIL_VERSION_INT, };</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFAT_DEC</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>ID</name></type></parameter>, <parameter><type><name>bsf_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FFAT_DEC_CLASS(NAME) AVCodec ff_##NAME##_at_decoder = { .name = #NAME "_at", .long_name = NULL_IF_CONFIG_SMALL(#NAME " (AudioToolbox)"), .type = AVMEDIA_TYPE_AUDIO, .id = ID, .priv_data_size = sizeof(ATDecodeContext), .init = ffat_init_decoder, .close = ffat_close_decoder, .decode = ffat_decode, .flush = ffat_decode_flush, .priv_class = &amp;ffat_##NAME##_dec_class, .bsfs = bsf_name, .capabilities = AV_CODEC_CAP_DR1 | AV_CODEC_CAP_DELAY, .caps_internal = FF_CODEC_CAP_INIT_THREADSAFE | FF_CODEC_CAP_INIT_CLEANUP, .wrapper_name = "at", };</cpp:value></cpp:define>


















<macro><name>FFAT_DEC</name><argument_list>(<argument>aac</argument>, <argument>AV_CODEC_ID_AAC</argument>, <argument><literal type="string">"aac_adtstoasc"</literal></argument>)</argument_list></macro>
<macro><name>FFAT_DEC</name><argument_list>(<argument>ac3</argument>, <argument>AV_CODEC_ID_AC3</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>FFAT_DEC</name><argument_list>(<argument>adpcm_ima_qt</argument>, <argument>AV_CODEC_ID_ADPCM_IMA_QT</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>FFAT_DEC</name><argument_list>(<argument>alac</argument>, <argument>AV_CODEC_ID_ALAC</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>FFAT_DEC</name><argument_list>(<argument>amr_nb</argument>, <argument>AV_CODEC_ID_AMR_NB</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>FFAT_DEC</name><argument_list>(<argument>eac3</argument>, <argument>AV_CODEC_ID_EAC3</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>FFAT_DEC</name><argument_list>(<argument>gsm_ms</argument>, <argument>AV_CODEC_ID_GSM_MS</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>FFAT_DEC</name><argument_list>(<argument>ilbc</argument>, <argument>AV_CODEC_ID_ILBC</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>FFAT_DEC</name><argument_list>(<argument>mp1</argument>, <argument>AV_CODEC_ID_MP1</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>FFAT_DEC</name><argument_list>(<argument>mp2</argument>, <argument>AV_CODEC_ID_MP2</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>FFAT_DEC</name><argument_list>(<argument>mp3</argument>, <argument>AV_CODEC_ID_MP3</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>FFAT_DEC</name><argument_list>(<argument>pcm_alaw</argument>, <argument>AV_CODEC_ID_PCM_ALAW</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>FFAT_DEC</name><argument_list>(<argument>pcm_mulaw</argument>, <argument>AV_CODEC_ID_PCM_MULAW</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>FFAT_DEC</name><argument_list>(<argument>qdmc</argument>, <argument>AV_CODEC_ID_QDMC</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>FFAT_DEC</name><argument_list>(<argument>qdm2</argument>, <argument>AV_CODEC_ID_QDM2</argument>, <argument>NULL</argument>)</argument_list></macro>
</unit>
