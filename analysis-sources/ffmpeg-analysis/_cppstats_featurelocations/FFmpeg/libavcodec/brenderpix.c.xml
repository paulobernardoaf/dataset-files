<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\brenderpix.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER1_CHUNK</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER2_CHUNK</name></cpp:macro> <cpp:value>0x3D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAGE_DATA_CHUNK</name></cpp:macro> <cpp:value>0x21</cpp:value></cpp:define>











<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>std_pal_table</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0xFF000000</literal></expr>, <expr><literal type="number">0xFF030303</literal></expr>, <expr><literal type="number">0xFF060606</literal></expr>, <expr><literal type="number">0xFF090909</literal></expr>, <expr><literal type="number">0xFF0C0C0C</literal></expr>, <expr><literal type="number">0xFF0F0F0F</literal></expr>,
<expr><literal type="number">0xFF121212</literal></expr>, <expr><literal type="number">0xFF151515</literal></expr>, <expr><literal type="number">0xFF181818</literal></expr>, <expr><literal type="number">0xFF1B1B1B</literal></expr>, <expr><literal type="number">0xFF1E1E1E</literal></expr>, <expr><literal type="number">0xFF212121</literal></expr>,
<expr><literal type="number">0xFF242424</literal></expr>, <expr><literal type="number">0xFF272727</literal></expr>, <expr><literal type="number">0xFF2A2A2A</literal></expr>, <expr><literal type="number">0xFF2D2D2D</literal></expr>, <expr><literal type="number">0xFF313131</literal></expr>, <expr><literal type="number">0xFF343434</literal></expr>,
<expr><literal type="number">0xFF373737</literal></expr>, <expr><literal type="number">0xFF3A3A3A</literal></expr>, <expr><literal type="number">0xFF3D3D3D</literal></expr>, <expr><literal type="number">0xFF404040</literal></expr>, <expr><literal type="number">0xFF434343</literal></expr>, <expr><literal type="number">0xFF464646</literal></expr>,
<expr><literal type="number">0xFF494949</literal></expr>, <expr><literal type="number">0xFF4C4C4C</literal></expr>, <expr><literal type="number">0xFF4F4F4F</literal></expr>, <expr><literal type="number">0xFF525252</literal></expr>, <expr><literal type="number">0xFF555555</literal></expr>, <expr><literal type="number">0xFF585858</literal></expr>,
<expr><literal type="number">0xFF5B5B5B</literal></expr>, <expr><literal type="number">0xFF5E5E5E</literal></expr>, <expr><literal type="number">0xFF626262</literal></expr>, <expr><literal type="number">0xFF656565</literal></expr>, <expr><literal type="number">0xFF686868</literal></expr>, <expr><literal type="number">0xFF6B6B6B</literal></expr>,
<expr><literal type="number">0xFF6E6E6E</literal></expr>, <expr><literal type="number">0xFF717171</literal></expr>, <expr><literal type="number">0xFF747474</literal></expr>, <expr><literal type="number">0xFF777777</literal></expr>, <expr><literal type="number">0xFF7A7A7A</literal></expr>, <expr><literal type="number">0xFF7D7D7D</literal></expr>,
<expr><literal type="number">0xFF808080</literal></expr>, <expr><literal type="number">0xFF838383</literal></expr>, <expr><literal type="number">0xFF868686</literal></expr>, <expr><literal type="number">0xFF898989</literal></expr>, <expr><literal type="number">0xFF8C8C8C</literal></expr>, <expr><literal type="number">0xFF8F8F8F</literal></expr>,
<expr><literal type="number">0xFF939393</literal></expr>, <expr><literal type="number">0xFF999999</literal></expr>, <expr><literal type="number">0xFFA0A0A0</literal></expr>, <expr><literal type="number">0xFFA7A7A7</literal></expr>, <expr><literal type="number">0xFFAEAEAE</literal></expr>, <expr><literal type="number">0xFFB4B4B4</literal></expr>,
<expr><literal type="number">0xFFBBBBBB</literal></expr>, <expr><literal type="number">0xFFC2C2C2</literal></expr>, <expr><literal type="number">0xFFC9C9C9</literal></expr>, <expr><literal type="number">0xFFCFCFCF</literal></expr>, <expr><literal type="number">0xFFD6D6D6</literal></expr>, <expr><literal type="number">0xFFDDDDDD</literal></expr>,
<expr><literal type="number">0xFFE4E4E4</literal></expr>, <expr><literal type="number">0xFFEAEAEA</literal></expr>, <expr><literal type="number">0xFFF1F1F1</literal></expr>, <expr><literal type="number">0xFFF8F8F8</literal></expr>,


<expr><literal type="number">0xFF000000</literal></expr>, <expr><literal type="number">0xFF020209</literal></expr>, <expr><literal type="number">0xFF050513</literal></expr>, <expr><literal type="number">0xFF07071D</literal></expr>, <expr><literal type="number">0xFF0A0A27</literal></expr>, <expr><literal type="number">0xFF0C0C31</literal></expr>,
<expr><literal type="number">0xFF0F0F3B</literal></expr>, <expr><literal type="number">0xFF111145</literal></expr>, <expr><literal type="number">0xFF14144F</literal></expr>, <expr><literal type="number">0xFF161659</literal></expr>, <expr><literal type="number">0xFF181863</literal></expr>, <expr><literal type="number">0xFF1B1B6D</literal></expr>,
<expr><literal type="number">0xFF1E1E77</literal></expr>, <expr><literal type="number">0xFF202080</literal></expr>, <expr><literal type="number">0xFF22228A</literal></expr>, <expr><literal type="number">0xFF252594</literal></expr>, <expr><literal type="number">0xFF28289E</literal></expr>, <expr><literal type="number">0xFF2A2AA8</literal></expr>,
<expr><literal type="number">0xFF2D2DB2</literal></expr>, <expr><literal type="number">0xFF2F2FBC</literal></expr>, <expr><literal type="number">0xFF3131C6</literal></expr>, <expr><literal type="number">0xFF3434D0</literal></expr>, <expr><literal type="number">0xFF3737DA</literal></expr>, <expr><literal type="number">0xFF3939E4</literal></expr>,
<expr><literal type="number">0xFF3C3CEE</literal></expr>, <expr><literal type="number">0xFF5454F0</literal></expr>, <expr><literal type="number">0xFF6C6CF2</literal></expr>, <expr><literal type="number">0xFF8585F4</literal></expr>, <expr><literal type="number">0xFF9D9DF6</literal></expr>, <expr><literal type="number">0xFFB5B5F8</literal></expr>,
<expr><literal type="number">0xFFCECEFA</literal></expr>, <expr><literal type="number">0xFFE6E6FC</literal></expr>,


<expr><literal type="number">0xFF000000</literal></expr>, <expr><literal type="number">0xFF020902</literal></expr>, <expr><literal type="number">0xFF051305</literal></expr>, <expr><literal type="number">0xFF071D07</literal></expr>, <expr><literal type="number">0xFF0A270A</literal></expr>, <expr><literal type="number">0xFF0C310C</literal></expr>,
<expr><literal type="number">0xFF0F3B0F</literal></expr>, <expr><literal type="number">0xFF114511</literal></expr>, <expr><literal type="number">0xFF144F14</literal></expr>, <expr><literal type="number">0xFF165916</literal></expr>, <expr><literal type="number">0xFF186318</literal></expr>, <expr><literal type="number">0xFF1B6D1B</literal></expr>,
<expr><literal type="number">0xFF1E771E</literal></expr>, <expr><literal type="number">0xFF208020</literal></expr>, <expr><literal type="number">0xFF228A22</literal></expr>, <expr><literal type="number">0xFF259425</literal></expr>, <expr><literal type="number">0xFF289E28</literal></expr>, <expr><literal type="number">0xFF2AA82A</literal></expr>,
<expr><literal type="number">0xFF2DB22D</literal></expr>, <expr><literal type="number">0xFF2FBC2F</literal></expr>, <expr><literal type="number">0xFF31C631</literal></expr>, <expr><literal type="number">0xFF34D034</literal></expr>, <expr><literal type="number">0xFF37DA37</literal></expr>, <expr><literal type="number">0xFF39E439</literal></expr>,
<expr><literal type="number">0xFF3CEE3C</literal></expr>, <expr><literal type="number">0xFF54F054</literal></expr>, <expr><literal type="number">0xFF6CF26C</literal></expr>, <expr><literal type="number">0xFF85F485</literal></expr>, <expr><literal type="number">0xFF9DF69D</literal></expr>, <expr><literal type="number">0xFFB5F8B5</literal></expr>,
<expr><literal type="number">0xFFCEFACE</literal></expr>, <expr><literal type="number">0xFFE6FCE6</literal></expr>,


<expr><literal type="number">0xFF000000</literal></expr>, <expr><literal type="number">0xFF020909</literal></expr>, <expr><literal type="number">0xFF051313</literal></expr>, <expr><literal type="number">0xFF071D1D</literal></expr>, <expr><literal type="number">0xFF0A2727</literal></expr>, <expr><literal type="number">0xFF0C3131</literal></expr>,
<expr><literal type="number">0xFF0F3B3B</literal></expr>, <expr><literal type="number">0xFF114545</literal></expr>, <expr><literal type="number">0xFF144F4F</literal></expr>, <expr><literal type="number">0xFF165959</literal></expr>, <expr><literal type="number">0xFF186363</literal></expr>, <expr><literal type="number">0xFF1B6D6D</literal></expr>,
<expr><literal type="number">0xFF1E7777</literal></expr>, <expr><literal type="number">0xFF208080</literal></expr>, <expr><literal type="number">0xFF228A8A</literal></expr>, <expr><literal type="number">0xFF259494</literal></expr>, <expr><literal type="number">0xFF289E9E</literal></expr>, <expr><literal type="number">0xFF2AA8A8</literal></expr>,
<expr><literal type="number">0xFF2DB2B2</literal></expr>, <expr><literal type="number">0xFF2FBCBC</literal></expr>, <expr><literal type="number">0xFF31C6C6</literal></expr>, <expr><literal type="number">0xFF34D0D0</literal></expr>, <expr><literal type="number">0xFF37DADA</literal></expr>, <expr><literal type="number">0xFF39E4E4</literal></expr>,
<expr><literal type="number">0xFF3CEEEE</literal></expr>, <expr><literal type="number">0xFF54F0F0</literal></expr>, <expr><literal type="number">0xFF6CF2F2</literal></expr>, <expr><literal type="number">0xFF85F4F4</literal></expr>, <expr><literal type="number">0xFF9DF6F6</literal></expr>, <expr><literal type="number">0xFFB5F8F8</literal></expr>,
<expr><literal type="number">0xFFCEFAFA</literal></expr>, <expr><literal type="number">0xFFE6FCFC</literal></expr>,


<expr><literal type="number">0xFF000000</literal></expr>, <expr><literal type="number">0xFF090202</literal></expr>, <expr><literal type="number">0xFF130505</literal></expr>, <expr><literal type="number">0xFF1D0707</literal></expr>, <expr><literal type="number">0xFF270A0A</literal></expr>, <expr><literal type="number">0xFF310C0C</literal></expr>,
<expr><literal type="number">0xFF3B0F0F</literal></expr>, <expr><literal type="number">0xFF451111</literal></expr>, <expr><literal type="number">0xFF4F1414</literal></expr>, <expr><literal type="number">0xFF591616</literal></expr>, <expr><literal type="number">0xFF631818</literal></expr>, <expr><literal type="number">0xFF6D1B1B</literal></expr>,
<expr><literal type="number">0xFF771E1E</literal></expr>, <expr><literal type="number">0xFF802020</literal></expr>, <expr><literal type="number">0xFF8A2222</literal></expr>, <expr><literal type="number">0xFF942525</literal></expr>, <expr><literal type="number">0xFF9E2828</literal></expr>, <expr><literal type="number">0xFFA82A2A</literal></expr>,
<expr><literal type="number">0xFFB22D2D</literal></expr>, <expr><literal type="number">0xFFBC2F2F</literal></expr>, <expr><literal type="number">0xFFC63131</literal></expr>, <expr><literal type="number">0xFFD03434</literal></expr>, <expr><literal type="number">0xFFDA3737</literal></expr>, <expr><literal type="number">0xFFE43939</literal></expr>,
<expr><literal type="number">0xFFEE3C3C</literal></expr>, <expr><literal type="number">0xFFF05454</literal></expr>, <expr><literal type="number">0xFFF26C6C</literal></expr>, <expr><literal type="number">0xFFF48585</literal></expr>, <expr><literal type="number">0xFFF69D9D</literal></expr>, <expr><literal type="number">0xFFF8B5B5</literal></expr>,
<expr><literal type="number">0xFFFACECE</literal></expr>, <expr><literal type="number">0xFFFCE6E6</literal></expr>,


<expr><literal type="number">0xFF000000</literal></expr>, <expr><literal type="number">0xFF090209</literal></expr>, <expr><literal type="number">0xFF130513</literal></expr>, <expr><literal type="number">0xFF1D071D</literal></expr>, <expr><literal type="number">0xFF270A27</literal></expr>, <expr><literal type="number">0xFF310C31</literal></expr>,
<expr><literal type="number">0xFF3B0F3B</literal></expr>, <expr><literal type="number">0xFF451145</literal></expr>, <expr><literal type="number">0xFF4F144F</literal></expr>, <expr><literal type="number">0xFF591659</literal></expr>, <expr><literal type="number">0xFF631863</literal></expr>, <expr><literal type="number">0xFF6D1B6D</literal></expr>,
<expr><literal type="number">0xFF771E77</literal></expr>, <expr><literal type="number">0xFF802080</literal></expr>, <expr><literal type="number">0xFF8A228A</literal></expr>, <expr><literal type="number">0xFF942594</literal></expr>, <expr><literal type="number">0xFF9E289E</literal></expr>, <expr><literal type="number">0xFFA82AA8</literal></expr>,
<expr><literal type="number">0xFFB22DB2</literal></expr>, <expr><literal type="number">0xFFBC2FBC</literal></expr>, <expr><literal type="number">0xFFC631C6</literal></expr>, <expr><literal type="number">0xFFD034D0</literal></expr>, <expr><literal type="number">0xFFDA37DA</literal></expr>, <expr><literal type="number">0xFFE439E4</literal></expr>,
<expr><literal type="number">0xFFEE3CEE</literal></expr>, <expr><literal type="number">0xFFF054F0</literal></expr>, <expr><literal type="number">0xFFF26CF2</literal></expr>, <expr><literal type="number">0xFFF485F4</literal></expr>, <expr><literal type="number">0xFFF69DF6</literal></expr>, <expr><literal type="number">0xFFF8B5F8</literal></expr>,
<expr><literal type="number">0xFFFACEFA</literal></expr>, <expr><literal type="number">0xFFFCE6FC</literal></expr>,


<expr><literal type="number">0xFF000000</literal></expr>, <expr><literal type="number">0xFF090902</literal></expr>, <expr><literal type="number">0xFF131305</literal></expr>, <expr><literal type="number">0xFF1D1D07</literal></expr>, <expr><literal type="number">0xFF27270A</literal></expr>, <expr><literal type="number">0xFF31310C</literal></expr>,
<expr><literal type="number">0xFF3B3B0F</literal></expr>, <expr><literal type="number">0xFF454511</literal></expr>, <expr><literal type="number">0xFF4F4F14</literal></expr>, <expr><literal type="number">0xFF595916</literal></expr>, <expr><literal type="number">0xFF636318</literal></expr>, <expr><literal type="number">0xFF6D6D1B</literal></expr>,
<expr><literal type="number">0xFF77771E</literal></expr>, <expr><literal type="number">0xFF808020</literal></expr>, <expr><literal type="number">0xFF8A8A22</literal></expr>, <expr><literal type="number">0xFF949425</literal></expr>, <expr><literal type="number">0xFF9E9E28</literal></expr>, <expr><literal type="number">0xFFA8A82A</literal></expr>,
<expr><literal type="number">0xFFB2B22D</literal></expr>, <expr><literal type="number">0xFFBCBC2F</literal></expr>, <expr><literal type="number">0xFFC6C631</literal></expr>, <expr><literal type="number">0xFFD0D034</literal></expr>, <expr><literal type="number">0xFFDADA37</literal></expr>, <expr><literal type="number">0xFFE4E439</literal></expr>,
<expr><literal type="number">0xFFEEEE3C</literal></expr>, <expr><literal type="number">0xFFF0F054</literal></expr>, <expr><literal type="number">0xFFF2F26C</literal></expr>, <expr><literal type="number">0xFFF4F485</literal></expr>, <expr><literal type="number">0xFFF6F69D</literal></expr>, <expr><literal type="number">0xFFF8F8B5</literal></expr>,
<expr><literal type="number">0xFFFAFACE</literal></expr>, <expr><literal type="number">0xFFFCFCE6</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>PixHeader</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt>
}</block></struct></type> <name>PixHeader</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pix_decode_header</name><parameter_list>(<parameter><decl><type><name>PixHeader</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>pgb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>header_len</name> <init>= <expr><call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><name>pgb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>pgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><name>pgb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><name>pgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><name>pgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>header_len</name> <operator>&lt;</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><name>pgb</name></expr></argument>, <argument><expr><name>header_len</name> <operator>-</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pix_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bytes_pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>magic</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>chunk_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>data_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bytes_per_scanline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bytes_left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixHeader</name></type> <name>hdr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>magic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>magic</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>magic</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>magic</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>magic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x12</literal> <operator>||</operator>
<name><name>magic</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x08</literal> <operator>||</operator>
<name><name>magic</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x02</literal> <operator>||</operator>
<name><name>magic</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x02</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not a BRender PIX file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>chunk_type</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chunk_type</name> <operator>!=</operator> <name>HEADER1_CHUNK</name> <operator>&amp;&amp;</operator> <name>chunk_type</name> <operator>!=</operator> <name>HEADER2_CHUNK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid chunk type %d.\n"</literal></expr></argument>, <argument><expr><name>chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pix_decode_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid header length.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>hdr</name><operator>.</operator><name>format</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_PAL8</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_pp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGB555BE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_pp</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGB565BE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_pp</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGB24</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_pp</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_0RGB</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_pp</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case> 
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_ARGB</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_pp</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">18</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YA8</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_pp</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Format %d"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>bytes_per_scanline</name> <operator>=</operator> <name>bytes_pp</name> <operator>*</operator> <name><name>hdr</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>hdr</name><operator>.</operator><name>height</name></name> <operator>*</operator> <name>bytes_per_scanline</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>chunk_type</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>chunk_type</name> <operator>==</operator> <name>HEADER1_CHUNK</name> <operator>||</operator>
<name>chunk_type</name> <operator>==</operator> <name>HEADER2_CHUNK</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>PixHeader</name></type> <name>palhdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pal_out</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pix_decode_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>palhdr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid palette header length.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>palhdr</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Palette not in RGB format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>chunk_type</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data_len</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chunk_type</name> <operator>!=</operator> <name>IMAGE_DATA_CHUNK</name> <operator>||</operator> <name>data_len</name> <operator>!=</operator> <literal type="number">1032</literal> <operator>||</operator>
<call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1032</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid palette data.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pal_out</name><operator>++</operator> <operator>=</operator> <operator>(</operator><literal type="number">0xFFU</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>palette_has_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk_type</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pal_out</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Using default palette, colors might be off.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pal_out</name></expr></argument>, <argument><expr><name>std_pal_table</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>palette_has_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data_len</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bytes_left</name> <operator>=</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chunk_type</name> <operator>!=</operator> <name>IMAGE_DATA_CHUNK</name> <operator>||</operator> <name>data_len</name> <operator>!=</operator> <name>bytes_left</name> <operator>||</operator>
<name>bytes_left</name> <operator>/</operator> <name>bytes_per_scanline</name> <operator>&lt;</operator> <name><name>hdr</name><operator>.</operator><name>height</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid image data.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_image_copy_plane</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>bytes_per_scanline</name></expr></argument>,
<argument><expr><name>bytes_per_scanline</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_brender_pix_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"brender_pix"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"BRender PIX image"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_BRENDER_PIX</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>pix_decode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
