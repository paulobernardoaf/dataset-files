<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\h264_direct.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_ps.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rectangle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_scale_factor</name><parameter_list>(<parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>poc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>poc1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>poc0</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>poc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pocdiff</name> <init>= <expr><name>poc1</name> <operator>-</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>poc0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>td</name> <init>= <expr><call><name>av_clip_int8</name><argument_list>(<argument><expr><name>pocdiff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pocdiff</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>pocdiff</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>h264</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"pocdiff overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>td</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>long_ref</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">256</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int64_t</name></type> <name>pocdiff0</name> <init>= <expr><name>poc</name> <operator>-</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>poc0</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tb</name> <init>= <expr><call><name>av_clip_int8</name><argument_list>(<argument><expr><name>pocdiff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tx</name> <init>= <expr><operator>(</operator><literal type="number">16384</literal> <operator>+</operator> <operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>td</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pocdiff0</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>pocdiff0</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>h264</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"pocdiff0 overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>av_clip_intp2</name><argument_list>(<argument><expr><operator>(</operator><name>tb</name> <operator>*</operator> <name>tx</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_direct_dist_scale_factor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>h</name></decl></parameter>,
<parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>poc</name> <init>= <expr><ternary><condition><expr><call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_BOTTOM_FIELD</name></expr>]</index></name></expr>
</then><else>: <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>poc</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>poc1</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>poc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>field</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>field</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>field</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>field</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>poc</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><name>field</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>poc1</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><name>field</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>dist_scale_factor_field</name><index>[<expr><name>field</name></expr>]</index><index>[<expr><name>i</name> <operator>^</operator> <name>field</name></expr>]</index></name> <operator>=</operator>
<call><name>get_scale_factor</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><name>poc</name></expr></argument>, <argument><expr><name>poc1</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>dist_scale_factor</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_scale_factor</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><name>poc</name></expr></argument>, <argument><expr><name>poc1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_colmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name><name>map</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">32</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>colfield</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mbafi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>H264Picture</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ref1</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>parent</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>old_ref</name></decl>, <decl><type ref="prev"/><name>rfield</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><ternary><condition><expr><name>mbafi</name></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><ternary><condition><expr><name>mbafi</name></expr> ?</condition><then> <expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>interl</name> <init>= <expr><name>mbafi</name> <operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>!=</operator> <name>PICT_FRAME</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>map</name><index>[<expr><name>list</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>map</name><index>[<expr><name>list</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>rfield</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>rfield</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>rfield</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>old_ref</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>old_ref</name> <operator>&lt;</operator> <name><name>ref1</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><name>colfield</name></expr>]</index><index>[<expr><name>list</name></expr>]</index></name></expr>;</condition> <incr><expr><name>old_ref</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>poc</name> <init>= <expr><name><name>ref1</name><operator>-&gt;</operator><name>ref_poc</name><index>[<expr><name>colfield</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>old_ref</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>interl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>poc</name> <operator>|=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>interl</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>poc</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>poc</name> <operator>=</operator> <operator>(</operator><name>poc</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>rfield</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">4</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>+</operator>
<operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>reference</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <name>poc</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cur_ref</name> <init>= <expr><ternary><condition><expr><name>mbafi</name></expr> ?</condition><then> <expr><operator>(</operator><name>j</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>^</operator> <name>field</name></expr> </then><else>: <expr><name>j</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ref1</name><operator>-&gt;</operator><name>mbaff</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>old_ref</name> <operator>+</operator> <operator>(</operator><name>rfield</name> <operator>^</operator> <name>field</name><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <name>cur_ref</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rfield</name> <operator>==</operator> <name>field</name> <operator>||</operator> <operator>!</operator><name>interl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>old_ref</name></expr>]</index></name> <operator>=</operator> <name>cur_ref</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_direct_ref_list_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>H264Ref</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ref1</name> <init>= <expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264Picture</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cur</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>list</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>field</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sidx</name> <init>= <expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ref1sidx</name> <init>= <expr><operator>(</operator><name><name>ref1</name><operator>-&gt;</operator><name>reference</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>list</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><name>sidx</name></expr>]</index><index>[<expr><name>list</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><name>list</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><name>list</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>ref_poc</name><index>[<expr><name>sidx</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>+</operator>
<operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>reference</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_FRAME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>ref_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>ref_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>ref_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>current_slice</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>mbaff</name></name> <operator>=</operator> <call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>mbaff</name></name> <operator>==</operator> <call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>col_fieldoff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_FRAME</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cur_poc</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>poc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>col_poc</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>field_poc</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>col_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>INT_MAX</name> <operator>&amp;&amp;</operator> <name><name>col_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"co located POCs unavailable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>col_parity</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>col_parity</name></name> <operator>=</operator> <operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name><name>col_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>cur_poc</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name><name>col_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>cur_poc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ref1sidx</name> <operator>=</operator>
<name>sidx</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>col_parity</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>&amp;</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reference</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>mbaff</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>col_fieldoff</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reference</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name> <operator>||</operator> <name><name>sl</name><operator>-&gt;</operator><name>direct_spatial_mv_pred</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>list</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fill_colmap</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>map_col_to_list0</name></name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>sidx</name></expr></argument>, <argument><expr><name>ref1sidx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>field</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>field</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>field</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fill_colmap</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>map_col_to_list0_field</name><index>[<expr><name>field</name></expr>]</index></name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>field</name></expr></argument>,
<argument><expr><name>field</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>await_reference_mb_row</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>H264Ref</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ref_field</name> <init>= <expr><name><name>ref</name><operator>-&gt;</operator><name>reference</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ref_field_picture</name> <init>= <expr><name><name>ref</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>field_picture</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ref_height</name> <init>= <expr><literal type="number">16</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>&gt;&gt;</operator> <name>ref_field_picture</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>HAVE_THREADS</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_FRAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>,
<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>*</operator> <name>mb_y</name> <operator>&gt;&gt;</operator> <name>ref_field_picture</name></expr></argument>,
<argument><expr><name>ref_height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>ref_field_picture</name> <operator>&amp;&amp;</operator> <name>ref_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pred_spatial_direct_motion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mb_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>b8_stride</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b4_stride</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>b_stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mb_xy</name></name></expr></init></decl>, <decl><type ref="prev"/><name>mb_y</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>mb_type_col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><specifier>const</specifier> <call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>l1mv0</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr><operator>,</operator> <expr><operator>(</operator><operator>*</operator><name>l1mv1</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>l1ref0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l1ref1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>is_b8x8</name> <init>= <expr><call><name>IS_8X8</name><argument_list>(<argument><expr><operator>*</operator><name>mb_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sub_mb_type</name> <init>= <expr><name>MB_TYPE_L0L1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i8</name></decl>, <decl><type ref="prev"/><name>i4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ref</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>mv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>list</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reference</name> <operator>&amp;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>await_reference_mb_row</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>+</operator> <operator>!</operator><operator>!</operator><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><operator>*</operator><name>mb_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_TYPE_16x16_OR_INTRA</name></cpp:macro> <cpp:value>(MB_TYPE_16x16 | MB_TYPE_INTRA4x4 | MB_TYPE_INTRA16x16 | MB_TYPE_INTRA_PCM)</cpp:value></cpp:define>



<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>list</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>left_ref</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_ref</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>refc</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>C</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>refc</name> <operator>==</operator> <name>PART_NOT_AVAILABLE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>refc</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>C</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ref</name><index>[<expr><name>list</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN3</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>left_ref</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>top_ref</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>refc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ref</name><index>[<expr><name>list</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>A</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>B</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>match_count</name> <init>= <expr><operator>(</operator><name>left_ref</name> <operator>==</operator> <name><name>ref</name><index>[<expr><name>list</name></expr>]</index></name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>top_ref</name> <operator>==</operator> <name><name>ref</name><index>[<expr><name>list</name></expr>]</index></name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>refc</name> <operator>==</operator> <name><name>ref</name><index>[<expr><name>list</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>match_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>mv</name><index>[<expr><name>list</name></expr>]</index></name> <operator>=</operator> <call><name>pack16to32</name><argument_list>(<argument><expr><call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>match_count</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>left_ref</name> <operator>==</operator> <name><name>ref</name><index>[<expr><name>list</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mv</name><index>[<expr><name>list</name></expr>]</index></name> <operator>=</operator> <call><name>AV_RN32A</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>top_ref</name> <operator>==</operator> <name><name>ref</name><index>[<expr><name>list</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mv</name><index>[<expr><name>list</name></expr>]</index></name> <operator>=</operator> <call><name>AV_RN32A</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mv</name><index>[<expr><name>list</name></expr>]</index></name> <operator>=</operator> <call><name>AV_RN32A</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>ref</name><index>[<expr><name>list</name></expr>]</index></name> <operator>&lt;</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><name>list</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>!</operator><operator>!</operator><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><operator>~</operator><operator>(</operator><name>MB_TYPE_L0</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>list</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mv</name><index>[<expr><name>list</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref</name><index>[<expr><name>list</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_b8x8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>mb_type</name> <operator>&amp;=</operator> <name>mask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sub_mb_type</name> <operator>&amp;=</operator> <name>mask</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_b8x8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>mb_type</name> <operator>|=</operator> <name>MB_TYPE_L0L1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sub_mb_type</name> <operator>|=</operator> <name>MB_TYPE_L0L1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>is_b8x8</name> <operator>|</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mb_type</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>mb_type</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>MB_TYPE_8x8</name> <operator>|</operator> <name>MB_TYPE_16x8</name> <operator>|</operator> <name>MB_TYPE_8x16</name> <operator>|</operator>
<name>MB_TYPE_P1L0</name> <operator>|</operator> <name>MB_TYPE_P1L1</name><operator>)</operator><operator>)</operator> <operator>|</operator>
<name>MB_TYPE_16x16</name> <operator>|</operator> <name>MB_TYPE_DIRECT2</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><operator>*</operator><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>mb_y</name> <operator>=</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>sl</name><operator>-&gt;</operator><name>col_parity</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_xy</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>sl</name><operator>-&gt;</operator><name>col_parity</name></name><operator>)</operator> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b8_stride</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mb_y</name> <operator>+=</operator> <name><name>sl</name><operator>-&gt;</operator><name>col_fieldoff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_xy</name> <operator>+=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>col_fieldoff</name></name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<goto>goto <name>single_col</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><operator>*</operator><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>mb_y</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_xy</name> <operator>=</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_type_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_type_col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_xy</name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b8_stride</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b4_stride</name> <operator>*=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name><name>mb_type_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator>
<call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name><name>mb_type_col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mb_type_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>MB_TYPE_INTERLACED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_type_col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>MB_TYPE_INTERLACED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sub_mb_type</name> <operator>|=</operator> <name>MB_TYPE_16x16</name> <operator>|</operator> <name>MB_TYPE_DIRECT2</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mb_type_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>MB_TYPE_16x16_OR_INTRA</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>mb_type_col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>MB_TYPE_16x16_OR_INTRA</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><name>is_b8x8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>mb_type</name> <operator>|=</operator> <name>MB_TYPE_16x8</name> <operator>|</operator> <name>MB_TYPE_DIRECT2</name></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>mb_type</name> <operator>|=</operator> <name>MB_TYPE_8x8</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<label><name>single_col</name>:</label>
<expr_stmt><expr><name><name>mb_type_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<name><name>mb_type_col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sub_mb_type</name> <operator>|=</operator> <name>MB_TYPE_16x16</name> <operator>|</operator> <name>MB_TYPE_DIRECT2</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_b8x8</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mb_type_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>MB_TYPE_16x16_OR_INTRA</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>mb_type</name> <operator>|=</operator> <name>MB_TYPE_16x16</name> <operator>|</operator> <name>MB_TYPE_DIRECT2</name></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>is_b8x8</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>mb_type_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>MB_TYPE_16x8</name> <operator>|</operator> <name>MB_TYPE_8x16</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>mb_type</name> <operator>|=</operator> <name>MB_TYPE_DIRECT2</name> <operator>|</operator>
<operator>(</operator><name><name>mb_type_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>MB_TYPE_16x8</name> <operator>|</operator> <name>MB_TYPE_8x16</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>direct_8x8_inference_flag</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>sub_mb_type</name> <operator>+=</operator> <operator>(</operator><name>MB_TYPE_8x8</name> <operator>-</operator> <name>MB_TYPE_16x16</name><operator>)</operator></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>mb_type</name> <operator>|=</operator> <name>MB_TYPE_8x8</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>await_reference_mb_row</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l1mv0</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mb2b_xy</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>l1mv1</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mb2b_xy</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>l1ref0</name> <operator>=</operator> <operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>ref_index</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>mb_xy</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>l1ref1</name> <operator>=</operator> <operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>ref_index</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>mb_xy</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b8_stride</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l1ref0</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>l1ref1</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>l1mv0</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>b4_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l1mv1</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>b4_stride</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><operator>*</operator><name>mb_type</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name><name>mb_type_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i8</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i8</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x8</name> <init>= <expr><name>i8</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y8</name> <init>= <expr><name>i8</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xy8</name> <init>= <expr><name>x8</name> <operator>+</operator> <name>y8</name> <operator>*</operator> <name>b8_stride</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xy4</name> <init>= <expr><name>x8</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>y8</name> <operator>*</operator> <name>b4_stride</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_b8x8</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_DIRECT</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i8</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i8</name></expr>]</index></name> <operator>=</operator> <name>sub_mb_type</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>mb_type_col</name><index>[<expr><name>y8</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>long_ref</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>l1ref0</name><index>[<expr><name>xy8</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name><name>l1mv0</name><index>[<expr><name>xy4</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name><name>l1mv0</name><index>[<expr><name>xy4</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>l1ref0</name><index>[<expr><name>xy8</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>l1ref1</name><index>[<expr><name>xy8</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name><name>l1mv1</name><index>[<expr><name>xy4</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name><name>l1mv1</name><index>[<expr><name>xy4</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator>
<name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_b8x8</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>mb_type</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>mb_type</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>MB_TYPE_8x8</name> <operator>|</operator> <name>MB_TYPE_16x8</name> <operator>|</operator> <name>MB_TYPE_8x16</name> <operator>|</operator>
<name>MB_TYPE_P1L0</name> <operator>|</operator> <name>MB_TYPE_P1L1</name><operator>)</operator><operator>)</operator> <operator>|</operator>
<name>MB_TYPE_16x16</name> <operator>|</operator> <name>MB_TYPE_DIRECT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_16X16</name><argument_list>(<argument><expr><operator>*</operator><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>mb_type_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>long_ref</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>l1ref0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name><name>l1mv0</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name><name>l1mv0</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>l1ref0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>l1ref1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name><name>l1mv1</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<call><name>FFABS</name><argument_list>(<argument><expr><name><name>l1mv1</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>h</name><operator>-&gt;</operator><name>x264_build</name></name> <operator>&gt;</operator> <literal type="number">33U</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i8</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i8</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x8</name> <init>= <expr><name>i8</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y8</name> <init>= <expr><name>i8</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_b8x8</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_DIRECT</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i8</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i8</name></expr>]</index></name> <operator>=</operator> <name>sub_mb_type</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>b8_stride</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>mb_type_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>long_ref</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>l1ref0</name><index>[<expr><name>i8</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name><name>l1ref0</name><index>[<expr><name>i8</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>l1ref1</name><index>[<expr><name>i8</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>h</name><operator>-&gt;</operator><name>x264_build</name></name> <operator>&gt;</operator> <literal type="number">33U</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><specifier>const</specifier> <call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>l1mv</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <ternary><condition><expr><name><name>l1ref0</name><index>[<expr><name>i8</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>l1mv0</name></expr> </then><else>: <expr><name>l1mv1</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_SUB_8X8</name><argument_list>(<argument><expr><name>sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>mv_col</name> <init>= <expr><name><name>l1mv</name><index>[<expr><name>x8</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>y8</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <name>b4_stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>mv_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>mv_col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i4</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i4</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i4</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>mv_col</name> <init>= <expr><name><name>l1mv</name><index>[<expr><name>x8</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>i4</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>y8</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>i4</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>b4_stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>mv_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>mv_col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i4</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i4</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>m</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>m</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i8</name></expr>]</index></name> <operator>+=</operator> <name>MB_TYPE_16x16</name> <operator>-</operator> <name>MB_TYPE_8x8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>m</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_b8x8</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>mb_type</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>mb_type</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>MB_TYPE_8x8</name> <operator>|</operator> <name>MB_TYPE_16x8</name> <operator>|</operator> <name>MB_TYPE_8x16</name> <operator>|</operator>
<name>MB_TYPE_P1L0</name> <operator>|</operator> <name>MB_TYPE_P1L1</name><operator>)</operator><operator>)</operator> <operator>|</operator>
<name>MB_TYPE_16x16</name> <operator>|</operator> <name>MB_TYPE_DIRECT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pred_temp_direct_motion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mb_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>b8_stride</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b4_stride</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>b_stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mb_xy</name></name></expr></init></decl>, <decl><type ref="prev"/><name>mb_y</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>mb_type_col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><specifier>const</specifier> <call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>l1mv0</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr><operator>,</operator> <expr><operator>(</operator><operator>*</operator><name>l1mv1</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>l1ref0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l1ref1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>is_b8x8</name> <init>= <expr><call><name>IS_8X8</name><argument_list>(<argument><expr><operator>*</operator><name>mb_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sub_mb_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i8</name></decl>, <decl><type ref="prev"/><name>i4</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reference</name> <operator>&amp;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>await_reference_mb_row</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>+</operator> <operator>!</operator><operator>!</operator><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><operator>*</operator><name>mb_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><operator>*</operator><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>mb_y</name> <operator>=</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>sl</name><operator>-&gt;</operator><name>col_parity</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_xy</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>sl</name><operator>-&gt;</operator><name>col_parity</name></name><operator>)</operator> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b8_stride</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mb_y</name> <operator>+=</operator> <name><name>sl</name><operator>-&gt;</operator><name>col_fieldoff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_xy</name> <operator>+=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>col_fieldoff</name></name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<goto>goto <name>single_col</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><operator>*</operator><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>mb_y</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mb_xy</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_type_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_type_col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_xy</name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b8_stride</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b4_stride</name> <operator>*=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name><name>mb_type_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator>
<call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name><name>mb_type_col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>mb_type_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>MB_TYPE_INTERLACED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_type_col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>MB_TYPE_INTERLACED</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sub_mb_type</name> <operator>=</operator> <name>MB_TYPE_16x16</name> <operator>|</operator> <name>MB_TYPE_P0L0</name> <operator>|</operator> <name>MB_TYPE_P0L1</name> <operator>|</operator>
<name>MB_TYPE_DIRECT2</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mb_type_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>MB_TYPE_16x16_OR_INTRA</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>mb_type_col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>MB_TYPE_16x16_OR_INTRA</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><name>is_b8x8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>mb_type</name> <operator>|=</operator> <name>MB_TYPE_16x8</name> <operator>|</operator> <name>MB_TYPE_L0L1</name> <operator>|</operator>
<name>MB_TYPE_DIRECT2</name></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>mb_type</name> <operator>|=</operator> <name>MB_TYPE_8x8</name> <operator>|</operator> <name>MB_TYPE_L0L1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<label><name>single_col</name>:</label>
<expr_stmt><expr><name><name>mb_type_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<name><name>mb_type_col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sub_mb_type</name> <operator>=</operator> <name>MB_TYPE_16x16</name> <operator>|</operator> <name>MB_TYPE_P0L0</name> <operator>|</operator> <name>MB_TYPE_P0L1</name> <operator>|</operator>
<name>MB_TYPE_DIRECT2</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_b8x8</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>mb_type_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>MB_TYPE_16x16_OR_INTRA</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>mb_type</name> <operator>|=</operator> <name>MB_TYPE_16x16</name> <operator>|</operator> <name>MB_TYPE_P0L0</name> <operator>|</operator> <name>MB_TYPE_P0L1</name> <operator>|</operator>
<name>MB_TYPE_DIRECT2</name></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>is_b8x8</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>mb_type_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>MB_TYPE_16x8</name> <operator>|</operator> <name>MB_TYPE_8x16</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>mb_type</name> <operator>|=</operator> <name>MB_TYPE_L0L1</name> <operator>|</operator> <name>MB_TYPE_DIRECT2</name> <operator>|</operator>
<operator>(</operator><name><name>mb_type_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>MB_TYPE_16x8</name> <operator>|</operator> <name>MB_TYPE_8x16</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>direct_8x8_inference_flag</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>sub_mb_type</name> <operator>=</operator> <name>MB_TYPE_8x8</name> <operator>|</operator> <name>MB_TYPE_P0L0</name> <operator>|</operator> <name>MB_TYPE_P0L1</name> <operator>|</operator>
<name>MB_TYPE_DIRECT2</name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>mb_type</name> <operator>|=</operator> <name>MB_TYPE_8x8</name> <operator>|</operator> <name>MB_TYPE_L0L1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>await_reference_mb_row</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l1mv0</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mb2b_xy</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>l1mv1</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mb2b_xy</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>l1ref0</name> <operator>=</operator> <operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>ref_index</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>mb_xy</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>l1ref1</name> <operator>=</operator> <operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>ref_index</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>mb_xy</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b8_stride</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l1ref0</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>l1ref1</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>l1mv0</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>b4_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l1mv1</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>b4_stride</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name><name>map_col_to_list0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>sl</name><operator>-&gt;</operator><name>map_col_to_list0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,
<expr><name><name>sl</name><operator>-&gt;</operator><name>map_col_to_list0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>dist_scale_factor</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>dist_scale_factor</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ref_offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IS_INTERLACED</name><argument_list>(<argument><expr><operator>*</operator><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>map_col_to_list0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>map_col_to_list0_field</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map_col_to_list0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>map_col_to_list0_field</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dist_scale_factor</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>dist_scale_factor_field</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ref_offset</name> <operator>=</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>mbaff</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name><name>mb_type_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><operator>*</operator><name>mb_type</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name><name>mb_type_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y_shift</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>!</operator><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><operator>*</operator><name>mb_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>direct_8x8_inference_flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i8</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i8</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x8</name> <init>= <expr><name>i8</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y8</name> <init>= <expr><name>i8</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ref0</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>;</decl_stmt>
<expr_stmt><expr><specifier>const</specifier> <call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>l1mv</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name>l1mv0</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_b8x8</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_DIRECT</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i8</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i8</name></expr>]</index></name> <operator>=</operator> <name>sub_mb_type</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>mb_type_col</name><index>[<expr><name>y8</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ref0</name> <operator>=</operator> <name><name>l1ref0</name><index>[<expr><name>x8</name> <operator>+</operator> <name>y8</name> <operator>*</operator> <name>b8_stride</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ref0</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ref0</name> <operator>=</operator> <name><name>map_col_to_list0</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>ref0</name> <operator>+</operator> <name>ref_offset</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ref0</name> <operator>=</operator> <name><name>map_col_to_list0</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>l1ref1</name><index>[<expr><name>x8</name> <operator>+</operator> <name>y8</name> <operator>*</operator> <name>b8_stride</name></expr>]</index></name> <operator>+</operator>
<name>ref_offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>l1mv</name> <operator>=</operator> <name>l1mv1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <name><name>dist_scale_factor</name><index>[<expr><name>ref0</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><name>ref0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>mv_col</name> <init>= <expr><name><name>l1mv</name><index>[<expr><name>x8</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>y8</name> <operator>*</operator> <name>b4_stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>my_col</name> <init>= <expr><operator>(</operator><name><name>mv_col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>y_shift</name><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><operator>(</operator><name>scale</name> <operator>*</operator> <name><name>mv_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>my</name> <init>= <expr><operator>(</operator><name>scale</name> <operator>*</operator> <name>my_col</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><call><name>pack16to32</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><call><name>pack16to32</name><argument_list>(<argument><expr><name>mx</name> <operator>-</operator> <name><name>mv_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>my</name> <operator>-</operator> <name>my_col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></for>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>IS_16X16</name><argument_list>(<argument><expr><operator>*</operator><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ref</name></decl>, <decl><type ref="prev"/><name>mv0</name></decl>, <decl><type ref="prev"/><name>mv1</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>mb_type_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>mv0</name> <operator>=</operator> <name>mv1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ref0</name> <init>= <expr><ternary><condition><expr><name><name>l1ref0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>map_col_to_list0</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>l1ref0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>ref_offset</name></expr>]</index></name></expr>
</then><else>: <expr><name><name>map_col_to_list0</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>l1ref1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>ref_offset</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>scale</name> <init>= <expr><name><name>dist_scale_factor</name><index>[<expr><name>ref0</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>mv_col</name> <init>= <expr><ternary><condition><expr><name><name>l1ref0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>l1mv0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>l1mv1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>mv_l0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mv_l0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>scale</name> <operator>*</operator> <name><name>mv_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_l0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>scale</name> <operator>*</operator> <name><name>mv_col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>ref0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mv0</name> <operator>=</operator> <call><name>pack16to32</name><argument_list>(<argument><expr><name><name>mv_l0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mv_l0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mv1</name> <operator>=</operator> <call><name>pack16to32</name><argument_list>(<argument><expr><name><name>mv_l0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>mv_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mv_l0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>mv_col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>mv0</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>mv1</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i8</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i8</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x8</name> <init>= <expr><name>i8</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y8</name> <init>= <expr><name>i8</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ref0</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>;</decl_stmt>
<expr_stmt><expr><specifier>const</specifier> <call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>l1mv</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name>l1mv0</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_b8x8</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_DIRECT</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i8</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>sub_mb_type</name><index>[<expr><name>i8</name></expr>]</index></name> <operator>=</operator> <name>sub_mb_type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name><name>mb_type_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>b8_stride</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ref0</name> <operator>=</operator> <name><name>l1ref0</name><index>[<expr><name>i8</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ref0</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ref0</name> <operator>=</operator> <name><name>map_col_to_list0</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>ref0</name> <operator>+</operator> <name>ref_offset</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ref0</name> <operator>=</operator> <name><name>map_col_to_list0</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>l1ref1</name><index>[<expr><name>i8</name></expr>]</index></name> <operator>+</operator> <name>ref_offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>l1mv</name> <operator>=</operator> <name>l1mv1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <name><name>dist_scale_factor</name><index>[<expr><name>ref0</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><name>ref0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_SUB_8X8</name><argument_list>(<argument><expr><name>sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>mv_col</name> <init>= <expr><name><name>l1mv</name><index>[<expr><name>x8</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>y8</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <name>b4_stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><operator>(</operator><name>scale</name> <operator>*</operator> <name><name>mv_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>my</name> <init>= <expr><operator>(</operator><name>scale</name> <operator>*</operator> <name><name>mv_col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><call><name>pack16to32</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
<argument><expr><call><name>pack16to32</name><argument_list>(<argument><expr><name>mx</name> <operator>-</operator> <name><name>mv_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>my</name> <operator>-</operator> <name><name>mv_col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i4</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i4</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i4</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>mv_col</name> <init>= <expr><name><name>l1mv</name><index>[<expr><name>x8</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>i4</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>y8</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>i4</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>b4_stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>mv_l0</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i4</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mv_l0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>scale</name> <operator>*</operator> <name><name>mv_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mv_l0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>scale</name> <operator>*</operator> <name><name>mv_col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i8</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i4</name></expr>]</index></name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>pack16to32</name><argument_list>(<argument><expr><name><name>mv_l0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>mv_col</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>mv_l0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>mv_col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_pred_direct_motion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mb_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>direct_spatial_mv_pred</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pred_spatial_direct_motion</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pred_temp_direct_motion</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
