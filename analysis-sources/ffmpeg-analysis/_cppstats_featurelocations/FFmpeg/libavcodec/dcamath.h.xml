<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\dcamath.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_DCAMATH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_DCAMATH_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intmath.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>norm__</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>a</name> <operator>+</operator> <operator>(</operator><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>bits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>bits</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>a</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>mul__</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>norm__</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>a</name> <operator>*</operator> <name>b</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>norm13</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>norm__</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>norm16</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>norm__</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>norm20</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>norm__</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>norm21</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>norm__</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>norm23</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>norm__</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>mul15</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mul__</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>mul16</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mul__</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>mul17</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mul__</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>mul22</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mul__</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>mul23</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mul__</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>mul31</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mul__</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>mul32</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mul__</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>clip23</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>av_clip_intp2</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
