<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\h263.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h263.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h263data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg4video.h"</cpp:file></cpp:include>


<function><type><name>void</name></type> <name>ff_h263_update_motion_val</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>wrap</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mbskip_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_skipped</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>!=</operator> <name>MV_TYPE_8X8</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>motion_x</name></decl>, <decl><type ref="prev"/><name>motion_y</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>motion_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>motion_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>==</operator> <name>MV_TYPE_16X16</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>motion_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>motion_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>motion_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>motion_y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>motion_x</name> <operator>=</operator> <operator>(</operator><name>motion_x</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>motion_x</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_field_mv_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_field_mv_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>mb_xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>ref_index</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><name>mb_xy</name></expr> ]</index></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>ref_index</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><name>mb_xy</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>ref_index</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><name>mb_xy</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator>
<name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>ref_index</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><name>mb_xy</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>field_select</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>motion_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>xy</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>motion_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>xy</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>motion_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>xy</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>motion_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>xy</name> <operator>+</operator> <name>wrap</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>motion_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>xy</name> <operator>+</operator> <name>wrap</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>motion_y</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>xy</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>wrap</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>motion_x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>xy</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>wrap</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>motion_y</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>encoding</name></name></expr>)</condition><block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>==</operator> <name>MV_TYPE_8X8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name>MB_TYPE_L0</name> <operator>|</operator> <name>MB_TYPE_8x8</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_intra</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name>MB_TYPE_INTRA</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name>MB_TYPE_L0</name> <operator>|</operator> <name>MB_TYPE_16x16</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_h263_pred_dc</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dc_val_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>wrap</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>pred_dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dc_val</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>wrap</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dc_val</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wrap</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dc_val</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>dc_val</name><index>[<expr><operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name>wrap</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>dc_val</name><index>[<expr><operator>(</operator><name>x</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>wrap</name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name> <operator>&amp;&amp;</operator> <name>n</name><operator>!=</operator><literal type="number">3</literal></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>n</name><operator>!=</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name><operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>n</name><operator>!=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>resync_mb_x</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>a</name><operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <literal type="number">1024</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pred_dc</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>+</operator> <name>c</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>a</name> <operator>!=</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pred_dc</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pred_dc</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><operator>*</operator><name>dc_val_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>dc_val</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>wrap</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>pred_dc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h263_loop_filter</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>qp_c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>linesize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>linesize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>uvlinesize</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cb</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cr</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_SKIP</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mb_type</name><index>[<expr><name>xy</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>qp_c</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>h263dsp</name><operator>.</operator><name>h263_v_loop_filter</name></name><argument_list>(<argument><expr><name>dest_y</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>qp_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>h263dsp</name><operator>.</operator><name>h263_v_loop_filter</name></name><argument_list>(<argument><expr><name>dest_y</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>qp_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>qp_c</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>qp_dt</name></decl>, <decl><type ref="prev"/><name>qp_tt</name></decl>, <decl><type ref="prev"/><name>qp_tc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SKIP</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mb_type</name><index>[<expr><name>xy</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>qp_tt</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>qp_tt</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>xy</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>qp_c</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>qp_tc</name><operator>=</operator> <name>qp_c</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>qp_tc</name><operator>=</operator> <name>qp_tt</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>qp_tc</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_qp</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>chroma_qscale_table</name><index>[<expr><name>qp_tc</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>h263dsp</name><operator>.</operator><name>h263_v_loop_filter</name></name><argument_list>(<argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>qp_tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>h263dsp</name><operator>.</operator><name>h263_v_loop_filter</name></name><argument_list>(<argument><expr><name>dest_y</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>qp_tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>h263dsp</name><operator>.</operator><name>h263_v_loop_filter</name></name><argument_list>(<argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>chroma_qp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>h263dsp</name><operator>.</operator><name>h263_v_loop_filter</name></name><argument_list>(<argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>chroma_qp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>qp_tt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>h263dsp</name><operator>.</operator><name>h263_h_loop_filter</name></name><argument_list>(<argument><expr><name>dest_y</name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>qp_tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>)</condition><block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>qp_tt</name> <operator>||</operator> <call><name>IS_SKIP</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mb_type</name><index>[<expr><name>xy</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>qp_dt</name><operator>=</operator> <name>qp_tt</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>qp_dt</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>xy</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>qp_dt</name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_qp</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>chroma_qscale_table</name><index>[<expr><name>qp_dt</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>h263dsp</name><operator>.</operator><name>h263_h_loop_filter</name></name><argument_list>(<argument><expr><name>dest_y</name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>qp_dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>h263dsp</name><operator>.</operator><name>h263_h_loop_filter</name></name><argument_list>(<argument><expr><name>dest_cb</name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>chroma_qp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>h263dsp</name><operator>.</operator><name>h263_h_loop_filter</name></name><argument_list>(<argument><expr><name>dest_cr</name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>chroma_qp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>qp_c</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>h263dsp</name><operator>.</operator><name>h263_h_loop_filter</name></name><argument_list>(<argument><expr><name>dest_y</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>qp_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>h263dsp</name><operator>.</operator><name>h263_h_loop_filter</name></name><argument_list>(<argument><expr><name>dest_y</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>qp_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>qp_lc</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>qp_c</name> <operator>||</operator> <call><name>IS_SKIP</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mb_type</name><index>[<expr><name>xy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>qp_lc</name><operator>=</operator> <name>qp_c</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>qp_lc</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>xy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>qp_lc</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>h263dsp</name><operator>.</operator><name>h263_h_loop_filter</name></name><argument_list>(<argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>qp_lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>)</condition><block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_qp</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>chroma_qscale_table</name><index>[<expr><name>qp_lc</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>h263dsp</name><operator>.</operator><name>h263_h_loop_filter</name></name><argument_list>(<argument><expr><name>dest_y</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>qp_lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>h263dsp</name><operator>.</operator><name>h263_h_loop_filter</name></name><argument_list>(<argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>chroma_qp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>h263dsp</name><operator>.</operator><name>h263_h_loop_filter</name></name><argument_list>(<argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>chroma_qp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h263_pred_acdc</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>wrap</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>pred_dc</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dc_val</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ac_val</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ac_val1</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>+</operator> <operator>(</operator><name>n</name><operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>wrap</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dc_val</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ac_val</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ac_val</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>y_dc_scale</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wrap</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dc_val</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dc_val</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ac_val</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ac_val</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>c_dc_scale</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ac_val</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name>wrap</name> <operator>+</operator> <operator>(</operator><name>x</name><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ac_val1</name> <operator>=</operator> <name>ac_val</name></expr>;</expr_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>dc_val</name><index>[<expr><operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name>wrap</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>dc_val</name><index>[<expr><operator>(</operator><name>x</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>wrap</name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name> <operator>&amp;&amp;</operator> <name>n</name><operator>!=</operator><literal type="number">3</literal></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>n</name><operator>!=</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name><operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>n</name><operator>!=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>resync_mb_x</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>a</name><operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ac_pred</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pred_dc</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>h263_aic_dir</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ac_val</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>block</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name><index>[<expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>]</index></name></expr>]</index></name> <operator>+=</operator> <name><name>ac_val</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>pred_dc</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ac_val</name> <operator>-=</operator> <literal type="number">16</literal> <operator>*</operator> <name>wrap</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>block</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+=</operator> <name><name>ac_val</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>pred_dc</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <literal type="number">1024</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pred_dc</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>+</operator> <name>c</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>a</name> <operator>!=</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pred_dc</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pred_dc</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name>scale</name> <operator>+</operator> <name>pred_dc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name><name>dc_val</name><index>[<expr><operator>(</operator><name>x</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name>wrap</name></expr>]</index></name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>


<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ac_val1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>block</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name><index>[<expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ac_val1</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>block</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>int16_t</name> <modifier>*</modifier></type><name>ff_h263_pred_motion</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>px</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>py</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>wrap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>A</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>B</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>C</name></decl>, <argument_list>(<argument><expr><operator>*</operator><name>mot_val</name></expr></argument>)</argument_list>[2];</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>off</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><init>= <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>wrap</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mot_val</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>motion_val</name><index>[<expr><name>dir</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>block_index</name><index>[<expr><name>block</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>mot_val</name><index>[ <expr><operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name> <operator>&amp;&amp;</operator> <name>block</name><operator>&lt;</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><name>block</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content> 
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>resync_mb_x</name></name></expr>)</condition><block>{<block_content> 
<expr_stmt><expr><operator>*</operator><name>px</name><operator>=</operator> <operator>*</operator><name>py</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>resync_mb_x</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>h263_pred</name></name></expr>)</condition><block>{<block_content> 
<expr_stmt><expr><name>C</name> <operator>=</operator> <name><name>mot_val</name><index>[<expr><name><name>off</name><index>[<expr><name>block</name></expr>]</index></name> <operator>-</operator> <name>wrap</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>px</name> <operator>=</operator> <name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>py</name> <operator>=</operator> <name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>px</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>py</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>px</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>py</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>block</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>resync_mb_x</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>h263_pred</name></name></expr>)</condition><block>{<block_content> 
<expr_stmt><expr><name>C</name> <operator>=</operator> <name><name>mot_val</name><index>[<expr><name><name>off</name><index>[<expr><name>block</name></expr>]</index></name> <operator>-</operator> <name>wrap</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>px</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>py</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>px</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>py</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if><else>else<block>{<block_content> 
<expr_stmt><expr><name>B</name> <operator>=</operator> <name><name>mot_val</name><index>[ <expr><operator>-</operator> <name>wrap</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>C</name> <operator>=</operator> <name><name>mot_val</name><index>[<expr><name><name>off</name><index>[<expr><name>block</name></expr>]</index></name> <operator>-</operator> <name>wrap</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>resync_mb_x</name></name></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>px</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>py</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>B</name> <operator>=</operator> <name><name>mot_val</name><index>[ <expr><operator>-</operator> <name>wrap</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>C</name> <operator>=</operator> <name><name>mot_val</name><index>[<expr><name><name>off</name><index>[<expr><name>block</name></expr>]</index></name> <operator>-</operator> <name>wrap</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>px</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>py</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>*</operator><name>mot_val</name></expr>;</return>
</block_content>}</block></function>
</unit>
