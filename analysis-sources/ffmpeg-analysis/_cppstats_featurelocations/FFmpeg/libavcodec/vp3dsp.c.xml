<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vp3dsp.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rnd_avg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp3dsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IdctAdjustBeforeShift</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xC1S7</name></cpp:macro> <cpp:value>64277</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xC2S6</name></cpp:macro> <cpp:value>60547</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xC3S5</name></cpp:macro> <cpp:value>54491</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xC4S4</name></cpp:macro> <cpp:value>46341</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xC5S3</name></cpp:macro> <cpp:value>36410</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xC6S2</name></cpp:macro> <cpp:value>25080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xC7S1</name></cpp:macro> <cpp:value>12785</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((SUINT)(a) * (b)) &gt;&gt; 16)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>idct</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>ip</name> <init>= <expr><name>input</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>C</name></decl>, <decl><type ref="prev"/><name>D</name></decl>, <decl><type ref="prev"/><name>Ad</name></decl>, <decl><type ref="prev"/><name>Bd</name></decl>, <decl><type ref="prev"/><name>Cd</name></decl>, <decl><type ref="prev"/><name>Dd</name></decl>, <decl><type ref="prev"/><name>E</name></decl>, <decl><type ref="prev"/><name>F</name></decl>, <decl><type ref="prev"/><name>G</name></decl>, <decl><type ref="prev"/><name>H</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Ed</name></decl>, <decl><type ref="prev"/><name>Gd</name></decl>, <decl><type ref="prev"/><name>Add</name></decl>, <decl><type ref="prev"/><name>Bdd</name></decl>, <decl><type ref="prev"/><name>Fd</name></decl>, <decl><type ref="prev"/><name>Hd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ip</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|</operator> <name><name>ip</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|</operator> <name><name>ip</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|</operator> <name><name>ip</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|</operator>
<name><name>ip</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|</operator> <name><name>ip</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|</operator> <name><name>ip</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|</operator> <name><name>ip</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC1S7</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC7S1</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC7S1</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC1S7</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC3S5</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC5S3</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>D</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC3S5</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC5S3</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Ad</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC4S4</name></expr></argument>, <argument><expr><operator>(</operator><name>A</name> <operator>-</operator> <name>C</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Bd</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC4S4</name></expr></argument>, <argument><expr><operator>(</operator><name>B</name> <operator>-</operator> <name>D</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Cd</name> <operator>=</operator> <name>A</name> <operator>+</operator> <name>C</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Dd</name> <operator>=</operator> <name>B</name> <operator>+</operator> <name>D</name></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC4S4</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ip</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>ip</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>F</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC4S4</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ip</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name><name>ip</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC2S6</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC6S2</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>H</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC6S2</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC2S6</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Ed</name> <operator>=</operator> <name>E</name> <operator>-</operator> <name>G</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Gd</name> <operator>=</operator> <name>E</name> <operator>+</operator> <name>G</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Add</name> <operator>=</operator> <name>F</name> <operator>+</operator> <name>Ad</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Bdd</name> <operator>=</operator> <name>Bd</name> <operator>-</operator> <name>H</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Fd</name> <operator>=</operator> <name>F</name> <operator>-</operator> <name>Ad</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Hd</name> <operator>=</operator> <name>Bd</name> <operator>+</operator> <name>H</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>Gd</name> <operator>+</operator> <name>Cd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>Gd</name> <operator>-</operator> <name>Cd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>Add</name> <operator>+</operator> <name>Hd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>Add</name> <operator>-</operator> <name>Hd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>Ed</name> <operator>+</operator> <name>Dd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>Ed</name> <operator>-</operator> <name>Dd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>Fd</name> <operator>+</operator> <name>Bdd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>Fd</name> <operator>-</operator> <name>Bdd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ip</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></for>

<expr_stmt><expr><name>ip</name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>ip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <name><name>ip</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|</operator>
<name><name>ip</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>|</operator> <name><name>ip</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>|</operator> <name><name>ip</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>|</operator> <name><name>ip</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC1S7</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC7S1</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC7S1</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC1S7</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC3S5</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC5S3</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>D</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC3S5</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC5S3</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Ad</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC4S4</name></expr></argument>, <argument><expr><operator>(</operator><name>A</name> <operator>-</operator> <name>C</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Bd</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC4S4</name></expr></argument>, <argument><expr><operator>(</operator><name>B</name> <operator>-</operator> <name>D</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Cd</name> <operator>=</operator> <name>A</name> <operator>+</operator> <name>C</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Dd</name> <operator>=</operator> <name>B</name> <operator>+</operator> <name>D</name></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC4S4</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>ip</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>F</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC4S4</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>ip</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>E</name> <operator>+=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>F</name> <operator>+=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">128</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC2S6</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC6S2</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>H</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC6S2</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC2S6</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Ed</name> <operator>=</operator> <name>E</name> <operator>-</operator> <name>G</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Gd</name> <operator>=</operator> <name>E</name> <operator>+</operator> <name>G</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Add</name> <operator>=</operator> <name>F</name> <operator>+</operator> <name>Ad</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Bdd</name> <operator>=</operator> <name>Bd</name> <operator>-</operator> <name>H</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Fd</name> <operator>=</operator> <name>F</name> <operator>-</operator> <name>Ad</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Hd</name> <operator>=</operator> <name>Bd</name> <operator>+</operator> <name>H</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>Gd</name> <operator>+</operator> <name>Cd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>Gd</name> <operator>-</operator> <name>Cd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>Add</name> <operator>+</operator> <name>Hd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>Add</name> <operator>-</operator> <name>Hd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>Ed</name> <operator>+</operator> <name>Dd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>Ed</name> <operator>-</operator> <name>Dd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>Fd</name> <operator>+</operator> <name>Bdd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>Fd</name> <operator>-</operator> <name>Bdd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>Gd</name> <operator>+</operator> <name>Cd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>Gd</name> <operator>-</operator> <name>Cd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>Add</name> <operator>+</operator> <name>Hd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>Add</name> <operator>-</operator> <name>Hd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>Ed</name> <operator>+</operator> <name>Dd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>Ed</name> <operator>-</operator> <name>Dd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>Fd</name> <operator>+</operator> <name>Bdd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>Fd</name> <operator>-</operator> <name>Bdd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator>
<name><name>dst</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator>
<name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator>
<name><name>dst</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator>
<name><name>dst</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator>
<name><name>dst</name><index>[<expr><literal type="number">5</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator>
<name><name>dst</name><index>[<expr><literal type="number">6</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator>
<name><name>dst</name><index>[<expr><literal type="number">7</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><literal type="number">128</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>xC4S4</name> <operator>*</operator> <name><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>IdctAdjustBeforeShift</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>xC4S4</name> <operator>*</operator> <name><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>IdctAdjustBeforeShift</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ip</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>dst</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>idct10</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>ip</name> <init>= <expr><name>input</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>C</name></decl>, <decl><type ref="prev"/><name>D</name></decl>, <decl><type ref="prev"/><name>Ad</name></decl>, <decl><type ref="prev"/><name>Bd</name></decl>, <decl><type ref="prev"/><name>Cd</name></decl>, <decl><type ref="prev"/><name>Dd</name></decl>, <decl><type ref="prev"/><name>E</name></decl>, <decl><type ref="prev"/><name>F</name></decl>, <decl><type ref="prev"/><name>G</name></decl>, <decl><type ref="prev"/><name>H</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Ed</name></decl>, <decl><type ref="prev"/><name>Gd</name></decl>, <decl><type ref="prev"/><name>Add</name></decl>, <decl><type ref="prev"/><name>Bdd</name></decl>, <decl><type ref="prev"/><name>Fd</name></decl>, <decl><type ref="prev"/><name>Hd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ip</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|</operator> <name><name>ip</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|</operator> <name><name>ip</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|</operator> <name><name>ip</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC1S7</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC7S1</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC3S5</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>D</name> <operator>=</operator> <operator>-</operator><call><name>M</name><argument_list>(<argument><expr><name>xC5S3</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Ad</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC4S4</name></expr></argument>, <argument><expr><operator>(</operator><name>A</name> <operator>-</operator> <name>C</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Bd</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC4S4</name></expr></argument>, <argument><expr><operator>(</operator><name>B</name> <operator>-</operator> <name>D</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Cd</name> <operator>=</operator> <name>A</name> <operator>+</operator> <name>C</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Dd</name> <operator>=</operator> <name>B</name> <operator>+</operator> <name>D</name></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC4S4</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>F</name> <operator>=</operator> <name>E</name></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC2S6</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>H</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC6S2</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Ed</name> <operator>=</operator> <name>E</name> <operator>-</operator> <name>G</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Gd</name> <operator>=</operator> <name>E</name> <operator>+</operator> <name>G</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Add</name> <operator>=</operator> <name>F</name> <operator>+</operator> <name>Ad</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Bdd</name> <operator>=</operator> <name>Bd</name> <operator>-</operator> <name>H</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Fd</name> <operator>=</operator> <name>F</name> <operator>-</operator> <name>Ad</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Hd</name> <operator>=</operator> <name>Bd</name> <operator>+</operator> <name>H</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>Gd</name> <operator>+</operator> <name>Cd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>Gd</name> <operator>-</operator> <name>Cd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>Add</name> <operator>+</operator> <name>Hd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>Add</name> <operator>-</operator> <name>Hd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>Ed</name> <operator>+</operator> <name>Dd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>Ed</name> <operator>-</operator> <name>Dd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>Fd</name> <operator>+</operator> <name>Bdd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>Fd</name> <operator>-</operator> <name>Bdd</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ip</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ip</name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>ip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>ip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <name><name>ip</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC1S7</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC7S1</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC3S5</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>D</name> <operator>=</operator> <operator>-</operator><call><name>M</name><argument_list>(<argument><expr><name>xC5S3</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Ad</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC4S4</name></expr></argument>, <argument><expr><operator>(</operator><name>A</name> <operator>-</operator> <name>C</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Bd</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC4S4</name></expr></argument>, <argument><expr><operator>(</operator><name>B</name> <operator>-</operator> <name>D</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Cd</name> <operator>=</operator> <name>A</name> <operator>+</operator> <name>C</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Dd</name> <operator>=</operator> <name>B</name> <operator>+</operator> <name>D</name></expr>;</expr_stmt>

<expr_stmt><expr><name>E</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC4S4</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>E</name> <operator>+=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>F</name> <operator>=</operator> <name>E</name></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC2S6</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>H</name> <operator>=</operator> <call><name>M</name><argument_list>(<argument><expr><name>xC6S2</name></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Ed</name> <operator>=</operator> <name>E</name> <operator>-</operator> <name>G</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Gd</name> <operator>=</operator> <name>E</name> <operator>+</operator> <name>G</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Add</name> <operator>=</operator> <name>F</name> <operator>+</operator> <name>Ad</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Bdd</name> <operator>=</operator> <name>Bd</name> <operator>-</operator> <name>H</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Fd</name> <operator>=</operator> <name>F</name> <operator>-</operator> <name>Ad</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Hd</name> <operator>=</operator> <name>Bd</name> <operator>+</operator> <name>H</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Gd</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Add</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Ed</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Fd</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>Gd</name> <operator>+</operator> <name>Cd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>Gd</name> <operator>-</operator> <name>Cd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>Add</name> <operator>+</operator> <name>Hd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>Add</name> <operator>-</operator> <name>Hd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>Ed</name> <operator>+</operator> <name>Dd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>Ed</name> <operator>-</operator> <name>Dd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>Fd</name> <operator>+</operator> <name>Bdd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><name>Fd</name> <operator>-</operator> <name>Bdd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>Gd</name> <operator>+</operator> <name>Cd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>Gd</name> <operator>-</operator> <name>Cd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>Add</name> <operator>+</operator> <name>Hd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>Add</name> <operator>-</operator> <name>Hd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>Ed</name> <operator>+</operator> <name>Dd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>Ed</name> <operator>-</operator> <name>Dd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>Fd</name> <operator>+</operator> <name>Bdd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>Fd</name> <operator>-</operator> <name>Bdd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator>
<name><name>dst</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator>
<name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator>
<name><name>dst</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator>
<name><name>dst</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator>
<name><name>dst</name><index>[<expr><literal type="number">5</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator>
<name><name>dst</name><index>[<expr><literal type="number">6</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator>
<name><name>dst</name><index>[<expr><literal type="number">7</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ip</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp3dsp_idct10_put</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>idct10</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp3dsp_idct10_add</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>idct10</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp3_idct_put_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter> , <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>idct</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp3_idct_add_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter> , <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>idct</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp3_idct_dc_add_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter> , <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>dc</name> <init>= <expr><operator>(</operator><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>vp3_v_loop_filter_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>first_pixel</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bounding_values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filter_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ptrdiff_t</name></type> <name>nstride</name> <init>= <expr><operator>-</operator><name>stride</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>end</name> <operator>=</operator> <name>first_pixel</name> <operator>+</operator> <name>count</name></expr>;</init> <condition><expr><name>first_pixel</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>first_pixel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>filter_value</name> <operator>=</operator> <operator>(</operator><name><name>first_pixel</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>nstride</name></expr>]</index></name> <operator>-</operator> <name><name>first_pixel</name><index>[<expr><name>stride</name></expr>]</index></name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name><name>first_pixel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>first_pixel</name><index>[<expr><name>nstride</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>filter_value</name> <operator>=</operator> <name><name>bounding_values</name><index>[<expr><operator>(</operator><name>filter_value</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>first_pixel</name><index>[<expr><name>nstride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>first_pixel</name><index>[<expr><name>nstride</name></expr>]</index></name> <operator>+</operator> <name>filter_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>first_pixel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>first_pixel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>filter_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>vp3_h_loop_filter_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>first_pixel</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bounding_values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filter_value</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>end</name> <operator>=</operator> <name>first_pixel</name> <operator>+</operator> <name>count</name> <operator>*</operator> <name>stride</name></expr>;</init> <condition><expr><name>first_pixel</name> <operator>!=</operator> <name>end</name></expr>;</condition> <incr><expr><name>first_pixel</name> <operator>+=</operator> <name>stride</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>filter_value</name> <operator>=</operator> <operator>(</operator><name><name>first_pixel</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>first_pixel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name><name>first_pixel</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>first_pixel</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>filter_value</name> <operator>=</operator> <name><name>bounding_values</name><index>[<expr><operator>(</operator><name>filter_value</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>first_pixel</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>first_pixel</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>filter_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>first_pixel</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>first_pixel</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>filter_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOP_FILTER</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>, <parameter><type><name>suffix</name></type></parameter>, <parameter><type><name>dim</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void prefix##_##dim##_loop_filter_##count##suffix(uint8_t *first_pixel, ptrdiff_t stride, int *bounding_values) { vp3_##dim##_loop_filter_c(first_pixel, stride, bounding_values, count); }</cpp:value></cpp:define>






<expr_stmt><expr><specifier>static</specifier> <macro><name>LOOP_FILTER</name><argument_list>(<argument>vp3</argument>,<argument>_c</argument>, <argument>v</argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<specifier>static</specifier> <macro><name>LOOP_FILTER</name><argument_list>(<argument>vp3</argument>,<argument>_c</argument>, <argument>h</argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>LOOP_FILTER</name><argument_list>(<argument>ff_vp3dsp</argument>, <argument/>, <argument>v</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>LOOP_FILTER</name><argument_list>(<argument>ff_vp3dsp</argument>, <argument/>, <argument>h</argument>, <argument><literal type="number">12</literal></argument>)</argument_list></macro>

<specifier>static</specifier> <name>void</name> <macro><name>put_no_rnd_pixels_l2</name><argument_list>(<argument>uint8_t *dst</argument>, <argument>const uint8_t *src1</argument>,
<argument>const uint8_t *src2</argument>, <argument>ptrdiff_t stride</argument>, <argument>int h</argument>)</argument_list></macro>
<block>{
<expr><name>int</name> <name>i</name></expr>;

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>AV_RN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src1</name><index>[<expr><name>i</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>AV_RN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src2</name><index>[<expr><name>i</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>i</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>no_rnd_avg32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>AV_RN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src1</name><index>[<expr><name>i</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>AV_RN32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src2</name><index>[<expr><name>i</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>i</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>no_rnd_avg32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></for>}</block></expr></expr_stmt>
}

av_cold <function><type><name>void</name></type> <name>ff_vp3dsp_init</name><parameter_list>(<parameter><decl><type><name>VP3DSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_no_rnd_pixels_l2</name></name> <operator>=</operator> <name>put_no_rnd_pixels_l2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_put</name></name> <operator>=</operator> <name>vp3_idct_put_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_add</name></name> <operator>=</operator> <name>vp3_idct_add_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_dc_add</name></name> <operator>=</operator> <name>vp3_idct_dc_add_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>v_loop_filter</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>v_loop_filter_unaligned</name></name> <operator>=</operator> <name>vp3_v_loop_filter_8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h_loop_filter</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>h_loop_filter_unaligned</name></name> <operator>=</operator> <name>vp3_h_loop_filter_8_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_vp3dsp_init_arm</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_PPC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_vp3dsp_init_ppc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_vp3dsp_init_x86</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_MIPS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_vp3dsp_init_mips</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>









<function><type><name>void</name></type> <name>ff_vp3dsp_set_bounding_values</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>bounding_values_array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter_limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>bounding_values</name> <init>= <expr><name>bounding_values_array</name> <operator>+</operator> <literal type="number">127</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>filter_limit</name> <operator>&lt;</operator> <literal type="number">128U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bounding_values_array</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>filter_limit</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>bounding_values</name><index>[<expr><operator>-</operator><name>x</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bounding_values</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>value</name> <operator>=</operator> <name>filter_limit</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <name>value</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>value</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>bounding_values</name><index>[ <expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bounding_values</name><index>[<expr><operator>-</operator><name>x</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>value</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bounding_values</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bounding_values</name><index>[<expr><literal type="number">129</literal></expr>]</index></name> <operator>=</operator> <name><name>bounding_values</name><index>[<expr><literal type="number">130</literal></expr>]</index></name> <operator>=</operator> <name>filter_limit</name> <operator>*</operator> <literal type="number">0x02020202</literal></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
