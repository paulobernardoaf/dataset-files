<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mediacodec_wrapper.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ffjni.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mediacodec_wrapper.h"</cpp:file></cpp:include>

<struct>struct <name>JNIAMediaCodecListFields</name> <block>{

<decl_stmt><decl><type><name>jclass</name></type> <name>mediacodec_list_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>init_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>find_decoder_for_format_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>get_codec_count_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>get_codec_info_at_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jclass</name></type> <name>mediacodec_info_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>get_name_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>get_codec_capabilities_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>get_supported_types_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>is_encoder_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jclass</name></type> <name>codec_capabilities_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>color_formats_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>profile_levels_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jclass</name></type> <name>codec_profile_level_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>profile_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>level_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jfieldID</name></type> <name>avc_profile_baseline_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>avc_profile_main_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>avc_profile_extended_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>avc_profile_high_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>avc_profile_high10_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>avc_profile_high422_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>avc_profile_high444_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jfieldID</name></type> <name>hevc_profile_main_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>hevc_profile_main10_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>hevc_profile_main10_hdr10_id</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>FFJniField</name></name></type> <name><name>jni_amediacodeclist_mapping</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"android/media/MediaCodecList"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>FF_JNI_CLASS</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>mediacodec_list_class</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodecList"</literal></expr>, <expr><literal type="string">"&lt;init&gt;"</literal></expr>, <expr><literal type="string">"(I)V"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>init_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodecList"</literal></expr>, <expr><literal type="string">"findDecoderForFormat"</literal></expr>, <expr><literal type="string">"(Landroid/media/MediaFormat;)Ljava/lang/String;"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>find_decoder_for_format_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"android/media/MediaCodecList"</literal></expr>, <expr><literal type="string">"getCodecCount"</literal></expr>, <expr><literal type="string">"()I"</literal></expr>, <expr><name>FF_JNI_STATIC_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>get_codec_count_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodecList"</literal></expr>, <expr><literal type="string">"getCodecInfoAt"</literal></expr>, <expr><literal type="string">"(I)Landroid/media/MediaCodecInfo;"</literal></expr>, <expr><name>FF_JNI_STATIC_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>get_codec_info_at_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"android/media/MediaCodecInfo"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>FF_JNI_CLASS</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>mediacodec_info_class</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodecInfo"</literal></expr>, <expr><literal type="string">"getName"</literal></expr>, <expr><literal type="string">"()Ljava/lang/String;"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>get_name_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodecInfo"</literal></expr>, <expr><literal type="string">"getCapabilitiesForType"</literal></expr>, <expr><literal type="string">"(Ljava/lang/String;)Landroid/media/MediaCodecInfo$CodecCapabilities;"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>get_codec_capabilities_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodecInfo"</literal></expr>, <expr><literal type="string">"getSupportedTypes"</literal></expr>, <expr><literal type="string">"()[Ljava/lang/String;"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>get_supported_types_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodecInfo"</literal></expr>, <expr><literal type="string">"isEncoder"</literal></expr>, <expr><literal type="string">"()Z"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>is_encoder_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"android/media/MediaCodecInfo$CodecCapabilities"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>FF_JNI_CLASS</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>codec_capabilities_class</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodecInfo$CodecCapabilities"</literal></expr>, <expr><literal type="string">"colorFormats"</literal></expr>, <expr><literal type="string">"[I"</literal></expr>, <expr><name>FF_JNI_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>color_formats_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodecInfo$CodecCapabilities"</literal></expr>, <expr><literal type="string">"profileLevels"</literal></expr>, <expr><literal type="string">"[Landroid/media/MediaCodecInfo$CodecProfileLevel;"</literal></expr>, <expr><name>FF_JNI_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>profile_levels_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"android/media/MediaCodecInfo$CodecProfileLevel"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>FF_JNI_CLASS</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>codec_profile_level_class</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodecInfo$CodecProfileLevel"</literal></expr>, <expr><literal type="string">"profile"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><name>FF_JNI_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>profile_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodecInfo$CodecProfileLevel"</literal></expr>, <expr><literal type="string">"level"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><name>FF_JNI_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>level_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"android/media/MediaCodecInfo$CodecProfileLevel"</literal></expr>, <expr><literal type="string">"AVCProfileBaseline"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><name>FF_JNI_STATIC_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>avc_profile_baseline_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodecInfo$CodecProfileLevel"</literal></expr>, <expr><literal type="string">"AVCProfileMain"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><name>FF_JNI_STATIC_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>avc_profile_main_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodecInfo$CodecProfileLevel"</literal></expr>, <expr><literal type="string">"AVCProfileExtended"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><name>FF_JNI_STATIC_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>avc_profile_extended_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodecInfo$CodecProfileLevel"</literal></expr>, <expr><literal type="string">"AVCProfileHigh"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><name>FF_JNI_STATIC_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>avc_profile_high_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodecInfo$CodecProfileLevel"</literal></expr>, <expr><literal type="string">"AVCProfileHigh10"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><name>FF_JNI_STATIC_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>avc_profile_high10_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodecInfo$CodecProfileLevel"</literal></expr>, <expr><literal type="string">"AVCProfileHigh422"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><name>FF_JNI_STATIC_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>avc_profile_high422_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodecInfo$CodecProfileLevel"</literal></expr>, <expr><literal type="string">"AVCProfileHigh444"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><name>FF_JNI_STATIC_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>avc_profile_high444_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"android/media/MediaCodecInfo$CodecProfileLevel"</literal></expr>, <expr><literal type="string">"HEVCProfileMain"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><name>FF_JNI_STATIC_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>hevc_profile_main_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodecInfo$CodecProfileLevel"</literal></expr>, <expr><literal type="string">"HEVCProfileMain10"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><name>FF_JNI_STATIC_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>hevc_profile_main10_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodecInfo$CodecProfileLevel"</literal></expr>, <expr><literal type="string">"HEVCProfileMain10HDR10"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><name>FF_JNI_STATIC_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecListFields</name></expr></argument>, <argument><expr><name>hevc_profile_main10_hdr10_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>JNIAMediaFormatFields</name> <block>{

<decl_stmt><decl><type><name>jclass</name></type> <name>mediaformat_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>init_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>contains_key_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>get_integer_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>get_long_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>get_float_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>get_bytebuffer_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>get_string_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>set_integer_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>set_long_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>set_float_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>set_bytebuffer_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>set_string_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>to_string_id</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>FFJniField</name></name></type> <name><name>jni_amediaformat_mapping</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"android/media/MediaFormat"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>FF_JNI_CLASS</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaFormatFields</name></expr></argument>, <argument><expr><name>mediaformat_class</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"android/media/MediaFormat"</literal></expr>, <expr><literal type="string">"&lt;init&gt;"</literal></expr>, <expr><literal type="string">"()V"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaFormatFields</name></expr></argument>, <argument><expr><name>init_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"android/media/MediaFormat"</literal></expr>, <expr><literal type="string">"containsKey"</literal></expr>, <expr><literal type="string">"(Ljava/lang/String;)Z"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>,<expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaFormatFields</name></expr></argument>, <argument><expr><name>contains_key_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"android/media/MediaFormat"</literal></expr>, <expr><literal type="string">"getInteger"</literal></expr>, <expr><literal type="string">"(Ljava/lang/String;)I"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaFormatFields</name></expr></argument>, <argument><expr><name>get_integer_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaFormat"</literal></expr>, <expr><literal type="string">"getLong"</literal></expr>, <expr><literal type="string">"(Ljava/lang/String;)J"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaFormatFields</name></expr></argument>, <argument><expr><name>get_long_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaFormat"</literal></expr>, <expr><literal type="string">"getFloat"</literal></expr>, <expr><literal type="string">"(Ljava/lang/String;)F"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaFormatFields</name></expr></argument>, <argument><expr><name>get_float_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaFormat"</literal></expr>, <expr><literal type="string">"getByteBuffer"</literal></expr>, <expr><literal type="string">"(Ljava/lang/String;)Ljava/nio/ByteBuffer;"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaFormatFields</name></expr></argument>, <argument><expr><name>get_bytebuffer_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaFormat"</literal></expr>, <expr><literal type="string">"getString"</literal></expr>, <expr><literal type="string">"(Ljava/lang/String;)Ljava/lang/String;"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaFormatFields</name></expr></argument>, <argument><expr><name>get_string_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"android/media/MediaFormat"</literal></expr>, <expr><literal type="string">"setInteger"</literal></expr>, <expr><literal type="string">"(Ljava/lang/String;I)V"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaFormatFields</name></expr></argument>, <argument><expr><name>set_integer_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaFormat"</literal></expr>, <expr><literal type="string">"setLong"</literal></expr>, <expr><literal type="string">"(Ljava/lang/String;J)V"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaFormatFields</name></expr></argument>, <argument><expr><name>set_long_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaFormat"</literal></expr>, <expr><literal type="string">"setFloat"</literal></expr>, <expr><literal type="string">"(Ljava/lang/String;F)V"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaFormatFields</name></expr></argument>, <argument><expr><name>set_float_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaFormat"</literal></expr>, <expr><literal type="string">"setByteBuffer"</literal></expr>, <expr><literal type="string">"(Ljava/lang/String;Ljava/nio/ByteBuffer;)V"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaFormatFields</name></expr></argument>, <argument><expr><name>set_bytebuffer_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaFormat"</literal></expr>, <expr><literal type="string">"setString"</literal></expr>, <expr><literal type="string">"(Ljava/lang/String;Ljava/lang/String;)V"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaFormatFields</name></expr></argument>, <argument><expr><name>set_string_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"android/media/MediaFormat"</literal></expr>, <expr><literal type="string">"toString"</literal></expr>, <expr><literal type="string">"()Ljava/lang/String;"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaFormatFields</name></expr></argument>, <argument><expr><name>to_string_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>amediaformat_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"amediaformat"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>FFAMediaFormat</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>JNIAMediaFormatFields</name></name></type> <name>jfields</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>object</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>JNIAMediaCodecFields</name> <block>{

<decl_stmt><decl><type><name>jclass</name></type> <name>mediacodec_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jfieldID</name></type> <name>info_try_again_later_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>info_output_buffers_changed_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>info_output_format_changed_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jfieldID</name></type> <name>buffer_flag_codec_config_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>buffer_flag_end_of_stream_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>buffer_flag_key_frame_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jfieldID</name></type> <name>configure_flag_encode_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>create_by_codec_name_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>create_decoder_by_type_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>create_encoder_by_type_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>get_name_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>configure_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>start_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>flush_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>stop_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>release_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>get_output_format_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>dequeue_input_buffer_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>queue_input_buffer_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>get_input_buffer_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>get_input_buffers_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>dequeue_output_buffer_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>get_output_buffer_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>get_output_buffers_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>release_output_buffer_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>release_output_buffer_at_time_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jclass</name></type> <name>mediainfo_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>init_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jfieldID</name></type> <name>flags_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>offset_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>presentation_time_us_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>size_id</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>FFJniField</name></name></type> <name><name>jni_amediacodec_mapping</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>FF_JNI_CLASS</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>mediacodec_class</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"INFO_TRY_AGAIN_LATER"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><name>FF_JNI_STATIC_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>info_try_again_later_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"INFO_OUTPUT_BUFFERS_CHANGED"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><name>FF_JNI_STATIC_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>info_output_buffers_changed_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"INFO_OUTPUT_FORMAT_CHANGED"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><name>FF_JNI_STATIC_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>info_output_format_changed_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"BUFFER_FLAG_CODEC_CONFIG"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><name>FF_JNI_STATIC_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>buffer_flag_codec_config_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"BUFFER_FLAG_END_OF_STREAM"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><name>FF_JNI_STATIC_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>buffer_flag_end_of_stream_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"BUFFER_FLAG_KEY_FRAME"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><name>FF_JNI_STATIC_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>buffer_flag_key_frame_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"CONFIGURE_FLAG_ENCODE"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><name>FF_JNI_STATIC_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>configure_flag_encode_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"createByCodecName"</literal></expr>, <expr><literal type="string">"(Ljava/lang/String;)Landroid/media/MediaCodec;"</literal></expr>, <expr><name>FF_JNI_STATIC_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>create_by_codec_name_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"createDecoderByType"</literal></expr>, <expr><literal type="string">"(Ljava/lang/String;)Landroid/media/MediaCodec;"</literal></expr>, <expr><name>FF_JNI_STATIC_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>create_decoder_by_type_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"createEncoderByType"</literal></expr>, <expr><literal type="string">"(Ljava/lang/String;)Landroid/media/MediaCodec;"</literal></expr>, <expr><name>FF_JNI_STATIC_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>create_encoder_by_type_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"getName"</literal></expr>, <expr><literal type="string">"()Ljava/lang/String;"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>get_name_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"configure"</literal></expr>, <expr><literal type="string">"(Landroid/media/MediaFormat;Landroid/view/Surface;Landroid/media/MediaCrypto;I)V"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>configure_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"start"</literal></expr>, <expr><literal type="string">"()V"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>start_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"flush"</literal></expr>, <expr><literal type="string">"()V"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>flush_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"stop"</literal></expr>, <expr><literal type="string">"()V"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>stop_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"release"</literal></expr>, <expr><literal type="string">"()V"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>release_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"getOutputFormat"</literal></expr>, <expr><literal type="string">"()Landroid/media/MediaFormat;"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>get_output_format_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"dequeueInputBuffer"</literal></expr>, <expr><literal type="string">"(J)I"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>dequeue_input_buffer_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"queueInputBuffer"</literal></expr>, <expr><literal type="string">"(IIIJI)V"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>queue_input_buffer_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"getInputBuffer"</literal></expr>, <expr><literal type="string">"(I)Ljava/nio/ByteBuffer;"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>get_input_buffer_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"getInputBuffers"</literal></expr>, <expr><literal type="string">"()[Ljava/nio/ByteBuffer;"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>get_input_buffers_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"dequeueOutputBuffer"</literal></expr>, <expr><literal type="string">"(Landroid/media/MediaCodec$BufferInfo;J)I"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>dequeue_output_buffer_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"getOutputBuffer"</literal></expr>, <expr><literal type="string">"(I)Ljava/nio/ByteBuffer;"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>get_output_buffer_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"getOutputBuffers"</literal></expr>, <expr><literal type="string">"()[Ljava/nio/ByteBuffer;"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>get_output_buffers_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"releaseOutputBuffer"</literal></expr>, <expr><literal type="string">"(IZ)V"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>release_output_buffer_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec"</literal></expr>, <expr><literal type="string">"releaseOutputBuffer"</literal></expr>, <expr><literal type="string">"(IJ)V"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>release_output_buffer_at_time_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"android/media/MediaCodec$BufferInfo"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>FF_JNI_CLASS</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>mediainfo_class</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"android/media/MediaCodec.BufferInfo"</literal></expr>, <expr><literal type="string">"&lt;init&gt;"</literal></expr>, <expr><literal type="string">"()V"</literal></expr>, <expr><name>FF_JNI_METHOD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>init_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec.BufferInfo"</literal></expr>, <expr><literal type="string">"flags"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><name>FF_JNI_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>flags_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec.BufferInfo"</literal></expr>, <expr><literal type="string">"offset"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><name>FF_JNI_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>offset_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec.BufferInfo"</literal></expr>, <expr><literal type="string">"presentationTimeUs"</literal></expr>, <expr><literal type="string">"J"</literal></expr>, <expr><name>FF_JNI_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>presentation_time_us_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"android/media/MediaCodec.BufferInfo"</literal></expr>, <expr><literal type="string">"size"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><name>FF_JNI_FIELD</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>JNIAMediaCodecFields</name></expr></argument>, <argument><expr><name>size_id</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>amediacodec_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"amediacodec"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>FFAMediaCodec</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>JNIAMediaCodecFields</name></name></type> <name>jfields</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>buffer_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>input_buffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>output_buffers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>INFO_TRY_AGAIN_LATER</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>INFO_OUTPUT_BUFFERS_CHANGED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>INFO_OUTPUT_FORMAT_CHANGED</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>BUFFER_FLAG_CODEC_CONFIG</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>BUFFER_FLAG_END_OF_STREAM</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>BUFFER_FLAG_KEY_FRAME</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>CONFIGURE_FLAG_ENCODE</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_get_i_o_buffer</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_GET_ENV_OR_RETURN</name><parameter_list>(<parameter><type><name>env</name></type></parameter>, <parameter><type><name>log_ctx</name></type></parameter>, <parameter><type><name>ret</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (env) = ff_jni_get_env(log_ctx); if (!(env)) { return ret; } } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNI_GET_ENV_OR_RETURN_VOID</name><parameter_list>(<parameter><type><name>env</name></type></parameter>, <parameter><type><name>log_ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (env) = ff_jni_get_env(log_ctx); if (!(env)) { return; } } while (0)</cpp:value></cpp:define>






<function><type><name>int</name></type> <name>ff_AMediaCodecProfile_getProfileFromAVCodecContext</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>JNIAMediaCodecListFields</name></name></type> <name>jfields</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>field_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_jni_init_jfields</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jfields</name></expr></argument>, <argument><expr><name>jni_amediacodeclist_mapping</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FF_PROFILE_H264_BASELINE</name></expr>:</case>
<case>case <expr><name>FF_PROFILE_H264_CONSTRAINED_BASELINE</name></expr>:</case>
<expr_stmt><expr><name>field_id</name> <operator>=</operator> <name><name>jfields</name><operator>.</operator><name>avc_profile_baseline_id</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_PROFILE_H264_MAIN</name></expr>:</case>
<expr_stmt><expr><name>field_id</name> <operator>=</operator> <name><name>jfields</name><operator>.</operator><name>avc_profile_main_id</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_PROFILE_H264_EXTENDED</name></expr>:</case>
<expr_stmt><expr><name>field_id</name> <operator>=</operator> <name><name>jfields</name><operator>.</operator><name>avc_profile_extended_id</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_PROFILE_H264_HIGH</name></expr>:</case>
<expr_stmt><expr><name>field_id</name> <operator>=</operator> <name><name>jfields</name><operator>.</operator><name>avc_profile_high_id</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_PROFILE_H264_HIGH_10</name></expr>:</case>
<case>case <expr><name>FF_PROFILE_H264_HIGH_10_INTRA</name></expr>:</case>
<expr_stmt><expr><name>field_id</name> <operator>=</operator> <name><name>jfields</name><operator>.</operator><name>avc_profile_high10_id</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_PROFILE_H264_HIGH_422</name></expr>:</case>
<case>case <expr><name>FF_PROFILE_H264_HIGH_422_INTRA</name></expr>:</case>
<expr_stmt><expr><name>field_id</name> <operator>=</operator> <name><name>jfields</name><operator>.</operator><name>avc_profile_high422_id</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_PROFILE_H264_HIGH_444</name></expr>:</case>
<case>case <expr><name>FF_PROFILE_H264_HIGH_444_INTRA</name></expr>:</case>
<case>case <expr><name>FF_PROFILE_H264_HIGH_444_PREDICTIVE</name></expr>:</case>
<expr_stmt><expr><name>field_id</name> <operator>=</operator> <name><name>jfields</name><operator>.</operator><name>avc_profile_high444_id</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_HEVC</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FF_PROFILE_HEVC_MAIN</name></expr>:</case>
<case>case <expr><name>FF_PROFILE_HEVC_MAIN_STILL_PICTURE</name></expr>:</case>
<expr_stmt><expr><name>field_id</name> <operator>=</operator> <name><name>jfields</name><operator>.</operator><name>hevc_profile_main_id</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FF_PROFILE_HEVC_MAIN_10</name></expr>:</case>
<expr_stmt><expr><name>field_id</name> <operator>=</operator> <name><name>jfields</name><operator>.</operator><name>hevc_profile_main10_id</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>field_id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStaticIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>codec_profile_level_class</name></name></expr></argument>, <argument><expr><name>field_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>ff_jni_reset_jfields</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jfields</name></expr></argument>, <argument><expr><name>jni_amediacodeclist_mapping</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>ff_AMediaCodecList_getCodecNameByType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mime</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>profile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encoder</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>codec_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found_codec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>supported_type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>JNIAMediaCodecListFields</name></name></type> <name>jfields</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>JNIAMediaFormatFields</name></name></type> <name>mediaformat_jfields</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>codec_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobjectArray</name></type> <name>types</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>capabilities</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>profile_level</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobjectArray</name></type> <name>profile_levels</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_init_jfields</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jfields</name></expr></argument>, <argument><expr><name>jni_amediacodeclist_mapping</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_init_jfields</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mediaformat_jfields</name></expr></argument>, <argument><expr><name>jni_amediaformat_mapping</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>codec_count</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallStaticIntMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>mediacodec_list_class</name></name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>get_codec_count_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>codec_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_encoder</name></decl>;</decl_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallStaticObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>mediacodec_list_class</name></name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>get_codec_info_at_id</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>types</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>get_supported_types_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>is_encoder</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallBooleanMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>is_encoder_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_encoder</name> <operator>!=</operator> <name>encoder</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>done_with_info</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>type_count</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetArrayLength</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>type_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>profile_count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetObjectArrayElement</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>supported_type</name> <operator>=</operator> <call><name>ff_jni_jstring_to_utf_chars</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>supported_type</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>supported_type</name></expr></argument>, <argument><expr><name>mime</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>codec_name</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>get_name_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>ff_jni_jstring_to_utf_chars</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>codec_name</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>codec_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>codec_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>codec_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(
<expr><call><name>strstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"OMX.google"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>strstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"OMX.ffmpeg"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><call><name>strstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"OMX.SEC"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">".sw."</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"OMX.qcom.video.decoder.hevcswvdec"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done_with_type</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>capabilities</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>get_codec_capabilities_id</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>profile_levels</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetObjectField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>capabilities</name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>profile_levels_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>profile_count</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetArrayLength</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>profile_levels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>profile_count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found_codec</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>profile_count</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>supported_profile</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>profile</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found_codec</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>profile_level</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetObjectArrayElement</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>profile_levels</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>supported_profile</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>profile_level</name></expr></argument>, <argument><expr><name><name>jfields</name><operator>.</operator><name>profile_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>found_codec</name> <operator>=</operator> <name>profile</name> <operator>==</operator> <name>supported_profile</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>profile_level</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>profile_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>profile_level</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>found_codec</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<label><name>done_with_type</name>:</label>
<if_stmt><if>if <condition>(<expr><name>profile_levels</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>profile_levels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>profile_levels</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>capabilities</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>capabilities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>capabilities</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>supported_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>found_codec</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<label><name>done_with_info</name>:</label>
<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>types</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>types</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>found_codec</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<label><name>done</name>:</label>
<if_stmt><if>if <condition>(<expr><name>codec_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>codec_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>types</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>capabilities</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>capabilities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>profile_level</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>profile_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>profile_levels</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>profile_levels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>supported_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_jni_reset_jfields</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jfields</name></expr></argument>, <argument><expr><name>jni_amediacodeclist_mapping</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_jni_reset_jfields</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mediaformat_jfields</name></expr></argument>, <argument><expr><name>jni_amediaformat_mapping</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found_codec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>FFAMediaFormat</name> <modifier>*</modifier></type><name>ff_AMediaFormat_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFAMediaFormat</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>object</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>format</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FFAMediaFormat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>format</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>format</name><operator>-&gt;</operator><name>class</name></name> <operator>=</operator> <operator>&amp;</operator><name>amediaformat_class</name></expr>;</expr_stmt>

<expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>ff_jni_get_env</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>env</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_jni_init_jfields</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>format</name><operator>-&gt;</operator><name>jfields</name></name></expr></argument>, <argument><expr><name>jni_amediaformat_mapping</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewObject</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>mediaformat_class</name></name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>init_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>format</name><operator>-&gt;</operator><name>object</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>format</name><operator>-&gt;</operator><name>object</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>object</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>format</name><operator>-&gt;</operator><name>object</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_jni_reset_jfields</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>format</name><operator>-&gt;</operator><name>jfields</name></name></expr></argument>, <argument><expr><name>jni_amediaformat_mapping</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>format</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FFAMediaFormat</name> <modifier>*</modifier></type><name>ff_AMediaFormat_newFromObject</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFAMediaFormat</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>format</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FFAMediaFormat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>format</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>format</name><operator>-&gt;</operator><name>class</name></name> <operator>=</operator> <operator>&amp;</operator><name>amediaformat_class</name></expr>;</expr_stmt>

<expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>ff_jni_get_env</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>env</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_jni_init_jfields</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>format</name><operator>-&gt;</operator><name>jfields</name></name></expr></argument>, <argument><expr><name>jni_amediaformat_mapping</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>format</name><operator>-&gt;</operator><name>object</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>format</name><operator>-&gt;</operator><name>object</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>format</name></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>ff_jni_reset_jfields</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>format</name><operator>-&gt;</operator><name>jfields</name></name></expr></argument>, <argument><expr><name>jni_amediaformat_mapping</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_AMediaFormat_delete</name><parameter_list>(<parameter><decl><type><name>FFAMediaFormat</name><modifier>*</modifier></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>format</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>AVERROR_EXTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>format</name><operator>-&gt;</operator><name>object</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_jni_reset_jfields</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>format</name><operator>-&gt;</operator><name>jfields</name></name></expr></argument>, <argument><expr><name>jni_amediaformat_mapping</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>ff_AMediaFormat_toString</name><parameter_list>(<parameter><decl><type><name>FFAMediaFormat</name><modifier>*</modifier></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jstring</name></type> <name>description</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>format</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>description</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>to_string_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_jni_jstring_to_utf_chars</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>description</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_AMediaFormat_getInt32</name><parameter_list>(<parameter><decl><type><name>FFAMediaFormat</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jstring</name></type> <name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jboolean</name></type> <name>contains_key</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>format</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>ff_jni_utf_chars_to_jstring</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>contains_key</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallBooleanMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>contains_key_id</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>contains_key</name> <operator>||</operator> <operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallIntMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>get_integer_id</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_AMediaFormat_getInt64</name><parameter_list>(<parameter><decl><type><name>FFAMediaFormat</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jstring</name></type> <name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jboolean</name></type> <name>contains_key</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>format</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>ff_jni_utf_chars_to_jstring</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>contains_key</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallBooleanMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>contains_key_id</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>contains_key</name> <operator>||</operator> <operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallLongMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>get_long_id</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_AMediaFormat_getFloat</name><parameter_list>(<parameter><decl><type><name>FFAMediaFormat</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jstring</name></type> <name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jboolean</name></type> <name>contains_key</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>format</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>ff_jni_utf_chars_to_jstring</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>contains_key</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallBooleanMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>contains_key_id</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>contains_key</name> <operator>||</operator> <operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallFloatMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>get_float_id</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_AMediaFormat_getBuffer</name><parameter_list>(<parameter><decl><type><name>FFAMediaFormat</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jstring</name></type> <name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jboolean</name></type> <name>contains_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>format</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>ff_jni_utf_chars_to_jstring</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>contains_key</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallBooleanMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>contains_key_id</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>contains_key</name> <operator>||</operator> <operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>get_bytebuffer_id</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetDirectBufferAddress</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetDirectBufferCapacity</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>*</operator><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_AMediaFormat_getString</name><parameter_list>(<parameter><decl><type><name>FFAMediaFormat</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jstring</name></type> <name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jboolean</name></type> <name>contains_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jstring</name></type> <name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>format</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>ff_jni_utf_chars_to_jstring</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>contains_key</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallBooleanMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>contains_key_id</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>contains_key</name> <operator>||</operator> <operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>get_string_id</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <call><name>ff_jni_jstring_to_utf_chars</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>out</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_AMediaFormat_setInt32</name><parameter_list>(<parameter><decl><type><name>FFAMediaFormat</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jstring</name></type> <name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>format</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN_VOID</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>ff_jni_utf_chars_to_jstring</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>set_integer_id</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_AMediaFormat_setInt64</name><parameter_list>(<parameter><decl><type><name>FFAMediaFormat</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jstring</name></type> <name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>format</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN_VOID</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>ff_jni_utf_chars_to_jstring</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>set_long_id</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_AMediaFormat_setFloat</name><parameter_list>(<parameter><decl><type><name>FFAMediaFormat</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jstring</name></type> <name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>format</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN_VOID</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>ff_jni_utf_chars_to_jstring</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>set_float_id</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_AMediaFormat_setString</name><parameter_list>(<parameter><decl><type><name>FFAMediaFormat</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jstring</name></type> <name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jstring</name></type> <name>string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>format</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN_VOID</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>ff_jni_utf_chars_to_jstring</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>ff_jni_utf_chars_to_jstring</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>string</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>set_string_id</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>string</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_AMediaFormat_setBuffer</name><parameter_list>(<parameter><decl><type><name>FFAMediaFormat</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jstring</name></type> <name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>format</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN_VOID</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>ff_jni_utf_chars_to_jstring</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name> <operator>||</operator> <operator>!</operator><name>size</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buffer_data</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer_data</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer_data</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewDirectByteBuffer</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>buffer_data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>set_bytebuffer_id</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>codec_init_static_fields</name><parameter_list>(<parameter><decl><type><name>FFAMediaCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>AVERROR_EXTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>INFO_TRY_AGAIN_LATER</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStaticIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>mediacodec_class</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>info_try_again_later_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>BUFFER_FLAG_CODEC_CONFIG</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStaticIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>mediacodec_class</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>buffer_flag_codec_config_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>BUFFER_FLAG_END_OF_STREAM</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStaticIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>mediacodec_class</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>buffer_flag_end_of_stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>buffer_flag_key_frame_id</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>BUFFER_FLAG_KEY_FRAME</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStaticIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>mediacodec_class</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>buffer_flag_key_frame_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>CONFIGURE_FLAG_ENCODE</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStaticIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>mediacodec_class</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>configure_flag_encode_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>INFO_TRY_AGAIN_LATER</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStaticIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>mediacodec_class</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>info_try_again_later_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>INFO_OUTPUT_BUFFERS_CHANGED</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStaticIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>mediacodec_class</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>info_output_buffers_changed_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>INFO_OUTPUT_FORMAT_CHANGED</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStaticIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>mediacodec_class</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>info_output_format_changed_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CREATE_CODEC_BY_NAME</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CREATE_DECODER_BY_TYPE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CREATE_ENCODER_BY_TYPE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>FFAMediaCodec</name> <modifier>*</modifier></type><name>codec_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>method</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFAMediaCodec</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jstring</name></type> <name>jarg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>object</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>buffer_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>create_id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>codec</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FFAMediaCodec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codec</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>class</name></name> <operator>=</operator> <operator>&amp;</operator><name>amediacodec_class</name></expr>;</expr_stmt>

<expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>ff_jni_get_env</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>env</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_jni_init_jfields</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>codec</name><operator>-&gt;</operator><name>jfields</name></name></expr></argument>, <argument><expr><name>jni_amediacodec_mapping</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>jarg</name> <operator>=</operator> <call><name>ff_jni_utf_chars_to_jstring</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>jarg</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>method</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CREATE_CODEC_BY_NAME</name></expr>:</case> <expr_stmt><expr><name>create_id</name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>create_by_codec_name_id</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>CREATE_DECODER_BY_TYPE</name></expr>:</case> <expr_stmt><expr><name>create_id</name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>create_decoder_by_type_id</name></name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>CREATE_ENCODER_BY_TYPE</name></expr>:</case> <expr_stmt><expr><name>create_id</name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>create_encoder_by_type_id</name></name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallStaticObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>,
<argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>mediacodec_class</name></name></expr></argument>,
<argument><expr><name>create_id</name></expr></argument>,
<argument><expr><name>jarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>object</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>codec</name><operator>-&gt;</operator><name>object</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>codec_init_static_fields</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>get_input_buffer_id</name></name> <operator>&amp;&amp;</operator> <name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>get_output_buffer_id</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>has_get_i_o_buffer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buffer_info</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewObject</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>mediainfo_class</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>init_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>buffer_info</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>buffer_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>codec</name><operator>-&gt;</operator><name>buffer_info</name></name></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>jarg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>object</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buffer_info</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>buffer_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>codec</name><operator>-&gt;</operator><name>object</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>codec</name><operator>-&gt;</operator><name>buffer_info</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>buffer_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_jni_reset_jfields</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>codec</name><operator>-&gt;</operator><name>jfields</name></name></expr></argument>, <argument><expr><name>jni_amediacodec_mapping</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>codec</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_FF_AMEDIACODEC_CREATE_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>method</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FFAMediaCodec *ff_AMediaCodec_##name(const char *arg) { return codec_create(method, arg); }</cpp:value></cpp:define> 





<macro><name>DECLARE_FF_AMEDIACODEC_CREATE_FUNC</name><argument_list>(<argument>createCodecByName</argument>, <argument>CREATE_CODEC_BY_NAME</argument>)</argument_list></macro>
<macro><name>DECLARE_FF_AMEDIACODEC_CREATE_FUNC</name><argument_list>(<argument>createDecoderByType</argument>, <argument>CREATE_DECODER_BY_TYPE</argument>)</argument_list></macro>
<macro><name>DECLARE_FF_AMEDIACODEC_CREATE_FUNC</name><argument_list>(<argument>createEncoderByType</argument>, <argument>CREATE_ENCODER_BY_TYPE</argument>)</argument_list></macro>

<function><type><name>int</name></type> <name>ff_AMediaCodec_delete</name><parameter_list>(<parameter><decl><type><name>FFAMediaCodec</name><modifier>*</modifier></type> <name>codec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codec</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>AVERROR_EXTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>release_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>object</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>buffer_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>buffer_info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_jni_reset_jfields</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>codec</name><operator>-&gt;</operator><name>jfields</name></name></expr></argument>, <argument><expr><name>jni_amediacodec_mapping</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>ff_AMediaCodec_getName</name><parameter_list>(<parameter><decl><type><name>FFAMediaCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>get_name_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_jni_jstring_to_utf_chars</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_AMediaCodec_configure</name><parameter_list>(<parameter><decl><type><name>FFAMediaCodec</name><modifier>*</modifier></type> <name>codec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFAMediaFormat</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>crypto</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>AVERROR_EXTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>configure_id</name></name></expr></argument>, <argument><expr><name><name>format</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name>surface</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_AMediaCodec_start</name><parameter_list>(<parameter><decl><type><name>FFAMediaCodec</name><modifier>*</modifier></type> <name>codec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>AVERROR_EXTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>start_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_AMediaCodec_stop</name><parameter_list>(<parameter><decl><type><name>FFAMediaCodec</name><modifier>*</modifier></type> <name>codec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>AVERROR_EXTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>stop_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_AMediaCodec_flush</name><parameter_list>(<parameter><decl><type><name>FFAMediaCodec</name><modifier>*</modifier></type> <name>codec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>AVERROR_EXTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>flush_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_AMediaCodec_releaseOutputBuffer</name><parameter_list>(<parameter><decl><type><name>FFAMediaCodec</name><modifier>*</modifier></type> <name>codec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>render</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>AVERROR_EXTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>release_output_buffer_id</name></name></expr></argument>, <argument><expr><operator>(</operator><name>jint</name><operator>)</operator><name>idx</name></expr></argument>, <argument><expr><operator>(</operator><name>jboolean</name><operator>)</operator><name>render</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_AMediaCodec_releaseOutputBufferAtTime</name><parameter_list>(<parameter><decl><type><name>FFAMediaCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timestampNs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>AVERROR_EXTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>release_output_buffer_at_time_id</name></name></expr></argument>, <argument><expr><operator>(</operator><name>jint</name><operator>)</operator><name>idx</name></expr></argument>, <argument><expr><operator>(</operator><name>jlong</name><operator>)</operator><name>timestampNs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>ff_AMediaCodec_dequeueInputBuffer</name><parameter_list>(<parameter><decl><type><name>FFAMediaCodec</name><modifier>*</modifier></type> <name>codec</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timeoutUs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>AVERROR_EXTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallIntMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>dequeue_input_buffer_id</name></name></expr></argument>, <argument><expr><name>timeoutUs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_AMediaCodec_queueInputBuffer</name><parameter_list>(<parameter><decl><type><name>FFAMediaCodec</name><modifier>*</modifier></type> <name>codec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>AVERROR_EXTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>queue_input_buffer_id</name></name></expr></argument>, <argument><expr><operator>(</operator><name>jint</name><operator>)</operator><name>idx</name></expr></argument>, <argument><expr><operator>(</operator><name>jint</name><operator>)</operator><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>jint</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>ff_AMediaCodec_dequeueOutputBuffer</name><parameter_list>(<parameter><decl><type><name>FFAMediaCodec</name><modifier>*</modifier></type> <name>codec</name></decl></parameter>, <parameter><decl><type><name>FFAMediaCodecBufferInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timeoutUs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>AVERROR_EXTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallIntMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>dequeue_output_buffer_id</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>buffer_info</name></name></expr></argument>, <argument><expr><name>timeoutUs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>buffer_info</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>flags_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>buffer_info</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>offset_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>presentationTimeUs</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetLongField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>buffer_info</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>presentation_time_us_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>buffer_info</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>size_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name><modifier>*</modifier></type> <name>ff_AMediaCodec_getInputBuffer</name><parameter_list>(<parameter><decl><type><name>FFAMediaCodec</name><modifier>*</modifier></type> <name>codec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>input_buffers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>codec</name><operator>-&gt;</operator><name>has_get_i_o_buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>get_input_buffer_id</name></name></expr></argument>, <argument><expr><operator>(</operator><name>jint</name><operator>)</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>codec</name><operator>-&gt;</operator><name>input_buffers</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>input_buffers</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>get_input_buffers_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>input_buffers</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>input_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetObjectArrayElement</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>input_buffers</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetDirectBufferAddress</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_size</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetDirectBufferCapacity</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>buffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>input_buffers</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>input_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name><modifier>*</modifier></type> <name>ff_AMediaCodec_getOutputBuffer</name><parameter_list>(<parameter><decl><type><name>FFAMediaCodec</name><modifier>*</modifier></type> <name>codec</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jobject</name></type> <name>output_buffers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>codec</name><operator>-&gt;</operator><name>has_get_i_o_buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>get_output_buffer_id</name></name></expr></argument>, <argument><expr><operator>(</operator><name>jint</name><operator>)</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>codec</name><operator>-&gt;</operator><name>output_buffers</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>output_buffers</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>get_output_buffers_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>output_buffers</name></name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>output_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetObjectArrayElement</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>output_buffers</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetDirectBufferAddress</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out_size</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetDirectBufferCapacity</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>buffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output_buffers</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>output_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>FFAMediaFormat</name><modifier>*</modifier></type> <name>ff_AMediaCodec_getOutputFormat</name><parameter_list>(<parameter><decl><type><name>FFAMediaCodec</name><modifier>*</modifier></type> <name>codec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFAMediaFormat</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jobject</name></type> <name>mediaformat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mediaformat</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>jfields</name><operator>.</operator><name>get_output_format_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_AMediaFormat_newFromObject</name><argument_list>(<argument><expr><name>mediaformat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail</name>:</label>
<if_stmt><if>if <condition>(<expr><name>mediaformat</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>mediaformat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_AMediaCodec_infoTryAgainLater</name><parameter_list>(<parameter><decl><type><name>FFAMediaCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>idx</name> <operator>==</operator> <name><name>codec</name><operator>-&gt;</operator><name>INFO_TRY_AGAIN_LATER</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_AMediaCodec_infoOutputBuffersChanged</name><parameter_list>(<parameter><decl><type><name>FFAMediaCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>idx</name> <operator>==</operator> <name><name>codec</name><operator>-&gt;</operator><name>INFO_OUTPUT_BUFFERS_CHANGED</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_AMediaCodec_infoOutputFormatChanged</name><parameter_list>(<parameter><decl><type><name>FFAMediaCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>idx</name> <operator>==</operator> <name><name>codec</name><operator>-&gt;</operator><name>INFO_OUTPUT_FORMAT_CHANGED</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_AMediaCodec_getBufferFlagCodecConfig</name><parameter_list>(<parameter><decl><type><name>FFAMediaCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>codec</name><operator>-&gt;</operator><name>BUFFER_FLAG_CODEC_CONFIG</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_AMediaCodec_getBufferFlagEndOfStream</name><parameter_list>(<parameter><decl><type><name>FFAMediaCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>codec</name><operator>-&gt;</operator><name>BUFFER_FLAG_END_OF_STREAM</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_AMediaCodec_getBufferFlagKeyFrame</name><parameter_list>(<parameter><decl><type><name>FFAMediaCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>codec</name><operator>-&gt;</operator><name>BUFFER_FLAG_KEY_FRAME</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_AMediaCodec_getConfigureFlagEncode</name><parameter_list>(<parameter><decl><type><name>FFAMediaCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>codec</name><operator>-&gt;</operator><name>CONFIGURE_FLAG_ENCODE</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_AMediaCodec_cleanOutputBuffers</name><parameter_list>(<parameter><decl><type><name>FFAMediaCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>codec</name><operator>-&gt;</operator><name>has_get_i_o_buffer</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>codec</name><operator>-&gt;</operator><name>output_buffers</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>ff_jni_get_env</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>env</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>output_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>output_buffers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_Build_SDK_INT</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jclass</name></type> <name>versionClass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type> <name>sdkIntFieldID</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>JNI_GET_ENV_OR_RETURN</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>versionClass</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"android/os/Build$VERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sdkIntFieldID</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStaticFieldID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>versionClass</name></expr></argument>, <argument><expr><literal type="string">"SDK_INT"</literal></expr></argument>, <argument><expr><literal type="string">"I"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStaticIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>versionClass</name></expr></argument>, <argument><expr><name>sdkIntFieldID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>versionClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
