<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\dvenc.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dv_profile_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dv_tablegen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fdctdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"me_cmp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pixblockdsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>dvvideo_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVVideoContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FDCTDSPContext</name></type> <name>fdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MECmpContext</name></type> <name>mecc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PixblockDSPContext</name></type> <name>pdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <call><name>av_dv_codec_profile2</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>sys</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Found no DV profile for %ix%i %s video. "</literal>
<literal type="string">"Valid DV profiles are:\n"</literal></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dv_print_profiles</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_dv_init_dynamic_tables</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error initializing work tables.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dv_vlc_map_tableinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdsp</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fdsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mecc</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mecc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pdsp</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pdsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_fdctdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdsp</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_me_cmp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mecc</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_pixblockdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pdsp</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_set_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mecc</name></expr></argument>, <argument><expr><name><name>mecc</name><operator>.</operator><name>ildct_cmp</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>ildct_cmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>get_pixels</name></name> <operator>=</operator> <name><name>pdsp</name><operator>.</operator><name>get_pixels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ildct_cmp</name></name> <operator>=</operator> <name><name>mecc</name><operator>.</operator><name>ildct_cmp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fdct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>fdsp</name><operator>.</operator><name>fdct</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fdct</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>fdsp</name><operator>.</operator><name>fdct248</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>ff_dvvideo_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>vs_total_ac_bits_hd</name> <init>= <expr><operator>(</operator><literal type="number">68</literal> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">52</literal><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>vs_total_ac_bits</name> <init>= <expr><operator>(</operator><literal type="number">100</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">68</literal> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>mb_area_start</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>dv_rl2vlc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>run</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sign</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>run</name> <operator>&lt;</operator> <name>DV_VLC_MAP_RUN_SIZE</name> <operator>&amp;&amp;</operator> <name>level</name> <operator>&lt;</operator> <name>DV_VLC_MAP_LEV_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>vlc</name> <operator>=</operator> <name><name>dv_vlc_map</name><index>[<expr><name>run</name></expr>]</index><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>vlc</name> <operator>|</operator> <name>sign</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>dv_vlc_map</name><index>[<expr><name>run</name></expr>]</index><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <name>DV_VLC_MAP_LEV_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>vlc</name> <operator>=</operator> <name><name>dv_vlc_map</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>vlc</name> <operator>|</operator> <name>sign</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>dv_vlc_map</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>vlc</name> <operator>=</operator> <literal type="number">0xfe00</literal> <operator>|</operator> <operator>(</operator><name>level</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <name>sign</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>run</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>vlc</name> <operator>|=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>run</name> <operator>&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>dv_vlc_map</name><index>[<expr><name>run</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>vlc</name></expr> </then><else>:
<expr><operator>(</operator><literal type="number">0x1f80</literal> <operator>|</operator> <operator>(</operator><name>run</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>run</name> <operator>&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>dv_vlc_map</name><index>[<expr><name>run</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name></expr> </then><else>: <expr><literal type="number">13</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>dv_rl2vlc_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>run</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>run</name> <operator>&lt;</operator> <name>DV_VLC_MAP_RUN_SIZE</name> <operator>&amp;&amp;</operator> <name>level</name> <operator>&lt;</operator> <name>DV_VLC_MAP_LEV_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>dv_vlc_map</name><index>[<expr><name>run</name></expr>]</index><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>level</name> <operator>&lt;</operator> <name>DV_VLC_MAP_LEV_SIZE</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>dv_vlc_map</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>size</name></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>run</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>run</name> <operator>&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>dv_vlc_map</name><index>[<expr><name>run</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name></expr> </then><else>: <expr><literal type="number">13</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>dv_rl2vlc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>run</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>vlc</name> <operator>=</operator> <name><name>dv_vlc_map</name><index>[<expr><name>run</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>vlc</name> <operator>|</operator> <name>sign</name></expr>;</expr_stmt>
<return>return <expr><name><name>dv_vlc_map</name><index>[<expr><name>run</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>dv_rl2vlc_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>run</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>dv_vlc_map</name><index>[<expr><name>run</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>EncBlockInfo</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name><name>area_q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>bit_size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>prev</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_ac</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dct_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>mb</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>next</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>sign</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>partial_bit_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>partial_bit_buffer</name></decl>;</decl_stmt> 



<decl_stmt><decl><type><name>int16_t</name></type> <name><name>save</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_qlevel</name></decl>;</decl_stmt> 
}</block></struct></type> <name>EncBlockInfo</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>PutBitContext</name> <modifier>*</modifier></type><name>dv_encode_ac</name><parameter_list>(<parameter><decl><type><name>EncBlockInfo</name> <modifier>*</modifier></type><name>bi</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb_pool</name></decl></parameter>,
<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>prev</name></decl>, <decl><type ref="prev"/><name>bits_left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name>pb_pool</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>bi</name><operator>-&gt;</operator><name>partial_bit_count</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>vlc</name> <init>= <expr><name><name>bi</name><operator>-&gt;</operator><name>partial_bit_buffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>partial_bit_count</name></name> <operator>=</operator>
<name><name>bi</name><operator>-&gt;</operator><name>partial_bit_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>size</name> <operator>&gt;</operator> <operator>(</operator><name>bits_left</name> <operator>=</operator> <call><name>put_bits_left</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition> <incr><expr><name>pb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bits_left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>bits_left</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>bits_left</name></expr></argument>, <argument><expr><name>vlc</name> <operator>&gt;&gt;</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vlc</name> <operator>=</operator> <call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name>vlc</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pb</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>pb_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>partial_bit_count</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>partial_bit_buffer</name></name> <operator>=</operator> <name>vlc</name></expr>;</expr_stmt>
<return>return <expr><name>pb</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bi</name><operator>-&gt;</operator><name>cur_ac</name></name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>bi</name><operator>-&gt;</operator><name>cur_ac</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>cur_ac</name></name> <operator>=</operator> <name><name>bi</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>prev</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bi</name><operator>-&gt;</operator><name>cur_ac</name></name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>dv_rl2vlc</name><argument_list>(<argument><expr><name><name>bi</name><operator>-&gt;</operator><name>cur_ac</name></name> <operator>-</operator> <name>prev</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bi</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name><name>bi</name><operator>-&gt;</operator><name>cur_ac</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>bi</name><operator>-&gt;</operator><name>sign</name><index>[<expr><name><name>bi</name><operator>-&gt;</operator><name>cur_ac</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vlc</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>pb</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>dv_guess_dct_mode</name><parameter_list>(<parameter><decl><type><name>DVVideoContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_INTERLACED_DCT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ps</name> <init>= <expr><call><name><name>s</name><operator>-&gt;</operator><name>ildct_cmp</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">400</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ps</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>is</name> <init>= <expr><call><name><name>s</name><operator>-&gt;</operator><name>ildct_cmp</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>linesize</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name><name>s</name><operator>-&gt;</operator><name>ildct_cmp</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>linesize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>linesize</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>ps</name> <operator>&gt;</operator> <name>is</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>dv_weight_bits</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>dv_weight_88</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">131072</literal></expr>, <expr><literal type="number">257107</literal></expr>, <expr><literal type="number">257107</literal></expr>, <expr><literal type="number">242189</literal></expr>, <expr><literal type="number">252167</literal></expr>, <expr><literal type="number">242189</literal></expr>, <expr><literal type="number">235923</literal></expr>, <expr><literal type="number">237536</literal></expr>,
<expr><literal type="number">237536</literal></expr>, <expr><literal type="number">235923</literal></expr>, <expr><literal type="number">229376</literal></expr>, <expr><literal type="number">231390</literal></expr>, <expr><literal type="number">223754</literal></expr>, <expr><literal type="number">231390</literal></expr>, <expr><literal type="number">229376</literal></expr>, <expr><literal type="number">222935</literal></expr>,
<expr><literal type="number">224969</literal></expr>, <expr><literal type="number">217965</literal></expr>, <expr><literal type="number">217965</literal></expr>, <expr><literal type="number">224969</literal></expr>, <expr><literal type="number">222935</literal></expr>, <expr><literal type="number">200636</literal></expr>, <expr><literal type="number">218652</literal></expr>, <expr><literal type="number">211916</literal></expr>,
<expr><literal type="number">212325</literal></expr>, <expr><literal type="number">211916</literal></expr>, <expr><literal type="number">218652</literal></expr>, <expr><literal type="number">200636</literal></expr>, <expr><literal type="number">188995</literal></expr>, <expr><literal type="number">196781</literal></expr>, <expr><literal type="number">205965</literal></expr>, <expr><literal type="number">206433</literal></expr>,
<expr><literal type="number">206433</literal></expr>, <expr><literal type="number">205965</literal></expr>, <expr><literal type="number">196781</literal></expr>, <expr><literal type="number">188995</literal></expr>, <expr><literal type="number">185364</literal></expr>, <expr><literal type="number">185364</literal></expr>, <expr><literal type="number">200636</literal></expr>, <expr><literal type="number">200704</literal></expr>,
<expr><literal type="number">200636</literal></expr>, <expr><literal type="number">185364</literal></expr>, <expr><literal type="number">185364</literal></expr>, <expr><literal type="number">174609</literal></expr>, <expr><literal type="number">180568</literal></expr>, <expr><literal type="number">195068</literal></expr>, <expr><literal type="number">195068</literal></expr>, <expr><literal type="number">180568</literal></expr>,
<expr><literal type="number">174609</literal></expr>, <expr><literal type="number">170091</literal></expr>, <expr><literal type="number">175557</literal></expr>, <expr><literal type="number">189591</literal></expr>, <expr><literal type="number">175557</literal></expr>, <expr><literal type="number">170091</literal></expr>, <expr><literal type="number">165371</literal></expr>, <expr><literal type="number">170627</literal></expr>,
<expr><literal type="number">170627</literal></expr>, <expr><literal type="number">165371</literal></expr>, <expr><literal type="number">160727</literal></expr>, <expr><literal type="number">153560</literal></expr>, <expr><literal type="number">160727</literal></expr>, <expr><literal type="number">144651</literal></expr>, <expr><literal type="number">144651</literal></expr>, <expr><literal type="number">136258</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>dv_weight_248</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">131072</literal></expr>, <expr><literal type="number">262144</literal></expr>, <expr><literal type="number">257107</literal></expr>, <expr><literal type="number">257107</literal></expr>, <expr><literal type="number">242189</literal></expr>, <expr><literal type="number">242189</literal></expr>, <expr><literal type="number">242189</literal></expr>, <expr><literal type="number">242189</literal></expr>,
<expr><literal type="number">237536</literal></expr>, <expr><literal type="number">237536</literal></expr>, <expr><literal type="number">229376</literal></expr>, <expr><literal type="number">229376</literal></expr>, <expr><literal type="number">200636</literal></expr>, <expr><literal type="number">200636</literal></expr>, <expr><literal type="number">224973</literal></expr>, <expr><literal type="number">224973</literal></expr>,
<expr><literal type="number">223754</literal></expr>, <expr><literal type="number">223754</literal></expr>, <expr><literal type="number">235923</literal></expr>, <expr><literal type="number">235923</literal></expr>, <expr><literal type="number">229376</literal></expr>, <expr><literal type="number">229376</literal></expr>, <expr><literal type="number">217965</literal></expr>, <expr><literal type="number">217965</literal></expr>,
<expr><literal type="number">211916</literal></expr>, <expr><literal type="number">211916</literal></expr>, <expr><literal type="number">196781</literal></expr>, <expr><literal type="number">196781</literal></expr>, <expr><literal type="number">185364</literal></expr>, <expr><literal type="number">185364</literal></expr>, <expr><literal type="number">206433</literal></expr>, <expr><literal type="number">206433</literal></expr>,
<expr><literal type="number">211916</literal></expr>, <expr><literal type="number">211916</literal></expr>, <expr><literal type="number">222935</literal></expr>, <expr><literal type="number">222935</literal></expr>, <expr><literal type="number">200636</literal></expr>, <expr><literal type="number">200636</literal></expr>, <expr><literal type="number">205964</literal></expr>, <expr><literal type="number">205964</literal></expr>,
<expr><literal type="number">200704</literal></expr>, <expr><literal type="number">200704</literal></expr>, <expr><literal type="number">180568</literal></expr>, <expr><literal type="number">180568</literal></expr>, <expr><literal type="number">175557</literal></expr>, <expr><literal type="number">175557</literal></expr>, <expr><literal type="number">195068</literal></expr>, <expr><literal type="number">195068</literal></expr>,
<expr><literal type="number">185364</literal></expr>, <expr><literal type="number">185364</literal></expr>, <expr><literal type="number">188995</literal></expr>, <expr><literal type="number">188995</literal></expr>, <expr><literal type="number">174606</literal></expr>, <expr><literal type="number">174606</literal></expr>, <expr><literal type="number">175557</literal></expr>, <expr><literal type="number">175557</literal></expr>,
<expr><literal type="number">170627</literal></expr>, <expr><literal type="number">170627</literal></expr>, <expr><literal type="number">153560</literal></expr>, <expr><literal type="number">153560</literal></expr>, <expr><literal type="number">165371</literal></expr>, <expr><literal type="number">165371</literal></expr>, <expr><literal type="number">144651</literal></expr>, <expr><literal type="number">144651</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DV100_SACRIFICE_QUALITY_FOR_SPEED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DV100_ENABLE_FINER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DV100_MAKE_QLEVEL</name><parameter_list>(<parameter><type><name>qno</name></type></parameter>,<parameter><type><name>cno</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((qno&lt;&lt;2) | (cno))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DV100_QLEVEL_QNO</name><parameter_list>(<parameter><type><name>qlevel</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(qlevel&gt;&gt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DV100_QLEVEL_CNO</name><parameter_list>(<parameter><type><name>qlevel</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(qlevel&amp;0x3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DV100_NUM_QLEVELS</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>









<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>dv100_qlevels</name><index>[<expr><name>DV100_NUM_QLEVELS</name></expr>]</index></name> <init>= <expr><block>{
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>( <argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>( <argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>( <argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>( <argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>( <argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>( <argument><expr><literal type="number">9</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>( <argument><expr><literal type="number">9</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>( <argument><expr><literal type="number">9</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, 

<expr><call><name>DV100_MAKE_QLEVEL</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, 
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>dv100_min_bias</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>dv100_chroma_bias</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>dv100_starting_qno</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DV100_SACRIFICE_QUALITY_FOR_SPEED</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>dv100_qlevel_inc</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>dv100_qlevel_inc</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>dv100_qstep_bits</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>dv100_qstep_inv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">65536</literal></expr>, <expr><literal type="number">65536</literal></expr>, <expr><literal type="number">32768</literal></expr>, <expr><literal type="number">21845</literal></expr>, <expr><literal type="number">16384</literal></expr>, <expr><literal type="number">13107</literal></expr>, <expr><literal type="number">10923</literal></expr>, <expr><literal type="number">9362</literal></expr>, <expr><literal type="number">8192</literal></expr>, <expr><literal type="number">4096</literal></expr>, <expr><literal type="number">3641</literal></expr>, <expr><literal type="number">3277</literal></expr>, <expr><literal type="number">2979</literal></expr>, <expr><literal type="number">2731</literal></expr>, <expr><literal type="number">2341</literal></expr>, <expr><literal type="number">1260</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>dv100_weight_shift</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>dv_weight_1080</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">8192</literal></expr>, <expr><literal type="number">65536</literal></expr>, <expr><literal type="number">65536</literal></expr>, <expr><literal type="number">61681</literal></expr>, <expr><literal type="number">61681</literal></expr>, <expr><literal type="number">61681</literal></expr>, <expr><literal type="number">58254</literal></expr>, <expr><literal type="number">58254</literal></expr>,
<expr><literal type="number">58254</literal></expr>, <expr><literal type="number">58254</literal></expr>, <expr><literal type="number">58254</literal></expr>, <expr><literal type="number">58254</literal></expr>, <expr><literal type="number">55188</literal></expr>, <expr><literal type="number">58254</literal></expr>, <expr><literal type="number">58254</literal></expr>, <expr><literal type="number">55188</literal></expr>,
<expr><literal type="number">55188</literal></expr>, <expr><literal type="number">55188</literal></expr>, <expr><literal type="number">55188</literal></expr>, <expr><literal type="number">55188</literal></expr>, <expr><literal type="number">55188</literal></expr>, <expr><literal type="number">24966</literal></expr>, <expr><literal type="number">27594</literal></expr>, <expr><literal type="number">26214</literal></expr>,
<expr><literal type="number">26214</literal></expr>, <expr><literal type="number">26214</literal></expr>, <expr><literal type="number">27594</literal></expr>, <expr><literal type="number">24966</literal></expr>, <expr><literal type="number">23831</literal></expr>, <expr><literal type="number">24385</literal></expr>, <expr><literal type="number">25575</literal></expr>, <expr><literal type="number">25575</literal></expr>,
<expr><literal type="number">25575</literal></expr>, <expr><literal type="number">25575</literal></expr>, <expr><literal type="number">24385</literal></expr>, <expr><literal type="number">23831</literal></expr>, <expr><literal type="number">23302</literal></expr>, <expr><literal type="number">23302</literal></expr>, <expr><literal type="number">24966</literal></expr>, <expr><literal type="number">24966</literal></expr>,
<expr><literal type="number">24966</literal></expr>, <expr><literal type="number">23302</literal></expr>, <expr><literal type="number">23302</literal></expr>, <expr><literal type="number">21845</literal></expr>, <expr><literal type="number">22795</literal></expr>, <expr><literal type="number">24385</literal></expr>, <expr><literal type="number">24385</literal></expr>, <expr><literal type="number">22795</literal></expr>,
<expr><literal type="number">21845</literal></expr>, <expr><literal type="number">21400</literal></expr>, <expr><literal type="number">21845</literal></expr>, <expr><literal type="number">23831</literal></expr>, <expr><literal type="number">21845</literal></expr>, <expr><literal type="number">21400</literal></expr>, <expr><literal type="number">10382</literal></expr>, <expr><literal type="number">10700</literal></expr>,
<expr><literal type="number">10700</literal></expr>, <expr><literal type="number">10382</literal></expr>, <expr><literal type="number">10082</literal></expr>, <expr><literal type="number">9620</literal></expr>, <expr><literal type="number">10082</literal></expr>, <expr><literal type="number">9039</literal></expr>, <expr><literal type="number">9039</literal></expr>, <expr><literal type="number">8525</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">8192</literal></expr>, <expr><literal type="number">65536</literal></expr>, <expr><literal type="number">65536</literal></expr>, <expr><literal type="number">61681</literal></expr>, <expr><literal type="number">61681</literal></expr>, <expr><literal type="number">61681</literal></expr>, <expr><literal type="number">41943</literal></expr>, <expr><literal type="number">41943</literal></expr>,
<expr><literal type="number">41943</literal></expr>, <expr><literal type="number">41943</literal></expr>, <expr><literal type="number">40330</literal></expr>, <expr><literal type="number">41943</literal></expr>, <expr><literal type="number">40330</literal></expr>, <expr><literal type="number">41943</literal></expr>, <expr><literal type="number">40330</literal></expr>, <expr><literal type="number">40330</literal></expr>,
<expr><literal type="number">40330</literal></expr>, <expr><literal type="number">38836</literal></expr>, <expr><literal type="number">38836</literal></expr>, <expr><literal type="number">40330</literal></expr>, <expr><literal type="number">40330</literal></expr>, <expr><literal type="number">24966</literal></expr>, <expr><literal type="number">27594</literal></expr>, <expr><literal type="number">26214</literal></expr>,
<expr><literal type="number">26214</literal></expr>, <expr><literal type="number">26214</literal></expr>, <expr><literal type="number">27594</literal></expr>, <expr><literal type="number">24966</literal></expr>, <expr><literal type="number">23831</literal></expr>, <expr><literal type="number">24385</literal></expr>, <expr><literal type="number">25575</literal></expr>, <expr><literal type="number">25575</literal></expr>,
<expr><literal type="number">25575</literal></expr>, <expr><literal type="number">25575</literal></expr>, <expr><literal type="number">24385</literal></expr>, <expr><literal type="number">23831</literal></expr>, <expr><literal type="number">11523</literal></expr>, <expr><literal type="number">11523</literal></expr>, <expr><literal type="number">12483</literal></expr>, <expr><literal type="number">12483</literal></expr>,
<expr><literal type="number">12483</literal></expr>, <expr><literal type="number">11523</literal></expr>, <expr><literal type="number">11523</literal></expr>, <expr><literal type="number">10923</literal></expr>, <expr><literal type="number">11275</literal></expr>, <expr><literal type="number">12193</literal></expr>, <expr><literal type="number">12193</literal></expr>, <expr><literal type="number">11275</literal></expr>,
<expr><literal type="number">10923</literal></expr>, <expr><literal type="number">5323</literal></expr>, <expr><literal type="number">5490</literal></expr>, <expr><literal type="number">5924</literal></expr>, <expr><literal type="number">5490</literal></expr>, <expr><literal type="number">5323</literal></expr>, <expr><literal type="number">5165</literal></expr>, <expr><literal type="number">5323</literal></expr>,
<expr><literal type="number">5323</literal></expr>, <expr><literal type="number">5165</literal></expr>, <expr><literal type="number">5017</literal></expr>, <expr><literal type="number">4788</literal></expr>, <expr><literal type="number">5017</literal></expr>, <expr><literal type="number">4520</literal></expr>, <expr><literal type="number">4520</literal></expr>, <expr><literal type="number">4263</literal></expr>, }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>dv_weight_720</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">8192</literal></expr>, <expr><literal type="number">65536</literal></expr>, <expr><literal type="number">65536</literal></expr>, <expr><literal type="number">61681</literal></expr>, <expr><literal type="number">61681</literal></expr>, <expr><literal type="number">61681</literal></expr>, <expr><literal type="number">58254</literal></expr>, <expr><literal type="number">58254</literal></expr>,
<expr><literal type="number">58254</literal></expr>, <expr><literal type="number">58254</literal></expr>, <expr><literal type="number">58254</literal></expr>, <expr><literal type="number">58254</literal></expr>, <expr><literal type="number">55188</literal></expr>, <expr><literal type="number">58254</literal></expr>, <expr><literal type="number">58254</literal></expr>, <expr><literal type="number">55188</literal></expr>,
<expr><literal type="number">55188</literal></expr>, <expr><literal type="number">55188</literal></expr>, <expr><literal type="number">55188</literal></expr>, <expr><literal type="number">55188</literal></expr>, <expr><literal type="number">55188</literal></expr>, <expr><literal type="number">24966</literal></expr>, <expr><literal type="number">27594</literal></expr>, <expr><literal type="number">26214</literal></expr>,
<expr><literal type="number">26214</literal></expr>, <expr><literal type="number">26214</literal></expr>, <expr><literal type="number">27594</literal></expr>, <expr><literal type="number">24966</literal></expr>, <expr><literal type="number">23831</literal></expr>, <expr><literal type="number">24385</literal></expr>, <expr><literal type="number">25575</literal></expr>, <expr><literal type="number">25575</literal></expr>,
<expr><literal type="number">25575</literal></expr>, <expr><literal type="number">25575</literal></expr>, <expr><literal type="number">24385</literal></expr>, <expr><literal type="number">23831</literal></expr>, <expr><literal type="number">15420</literal></expr>, <expr><literal type="number">15420</literal></expr>, <expr><literal type="number">16644</literal></expr>, <expr><literal type="number">16644</literal></expr>,
<expr><literal type="number">16644</literal></expr>, <expr><literal type="number">15420</literal></expr>, <expr><literal type="number">15420</literal></expr>, <expr><literal type="number">10923</literal></expr>, <expr><literal type="number">11398</literal></expr>, <expr><literal type="number">12193</literal></expr>, <expr><literal type="number">12193</literal></expr>, <expr><literal type="number">11398</literal></expr>,
<expr><literal type="number">10923</literal></expr>, <expr><literal type="number">10700</literal></expr>, <expr><literal type="number">10923</literal></expr>, <expr><literal type="number">11916</literal></expr>, <expr><literal type="number">10923</literal></expr>, <expr><literal type="number">10700</literal></expr>, <expr><literal type="number">5191</literal></expr>, <expr><literal type="number">5350</literal></expr>,
<expr><literal type="number">5350</literal></expr>, <expr><literal type="number">5191</literal></expr>, <expr><literal type="number">5041</literal></expr>, <expr><literal type="number">4810</literal></expr>, <expr><literal type="number">5041</literal></expr>, <expr><literal type="number">4520</literal></expr>, <expr><literal type="number">4520</literal></expr>, <expr><literal type="number">4263</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="number">8192</literal></expr>, <expr><literal type="number">43691</literal></expr>, <expr><literal type="number">43691</literal></expr>, <expr><literal type="number">40330</literal></expr>, <expr><literal type="number">40330</literal></expr>, <expr><literal type="number">40330</literal></expr>, <expr><literal type="number">29127</literal></expr>, <expr><literal type="number">29127</literal></expr>,
<expr><literal type="number">29127</literal></expr>, <expr><literal type="number">29127</literal></expr>, <expr><literal type="number">29127</literal></expr>, <expr><literal type="number">29127</literal></expr>, <expr><literal type="number">27594</literal></expr>, <expr><literal type="number">29127</literal></expr>, <expr><literal type="number">29127</literal></expr>, <expr><literal type="number">27594</literal></expr>,
<expr><literal type="number">27594</literal></expr>, <expr><literal type="number">27594</literal></expr>, <expr><literal type="number">27594</literal></expr>, <expr><literal type="number">27594</literal></expr>, <expr><literal type="number">27594</literal></expr>, <expr><literal type="number">12483</literal></expr>, <expr><literal type="number">13797</literal></expr>, <expr><literal type="number">13107</literal></expr>,
<expr><literal type="number">13107</literal></expr>, <expr><literal type="number">13107</literal></expr>, <expr><literal type="number">13797</literal></expr>, <expr><literal type="number">12483</literal></expr>, <expr><literal type="number">11916</literal></expr>, <expr><literal type="number">12193</literal></expr>, <expr><literal type="number">12788</literal></expr>, <expr><literal type="number">12788</literal></expr>,
<expr><literal type="number">12788</literal></expr>, <expr><literal type="number">12788</literal></expr>, <expr><literal type="number">12193</literal></expr>, <expr><literal type="number">11916</literal></expr>, <expr><literal type="number">5761</literal></expr>, <expr><literal type="number">5761</literal></expr>, <expr><literal type="number">6242</literal></expr>, <expr><literal type="number">6242</literal></expr>,
<expr><literal type="number">6242</literal></expr>, <expr><literal type="number">5761</literal></expr>, <expr><literal type="number">5761</literal></expr>, <expr><literal type="number">5461</literal></expr>, <expr><literal type="number">5638</literal></expr>, <expr><literal type="number">5461</literal></expr>, <expr><literal type="number">6096</literal></expr>, <expr><literal type="number">5638</literal></expr>,
<expr><literal type="number">5461</literal></expr>, <expr><literal type="number">2661</literal></expr>, <expr><literal type="number">2745</literal></expr>, <expr><literal type="number">2962</literal></expr>, <expr><literal type="number">2745</literal></expr>, <expr><literal type="number">2661</literal></expr>, <expr><literal type="number">2583</literal></expr>, <expr><literal type="number">2661</literal></expr>,
<expr><literal type="number">2661</literal></expr>, <expr><literal type="number">2583</literal></expr>, <expr><literal type="number">2509</literal></expr>, <expr><literal type="number">2394</literal></expr>, <expr><literal type="number">2509</literal></expr>, <expr><literal type="number">2260</literal></expr>, <expr><literal type="number">2260</literal></expr>, <expr><literal type="number">2131</literal></expr>, }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>dv_set_class_number_sd</name><parameter_list>(<parameter><decl><type><name>DVVideoContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>blk</name></decl></parameter>, <parameter><decl><type><name>EncBlockInfo</name> <modifier>*</modifier></type><name>bi</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>zigzag_scan</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>weight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bias</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>area</name></decl>;</decl_stmt>










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
static const int classes[] = { 12, 24, 36, 0xffff };
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>classes</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">0xffff</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><name><name>classes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>deadzone</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>quant_deadzone</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>threshold</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>deadzone</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>mb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>blk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>area</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>area</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>area</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>prev</name><index>[<expr><name>area</name></expr>]</index></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><name>area</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>mb_area_start</name><index>[<expr><name>area</name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mb_area_start</name><index>[<expr><name>area</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name><name>blk</name><index>[<expr><name><name>zigzag_scan</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>+</operator> <name>deadzone</name> <operator>&gt;</operator> <name>threshold</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>sign</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>level</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>weight</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>dv_weight_bits</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator>
<operator>(</operator><name>dv_weight_bits</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>level</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <name>level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><name>area</name></expr>]</index></name> <operator>+=</operator> <call><name>dv_rl2vlc_size</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <name>prev</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>prev</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>prev</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name><name>bi</name><operator>-&gt;</operator><name>cno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>max</name> <operator>&gt;</operator> <name><name>classes</name><index>[<expr><name><name>bi</name><operator>-&gt;</operator><name>cno</name></name></expr>]</index></name></expr>;</condition> <incr><expr><name><name>bi</name><operator>-&gt;</operator><name>cno</name></name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>cno</name></name> <operator>+=</operator> <name>bias</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bi</name><operator>-&gt;</operator><name>cno</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>cno</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>bi</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>prev</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>area</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>area</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>area</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>prev</name><index>[<expr><name>area</name></expr>]</index></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><name>area</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mb_area_start</name><index>[<expr><name>area</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>bi</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>i</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bi</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><name>area</name></expr>]</index></name> <operator>+=</operator> <call><name>dv_rl2vlc_size</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <name>prev</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bi</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>prev</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>prev</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>bi</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>bi</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>
<name><name>bi</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>bi</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>dv_set_class_number_hd</name><parameter_list>(<parameter><decl><type><name>DVVideoContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>blk</name></decl></parameter>, <parameter><decl><type><name>EncBlockInfo</name> <modifier>*</modifier></type><name>bi</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>zigzag_scan</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>weight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bias</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>area_q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level0</name></decl>, <decl><type ref="prev"/><name>level1</name></decl>;</decl_stmt>


<expr_stmt><expr><name>level0</name> <operator>=</operator> <name><name>blk</name><index>[<expr><name><name>zigzag_scan</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>level1</name> <operator>=</operator> <name><name>blk</name><index>[<expr><name><name>zigzag_scan</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>sign</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>level0</name><operator>&gt;&gt;</operator><literal type="number">31</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>sign</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>level1</name><operator>&gt;&gt;</operator><literal type="number">31</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>level0</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>level0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>level1</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>level1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>level0</name> <operator>=</operator> <operator>(</operator><name>level0</name><operator>*</operator><name><name>weight</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4096</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">17</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>level1</name> <operator>=</operator> <operator>(</operator><name>level1</name><operator>*</operator><name><name>weight</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4096</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">17</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>save</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>level0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>save</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>level1</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>bi</name><operator>-&gt;</operator><name>save</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>bi</name><operator>-&gt;</operator><name>save</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bi</name><operator>-&gt;</operator><name>save</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>bi</name><operator>-&gt;</operator><name>save</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>mb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>blk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>bi</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>bi</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>min_qlevel</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>max</name><operator>+</operator><literal type="number">256</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>area_q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>cno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>dv_init_enc_block</name><parameter_list>(<parameter><decl><type><name>EncBlockInfo</name><modifier>*</modifier></type> <name>bi</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>,
<parameter><decl><type><name>DVVideoContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chroma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>area_q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>bi</name><operator>-&gt;</operator><name>area_q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>bi</name><operator>-&gt;</operator><name>area_q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>bi</name><operator>-&gt;</operator><name>area_q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>partial_bit_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>partial_bit_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>cur_ac</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>DV_PROFILE_IS_HD</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name>blk</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>linesize</name> <operator>&lt;&lt;</operator> <name><name>bi</name><operator>-&gt;</operator><name>dct_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fdct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>blk</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>dct_mode</name></name> <operator>=</operator> <call><name>dv_guess_dct_mode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>get_pixels</name></name><argument_list>(<argument><expr><name>blk</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fdct</name><index>[<expr><name><name>bi</name><operator>-&gt;</operator><name>dct_mode</name></name></expr>]</index></name><operator>(</operator><name>blk</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>blk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>blk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name><operator>-&gt;</operator><name>dct_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DV_PROFILE_IS_HD</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>weights</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">1080</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>weights</name> <operator>=</operator> <name><name>dv_weight_1080</name><index>[<expr><name>chroma</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><name>weights</name> <operator>=</operator> <name><name>dv_weight_720</name><index>[<expr><name>chroma</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>dv_set_class_number_hd</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><name>bi</name></expr></argument>,
<argument><expr><name>ff_zigzag_direct</name></expr></argument>,
<argument><expr><name>weights</name></expr></argument>,
<argument><expr><name>dv100_min_bias</name><operator>+</operator><name>chroma</name><operator>*</operator><name>dv100_chroma_bias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>dv_set_class_number_sd</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><name>bi</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>bi</name><operator>-&gt;</operator><name>dct_mode</name></name></expr> ?</condition><then> <expr><name>ff_dv_zigzag248_direct</name></expr> </then><else>: <expr><name>ff_zigzag_direct</name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>bi</name><operator>-&gt;</operator><name>dct_mode</name></name></expr> ?</condition><then> <expr><name>dv_weight_248</name></expr> </then><else>: <expr><name>dv_weight_88</name></expr></else></ternary></expr></argument>,
<argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name><name>bi</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>bi</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>bi</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>bi</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>dv100_quantize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qsinv</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<return>return <expr><operator>(</operator><name>level</name> <operator>*</operator> <name>qsinv</name> <operator>+</operator> <literal type="number">1024</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>dv100_qstep_bits</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>dv100_qstep_bits</name></expr>;</return>





</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dv100_actual_quantize</name><parameter_list>(<parameter><decl><type><name>EncBlockInfo</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qlevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>prev</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>qsinv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qno</name> <init>= <expr><call><name>DV100_QLEVEL_QNO</name><argument_list>(<argument><expr><name><name>dv100_qlevels</name><index>[<expr><name>qlevel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cno</name> <init>= <expr><call><name>DV100_QLEVEL_CNO</name><argument_list>(<argument><expr><name><name>dv100_qlevels</name><index>[<expr><name>qlevel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>area_q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>qno</name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>cno</name></name> <operator>==</operator> <name>cno</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>qsinv</name> <operator>=</operator> <name><name>dv100_qstep_inv</name><index>[<expr><name>qno</name></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>area_q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>qno</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>cno</name></name> <operator>=</operator> <name>cno</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>prev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ac</name> <init>= <expr><call><name>dv100_quantize</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>save</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>qsinv</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>cno</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ac</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ac</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ac</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>ac</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <call><name>dv_rl2vlc_size</name><argument_list>(<argument><expr><name>k</name> <operator>-</operator> <name>prev</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>prev</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>prev</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<return>return <expr><name><name>b</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>dv_guess_qnos_hd</name><parameter_list>(<parameter><decl><type><name>EncBlockInfo</name> <modifier>*</modifier></type><name>blks</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>qnos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EncBlockInfo</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>min_qlevel</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>qlevels</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>size</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>size_cache</name><index>[<expr><literal type="number">5</literal><operator>*</operator><literal type="number">8</literal></expr>]</index><index>[<expr><name>DV100_NUM_QLEVELS</name></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>min_qlevel</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>blks</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name></expr>]</index></name><operator>.</operator><name>min_qlevel</name> <operator>&gt;</operator> <name><name>min_qlevel</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>min_qlevel</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>blks</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name></expr>]</index></name><operator>.</operator><name>min_qlevel</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>dv100_starting_qno</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>min_qlevel</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>min_qlevel</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>qnos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>DV100_QLEVEL_QNO</name><argument_list>(<argument><expr><name><name>dv100_qlevels</name><index>[<expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>size_cache</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name></expr>]</index><index>[<expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <call><name>dv100_actual_quantize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>blks</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>size_cache</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name></expr>]</index><index>[<expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><name><name>size</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>+</operator><name><name>size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;</operator> <name>vs_total_ac_bits_hd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>largest</name> <init>= <expr><name><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>%</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>qlevels_done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>qlevels</name><index>[<expr><name>largest</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>largest</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>largest</name></expr>;</expr_stmt>

<expr_stmt><expr><name>largest</name> <operator>=</operator> <operator>(</operator><name>largest</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">5</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>dv100_qlevel_inc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>DV100_NUM_QLEVELS</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>DV100_NUM_QLEVELS</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>qlevels_done</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>qnos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>DV100_QLEVEL_QNO</name><argument_list>(<argument><expr><name><name>dv100_qlevels</name><index>[<expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>&amp;</operator><name><name>blks</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>size_cache</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name></expr>]</index><index>[<expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>size_cache</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name></expr>]</index><index>[<expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <call><name>dv100_actual_quantize</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>size_cache</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name></expr>]</index><index>[<expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for> 

</block_content>}</block> while <condition>(<expr><name>vs_total_ac_bits_hd</name> <operator>&lt;</operator> <name><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>size</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>qlevels_done</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition>;</do>


</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>DV100_ENABLE_FINER</name> <operator>&amp;&amp;</operator>
<name><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><name><name>size</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>+</operator><name><name>size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;</operator> <name>vs_total_ac_bits_hd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_qlevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>largest</name> <init>= <expr><name><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>%</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt> 

<while>while <condition>(<expr><name><name>qlevels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>min_qlevel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator>
<name><name>qlevels</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>min_qlevel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator>
<name><name>qlevels</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>min_qlevel</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>||</operator>
<name><name>qlevels</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>min_qlevel</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>||</operator>
<name><name>qlevels</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>min_qlevel</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>min_qlevel</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>qlevels</name><index>[<expr><name>largest</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>largest</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>largest</name></expr>;</expr_stmt>


<expr_stmt><expr><name>largest</name> <operator>=</operator> <operator>(</operator><name>largest</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>min_qlevel</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>save_qlevel</name> <operator>=</operator> <name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>dv100_qlevel_inc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>min_qlevel</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>min_qlevel</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>qnos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>DV100_QLEVEL_QNO</name><argument_list>(<argument><expr><name><name>dv100_qlevels</name><index>[<expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>&amp;</operator><name><name>blks</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>size_cache</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name></expr>]</index><index>[<expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>size_cache</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name></expr>]</index><index>[<expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <call><name>dv100_actual_quantize</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>size_cache</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name></expr>]</index><index>[<expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for> 


<if_stmt><if>if <condition>(<expr><name>vs_total_ac_bits_hd</name> <operator>&lt;</operator> <name><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>size</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>save_qlevel</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qnos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>DV100_QLEVEL_QNO</name><argument_list>(<argument><expr><name><name>dv100_qlevels</name><index>[<expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>&amp;</operator><name><name>blks</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <call><name>dv100_actual_quantize</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>qlevels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for> 
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>dv_guess_qnos</name><parameter_list>(<parameter><decl><type><name>EncBlockInfo</name> <modifier>*</modifier></type><name>blks</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>qnos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>size</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>prev</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EncBlockInfo</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<name><name>size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name><name>size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>
<name><name>size</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator>
<name><name>size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>blks</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>qnos</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>qnos</name><index>[<expr><name>i</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>area_q</name><index>[<expr><name>a</name></expr>]</index></name> <operator>!=</operator> <name><name>ff_dv_quant_shifts</name><index>[<expr><name><name>qnos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>ff_dv_quant_offset</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>cno</name></name></expr>]</index></name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>area_q</name><index>[<expr><name>a</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>prev</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>prev</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>mb_area_start</name><index>[<expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>prev</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>prev</name></expr>]</index></name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>mb_area_start</name><index>[<expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>k</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><name>a</name></expr>]</index></name> <operator>+=</operator> <call><name>dv_rl2vlc_size</name><argument_list>(<argument><expr><name>k</name> <operator>-</operator> <name>prev</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>mb_area_start</name><index>[<expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>a2</name> <operator>=</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>b</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>mb_area_start</name><index>[<expr><name>a2</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>a2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>prev</name><index>[<expr><name>a2</name></expr>]</index></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>a2</name> <operator>&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><name>a2</name></expr>]</index></name> <operator>+=</operator> <call><name>dv_rl2vlc_size</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name>prev</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator>
<call><name>dv_rl2vlc_size</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>prev</name><index>[<expr><name>a2</name></expr>]</index></name> <operator>==</operator> <name>k</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>a2</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>prev</name><index>[<expr><name>a2</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>k</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>prev</name><index>[<expr><name>a2</name></expr>]</index></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>prev</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>prev</name><index>[<expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>b</name><operator>-&gt;</operator><name>bit_size</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>vs_total_ac_bits</name> <operator>&gt;=</operator> <name><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>size</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block> while <condition>(<expr><name><name>qnos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>qnos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>qnos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <name><name>qnos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|</operator> <name><name>qnos</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition>;</do>

<for>for <control>(<init><expr><name>a</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>a</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>vs_total_ac_bits</name> <operator>&lt;</operator> <name><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>a</name> <operator>+=</operator> <name>a</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>blks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>prev</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>prev</name></expr>]</index></name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>k</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>k</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <name>a</name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;</operator> <operator>-</operator><name>a</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>prev</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>next</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <call><name>dv_rl2vlc_size</name><argument_list>(<argument><expr><name>k</name> <operator>-</operator> <name>prev</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>mb</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>dv_revise_cnos</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dif</name></decl></parameter>, <parameter><decl><type><name>EncBlockInfo</name> <modifier>*</modifier></type><name>blk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVDVProfile</name> <modifier>*</modifier></type><name>profile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_index</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>mb_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_index</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>mb_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name>dif</name> <operator>+</operator> <name>mb_index</name><operator>*</operator><literal type="number">80</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>profile</name><operator>-&gt;</operator><name>bpm</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xCF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name><name>blk</name><index>[<expr><name><name>profile</name><operator>-&gt;</operator><name>bpm</name></name><operator>*</operator><name>mb_index</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>cno</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>profile</name><operator>-&gt;</operator><name>block_sizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dv_encode_video_segment</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVVideoContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DVwork_chunk</name> <modifier>*</modifier></type><name>work_chunk</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_index</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_x</name></decl>, <decl><type ref="prev"/><name>mb_y</name></decl>, <decl><type ref="prev"/><name>c_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl>, <decl><type ref="prev"/><name>y_stride</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>y_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dif</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED_8</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>scratch</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">128</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>EncBlockInfo</name></type> <name><name>enc_blks</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>DV_MAX_BPM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PutBitContext</name></type> <name><name>pbs</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>DV_MAX_BPM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EncBlockInfo</name> <modifier>*</modifier></type><name>enc_blk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vs_bit_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>qnos</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>qnosp</name> <init>= <expr><operator>&amp;</operator><name><name>qnos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>dif</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>work_chunk</name><operator>-&gt;</operator><name>buf_offset</name></name> <operator>*</operator> <literal type="number">80</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>enc_blk</name> <operator>=</operator> <operator>&amp;</operator><name><name>enc_blks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>mb_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_index</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>mb_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>dv_calculate_mb_xy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>work_chunk</name></expr></argument>, <argument><expr><name>mb_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mb_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qnos</name><index>[<expr><name>mb_index</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><call><name>DV_PROFILE_IS_HD</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">15</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>y_ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>mb_x</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">1080</literal> <operator>&amp;&amp;</operator> <name>mb_y</name> <operator>&lt;</operator> <literal type="number">134</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enc_blk</name><operator>-&gt;</operator><name>dct_mode</name></name> <operator>=</operator> <call><name>dv_guess_dct_mode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>y_ptr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enc_blk</name><operator>-&gt;</operator><name>dct_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>enc_blk</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dct_mode</name> <operator>=</operator> <name><name>enc_blk</name><operator>-&gt;</operator><name>dct_mode</name></name></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV411P</name> <operator>&amp;&amp;</operator> <name>mb_x</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">704</literal> <operator>/</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;=</operator> <literal type="number">720</literal> <operator>&amp;&amp;</operator> <name>mb_y</name> <operator>!=</operator> <literal type="number">134</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y_stride</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">3</literal><operator>*</operator><operator>!</operator><name><name>enc_blk</name><operator>-&gt;</operator><name>dct_mode</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>y_stride</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>y_ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>mb_y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>mb_x</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>video_stype</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>vs_bit_size</name> <operator>+=</operator>
<call><name>dv_init_enc_block</name><argument_list>(<argument><expr><name>enc_blk</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>y_ptr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>dv_init_enc_block</name><argument_list>(<argument><expr><name>enc_blk</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>dv_init_enc_block</name><argument_list>(<argument><expr><name>enc_blk</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>y_ptr</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>dv_init_enc_block</name><argument_list>(<argument><expr><name>enc_blk</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>vs_bit_size</name> <operator>+=</operator>
<call><name>dv_init_enc_block</name><argument_list>(<argument><expr><name>enc_blk</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>y_ptr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>dv_init_enc_block</name><argument_list>(<argument><expr><name>enc_blk</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y_ptr</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>dv_init_enc_block</name><argument_list>(<argument><expr><name>enc_blk</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>y_ptr</name> <operator>+</operator> <name>y_stride</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>dv_init_enc_block</name><argument_list>(<argument><expr><name>enc_blk</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>y_ptr</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>y_stride</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>enc_blk</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>c_offset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>mb_y</name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>
<operator>(</operator><name>mb_x</name> <operator>&gt;&gt;</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV411P</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>c_ptr</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>c_offset</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y_stride</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>mb_y</name> <operator>==</operator> <literal type="number">134</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">3</literal><operator>*</operator><operator>!</operator><name><name>enc_blk</name><operator>-&gt;</operator><name>dct_mode</name></name><operator>)</operator><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV411P</name> <operator>&amp;&amp;</operator> <name>mb_x</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">704</literal> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>scratch</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>c_ptr</name> <operator>+</operator> <operator>(</operator><name>linesize</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>c_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>c_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>c_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>c_ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_ptr</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>c_ptr</name> <operator>=</operator> <name>scratch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>linesize</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vs_bit_size</name> <operator>+=</operator> <call><name>dv_init_enc_block</name><argument_list>(<argument><expr><name>enc_blk</name><operator>++</operator></expr></argument>, <argument><expr><name>c_ptr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>bpm</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vs_bit_size</name> <operator>+=</operator> <call><name>dv_init_enc_block</name><argument_list>(<argument><expr><name>enc_blk</name><operator>++</operator></expr></argument>, <argument><expr><name>c_ptr</name> <operator>+</operator> <name>y_stride</name></expr></argument>,
<argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>DV_PROFILE_IS_HD</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dv_guess_qnos_hd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc_blks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>qnosp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>vs_total_ac_bits</name> <operator>&lt;</operator> <name>vs_bit_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dv_guess_qnos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc_blks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>qnosp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>bpm</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>start_mb</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>qnosp</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>bpm</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>block_sizes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pbs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pbs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name><name>enc_blks</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>mb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">1024</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pbs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>DV_PROFILE_IS_HD</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>i</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>enc_blks</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>dct_mode</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pbs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>enc_blks</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>cno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dv_encode_ac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc_blks</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pbs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pbs</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>pb</name> <operator>=</operator> <operator>&amp;</operator><name><name>pbs</name><index>[<expr><name>start_mb</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>bpm</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>enc_blks</name><index>[<expr><name>start_mb</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>partial_bit_count</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pb</name> <operator>=</operator> <call><name>dv_encode_ac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc_blks</name><index>[<expr><name>start_mb</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pb</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>pbs</name><index>[<expr><name>start_mb</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>bpm</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></for>


<expr_stmt><expr><name>pb</name> <operator>=</operator> <operator>&amp;</operator><name><name>pbs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>bpm</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>enc_blks</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>partial_bit_count</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pb</name> <operator>=</operator> <call><name>dv_encode_ac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enc_blks</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pbs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>bpm</name></name> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>enc_blks</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>partial_bit_count</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ac bitstream overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>bpm</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>pbs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>size_in_bits</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pbs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pbs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"bitstream written beyond buffer size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pbs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>DV_PROFILE_IS_HD</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dv_revise_cnos</name><argument_list>(<argument><expr><name>dif</name></expr></argument>, <argument><expr><name>enc_blks</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>dv_write_pack</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>dv_pack_type</name></name></type> <name>pack_id</name></decl></parameter>, <parameter><decl><type><name>DVVideoContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>


















<decl_stmt><decl><type><name>uint8_t</name></type> <name>aspect</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>apt</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;=</operator> <literal type="number">720</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fs</name> <operator>=</operator> <ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">720</literal> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>top_field_first</name></name></expr> ?</condition><then> <expr><literal type="number">0x40</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>fs</name> <operator>=</operator> <ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>top_field_first</name></name></expr> ?</condition><then> <expr><literal type="number">0x00</literal></expr> </then><else>: <expr><literal type="number">0x40</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DV_PROFILE_IS_HD</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>av_q2d</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr></argument>)</argument_list></call> <operator>*</operator>
<name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">17</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>aspect</name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <name>pack_id</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>pack_id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>dv_header525</name></expr>:</case> 
<case>case <expr><name>dv_header625</name></expr>:</case> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xf8</literal> <operator>|</operator> 
<operator>(</operator><name>apt</name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><literal type="number">0x0f</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><name>apt</name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><literal type="number">0x0f</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><name>apt</name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><literal type="number">0x0f</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><name>apt</name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><name>dv_video_source</name></expr>:</case>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> 
<literal type="number">0xf</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>dsf</name></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> 
<name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>video_stype</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt> 
<break>break;</break>
<case>case <expr><name>dv_video_control</name></expr>:</case>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> 
<literal type="number">0x3f</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xc8</literal> <operator>|</operator> 
<name>aspect</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> 
<name>fs</name> <operator>|</operator> 
<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> 
<literal type="number">0xc</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt> 
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>
<name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator>
<name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><literal type="number">5</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>dv_write_dif_id</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>dv_section_type</name></name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>chan_num</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>seq_num</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>dif_num</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fsc</name> <init>= <expr><name>chan_num</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fsp</name> <init>= <expr><literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>chan_num</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <name>t</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>seq_num</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><name>fsc</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><name>fsp</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> 
<literal type="number">3</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dif_num</name></expr>;</expr_stmt> 
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>dv_write_ssyb_id</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>syb_num</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>fr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>syb_num</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>syb_num</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>fr</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> 
<literal type="number">0x0f</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>syb_num</name> <operator>==</operator> <literal type="number">11</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>fr</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> 
<literal type="number">0x7f</literal></expr>;</expr_stmt> 
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>fr</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> 
<operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> 
<literal type="number">0x0f</literal></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xf0</literal> <operator>|</operator> 
<operator>(</operator><name>syb_num</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt> 
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dv_format_frame</name><parameter_list>(<parameter><decl><type><name>DVVideoContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>chan</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chan_offset</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">720</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>chan</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>chan</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>n_difchan</name></name></expr>;</condition> <incr><expr><name>chan</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>difseg_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">80</literal> <operator>*</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>dv_write_dif_id</name><argument_list>(<argument><expr><name>dv_sect_header</name></expr></argument>, <argument><expr><name>chan</name><operator>+</operator><name>chan_offset</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>dv_write_pack</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>dsf</name></name></expr> ?</condition><then> <expr><name>dv_header625</name></expr> </then><else>: <expr><name>dv_header525</name></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">72</literal></expr>;</expr_stmt> 


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>dv_write_dif_id</name><argument_list>(<argument><expr><name>dv_sect_subcode</name></expr></argument>, <argument><expr><name>chan</name><operator>+</operator><name>chan_offset</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>dv_write_ssyb_id</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>difseg_size</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">29</literal></expr>;</expr_stmt> 
</block_content>}</block></for>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>dv_write_dif_id</name><argument_list>(<argument><expr><name>dv_sect_vaux</name></expr></argument>, <argument><expr><name>chan</name><operator>+</operator><name>chan_offset</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>dv_write_pack</name><argument_list>(<argument><expr><name>dv_video_source</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>dv_write_pack</name><argument_list>(<argument><expr><name>dv_video_control</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>dv_write_pack</name><argument_list>(<argument><expr><name>dv_video_source</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>dv_write_pack</name><argument_list>(<argument><expr><name>dv_video_control</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
</block_content>}</block></for>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">135</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>%</operator> <literal type="number">15</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>dv_write_dif_id</name><argument_list>(<argument><expr><name>dv_sect_audio</name></expr></argument>, <argument><expr><name>chan</name><operator>+</operator><name>chan_offset</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name><operator>/</operator><literal type="number">15</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">77</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>dv_write_dif_id</name><argument_list>(<argument><expr><name>dv_sect_video</name></expr></argument>, <argument><expr><name>chan</name><operator>+</operator><name>chan_offset</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">77</literal></expr>;</expr_stmt> 



</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvvideo_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DVVideoContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sys</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>
<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>
<name><name>c</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>key_frame</name></name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dv_format_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dv_encode_video_segment</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>work_chunks</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>dv_work_pool_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sys</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DVwork_chunk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(DVVideoContext, x)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>dv_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"quant_deadzone"</literal></expr>, <expr><literal type="string">"Quantizer dead zone"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>quant_deadzone</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">7</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1024</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>dvvideo_encode_class</name> <init>= <expr><block>{
<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"dvvideo encoder"</literal></expr>,
<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,
<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>dv_options</name></expr>,
<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_dvvideo_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dvvideo"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"DV (Digital Video)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_DVVIDEO</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DVVideoContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>dvvideo_encode_init</name></expr>,
<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>dvvideo_encode_frame</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SLICE_THREADS</name> <operator>|</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name> <operator>|</operator> <name>AV_CODEC_CAP_INTRA_ONLY</name></expr>,
<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{
<expr><name>AV_PIX_FMT_YUV411P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>,
<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>
}</block></expr>,
<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>dvvideo_encode_class</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
