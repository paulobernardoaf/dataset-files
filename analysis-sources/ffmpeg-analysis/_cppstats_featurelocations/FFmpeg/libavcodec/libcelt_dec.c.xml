<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\libcelt_dec.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;celt/celt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;celt/celt_header.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<struct>struct <name>libcelt_context</name> <block>{
<decl_stmt><decl><type><name>CELTMode</name> <modifier>*</modifier></type><name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CELTDecoder</name> <modifier>*</modifier></type><name>dec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>discard</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ff_celt_error_to_averror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CELT_BAD_ARG</name></expr>:</case> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CELT_BUFFER_TOO_SMALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CELT_BUFFER_TOO_SMALL</name></expr>:</case> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOBUFS</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CELT_INTERNAL_ERROR</name></expr>:</case> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EFAULT</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>CELT_CORRUPTED_DATA</name></expr>:</case> <return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
<case>case <expr><name>CELT_UNIMPLEMENTED</name></expr>:</case> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOTRECOVERABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>CELT_INVALID_STATE</name></expr>:</case> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOTRECOVERABLE</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>CELT_ALLOC_FAIL</name></expr>:</case> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ff_celt_bitstream_version_hack</name><parameter_list>(<parameter><decl><type><name>CELTMode</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CELTHeader</name></type> <name>header</name> <init>= <expr><block>{ <expr><operator>.</operator><name>version_id</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>celt_header_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">960</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>header</name><operator>.</operator><name>version_id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>libcelt_dec_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>libcelt_context</name></name> <modifier>*</modifier></type><name>celt</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>channels</name></name> <operator>||</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>||</operator>
<name><name>c</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>celt</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <call><name>celt_mode_create</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>celt</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_celt_error_to_averror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>celt</name><operator>-&gt;</operator><name>dec</name></name> <operator>=</operator> <call><name>celt_decoder_create_custom</name><argument_list>(<argument><expr><name><name>celt</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>celt</name><operator>-&gt;</operator><name>dec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>celt_mode_destroy</name><argument_list>(<argument><expr><name><name>celt</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ff_celt_error_to_averror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>celt</name><operator>-&gt;</operator><name>discard</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>celt</name><operator>-&gt;</operator><name>discard</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>celt</name><operator>-&gt;</operator><name>discard</name></name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>frame_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Invalid overlap (%d), ignored.\n"</literal></expr></argument>, <argument><expr><name><name>celt</name><operator>-&gt;</operator><name>discard</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>celt</name><operator>-&gt;</operator><name>discard</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>version</name> <init>= <expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>lib_version</name> <init>= <expr><call><name>ff_celt_bitstream_version_hack</name><argument_list>(<argument><expr><name><name>celt</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>!=</operator> <name>lib_version</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"CELT bitstream version 0x%x may be "</literal>
<literal type="string">"improperly decoded by libcelt for version 0x%x.\n"</literal></expr></argument>,
<argument><expr><name>version</name></expr></argument>, <argument><expr><name>lib_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>libcelt_dec_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>libcelt_context</name></name> <modifier>*</modifier></type><name>celt</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>celt_decoder_destroy</name><argument_list>(<argument><expr><name><name>celt</name><operator>-&gt;</operator><name>dec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>celt_mode_destroy</name><argument_list>(<argument><expr><name><name>celt</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libcelt_dec_decode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>libcelt_context</name></name> <modifier>*</modifier></type><name>celt</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>pcm</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pcm</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>celt_decode</name><argument_list>(<argument><expr><name><name>celt</name><operator>-&gt;</operator><name>dec</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>pcm</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_celt_error_to_averror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>celt</name><operator>-&gt;</operator><name>discard</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>-=</operator> <name><name>celt</name><operator>-&gt;</operator><name>discard</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>pcm</name></expr></argument>, <argument><expr><name>pcm</name> <operator>+</operator> <name><name>celt</name><operator>-&gt;</operator><name>discard</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,
<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>celt</name><operator>-&gt;</operator><name>discard</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libcelt_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libcelt"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Xiph CELT decoder using libcelt"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_CELT</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>libcelt_context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>libcelt_dec_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>libcelt_dec_close</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>libcelt_dec_decode</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libcelt"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
