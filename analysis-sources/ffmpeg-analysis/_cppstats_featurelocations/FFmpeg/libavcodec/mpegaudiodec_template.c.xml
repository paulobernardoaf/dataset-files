<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mpegaudiodec_template.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudiodsp.h"</cpp:file></cpp:include>






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudiodecheader.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACKSTEP_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRABYTES</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAST_BUF_SIZE</name></cpp:macro> <cpp:value>2 * BACKSTEP_SIZE + EXTRABYTES</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>GranuleDef</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>scfsi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>part2_3_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>big_values</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>global_gain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scalefac_compress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>block_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>switch_point</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>table_select</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>subblock_gain</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>scalefac_scale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>count1table_select</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>region_size</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>preflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>short_start</name></decl>, <name>long_end</name>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>scale_factors</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>sb_hybrid</name></expr></argument>)</argument_list></call><index>[<expr><name>SBLIMIT</name> <operator>*</operator> <literal type="number">18</literal></expr>]</index></expr>;</expr_stmt> 
}</block></struct></type> <name>GranuleDef</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MPADecodeContext</name> <block>{
<decl_stmt><decl><type><name>MPA_DECODE_HEADER</name>
<name>uint8_t</name></type> <name><name>last_buf</name><index>[<expr><name>LAST_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_buf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extrasize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>free_format_next_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>in_gb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>MPA_INT</name></expr></argument>, <argument><expr><name>synth_buf</name></expr></argument>)</argument_list></call><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">512</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>synth_buf_offset</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>sb_samples</name></expr></argument>)</argument_list></call><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">36</literal></expr>]</index><index>[<expr><name>SBLIMIT</name></expr>]</index></expr>;</expr_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name><name>mdct_buf</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><name>SBLIMIT</name> <operator>*</operator> <literal type="number">18</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>GranuleDef</name></type> <name><name>granules</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>adu_mode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>dither_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err_recognition</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecContext</name><modifier>*</modifier></type> <name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MPADSPContext</name></type> <name>mpadsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>
}</block></struct></type> <name>MPADecodeContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudiodata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudiodectab.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>huff_vlc</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VLC_TYPE</name></type> <name><name>huff_vlc_tables</name><index>[
<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">128</literal> <operator>+</operator> <literal type="number">128</literal> <operator>+</operator> <literal type="number">128</literal> <operator>+</operator> <literal type="number">130</literal> <operator>+</operator> <literal type="number">128</literal> <operator>+</operator> <literal type="number">154</literal> <operator>+</operator> <literal type="number">166</literal> <operator>+</operator>
<literal type="number">142</literal> <operator>+</operator> <literal type="number">204</literal> <operator>+</operator> <literal type="number">190</literal> <operator>+</operator> <literal type="number">170</literal> <operator>+</operator> <literal type="number">542</literal> <operator>+</operator> <literal type="number">460</literal> <operator>+</operator> <literal type="number">662</literal> <operator>+</operator> <literal type="number">414</literal></expr>
]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>huff_vlc_tables_sizes</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">166</literal></expr>,
<expr><literal type="number">142</literal></expr>, <expr><literal type="number">204</literal></expr>, <expr><literal type="number">190</literal></expr>, <expr><literal type="number">170</literal></expr>, <expr><literal type="number">542</literal></expr>, <expr><literal type="number">460</literal></expr>, <expr><literal type="number">662</literal></expr>, <expr><literal type="number">414</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>huff_quad_vlc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VLC_TYPE</name></type> <name><name>huff_quad_vlc_tables</name><index>[<expr><literal type="number">128</literal><operator>+</operator><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>huff_quad_vlc_tables_sizes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">128</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint16_t</name></type> <name><name>band_index_long</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">23</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudio_tablegen.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>INTFLOAT</name></type> <name><name>is_table</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>INTFLOAT</name></type> <name><name>is_table_lsf</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>INTFLOAT</name></type> <name><name>csa_table</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int16_t</name></type> <name><name>division_tab3</name><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">6</literal></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int16_t</name></type> <name><name>division_tab5</name><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">8</literal></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int16_t</name></type> <name><name>division_tab9</name><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>division_tabs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><name>division_tab3</name></expr>, <expr><name>division_tab5</name></expr>, <expr><name>NULL</name></expr>, <expr><name>division_tab9</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>uint16_t</name></type> <name><name>scale_factor_modshift</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name><name>scale_factor_mult</name><index>[<expr><literal type="number">15</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE_GEN</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ FIXR_OLD(1.0 * (v)), FIXR_OLD(0.7937005259 * (v)), FIXR_OLD(0.6299605249 * (v)) }</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name><name>scale_factor_mult2</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><call><name>SCALE_GEN</name><argument_list>(<argument><expr><literal type="number">4.0</literal> <operator>/</operator> <literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>SCALE_GEN</name><argument_list>(<argument><expr><literal type="number">4.0</literal> <operator>/</operator> <literal type="number">5.0</literal></expr></argument>)</argument_list></call></expr>, 
<expr><call><name>SCALE_GEN</name><argument_list>(<argument><expr><literal type="number">4.0</literal> <operator>/</operator> <literal type="number">9.0</literal></expr></argument>)</argument_list></call></expr>, 
}</block></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>void</name></type> <name>region_offset2size</name><parameter_list>(<parameter><decl><type><name>GranuleDef</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>region_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">576</literal> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>region_size</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>big_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>region_size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>k</name> <operator>-</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_short_region</name><parameter_list>(<parameter><decl><type><name>MPADecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GranuleDef</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>block_type</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate_index</name></name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>region_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">36</literal> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>region_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">72</literal> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate_index</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>region_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">36</literal> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate_index</name></name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>region_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">54</literal> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>region_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">108</literal> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>region_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">576</literal> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_long_region</name><parameter_list>(<parameter><decl><type><name>MPADecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GranuleDef</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>ra1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ra2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>region_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>band_index_long</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate_index</name></name></expr>]</index><index>[<expr><name>ra1</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>ra1</name> <operator>+</operator> <name>ra2</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>region_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>band_index_long</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate_index</name></name></expr>]</index><index>[ <expr><name>l</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_band_indexes</name><parameter_list>(<parameter><decl><type><name>MPADecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GranuleDef</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>block_type</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>switch_point</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate_index</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"switch point in 8khz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate_index</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>long_end</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>long_end</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>short_start</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>long_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>short_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>short_start</name></name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>long_end</name></name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>l1_unscale</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mant</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_factor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>, <decl><type ref="prev"/><name>mod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <name><name>scale_factor_modshift</name><index>[<expr><name>scale_factor</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mod</name> <operator>=</operator> <name>shift</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>MUL64</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>mant</name> <operator>+</operator> <operator>(</operator><operator>-</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>scale_factor_mult</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>mod</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>+</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>l2_unscale_group</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>steps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mant</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_factor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>, <decl><type ref="prev"/><name>mod</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <name><name>scale_factor_modshift</name><index>[<expr><name>scale_factor</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mod</name> <operator>=</operator> <name>shift</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>mant</name> <operator>-</operator> <operator>(</operator><name>steps</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>scale_factor_mult2</name><index>[<expr><name>steps</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>mod</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>l3_unscale</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exponent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>table_4_3_exp</name> <index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>value</name> <operator>+</operator> <operator>(</operator><name>exponent</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>table_4_3_value</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>value</name> <operator>+</operator> <operator>(</operator><name>exponent</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>-=</operator> <name>exponent</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>e</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"l3_unscale: e is %d\n"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;</operator> <operator>(</operator><name>SUINT</name><operator>)</operator><literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>m</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>e</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>e</name></expr>;</expr_stmt>

<return>return <expr><name>m</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>decode_init_static</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>, <decl><type ref="prev"/><name>mod</name></decl>;</decl_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <name>i</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mod</name> <operator>=</operator> <name>i</name> <operator>%</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scale_factor_modshift</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mod</name> <operator>|</operator> <operator>(</operator><name>shift</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>norm</name></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>norm</name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator> <operator>*</operator> <name>FRAC_ONE</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scale_factor_mult</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>MULLx</name><argument_list>(<argument><expr><name>norm</name></expr></argument>, <argument><expr><call><name>FIXR</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>*</operator> <literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FRAC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scale_factor_mult</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>MULLx</name><argument_list>(<argument><expr><name>norm</name></expr></argument>, <argument><expr><call><name>FIXR</name><argument_list>(<argument><expr><literal type="number">0.7937005259</literal> <operator>*</operator> <literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FRAC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scale_factor_mult</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>MULLx</name><argument_list>(<argument><expr><name>norm</name></expr></argument>, <argument><expr><call><name>FIXR</name><argument_list>(<argument><expr><literal type="number">0.6299605249</literal> <operator>*</operator> <literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FRAC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"%d: norm=%x s=%"</literal><name>PRIx32</name><literal type="string">" %"</literal><name>PRIx32</name><literal type="string">" %"</literal><name>PRIx32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>norm</name></expr></argument>,
<argument><expr><name><name>scale_factor_mult</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>scale_factor_mult</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>scale_factor_mult</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><call><name>RENAME</name><argument_list>(<argument><expr><name>ff_mpa_synth_init</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><call><name>RENAME</name><argument_list>(<argument><expr><name>ff_mpa_synth_window</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>HuffTable</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><operator>&amp;</operator><name><name>mpa_huff_tables</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xsize</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp_bits</name> <index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>tmp_codes</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>xsize</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>xsize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>xsize</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>xsize</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tmp_bits</name> <index>[<expr><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <name>y</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name><operator>&amp;&amp;</operator><name>y</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator></expr>]</index></name><operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>bits</name> <index>[<expr><name>j</name></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_codes</name><index>[<expr><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <name>y</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name><operator>&amp;&amp;</operator><name>y</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator></expr>]</index></name><operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>codes</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><name><name>huff_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <name>huff_vlc_tables</name><operator>+</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>huff_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name><name>huff_vlc_tables_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>huff_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>,
<argument><expr><name>tmp_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp_codes</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>huff_vlc_tables_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>offset</name> <operator>==</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>huff_vlc_tables</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>huff_quad_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <name>huff_quad_vlc_tables</name><operator>+</operator><name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>huff_quad_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name><name>huff_quad_vlc_tables_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>huff_quad_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">7</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,
<argument><expr><name><name>mpa_quad_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>mpa_quad_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>huff_quad_vlc_tables_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>offset</name> <operator>==</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>huff_quad_vlc_tables</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">22</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>band_index_long</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <name><name>band_size_long</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>band_index_long</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block></for>



<expr_stmt><expr><call><name>mpegaudio_tableinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ff_mpa_quant_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>-</operator><name><name>ff_mpa_quant_bits</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val1</name></decl>, <decl><type ref="prev"/><name>val2</name></decl>, <decl><type ref="prev"/><name>val3</name></decl>, <decl><type ref="prev"/><name>steps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>steps</name> <operator>=</operator> <name><name>ff_mpa_quant_steps</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>val1</name> <operator>=</operator> <name>val</name> <operator>%</operator> <name>steps</name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>/=</operator> <name>steps</name></expr>;</expr_stmt>
<expr_stmt><expr><name>val2</name> <operator>=</operator> <name>val</name> <operator>%</operator> <name>steps</name></expr>;</expr_stmt>
<expr_stmt><expr><name>val3</name> <operator>=</operator> <name>val</name> <operator>/</operator> <name>steps</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>division_tabs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>val1</name> <operator>+</operator> <operator>(</operator><name>val2</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>val3</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>v</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>tan</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>i</name> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <literal type="number">12.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>FIXR</name><argument_list>(<argument><expr><name>f</name> <operator>/</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>+</operator> <name>f</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>FIXR</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>is_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">6</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>is_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>is_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>exp2</name><argument_list>(<argument><expr><name>e</name> <operator>/</operator> <literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is_table_lsf</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FIXR</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>is_table_lsf</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr> ]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FIXR</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"is_table_lsf %d %d: %f %f\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <name><name>is_table_lsf</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <name><name>is_table_lsf</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>ci</name></decl>, <decl><type ref="prev"/><name>cs</name></decl>, <decl><type ref="prev"/><name>ca</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ci</name> <operator>=</operator> <name><name>ci_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>+</operator> <name>ci</name> <operator>*</operator> <name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ca</name> <operator>=</operator> <name>cs</name> <operator>*</operator> <name>ci</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>USE_FLOATS</name></expr></cpp:if>
<expr_stmt><expr><name><name>csa_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FIXHR</name><argument_list>(<argument><expr><name>cs</name><operator>/</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>csa_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>FIXHR</name><argument_list>(<argument><expr><name>ca</name><operator>/</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>csa_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>FIXHR</name><argument_list>(<argument><expr><name>ca</name><operator>/</operator><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>FIXHR</name><argument_list>(<argument><expr><name>cs</name><operator>/</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>csa_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>FIXHR</name><argument_list>(<argument><expr><name>ca</name><operator>/</operator><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>FIXHR</name><argument_list>(<argument><expr><name>cs</name><operator>/</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>csa_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>cs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>csa_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ca</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>csa_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ca</name> <operator>+</operator> <name>cs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>csa_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ca</name> <operator>-</operator> <name>cs</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FLOATS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type> <name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MPADecodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type> <name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialized_tables</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MPADecodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>initialized_tables</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>decode_init_static</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>initialized_tables</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FLOATS</name></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fdsp</name></name> <operator>=</operator> <call><name>avpriv_float_dsp_alloc</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fdsp</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ff_mpadsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mpadsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>request_sample_fmt</name></name> <operator>==</operator> <name>OUT_FMT</name> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_MP3ON4</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>OUT_FMT</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>OUT_FMT_P</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MP3ADU</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>adu_mode</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C3</name></cpp:macro> <cpp:value>FIXHR(0.86602540378443864676/2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C4</name></cpp:macro> <cpp:value>FIXHR(0.70710678118654752439/2)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C5</name></cpp:macro> <cpp:value>FIXHR(0.51763809020504152469/2)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C6</name></cpp:macro> <cpp:value>FIXHR(1.93185165257813657349/4)</cpp:value></cpp:define> 



<function><type><specifier>static</specifier> <name>void</name></type> <name>imdct12</name><parameter_list>(<parameter><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>SUINTFLOAT</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SUINTFLOAT</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>, <decl><type ref="prev"/><name>in4</name></decl>, <decl><type ref="prev"/><name>in5</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>in0</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>in1</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>in2</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>in3</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>in4</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>in5</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">5</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>in5</name> <operator>+=</operator> <name>in3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in3</name> <operator>+=</operator> <name>in1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in2</name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name>in2</name></expr></argument>, <argument><expr><name>C3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in3</name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name>in3</name></expr></argument>, <argument><expr><name>C3</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>in0</name> <operator>-</operator> <name>in4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name>in1</name> <operator>-</operator> <name>in5</name></expr></argument>, <argument><expr><name>C4</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator>
<name><name>out</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>t1</name> <operator>+</operator> <name>t2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name><name>out</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>t1</name> <operator>-</operator> <name>t2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in0</name> <operator>+=</operator> <call><name>SHR</name><argument_list>(<argument><expr><name>in4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in4</name> <operator>=</operator> <name>in0</name> <operator>+</operator> <name>in2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in5</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>in1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in1</name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name>in5</name> <operator>+</operator> <name>in3</name></expr></argument>, <argument><expr><name>C5</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator>
<name><name>out</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>in4</name> <operator>+</operator> <name>in1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>
<name><name>out</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>in4</name> <operator>-</operator> <name>in1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in0</name> <operator>-=</operator> <name>in2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in5</name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name>in5</name> <operator>-</operator> <name>in3</name></expr></argument>, <argument><expr><name>C6</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<name><name>out</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>in0</name> <operator>-</operator> <name>in5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator>
<name><name>out</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name>in0</name> <operator>+</operator> <name>in5</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>mp_decode_layer1</name><parameter_list>(<parameter><decl><type><name>MPADecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bound</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>mant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>allocation</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><name>SBLIMIT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>scale_factors</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><name>SBLIMIT</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MPA_JSTEREO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bound</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mode_ext</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bound</name> <operator>=</operator> <name>SBLIMIT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bound</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>allocation</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>bound</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SBLIMIT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>allocation</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bound</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>allocation</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>scale_factors</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>bound</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SBLIMIT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>allocation</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>scale_factors</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scale_factors</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bound</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>allocation</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mant</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>l1_unscale</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>mant</name></expr></argument>, <argument><expr><name><name>scale_factors</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>bound</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SBLIMIT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>allocation</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mant</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>l1_unscale</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>mant</name></expr></argument>, <argument><expr><name><name>scale_factors</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>l1_unscale</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>mant</name></expr></argument>, <argument><expr><name><name>scale_factors</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><literal type="number">12</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mp_decode_layer2</name><parameter_list>(<parameter><decl><type><name>MPADecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sblimit</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>alloc_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>table</name></decl>, <decl><type ref="prev"/><name>bit_alloc_bits</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>bound</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bit_alloc</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><name>SBLIMIT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>scale_code</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><name>SBLIMIT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>scale_factors</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><name>SBLIMIT</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scale</name></decl>, <decl><type ref="prev"/><name>qindex</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>, <decl><type ref="prev"/><name>steps</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>


<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>ff_mpa_l2_select_table</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lsf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sblimit</name> <operator>=</operator> <name><name>ff_mpa_sblimit_table</name><index>[<expr><name>table</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>alloc_table</name> <operator>=</operator> <name><name>ff_mpa_alloc_tables</name><index>[<expr><name>table</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MPA_JSTEREO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bound</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mode_ext</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bound</name> <operator>=</operator> <name>sblimit</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"bound=%d sblimit=%d\n"</literal></expr></argument>, <argument><expr><name>bound</name></expr></argument>, <argument><expr><name>sblimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>bound</name> <operator>&gt;</operator> <name>sblimit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bound</name> <operator>=</operator> <name>sblimit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bound</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bit_alloc_bits</name> <operator>=</operator> <name><name>alloc_table</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bit_alloc</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>bit_alloc_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit_alloc_bits</name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>bound</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sblimit</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bit_alloc_bits</name> <operator>=</operator> <name><name>alloc_table</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>bit_alloc_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bit_alloc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bit_alloc</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit_alloc_bits</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sblimit</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bit_alloc</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>scale_code</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sblimit</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>bit_alloc</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <name><name>scale_factors</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>scale_code</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>sf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>sf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>sf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name><name>sf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>l</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bound</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bit_alloc_bits</name> <operator>=</operator> <name><name>alloc_table</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>bit_alloc</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <name><name>scale_factors</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>qindex</name> <operator>=</operator> <name><name>alloc_table</name><index>[<expr><name>j</name><operator>+</operator><name>b</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>ff_mpa_quant_bits</name><index>[<expr><name>qindex</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>-</operator><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> <operator>=</operator> <name><name>division_tabs</name><index>[<expr><name>qindex</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>steps</name> <operator>=</operator> <name><name>ff_mpa_quant_steps</name><index>[<expr><name>qindex</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>l2_unscale_group</name><argument_list>(<argument><expr><name>steps</name></expr></argument>, <argument><expr><name>v2</name> <operator>&amp;</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>l2_unscale_group</name><argument_list>(<argument><expr><name>steps</name></expr></argument>, <argument><expr><operator>(</operator><name>v2</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>l2_unscale_group</name><argument_list>(<argument><expr><name>steps</name></expr></argument>, <argument><expr><name>v2</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument> , <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>l1_unscale</name><argument_list>(<argument><expr><name>bits</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <name>m</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit_alloc_bits</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>bound</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sblimit</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>bit_alloc_bits</name> <operator>=</operator> <name><name>alloc_table</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>bit_alloc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mant</name></decl>, <decl><type ref="prev"/><name>scale0</name></decl>, <decl><type ref="prev"/><name>scale1</name></decl>;</decl_stmt>
<expr_stmt><expr><name>scale0</name> <operator>=</operator> <name><name>scale_factors</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>scale1</name> <operator>=</operator> <name><name>scale_factors</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>qindex</name> <operator>=</operator> <name><name>alloc_table</name><index>[<expr><name>j</name><operator>+</operator><name>b</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>ff_mpa_quant_bits</name><index>[<expr><name>qindex</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>-</operator><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>steps</name> <operator>=</operator> <name><name>ff_mpa_quant_steps</name><index>[<expr><name>qindex</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mant</name> <operator>=</operator> <name>v</name> <operator>%</operator> <name>steps</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>/</operator> <name>steps</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>l2_unscale_group</name><argument_list>(<argument><expr><name>steps</name></expr></argument>, <argument><expr><name>mant</name></expr></argument>, <argument><expr><name>scale0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>l2_unscale_group</name><argument_list>(<argument><expr><name>steps</name></expr></argument>, <argument><expr><name>mant</name></expr></argument>, <argument><expr><name>scale1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mant</name> <operator>=</operator> <name>v</name> <operator>%</operator> <name>steps</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>/</operator> <name>steps</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>l2_unscale_group</name><argument_list>(<argument><expr><name>steps</name></expr></argument>, <argument><expr><name>mant</name></expr></argument>, <argument><expr><name>scale0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>l2_unscale_group</name><argument_list>(<argument><expr><name>steps</name></expr></argument>, <argument><expr><name>mant</name></expr></argument>, <argument><expr><name>scale1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>l2_unscale_group</name><argument_list>(<argument><expr><name>steps</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>scale0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>l2_unscale_group</name><argument_list>(<argument><expr><name>steps</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>scale1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>mant</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <name>m</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>l1_unscale</name><argument_list>(<argument><expr><name>bits</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mant</name></expr></argument>, <argument><expr><name>scale0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <name>m</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>l1_unscale</name><argument_list>(<argument><expr><name>bits</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mant</name></expr></argument>, <argument><expr><name>scale1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit_alloc_bits</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>sblimit</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SBLIMIT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">12</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPLIT</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>,<parameter><type><name>sf</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (n == 3) { int m = (sf * 171) &gt;&gt; 9; dst = sf - 3 * m; sf = m; } else if (n == 4) { dst = sf &amp; 3; sf &gt;&gt;= 2; } else if (n == 5) { int m = (sf * 205) &gt;&gt; 10; dst = sf - 5 * m; sf = m; } else if (n == 6) { int m = (sf * 171) &gt;&gt; 10; dst = sf - 6 * m; sf = m; } else { dst = 0; }</cpp:value></cpp:define>



















<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>lsf_sf_expand</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>slen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>n3</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>SPLIT</name><argument_list>(<argument>slen[<literal type="number">3</literal>]</argument>, <argument>sf</argument>, <argument>n3</argument>)</argument_list></macro>
<macro><name>SPLIT</name><argument_list>(<argument>slen[<literal type="number">2</literal>]</argument>, <argument>sf</argument>, <argument>n2</argument>)</argument_list></macro>
<macro><name>SPLIT</name><argument_list>(<argument>slen[<literal type="number">1</literal>]</argument>, <argument>sf</argument>, <argument>n1</argument>)</argument_list></macro>
<expr_stmt><expr><name><name>slen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sf</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>exponents_from_scale_factors</name><parameter_list>(<parameter><decl><type><name>MPADecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GranuleDef</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>exponents</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bstab</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pretab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>v0</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>, <decl><type ref="prev"/><name>gain</name></decl>, <decl><type ref="prev"/><name><name>gains</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>exp_ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>exp_ptr</name> <operator>=</operator> <name>exponents</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gain</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>global_gain</name></name> <operator>-</operator> <literal type="number">210</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>scalefac_scale</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bstab</name> <operator>=</operator> <name><name>band_size_long</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate_index</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pretab</name> <operator>=</operator> <name><name>mpa_pretab</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>preflag</name></name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>long_end</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v0</name> <operator>=</operator> <name>gain</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>scale_factors</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>pretab</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>+</operator> <literal type="number">400</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>bstab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>len</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>exp_ptr</name><operator>++</operator> <operator>=</operator> <name>v0</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>short_start</name></name> <operator>&lt;</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bstab</name> <operator>=</operator> <name><name>band_size_short</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate_index</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gains</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>gain</name> <operator>-</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>subblock_gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gains</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>gain</name> <operator>-</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>subblock_gain</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gains</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>gain</name> <operator>-</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>subblock_gain</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>long_end</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>short_start</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>bstab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v0</name> <operator>=</operator> <name><name>gains</name><index>[<expr><name>l</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>scale_factors</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>+</operator> <literal type="number">400</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>len</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>exp_ptr</name><operator>++</operator> <operator>=</operator> <name>v0</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>switch_buffer</name><parameter_list>(<parameter><decl><type><name>MPADecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>end_pos</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>end_pos2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in_gb</name><operator>.</operator><name>buffer</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pos</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>gb</name><operator>.</operator><name>size_in_bits</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>extrasize</name></name> <operator>*</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gb</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>in_gb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_gb</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>extrasize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>*</operator><name>pos</name> <operator>-</operator> <operator>*</operator><name>end_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>end_pos2</name> <operator>=</operator>
<operator>*</operator><name>end_pos</name> <operator>=</operator> <operator>*</operator><name>end_pos2</name> <operator>+</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FLOATS</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_FLIP_SIGN</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>,<parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v = AV_RN32A(src) ^ (get_bits1(&amp;s-&gt;gb) &lt;&lt; 31); AV_WN32A(dst, v);</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_FLIP_SIGN</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>,<parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v = -get_bits1(&amp;s-&gt;gb); *(dst) = (*(src) ^ v) - v;</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>huffman_decode</name><parameter_list>(<parameter><decl><type><name>MPADecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GranuleDef</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>exponents</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_pos2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_pos</name></decl>, <decl><type ref="prev"/><name>bits_left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end_pos</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>end_pos2</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>gb</name><operator>.</operator><name>size_in_bits</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>extrasize</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>s_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>linbits</name></decl>;</decl_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>region_size</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>table_select</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>mpa_huff_data</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>linbits</name> <operator>=</operator> <name><name>mpa_huff_data</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vlc</name> <operator>=</operator> <operator>&amp;</operator><name><name>huff_vlc</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>l</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name><index>[<expr><name>s_index</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s_index</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>j</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>exponent</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name>end_pos</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>switch_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_pos2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name>end_pos</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name><index>[<expr><name>s_index</name></expr> ]</index></name> <operator>=</operator>
<name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name><index>[<expr><name>s_index</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s_index</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>exponent</name><operator>=</operator> <name><name>exponents</name><index>[<expr><name>s_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"region=%d n=%d y=%d exp=%d\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>region_size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>j</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>exponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&amp;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<macro><name>READ_FLIP_SIGN</name><argument_list>(<argument>g-&gt;sb_hybrid + s_index</argument>, <argument>RENAME(expval_table)[exponent] + x</argument>)</argument_list></macro>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>get_bitsz</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>linbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>l3_unscale</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>exponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>-</operator><name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name><index>[<expr><name>s_index</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<macro><name>READ_FLIP_SIGN</name><argument_list>(<argument>g-&gt;sb_hybrid + s_index + <literal type="number">1</literal></argument>, <argument>RENAME(expval_table)[exponent] + y</argument>)</argument_list></macro>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <call><name>get_bitsz</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>linbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>l3_unscale</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>exponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>-</operator><name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name><index>[<expr><name>s_index</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<macro><name>READ_FLIP_SIGN</name><argument_list>(<argument>g-&gt;sb_hybrid + s_index + !!y</argument>, <argument>RENAME(expval_table)[exponent] + x</argument>)</argument_list></macro>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <call><name>get_bitsz</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>linbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>l3_unscale</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>exponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>-</operator><name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name><index>[<expr><name>s_index</name><operator>+</operator><operator>!</operator><operator>!</operator><name>y</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name><index>[<expr><name>s_index</name> <operator>+</operator> <operator>!</operator><name>y</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>s_index</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><name>vlc</name> <operator>=</operator> <operator>&amp;</operator><name><name>huff_quad_vlc</name><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>count1table_select</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s_index</name> <operator>&lt;=</operator> <literal type="number">572</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>code</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name>end_pos</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <name>end_pos2</name> <operator>&amp;&amp;</operator> <name>last_pos</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>s_index</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>last_pos</name> <operator>-</operator> <name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"overread, skip %d enddists: %d %d\n"</literal></expr></argument>, <argument><expr><name>last_pos</name> <operator>-</operator> <name>pos</name></expr></argument>, <argument><expr><name>end_pos</name><operator>-</operator><name>pos</name></expr></argument>, <argument><expr><name>end_pos2</name><operator>-</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_EF_BITSTREAM</name><operator>|</operator><name>AV_EF_COMPLIANT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s_index</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>switch_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_pos2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name>end_pos</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>last_pos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"t=%d code=%d\n"</literal></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>count1table_select</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name><index>[<expr><name>s_index</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name><index>[<expr><name>s_index</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name><index>[<expr><name>s_index</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>
<name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name><index>[<expr><name>s_index</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>idxtab</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name>s_index</name> <operator>+</operator> <name><name>idxtab</name><index>[<expr><name>code</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>code</name> <operator>^=</operator> <literal type="number">8</literal> <operator>&gt;&gt;</operator> <name><name>idxtab</name><index>[<expr><name>code</name></expr>]</index></name></expr>;</expr_stmt>
<macro><name>READ_FLIP_SIGN</name><argument_list>(<argument>g-&gt;sb_hybrid + pos</argument>, <argument>RENAME(exp_table)+exponents[pos]</argument>)</argument_list></macro>
</block_content>}</block></while>
<expr_stmt><expr><name>s_index</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>bits_left</name> <operator>=</operator> <name>end_pos2</name> <operator>-</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bits_left</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_EF_BUFFER</name><operator>|</operator><name>AV_EF_COMPLIANT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"bits_left=%d\n"</literal></expr></argument>, <argument><expr><name>bits_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s_index</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bits_left</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_EF_BUFFER</name><operator>|</operator><name>AV_EF_AGGRESSIVE</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"bits_left=%d\n"</literal></expr></argument>, <argument><expr><name>bits_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name><index>[<expr><name>s_index</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><literal type="number">576</literal> <operator>-</operator> <name>s_index</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>bits_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>switch_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_pos2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>reorder_block</name><parameter_list>(<parameter><decl><type><name>MPADecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GranuleDef</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name><name>tmp</name><index>[<expr><literal type="number">576</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>block_type</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>switch_point</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate_index</name></name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name></name> <operator>+</operator> <literal type="number">36</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name></name> <operator>+</operator> <literal type="number">72</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>short_start</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>band_size_short</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate_index</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>len</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>len</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>len</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>len</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ptr1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISQRT2</name></cpp:macro> <cpp:value>FIXR(0.70710678118654752440)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_stereo</name><parameter_list>(<parameter><decl><type><name>MPADecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GranuleDef</name> <modifier>*</modifier></type><name>g0</name></decl></parameter>, <parameter><decl><type><name>GranuleDef</name> <modifier>*</modifier></type><name>g1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sf_max</name></decl>, <decl><type ref="prev"/><name>sf</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>non_zero_found</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>is_tab</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal></expr>]</index></expr><operator>,</operator> <expr><operator>*</operator><name>tab0</name></expr><operator>,</operator> <expr><operator>*</operator><name>tab1</name></expr><operator>,</operator> <expr><name>v1</name></expr><operator>,</operator> <expr><name>v2</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>SUINTFLOAT</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>non_zero_found_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode_ext</name></name> <operator>&amp;</operator> <name>MODE_EXT_I_STEREO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>lsf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>is_tab</name> <operator>=</operator> <name>is_table</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sf_max</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>is_tab</name> <operator>=</operator> <name><name>is_table_lsf</name><index>[<expr><name><name>g1</name><operator>-&gt;</operator><name>scalefac_compress</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sf_max</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>tab0</name> <operator>=</operator> <name><name>g0</name><operator>-&gt;</operator><name>sb_hybrid</name></name> <operator>+</operator> <literal type="number">576</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tab1</name> <operator>=</operator> <name><name>g1</name><operator>-&gt;</operator><name>sb_hybrid</name></name> <operator>+</operator> <literal type="number">576</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>non_zero_found_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>non_zero_found_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>non_zero_found_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><literal type="number">13</literal> <operator>-</operator> <name><name>g1</name><operator>-&gt;</operator><name>short_start</name></name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name><name>g1</name><operator>-&gt;</operator><name>long_end</name></name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">12</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name><name>g1</name><operator>-&gt;</operator><name>short_start</name></name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>band_size_short</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate_index</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>l</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>l</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tab0</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tab1</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>non_zero_found_short</name><index>[<expr><name>l</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tab1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>non_zero_found_short</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>found1</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <name><name>g1</name><operator>-&gt;</operator><name>scale_factors</name><index>[<expr><name>k</name> <operator>+</operator> <name>l</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sf</name> <operator>&gt;=</operator> <name>sf_max</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>found1</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v1</name> <operator>=</operator> <name><name>is_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>sf</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> <operator>=</operator> <name><name>is_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>sf</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name><name>tab0</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tab0</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>MULLx</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>FRAC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tab1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>MULLx</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>FRAC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<label><name>found1</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode_ext</name></name> <operator>&amp;</operator> <name>MODE_EXT_MS_STEREO</name></expr>)</condition> <block>{<block_content>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name><name>tab0</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>tab1</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tab0</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>MULLx</name><argument_list>(<argument><expr><name>tmp0</name> <operator>+</operator> <name>tmp1</name></expr></argument>, <argument><expr><name>ISQRT2</name></expr></argument>, <argument><expr><name>FRAC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tab1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>MULLx</name><argument_list>(<argument><expr><name>tmp0</name> <operator>-</operator> <name>tmp1</name></expr></argument>, <argument><expr><name>ISQRT2</name></expr></argument>, <argument><expr><name>FRAC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>non_zero_found</name> <operator>=</operator> <name><name>non_zero_found_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator>
<name><name>non_zero_found_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator>
<name><name>non_zero_found_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>g1</name><operator>-&gt;</operator><name>long_end</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init><condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>band_size_long</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate_index</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tab0</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tab1</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>non_zero_found</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tab1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>non_zero_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>found2</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">21</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">20</literal></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <name><name>g1</name><operator>-&gt;</operator><name>scale_factors</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sf</name> <operator>&gt;=</operator> <name>sf_max</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>found2</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>v1</name> <operator>=</operator> <name><name>is_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>sf</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> <operator>=</operator> <name><name>is_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>sf</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name><name>tab0</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tab0</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>MULLx</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>FRAC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tab1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>MULLx</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>FRAC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<label><name>found2</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode_ext</name></name> <operator>&amp;</operator> <name>MODE_EXT_MS_STEREO</name></expr>)</condition> <block>{<block_content>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name><name>tab0</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>tab1</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tab0</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>MULLx</name><argument_list>(<argument><expr><name>tmp0</name> <operator>+</operator> <name>tmp1</name></expr></argument>, <argument><expr><name>ISQRT2</name></expr></argument>, <argument><expr><name>FRAC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tab1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>MULLx</name><argument_list>(<argument><expr><name>tmp0</name> <operator>-</operator> <name>tmp1</name></expr></argument>, <argument><expr><name>ISQRT2</name></expr></argument>, <argument><expr><name>FRAC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode_ext</name></name> <operator>&amp;</operator> <name>MODE_EXT_MS_STEREO</name></expr>)</condition> <block>{<block_content>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FLOATS</name></expr></cpp:if>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>butterflies_float</name></name><argument_list>(<argument><expr><name><name>g0</name><operator>-&gt;</operator><name>sb_hybrid</name></name></expr></argument>, <argument><expr><name><name>g1</name><operator>-&gt;</operator><name>sb_hybrid</name></name></expr></argument>, <argument><expr><literal type="number">576</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>tab0</name> <operator>=</operator> <name><name>g0</name><operator>-&gt;</operator><name>sb_hybrid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tab1</name> <operator>=</operator> <name><name>g1</name><operator>-&gt;</operator><name>sb_hybrid</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">576</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name><name>tab0</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>tab1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tab0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp0</name> <operator>+</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tab1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp0</name> <operator>-</operator> <name>tmp1</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FLOATS</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MIPSFPU</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mips/compute_antialias_float.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MIPSDSP</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mips/compute_antialias_fixed.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>compute_antialias</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FLOATS</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AA</name><parameter_list>(<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { float tmp0 = ptr[-1-j]; float tmp1 = ptr[ j]; ptr[-1-j] = tmp0 * csa_table[j][0] - tmp1 * csa_table[j][1]; ptr[ j] = tmp0 * csa_table[j][1] + tmp1 * csa_table[j][0]; } while (0)</cpp:value></cpp:define>





<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AA</name><parameter_list>(<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { SUINT tmp0 = ptr[-1-j]; SUINT tmp1 = ptr[ j]; SUINT tmp2 = MULH(tmp0 + tmp1, csa_table[j][0]); ptr[-1-j] = 4 * (tmp2 - MULH(tmp1, csa_table[j][2])); ptr[ j] = 4 * (tmp2 + MULH(tmp0, csa_table[j][3])); } while (0)</cpp:value></cpp:define>






<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_antialias</name><parameter_list>(<parameter><decl><type><name>MPADecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GranuleDef</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>block_type</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>switch_point</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>SBLIMIT</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name></name> <operator>+</operator> <literal type="number">18</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>AA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AA</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AA</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AA</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AA</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AA</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AA</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AA</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">18</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_imdct</name><parameter_list>(<parameter><decl><type><name>MPADecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GranuleDef</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,
<parameter><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>sb_samples</name></decl></parameter>, <parameter><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>mdct_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>win</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INTFLOAT</name></type> <name><name>out2</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>mdct_long_end</name></decl>, <decl><type ref="prev"/><name>sblimit</name></decl>;</decl_stmt>


<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name></name> <operator>+</operator> <literal type="number">576</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">18</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ptr</name> <operator>&gt;=</operator> <name>ptr1</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ptr</name> <operator>-=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>ptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>sblimit</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name></name><operator>)</operator> <operator>/</operator> <literal type="number">18</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>block_type</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>switch_point</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mdct_long_end</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mdct_long_end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>mdct_long_end</name> <operator>=</operator> <name>sblimit</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<function_decl><type><name><name>s</name><operator>-&gt;</operator><name>mpadsp</name><operator>.</operator><name>RENAME</name></name></type>(<name>imdct36_blocks</name>)<parameter_list>(<parameter><decl><type><name>sb_samples</name></type></decl></parameter>, <parameter><decl><type><name>mdct_buf</name></type></decl></parameter>, <parameter><decl><type><name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name></name></type></decl></parameter>,
<parameter><decl><type><name>mdct_long_end</name></type></decl></parameter>, <parameter><decl><type><name><name>g</name><operator>-&gt;</operator><name>switch_point</name></name></type></decl></parameter>,
<parameter><decl><type><name><name>g</name><operator>-&gt;</operator><name>block_type</name></name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>mdct_buf</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">18</literal><operator>*</operator><operator>(</operator><name>mdct_long_end</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>mdct_long_end</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name></name> <operator>+</operator> <literal type="number">18</literal> <operator>*</operator> <name>mdct_long_end</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>mdct_long_end</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>sblimit</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>win</name> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>ff_mdct_win</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>&amp;</operator> <operator>-</operator><operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>out_ptr</name> <operator>=</operator> <name>sb_samples</name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_ptr</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_ptr</name> <operator>+=</operator> <name>SBLIMIT</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>imdct12</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_ptr</name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name><name>out2</name><index>[<expr><name>i</name></expr> ]</index></name></expr></argument>, <argument><expr><name><name>win</name><index>[<expr><name>i</name></expr> ]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name><name>out2</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>win</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out_ptr</name> <operator>+=</operator> <name>SBLIMIT</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>imdct12</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_ptr</name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name><name>out2</name><index>[<expr><name>i</name></expr> ]</index></name></expr></argument>, <argument><expr><name><name>win</name><index>[<expr><name>i</name></expr> ]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><literal type="number">0</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name><name>out2</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>win</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out_ptr</name> <operator>+=</operator> <name>SBLIMIT</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>imdct12</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><literal type="number">0</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name><name>out2</name><index>[<expr><name>i</name></expr> ]</index></name></expr></argument>, <argument><expr><name><name>win</name><index>[<expr><name>i</name></expr> ]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><literal type="number">0</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name><name>out2</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>win</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">18</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>j</name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">4</literal><operator>*</operator><literal type="number">18</literal><operator>-</operator><literal type="number">3</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>sblimit</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SBLIMIT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>out_ptr</name> <operator>=</operator> <name>sb_samples</name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">18</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>out_ptr</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out_ptr</name> <operator>+=</operator> <name>SBLIMIT</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>j</name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">4</literal><operator>*</operator><literal type="number">18</literal><operator>-</operator><literal type="number">3</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>mp_decode_layer3</name><parameter_list>(<parameter><decl><type><name>MPADecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nb_granules</name></decl>, <decl><type ref="prev"/><name>main_data_begin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gr</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>blocksplit_flag</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>bits_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GranuleDef</name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>exponents</name><index>[<expr><literal type="number">576</literal></expr>]</index></name></decl>;</decl_stmt> 


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lsf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>main_data_begin</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_granules</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>main_data_begin</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>nb_granules</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>granules</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scfsi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>granules</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scfsi</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>gr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>gr</name> <operator>&lt;</operator> <name>nb_granules</name></expr>;</condition> <incr><expr><name>gr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"gr=%d ch=%d: side_info\n"</literal></expr></argument>, <argument><expr><name>gr</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>granules</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>gr</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>part2_3_length</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>big_values</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>big_values</name></name> <operator>&gt;</operator> <literal type="number">288</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"big_values too big\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>global_gain</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mode_ext</name></name> <operator>&amp;</operator> <operator>(</operator><name>MODE_EXT_MS_STEREO</name> <operator>|</operator> <name>MODE_EXT_I_STEREO</name><operator>)</operator><operator>)</operator> <operator>==</operator>
<name>MODE_EXT_MS_STEREO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>global_gain</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lsf</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>scalefac_compress</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>scalefac_compress</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>blocksplit_flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>blocksplit_flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>block_type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>block_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid block type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>switch_point</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>table_select</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>subblock_gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>init_short_region</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>region_address1</name></decl>, <decl><type ref="prev"/><name>region_address2</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>block_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>switch_point</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>table_select</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>region_address1</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>region_address2</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"region1=%d region2=%d\n"</literal></expr></argument>,
<argument><expr><name>region_address1</name></expr></argument>, <argument><expr><name>region_address2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_long_region</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>region_address1</name></expr></argument>, <argument><expr><name>region_address2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>region_offset2size</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compute_band_indexes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>preflag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>lsf</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>preflag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>scalefac_scale</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>count1table_select</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"block_type=%d switch_point=%d\n"</literal></expr></argument>,
<argument><expr><name><name>g</name><operator>-&gt;</operator><name>block_type</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>switch_point</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>adu_mode</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>skip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>gb</name><operator>.</operator><name>buffer</name></name> <operator>+</operator> <operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>extrasize</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>extrasize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LAST_BUF_SIZE</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>last_buf_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"seekback:%d, lastbuf:%d\n"</literal></expr></argument>,
<argument><expr><name>main_data_begin</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_buf</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>last_buf_size</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>extrasize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_gb</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>last_buf_size</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>extrasize</name></name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_buf_size</name></name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>gr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>gr</name> <operator>&lt;</operator> <name>nb_granules</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>last_buf_size</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;</operator> <name>main_data_begin</name></expr>;</condition> <incr><expr><name>gr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>granules</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>gr</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_buf_size</name></name> <operator>+=</operator> <name><name>g</name><operator>-&gt;</operator><name>part2_3_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>sb_hybrid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compute_imdct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">18</literal> <operator>*</operator> <name>gr</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mdct_buf</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name>skip</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_buf_size</name></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <name>main_data_begin</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>skip</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>gb</name><operator>.</operator><name>size_in_bits</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>extrasize</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>in_gb</name><operator>.</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>in_gb</name></name></expr></argument>, <argument><expr><name>skip</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>gb</name><operator>.</operator><name>size_in_bits</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>extrasize</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gb</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>in_gb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_gb</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>extrasize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>gr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>extrasize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>gr</name> <operator>&lt;</operator> <name>nb_granules</name></expr>;</condition> <incr><expr><name>gr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>granules</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>gr</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits_pos</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>lsf</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slen</name></decl>, <decl><type ref="prev"/><name>slen1</name></decl>, <decl><type ref="prev"/><name>slen2</name></decl>;</decl_stmt>


<expr_stmt><expr><name>slen1</name> <operator>=</operator> <name><name>slen_table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>scalefac_compress</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>slen2</name> <operator>=</operator> <name><name>slen_table</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>g</name><operator>-&gt;</operator><name>scalefac_compress</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"slen1=%d slen2=%d\n"</literal></expr></argument>, <argument><expr><name>slen1</name></expr></argument>, <argument><expr><name>slen2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>block_type</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><name><name>g</name><operator>-&gt;</operator><name>switch_point</name></name></expr> ?</condition><then> <expr><literal type="number">17</literal></expr> </then><else>: <expr><literal type="number">18</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slen1</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>scale_factors</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>slen1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>scale_factors</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>slen2</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">18</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>scale_factors</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>slen2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>scale_factors</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">21</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>scale_factors</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>sc</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>granules</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scale_factors</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>scfsi</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x8</literal> <operator>&gt;&gt;</operator> <name>k</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>slen1</name></expr> </then><else>: <expr><name>slen2</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slen</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>scale_factors</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>scale_factors</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>scale_factors</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sc</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>scale_factors</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tindex</name></decl>, <decl><type ref="prev"/><name>tindex2</name></decl>, <decl><type ref="prev"/><name><name>slen</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>sl</name></decl>, <decl><type ref="prev"/><name>sf</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>block_type</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tindex</name> <operator>=</operator> <ternary><condition><expr><name><name>g</name><operator>-&gt;</operator><name>switch_point</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tindex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>sf</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>scalefac_compress</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mode_ext</name></name> <operator>&amp;</operator> <name>MODE_EXT_I_STEREO</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sf</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sf</name> <operator>&lt;</operator> <literal type="number">180</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lsf_sf_expand</name><argument_list>(<argument><expr><name>slen</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tindex2</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sf</name> <operator>&lt;</operator> <literal type="number">244</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lsf_sf_expand</name><argument_list>(<argument><expr><name>slen</name></expr></argument>, <argument><expr><name>sf</name> <operator>-</operator> <literal type="number">180</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tindex2</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lsf_sf_expand</name><argument_list>(<argument><expr><name>slen</name></expr></argument>, <argument><expr><name>sf</name> <operator>-</operator> <literal type="number">244</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tindex2</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sf</name> <operator>&lt;</operator> <literal type="number">400</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lsf_sf_expand</name><argument_list>(<argument><expr><name>slen</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tindex2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sf</name> <operator>&lt;</operator> <literal type="number">500</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>lsf_sf_expand</name><argument_list>(<argument><expr><name>slen</name></expr></argument>, <argument><expr><name>sf</name> <operator>-</operator> <literal type="number">400</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tindex2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>lsf_sf_expand</name><argument_list>(<argument><expr><name>slen</name></expr></argument>, <argument><expr><name>sf</name> <operator>-</operator> <literal type="number">500</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tindex2</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>preflag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>lsf_nsf_table</name><index>[<expr><name>tindex2</name></expr>]</index><index>[<expr><name>tindex</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sl</name> <operator>=</operator> <name><name>slen</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sl</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>scale_factors</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>scale_factors</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">40</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>scale_factors</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>exponents_from_scale_factors</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>exponents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>huffman_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>exponents</name></expr></argument>, <argument><expr><name>bits_pos</name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>part2_3_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MPA_JSTEREO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>compute_stereo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>granules</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>gr</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>granules</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>gr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>granules</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>gr</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reorder_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compute_antialias</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compute_imdct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">18</literal> <operator>*</operator> <name>gr</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mdct_buf</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for> 
<if_stmt><if>if <condition>(<expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>-</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>nb_granules</name> <operator>*</operator> <literal type="number">18</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mp_decode_frame</name><parameter_list>(<parameter><decl><type><name>MPADecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>OUT_INT</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nb_frames</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OUT_INT</name> <modifier>*</modifier></type><name>samples_ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>HEADER_SIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>buf_size</name> <operator>-</operator> <name>HEADER_SIZE</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>error_protection</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>layer</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <literal type="number">384</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_frames</name> <operator>=</operator> <call><name>mp_decode_layer1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <literal type="number">1152</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nb_frames</name> <operator>=</operator> <call><name>mp_decode_layer2</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>lsf</name></name></expr> ?</condition><then> <expr><literal type="number">576</literal></expr> </then><else>: <expr><literal type="number">1152</literal></expr></else></ternary></expr>;</expr_stmt>
<default>default:</default>
<expr_stmt><expr><name>nb_frames</name> <operator>=</operator> <call><name>mp_decode_layer3</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_buf_size</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>in_gb</name><operator>.</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>extrasize</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>BACKSTEP_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_buf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>gb</name><operator>.</operator><name>buffer</name></name> <operator>+</operator> <operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_buf_size</name></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid old backstep %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gb</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>in_gb</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>in_gb</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>extrasize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>extrasize</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>i</name></expr></argument> &gt;</argument_list></name> <name>BACKSTEP_SIZE</name> <operator>||</operator> <name>nb_frames</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid new backstep %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>BACKSTEP_SIZE</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <name>HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;=</operator> <name>buf_size</name> <operator>-</operator> <name>HEADER_SIZE</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_buf</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>last_buf_size</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>gb</name><operator>.</operator><name>buffer</name></name> <operator>+</operator> <name>buf_size</name> <operator>-</operator> <name>HEADER_SIZE</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_buf_size</name></name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>nb_frames</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nb_frames</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>samples</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>samples</name> <operator>=</operator> <operator>(</operator><name>OUT_INT</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sample_stride</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>==</operator> <name>OUT_FMT_P</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>samples_ptr</name> <operator>=</operator> <name><name>samples</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sample_stride</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>samples_ptr</name> <operator>=</operator> <name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sample_stride</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_frames</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><call><name>RENAME</name><argument_list>(<argument><expr><name>ff_mpa_synth_filter</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mpadsp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>synth_buf</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>synth_buf_offset</name><index>[<expr><name>ch</name></expr>]</index></name><operator>)</operator></expr></argument>,
<argument><expr><call><name>RENAME</name><argument_list>(<argument><expr><name>ff_mpa_synth_window</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dither_state</name></name></expr></argument>, <argument><expr><name>samples_ptr</name></expr></argument>,
<argument><expr><name>sample_stride</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>samples_ptr</name> <operator>+=</operator> <literal type="number">32</literal> <operator>*</operator> <name>sample_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><name>nb_frames</name> <operator>*</operator> <literal type="number">32</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OUT_INT</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type> <name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MPADecodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skipped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>buf_size</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>buf</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>skipped</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name>HEADER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>header</name><operator>&gt;&gt;</operator><literal type="number">8</literal> <operator>==</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><literal type="string">"TAG"</literal></expr></argument>)</argument_list></call><operator>&gt;&gt;</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"discarding ID3 tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buf_size</name> <operator>+</operator> <name>skipped</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avpriv_mpegaudio_decode_header</name><argument_list>(<argument><expr><operator>(</operator><name>MPADecodeHeader</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Header missing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>AV_CH_LAYOUT_MONO</name></expr> </then><else>: <expr><name>AV_CH_LAYOUT_STEREO</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"incomplete frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&lt;</operator> <name>buf_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"incorrect frame size - multiple frames in buffer?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mp_decode_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error while decoding MPEG audio frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>==</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <name>ret</name> <operator>!=</operator> <name>AVERROR_INVALIDDATA</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>buf_size</name> <operator>+</operator> <name>skipped</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mp_flush</name><parameter_list>(<parameter><decl><type><name>MPADecodeContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>synth_buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>synth_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mdct_buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mdct_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>last_buf_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dither_state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>mp_flush</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MP3ADU_DECODER</name> <operator>||</operator> <name>CONFIG_MP3ADUFLOAT_DECODER</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame_adu</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MPADecodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>out_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name>HEADER_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Packet is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>MPA_MAX_CODED_FRAME_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>MPA_MAX_CODED_FRAME_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">0xffe00000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avpriv_mpegaudio_decode_header</name><argument_list>(<argument><expr><operator>(</operator><name>MPADecodeHeader</name> <operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid frame header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>AV_CH_LAYOUT_MONO</name></expr> </then><else>: <expr><name>AV_CH_LAYOUT_STEREO</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mp_decode_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error while decoding MPEG audio frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MP3ON4_DECODER</name> <operator>||</operator> <name>CONFIG_MP3ON4FLOAT_DECODER</name></expr></cpp:if>




<typedef>typedef <type><struct>struct <name>MP3On4DecodeContext</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>frames</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>syncword</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>coff</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>MPADecodeContext</name> <modifier>*</modifier></type><name><name>mp3decctx</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>MP3On4DecodeContext</name>;</typedef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg4audio.h"</cpp:file></cpp:include>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>mp3Frames</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>chan_offset</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, 
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, 
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>chan_layout</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>,
<expr><name>AV_CH_LAYOUT_MONO</name></expr>,
<expr><name>AV_CH_LAYOUT_STEREO</name></expr>,
<expr><name>AV_CH_LAYOUT_SURROUND</name></expr>,
<expr><name>AV_CH_LAYOUT_4POINT0</name></expr>,
<expr><name>AV_CH_LAYOUT_5POINT0</name></expr>,
<expr><name>AV_CH_LAYOUT_5POINT1</name></expr>,
<expr><name>AV_CH_LAYOUT_7POINT1</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_close_mp3on4</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type> <name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MP3On4DecodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mp3decctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mp3decctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>fdsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>frames</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mp3decctx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_init_mp3on4</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type> <name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MP3On4DecodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MPEG4AudioConfig</name></type> <name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Codec extradata missing or too short.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>avpriv_mpeg4audio_get_config2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cfg</name><operator>.</operator><name>chan_config</name></name> <operator>||</operator> <name><name>cfg</name><operator>.</operator><name>chan_config</name></name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid channel config number.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frames</name></name> <operator>=</operator> <name><name>mp3Frames</name><index>[<expr><name><name>cfg</name><operator>.</operator><name>chan_config</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coff</name></name> <operator>=</operator> <name><name>chan_offset</name><index>[<expr><name><name>cfg</name><operator>.</operator><name>chan_config</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>ff_mpeg4audio_channels</name><index>[<expr><name><name>cfg</name><operator>.</operator><name>chan_config</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>chan_layout</name><index>[<expr><name><name>cfg</name><operator>.</operator><name>chan_config</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfg</name><operator>.</operator><name>sample_rate</name></name> <operator>&lt;</operator> <literal type="number">16000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>syncword</name></name> <operator>=</operator> <literal type="number">0xffe00000</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>syncword</name></name> <operator>=</operator> <literal type="number">0xfff00000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>







<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mp3decctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MPADecodeContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mp3decctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>alloc_fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mp3decctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decode_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mp3decctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>adu_mode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>frames</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mp3decctx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MPADecodeContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mp3decctx</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>alloc_fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mp3decctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>adu_mode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mp3decctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>avctx</name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mp3decctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>mpadsp</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mp3decctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>mpadsp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mp3decctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>fdsp</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mp3decctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>fdsp</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>alloc_fail</name>:</label>
<expr_stmt><expr><call><name>decode_close_mp3on4</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>flush_mp3on4</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP3On4DecodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>frames</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mp_flush</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mp3decctx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame_mp3on4</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MP3On4DecodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MPADecodeContext</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fsize</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><name>buf_size</name></expr></init></decl>, <decl><type ref="prev"/><name>out_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OUT_INT</name> <modifier>*</modifier><modifier>*</modifier></type><name>out_samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OUT_INT</name> <modifier>*</modifier></type><name><name>outptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fr</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>MPA_FRAME_SIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>out_samples</name> <operator>=</operator> <operator>(</operator><name>OUT_INT</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name>HEADER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>fr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>fr</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>frames</name></name></expr>;</condition> <incr><expr><name>fr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>fsize</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fsize</name> <operator>=</operator> <call><name>FFMIN3</name><argument_list>(<argument><expr><name>fsize</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>MPA_MAX_CODED_FRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mp3decctx</name><index>[<expr><name>fr</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fsize</name> <operator>&lt;</operator> <name>HEADER_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Frame size smaller than header size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>header</name> <operator>=</operator> <operator>(</operator><call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x000fffff</literal><operator>)</operator> <operator>|</operator> <name><name>s</name><operator>-&gt;</operator><name>syncword</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avpriv_mpegaudio_decode_header</name><argument_list>(<argument><expr><operator>(</operator><name>MPADecodeHeader</name> <operator>*</operator><operator>)</operator><name>m</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Bad header, discard block\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>&gt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>||</operator>
<name><name>s</name><operator>-&gt;</operator><name>coff</name><index>[<expr><name>fr</name></expr>]</index></name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>&gt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"frame channel count exceeds codec "</literal>
<literal type="string">"channel count\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ch</name> <operator>+=</operator> <name><name>m</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>outptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>out_samples</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>coff</name><index>[<expr><name>fr</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>outptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>out_samples</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>coff</name><index>[<expr><name>fr</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>mp_decode_frame</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>outptr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fsize</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"failed to decode channel %d\n"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>outptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MPA_FRAME_SIZE</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>OUT_INT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>outptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MPA_FRAME_SIZE</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>OUT_INT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>*</operator> <name>MPA_FRAME_SIZE</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>OUT_INT</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>out_size</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>fsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>fsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>+=</operator> <name><name>m</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"failed to decode all channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mp3decctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sample_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>out_size</name> <operator>/</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OUT_INT</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
