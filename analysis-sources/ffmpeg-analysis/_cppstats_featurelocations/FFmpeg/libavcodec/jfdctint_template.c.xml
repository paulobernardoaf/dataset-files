<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\jfdctint_template.c">




























































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dct.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bit_depth_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCTSIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITS_IN_JSAMPLE</name></cpp:macro> <cpp:value>BIT_DEPTH</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLOBAL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIGHT_SHIFT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &gt;&gt; (n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTIPLY16C16</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><specifier>const</specifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((var)*(const))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DESCALE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RIGHT_SHIFT((x) + (1 &lt;&lt; ((n) - 1)), n)</cpp:value></cpp:define>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DCTSIZE</name> <operator>!=</operator> <literal type="number">8</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Sorry, this code only copes with 8x8 DCTs."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




































<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CONST_BITS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PASS1_BITS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OUT_SHIFT</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BITS_IN_JSAMPLE</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST_BITS</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PASS1_BITS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT_SHIFT</name></cpp:macro> <cpp:value>PASS1_BITS</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST_BITS</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PASS1_BITS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT_SHIFT</name></cpp:macro> <cpp:value>(PASS1_BITS + 1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONST_BITS</name> <operator>==</operator> <literal type="number">13</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_298631336</name></cpp:macro> <cpp:value>((int32_t) 2446)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_390180644</name></cpp:macro> <cpp:value>((int32_t) 3196)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_541196100</name></cpp:macro> <cpp:value>((int32_t) 4433)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_765366865</name></cpp:macro> <cpp:value>((int32_t) 6270)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_899976223</name></cpp:macro> <cpp:value>((int32_t) 7373)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_1_175875602</name></cpp:macro> <cpp:value>((int32_t) 9633)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_1_501321110</name></cpp:macro> <cpp:value>((int32_t) 12299)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_1_847759065</name></cpp:macro> <cpp:value>((int32_t) 15137)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_1_961570560</name></cpp:macro> <cpp:value>((int32_t) 16069)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_2_053119869</name></cpp:macro> <cpp:value>((int32_t) 16819)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_2_562915447</name></cpp:macro> <cpp:value>((int32_t) 20995)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_3_072711026</name></cpp:macro> <cpp:value>((int32_t) 25172)</cpp:value></cpp:define> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_298631336</name></cpp:macro> <cpp:value>FIX(0.298631336)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_390180644</name></cpp:macro> <cpp:value>FIX(0.390180644)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_541196100</name></cpp:macro> <cpp:value>FIX(0.541196100)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_765366865</name></cpp:macro> <cpp:value>FIX(0.765366865)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_899976223</name></cpp:macro> <cpp:value>FIX(0.899976223)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_1_175875602</name></cpp:macro> <cpp:value>FIX(1.175875602)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_1_501321110</name></cpp:macro> <cpp:value>FIX(1.501321110)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_1_847759065</name></cpp:macro> <cpp:value>FIX(1.847759065)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_1_961570560</name></cpp:macro> <cpp:value>FIX(1.961570560)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_2_053119869</name></cpp:macro> <cpp:value>FIX(2.053119869)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_2_562915447</name></cpp:macro> <cpp:value>FIX(2.562915447)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_3_072711026</name></cpp:macro> <cpp:value>FIX(3.072711026)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BITS_IN_JSAMPLE</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>CONST_BITS</name><operator>&lt;=</operator><literal type="number">13</literal> <operator>&amp;&amp;</operator> <name>PASS1_BITS</name><operator>&lt;=</operator><literal type="number">2</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTIPLY</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><specifier>const</specifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MULTIPLY16C16(var,const)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTIPLY</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><specifier>const</specifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((var) * (const))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name> <name>FUNC</name></type>(<name>row_fdct</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>, <decl><type ref="prev"/><name>tmp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp10</name></decl>, <decl><type ref="prev"/><name>tmp11</name></decl>, <decl><type ref="prev"/><name>tmp12</name></decl>, <decl><type ref="prev"/><name>tmp13</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>z1</name></decl>, <decl><type ref="prev"/><name>z2</name></decl>, <decl><type ref="prev"/><name>z3</name></decl>, <decl><type ref="prev"/><name>z4</name></decl>, <decl><type ref="prev"/><name>z5</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dataptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ctr</name></decl>;</decl_stmt>





<expr_stmt><expr><name>dataptr</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ctr</name> <operator>=</operator> <name>DCTSIZE</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>ctr</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ctr</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>





<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp0</name> <operator>+</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <name>tmp0</name> <operator>-</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>tmp10</name> <operator>+</operator> <name>tmp11</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>PASS1_BITS</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>tmp10</name> <operator>-</operator> <name>tmp11</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>PASS1_BITS</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp12</name> <operator>+</operator> <name>tmp13</name></expr></argument>, <argument><expr><name>FIX_0_541196100</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>z1</name> <operator>+</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp13</name></expr></argument>, <argument><expr><name>FIX_0_765366865</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>CONST_BITS</name><operator>-</operator><name>PASS1_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>z1</name> <operator>+</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp12</name></expr></argument>, <argument><expr><operator>-</operator> <name>FIX_1_847759065</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>CONST_BITS</name><operator>-</operator><name>PASS1_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>z1</name> <operator>=</operator> <name>tmp4</name> <operator>+</operator> <name>tmp7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <name>tmp5</name> <operator>+</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <name>tmp4</name> <operator>+</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <name>tmp5</name> <operator>+</operator> <name>tmp7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z3</name> <operator>+</operator> <name>z4</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>FIX_0_298631336</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>FIX_2_053119869</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>FIX_3_072711026</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp7</name></expr></argument>, <argument><expr><name>FIX_1_501321110</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z1</name></expr></argument>, <argument><expr><operator>-</operator> <name>FIX_0_899976223</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z2</name></expr></argument>, <argument><expr><operator>-</operator> <name>FIX_2_562915447</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z3</name></expr></argument>, <argument><expr><operator>-</operator> <name>FIX_1_961570560</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z4</name></expr></argument>, <argument><expr><operator>-</operator> <name>FIX_0_390180644</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>z3</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp4</name> <operator>+</operator> <name>z1</name> <operator>+</operator> <name>z3</name></expr></argument>, <argument><expr><name>CONST_BITS</name><operator>-</operator><name>PASS1_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp5</name> <operator>+</operator> <name>z2</name> <operator>+</operator> <name>z4</name></expr></argument>, <argument><expr><name>CONST_BITS</name><operator>-</operator><name>PASS1_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp6</name> <operator>+</operator> <name>z2</name> <operator>+</operator> <name>z3</name></expr></argument>, <argument><expr><name>CONST_BITS</name><operator>-</operator><name>PASS1_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp7</name> <operator>+</operator> <name>z1</name> <operator>+</operator> <name>z4</name></expr></argument>, <argument><expr><name>CONST_BITS</name><operator>-</operator><name>PASS1_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dataptr</name> <operator>+=</operator> <name>DCTSIZE</name></expr>;</expr_stmt> 
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><name>GLOBAL</name></type>(<name>void</name>)
<macro><name>FUNC</name><argument_list>(<argument>ff_jpeg_fdct_islow</argument>)</argument_list></macro><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>, <decl><type ref="prev"/><name>tmp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp10</name></decl>, <decl><type ref="prev"/><name>tmp11</name></decl>, <decl><type ref="prev"/><name>tmp12</name></decl>, <decl><type ref="prev"/><name>tmp13</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>z1</name></decl>, <decl><type ref="prev"/><name>z2</name></decl>, <decl><type ref="prev"/><name>z3</name></decl>, <decl><type ref="prev"/><name>z4</name></decl>, <decl><type ref="prev"/><name>z5</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dataptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ctr</name></decl>;</decl_stmt>

<function_decl><type><name>FUNC</name></type>(<name>row_fdct</name>)<parameter_list>(<parameter><decl><type><name>data</name></type></decl></parameter>)</parameter_list>;</function_decl>






<expr_stmt><expr><name>dataptr</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ctr</name> <operator>=</operator> <name>DCTSIZE</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>ctr</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ctr</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>





<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp0</name> <operator>+</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <name>tmp0</name> <operator>-</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp10</name> <operator>+</operator> <name>tmp11</name></expr></argument>, <argument><expr><name>OUT_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp10</name> <operator>-</operator> <name>tmp11</name></expr></argument>, <argument><expr><name>OUT_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp12</name> <operator>+</operator> <name>tmp13</name></expr></argument>, <argument><expr><name>FIX_0_541196100</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>z1</name> <operator>+</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp13</name></expr></argument>, <argument><expr><name>FIX_0_765366865</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>CONST_BITS</name> <operator>+</operator> <name>OUT_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>z1</name> <operator>+</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp12</name></expr></argument>, <argument><expr><operator>-</operator> <name>FIX_1_847759065</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>CONST_BITS</name> <operator>+</operator> <name>OUT_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>z1</name> <operator>=</operator> <name>tmp4</name> <operator>+</operator> <name>tmp7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <name>tmp5</name> <operator>+</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z3</name> <operator>=</operator> <name>tmp4</name> <operator>+</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>=</operator> <name>tmp5</name> <operator>+</operator> <name>tmp7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z3</name> <operator>+</operator> <name>z4</name></expr></argument>, <argument><expr><name>FIX_1_175875602</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>FIX_0_298631336</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>FIX_2_053119869</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>FIX_3_072711026</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp7</name></expr></argument>, <argument><expr><name>FIX_1_501321110</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z1</name></expr></argument>, <argument><expr><operator>-</operator> <name>FIX_0_899976223</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z2</name></expr></argument>, <argument><expr><operator>-</operator> <name>FIX_2_562915447</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z3</name></expr></argument>, <argument><expr><operator>-</operator> <name>FIX_1_961570560</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>z4</name></expr></argument>, <argument><expr><operator>-</operator> <name>FIX_0_390180644</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>z3</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z4</name> <operator>+=</operator> <name>z5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp4</name> <operator>+</operator> <name>z1</name> <operator>+</operator> <name>z3</name></expr></argument>, <argument><expr><name>CONST_BITS</name> <operator>+</operator> <name>OUT_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp5</name> <operator>+</operator> <name>z2</name> <operator>+</operator> <name>z4</name></expr></argument>, <argument><expr><name>CONST_BITS</name> <operator>+</operator> <name>OUT_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp6</name> <operator>+</operator> <name>z2</name> <operator>+</operator> <name>z3</name></expr></argument>, <argument><expr><name>CONST_BITS</name> <operator>+</operator> <name>OUT_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp7</name> <operator>+</operator> <name>z1</name> <operator>+</operator> <name>z4</name></expr></argument>, <argument><expr><name>CONST_BITS</name> <operator>+</operator> <name>OUT_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dataptr</name><operator>++</operator></expr>;</expr_stmt> 
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><name>GLOBAL</name></type>(<name>void</name>)
<macro><name>FUNC</name><argument_list>(<argument>ff_fdct248_islow</argument>)</argument_list></macro><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>, <decl><type ref="prev"/><name>tmp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tmp10</name></decl>, <decl><type ref="prev"/><name>tmp11</name></decl>, <decl><type ref="prev"/><name>tmp12</name></decl>, <decl><type ref="prev"/><name>tmp13</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>z1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dataptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ctr</name></decl>;</decl_stmt>

<function_decl><type><name>FUNC</name></type>(<name>row_fdct</name>)<parameter_list>(<parameter><decl><type><name>data</name></type></decl></parameter>)</parameter_list>;</function_decl>






<expr_stmt><expr><name>dataptr</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ctr</name> <operator>=</operator> <name>DCTSIZE</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>ctr</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ctr</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp0</name> <operator>+</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <name>tmp0</name> <operator>-</operator> <name>tmp3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp10</name> <operator>+</operator> <name>tmp11</name></expr></argument>, <argument><expr><name>OUT_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp10</name> <operator>-</operator> <name>tmp11</name></expr></argument>, <argument><expr><name>OUT_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp12</name> <operator>+</operator> <name>tmp13</name></expr></argument>, <argument><expr><name>FIX_0_541196100</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>z1</name> <operator>+</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp13</name></expr></argument>, <argument><expr><name>FIX_0_765366865</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>CONST_BITS</name><operator>+</operator><name>OUT_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>z1</name> <operator>+</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp12</name></expr></argument>, <argument><expr><operator>-</operator> <name>FIX_1_847759065</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>CONST_BITS</name><operator>+</operator><name>OUT_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp4</name> <operator>+</operator> <name>tmp7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp5</name> <operator>+</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp5</name> <operator>-</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <name>tmp4</name> <operator>-</operator> <name>tmp7</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp10</name> <operator>+</operator> <name>tmp11</name></expr></argument>, <argument><expr><name>OUT_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>tmp10</name> <operator>-</operator> <name>tmp11</name></expr></argument>, <argument><expr><name>OUT_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp12</name> <operator>+</operator> <name>tmp13</name></expr></argument>, <argument><expr><name>FIX_0_541196100</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>z1</name> <operator>+</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp13</name></expr></argument>, <argument><expr><name>FIX_0_765366865</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>CONST_BITS</name> <operator>+</operator> <name>OUT_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>DESCALE</name><argument_list>(<argument><expr><name>z1</name> <operator>+</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp12</name></expr></argument>, <argument><expr><operator>-</operator> <name>FIX_1_847759065</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>CONST_BITS</name> <operator>+</operator> <name>OUT_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dataptr</name><operator>++</operator></expr>;</expr_stmt> 
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
