<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\h264_mb_template.c">




















<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FUNC</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PIXEL_SHIFT</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIMPLE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AV_JOIN(n ##_simple_, BITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXEL_SHIFT</name></cpp:macro> <cpp:value>(BITS &gt;&gt; 4)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>n ##_complex</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXEL_SHIFT</name></cpp:macro> <cpp:value>h-&gt;pixel_shift</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHROMA_IDC</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_IDC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_mc_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHROMA_IDC</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_IDC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_mc_template.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>av_noinline</name> <name>void</name> <name>FUNC</name></type>(<name>hl_decode_mb</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_x</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_y</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mb_xy</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_type</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dest_cb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dest_cr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linesize</name></decl>, <decl><type ref="prev"/><name>uvlinesize</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>block_offset</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>transform_bypass</name> <init>= <expr><operator>!</operator><name>SIMPLE</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>transform_bypass</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>idct_add</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_h</name> <init>= <expr><literal type="number">16</literal> <operator>&gt;&gt;</operator> <name><name>h</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma422</name> <init>= <expr><call><name>CHROMA422</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dest_y</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>mb_x</name> <operator>&lt;&lt;</operator> <name>PIXEL_SHIFT</name><operator>)</operator> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>linesize</name></name><operator>)</operator> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_cb</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>mb_x</name> <operator>&lt;&lt;</operator> <name>PIXEL_SHIFT</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>*</operator> <name>block_h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_cr</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>mb_x</name> <operator>&lt;&lt;</operator> <name>PIXEL_SHIFT</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>*</operator> <name>block_h</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>prefetch</name></name><argument_list>(<argument><expr><name>dest_y</name> <operator>+</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <operator>(</operator><literal type="number">64</literal> <operator>&lt;&lt;</operator> <name>PIXEL_SHIFT</name><operator>)</operator></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>prefetch</name></name><argument_list>(<argument><expr><name>dest_cb</name> <operator>+</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>+</operator> <operator>(</operator><literal type="number">64</literal> <operator>&lt;&lt;</operator> <name>PIXEL_SHIFT</name><operator>)</operator></expr></argument>, <argument><expr><name>dest_cr</name> <operator>-</operator> <name>dest_cb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>list_counts</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>SIMPLE</name> <operator>&amp;&amp;</operator> <call><name>MB_FIELD</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>linesize</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>uvlinesize</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>block_offset</name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>dest_y</name> <operator>-=</operator> <name><name>sl</name><operator>-&gt;</operator><name>linesize</name></name> <operator>*</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_cb</name> <operator>-=</operator> <name><name>sl</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>*</operator> <operator>(</operator><name>block_h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_cr</name> <operator>-=</operator> <name><name>sl</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>*</operator> <operator>(</operator><name>block_h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>list</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>list</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>USES_LIST</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_16X16</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">16</literal> <operator>+</operator> <operator>*</operator><name>ref</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ref</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ref</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">16</literal> <operator>+</operator> <name>ref</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uvlinesize</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>SIMPLE</name> <operator>&amp;&amp;</operator> <call><name>IS_INTRA_PCM</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bit_depth</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>PIXEL_SHIFT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>intra_pcm_ptr</name></name></expr></argument>,
<argument><expr><name><name>ff_h264_mb_sizes</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>]</index></name> <operator>*</operator> <name>bit_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>tmp_y</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>dest_y</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>linesize</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp_y</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>SIMPLE</name> <operator>||</operator> <operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>tmp_cb</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>dest_cb</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>uvlinesize</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>tmp_cr</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>dest_cr</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>uvlinesize</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tmp_cb</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>tmp_cr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit_depth</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>tmp_cb</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>dest_cb</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>uvlinesize</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp_cb</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>tmp_cr</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>dest_cr</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>uvlinesize</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp_cr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest_y</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>intra_pcm_ptr</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>SIMPLE</name> <operator>||</operator> <operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dest_cb</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>uvlinesize</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit_depth</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dest_cr</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>uvlinesize</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bit_depth</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_cb</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>intra_pcm_ptr</name></name> <operator>+</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_cr</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>intra_pcm_ptr</name></name> <operator>+</operator> <literal type="number">256</literal> <operator>+</operator> <name>block_h</name> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest_cb</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>uvlinesize</name></expr></argument>, <argument><expr><name>src_cb</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest_cr</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>uvlinesize</name></expr></argument>, <argument><expr><name>src_cr</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xchg_mb_border</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIMPLE</name></expr></argument>, <argument><expr><name>PIXEL_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>SIMPLE</name> <operator>||</operator> <operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred8x8</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_pred_mode</name></name></expr>]</index></name><operator>(</operator><name>dest_cb</name><operator>,</operator> <name>uvlinesize</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred8x8</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_pred_mode</name></name></expr>]</index></name><operator>(</operator><name>dest_cr</name><operator>,</operator> <name>uvlinesize</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>hl_decode_mb_predict_luma</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>, <argument><expr><name>SIMPLE</name></expr></argument>,
<argument><expr><name>transform_bypass</name></expr></argument>, <argument><expr><name>PIXEL_SHIFT</name></expr></argument>,
<argument><expr><name>block_offset</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xchg_mb_border</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIMPLE</name></expr></argument>, <argument><expr><name>PIXEL_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>chroma422</name></expr>)</condition> <block>{<block_content>
<function_decl><type><name>FUNC</name></type>(<name>hl_motion_422</name>)<parameter_list>(<parameter><decl><type><name>h</name></type></decl></parameter>, <parameter><decl><type><name>sl</name></type></decl></parameter>, <parameter><decl><type><name>dest_y</name></type></decl></parameter>, <parameter><decl><type><name>dest_cb</name></type></decl></parameter>, <parameter><decl><type><name>dest_cr</name></type></decl></parameter>,
<parameter><decl><type><name><name>h</name><operator>-&gt;</operator><name>h264qpel</name><operator>.</operator><name>put_h264_qpel_pixels_tab</name></name></type></decl></parameter>,
<parameter><decl><type><name><name>h</name><operator>-&gt;</operator><name>h264chroma</name><operator>.</operator><name>put_h264_chroma_pixels_tab</name></name></type></decl></parameter>,
<parameter><decl><type><name><name>h</name><operator>-&gt;</operator><name>h264qpel</name><operator>.</operator><name>avg_h264_qpel_pixels_tab</name></name></type></decl></parameter>,
<parameter><decl><type><name><name>h</name><operator>-&gt;</operator><name>h264chroma</name><operator>.</operator><name>avg_h264_chroma_pixels_tab</name></name></type></decl></parameter>,
<parameter><decl><type><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>weight_h264_pixels_tab</name></name></type></decl></parameter>,
<parameter><decl><type><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>biweight_h264_pixels_tab</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></if> <else>else <block>{<block_content>
<function_decl><type><name>FUNC</name></type>(<name>hl_motion_420</name>)<parameter_list>(<parameter><decl><type><name>h</name></type></decl></parameter>, <parameter><decl><type><name>sl</name></type></decl></parameter>, <parameter><decl><type><name>dest_y</name></type></decl></parameter>, <parameter><decl><type><name>dest_cb</name></type></decl></parameter>, <parameter><decl><type><name>dest_cr</name></type></decl></parameter>,
<parameter><decl><type><name><name>h</name><operator>-&gt;</operator><name>h264qpel</name><operator>.</operator><name>put_h264_qpel_pixels_tab</name></name></type></decl></parameter>,
<parameter><decl><type><name><name>h</name><operator>-&gt;</operator><name>h264chroma</name><operator>.</operator><name>put_h264_chroma_pixels_tab</name></name></type></decl></parameter>,
<parameter><decl><type><name><name>h</name><operator>-&gt;</operator><name>h264qpel</name><operator>.</operator><name>avg_h264_qpel_pixels_tab</name></name></type></decl></parameter>,
<parameter><decl><type><name><name>h</name><operator>-&gt;</operator><name>h264chroma</name><operator>.</operator><name>avg_h264_chroma_pixels_tab</name></name></type></decl></parameter>,
<parameter><decl><type><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>weight_h264_pixels_tab</name></name></type></decl></parameter>,
<parameter><decl><type><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>biweight_h264_pixels_tab</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>hl_decode_mb_idct_luma</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>, <argument><expr><name>SIMPLE</name></expr></argument>, <argument><expr><name>transform_bypass</name></expr></argument>,
<argument><expr><name>PIXEL_SHIFT</name></expr></argument>, <argument><expr><name>block_offset</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>SIMPLE</name> <operator>||</operator> <operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>cbp</name></name> <operator>&amp;</operator> <literal type="number">0x30</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>dest_cb</name></expr>, <expr><name>dest_cr</name></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>transform_bypass</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">244</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>chroma_pred_mode</name></name> <operator>==</operator> <name>VERT_PRED8x8</name> <operator>||</operator>
<name><name>sl</name><operator>-&gt;</operator><name>chroma_pred_mode</name></name> <operator>==</operator> <name>HOR_PRED8x8</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred8x8_add</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_pred_mode</name></name></expr>]</index></name><operator>(</operator><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator>
<name>block_offset</name> <operator>+</operator> <literal type="number">16</literal><operator>,</operator>
<name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>PIXEL_SHIFT</name><operator>)</operator><operator>,</operator>
<name>uvlinesize</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred8x8_add</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_pred_mode</name></name></expr>]</index></name><operator>(</operator><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>,</operator>
<name>block_offset</name> <operator>+</operator> <literal type="number">32</literal><operator>,</operator>
<name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>PIXEL_SHIFT</name><operator>)</operator><operator>,</operator>
<name>uvlinesize</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>idct_add</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_add_pixels4_clear</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>*</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>j</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>||</operator>
<call><name>dctcoef_get</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name></expr></argument>, <argument><expr><name>PIXEL_SHIFT</name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>idct_add</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>&lt;&lt;</operator> <name>PIXEL_SHIFT</name><operator>)</operator></expr></argument>,
<argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>chroma422</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>j</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name> <operator>||</operator>
<call><name>dctcoef_get</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name></expr></argument>, <argument><expr><name>PIXEL_SHIFT</name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>idct_add</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>&lt;&lt;</operator> <name>PIXEL_SHIFT</name><operator>)</operator></expr></argument>,
<argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>qp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>chroma422</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>qp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>qp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><name>CHROMA_DC_BLOCK_INDEX</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_chroma_dc_dequant_idct</name></name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>PIXEL_SHIFT</name><operator>)</operator></expr></argument>,
<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>dequant4_coeff</name><index>[<expr><ternary><condition><expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>]</index><index>[<expr><name><name>qp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><name>CHROMA_DC_BLOCK_INDEX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_chroma_dc_dequant_idct</name></name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name> <operator>+</operator> <operator>(</operator><literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>PIXEL_SHIFT</name><operator>)</operator></expr></argument>,
<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>dequant4_coeff</name><index>[<expr><ternary><condition><expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary></expr>]</index><index>[<expr><name><name>qp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_idct_add8</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>block_offset</name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb</name></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>SIMPLE</name> <operator>||</operator> <name>BITS</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHROMA_IDC</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_IDC</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_mc_template.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>av_noinline</name> <name>void</name> <name>FUNC</name></type>(<name>hl_decode_mb_444</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_x</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_y</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mb_xy</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_type</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>block_offset</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>transform_bypass</name> <init>= <expr><operator>!</operator><name>SIMPLE</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>transform_bypass</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>plane_count</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>SIMPLE</name> <operator>||</operator> <operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>plane_count</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dest</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>mb_x</name> <operator>&lt;&lt;</operator> <name>PIXEL_SHIFT</name><operator>)</operator> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>linesize</name></name><operator>)</operator> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>prefetch</name></name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>linesize</name></name> <operator>+</operator> <operator>(</operator><literal type="number">64</literal> <operator>&lt;&lt;</operator> <name>PIXEL_SHIFT</name><operator>)</operator></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>list_counts</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>SIMPLE</name> <operator>&amp;&amp;</operator> <call><name>MB_FIELD</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>linesize</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>block_offset</name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dest</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-=</operator> <name><name>sl</name><operator>-&gt;</operator><name>linesize</name></name> <operator>*</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>list</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>list</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>USES_LIST</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_16X16</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">16</literal> <operator>+</operator> <operator>*</operator><name>ref</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ref</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ref</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">16</literal> <operator>+</operator> <name>ref</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>SIMPLE</name> <operator>&amp;&amp;</operator> <call><name>IS_INTRA_PCM</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>PIXEL_SHIFT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bit_depth</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>intra_pcm_ptr</name></name></expr></argument>, <argument><expr><literal type="number">768</literal> <operator>*</operator> <name>bit_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>plane_count</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>dest</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>linesize</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>plane_count</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>linesize</name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>intra_pcm_ptr</name></name> <operator>+</operator> <name>p</name> <operator>*</operator> <literal type="number">256</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xchg_mb_border</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name>linesize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SIMPLE</name></expr></argument>, <argument><expr><name>PIXEL_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>plane_count</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hl_decode_mb_predict_luma</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>, <argument><expr><name>SIMPLE</name></expr></argument>,
<argument><expr><name>transform_bypass</name></expr></argument>, <argument><expr><name>PIXEL_SHIFT</name></expr></argument>,
<argument><expr><name>block_offset</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name><name>dest</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xchg_mb_border</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name>linesize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SIMPLE</name></expr></argument>, <argument><expr><name>PIXEL_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<function_decl><type><name>FUNC</name></type>(<name>hl_motion_444</name>)<parameter_list>(<parameter><decl><type><name>h</name></type></decl></parameter>, <parameter><decl><type><name>sl</name></type></decl></parameter>, <parameter><decl><type><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></type></decl></parameter>, <parameter><decl><type><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></type></decl></parameter>, <parameter><decl><type><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></type></decl></parameter>,
<parameter><decl><type><name><name>h</name><operator>-&gt;</operator><name>h264qpel</name><operator>.</operator><name>put_h264_qpel_pixels_tab</name></name></type></decl></parameter>,
<parameter><decl><type><name><name>h</name><operator>-&gt;</operator><name>h264chroma</name><operator>.</operator><name>put_h264_chroma_pixels_tab</name></name></type></decl></parameter>,
<parameter><decl><type><name><name>h</name><operator>-&gt;</operator><name>h264qpel</name><operator>.</operator><name>avg_h264_qpel_pixels_tab</name></name></type></decl></parameter>,
<parameter><decl><type><name><name>h</name><operator>-&gt;</operator><name>h264chroma</name><operator>.</operator><name>avg_h264_chroma_pixels_tab</name></name></type></decl></parameter>,
<parameter><decl><type><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>weight_h264_pixels_tab</name></name></type></decl></parameter>,
<parameter><decl><type><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>biweight_h264_pixels_tab</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>plane_count</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hl_decode_mb_idct_luma</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>, <argument><expr><name>SIMPLE</name></expr></argument>, <argument><expr><name>transform_bypass</name></expr></argument>,
<argument><expr><name>PIXEL_SHIFT</name></expr></argument>, <argument><expr><name>block_offset</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,
<argument><expr><name><name>dest</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
