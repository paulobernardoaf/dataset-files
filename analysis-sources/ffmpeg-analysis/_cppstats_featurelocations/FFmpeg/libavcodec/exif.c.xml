<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\exif.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"exif.h"</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exif_get_tag_name</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>tag_list</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tag_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>tag_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>exif_add_metadata</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>,
<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>le</name></decl></parameter>,
<parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>metadata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,
<argument><expr><literal type="string">"Invalid TIFF tag type 0 found for %s with size %d\n"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>TIFF_DOUBLE</name></expr> :</case> <return>return <expr><call><name>ff_tadd_doubles_metadata</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>le</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>TIFF_SSHORT</name></expr> :</case> <return>return <expr><call><name>ff_tadd_shorts_metadata</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>le</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>TIFF_SHORT</name></expr> :</case> <return>return <expr><call><name>ff_tadd_shorts_metadata</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>le</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>TIFF_SBYTE</name></expr> :</case> <return>return <expr><call><name>ff_tadd_bytes_metadata</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>le</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>TIFF_BYTE</name></expr> :</case>
<case>case <expr><name>TIFF_UNDEFINED</name></expr>:</case> <return>return <expr><call><name>ff_tadd_bytes_metadata</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>le</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>TIFF_STRING</name></expr> :</case> <return>return <expr><call><name>ff_tadd_string_metadata</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>le</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>TIFF_SRATIONAL</name></expr>:</case>
<case>case <expr><name>TIFF_RATIONAL</name></expr> :</case> <return>return <expr><call><name>ff_tadd_rational_metadata</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>le</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>TIFF_SLONG</name></expr> :</case>
<case>case <expr><name>TIFF_LONG</name></expr> :</case> <return>return <expr><call><name>ff_tadd_long_metadata</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>le</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><literal type="string">"TIFF tag type (%u)"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>exif_decode_tag</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>, <parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gbytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>le</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>metadata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>cur_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>id</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>TiffTypes</name></name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_tread_tag</name><argument_list>(<argument><expr><name>gbytes</name></expr></argument>, <argument><expr><name>le</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bytestream2_tell</name><argument_list>(<argument><expr><name>gbytes</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><name>gbytes</name></expr></argument>, <argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_tis_ifd</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_exif_decode_ifd</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>gbytes</name></expr></argument>, <argument><expr><name>le</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>exif_get_tag_name</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>use_name</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>name</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>use_name</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_name</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>use_name</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"0x%04X"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>exif_add_metadata</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>use_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>gbytes</name></expr></argument>, <argument><expr><name>le</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>use_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><name>gbytes</name></expr></argument>, <argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>ff_exif_decode_ifd</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>, <parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gbytes</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>le</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>metadata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>entries</name></decl>;</decl_stmt>

<expr_stmt><expr><name>entries</name> <operator>=</operator> <call><name>ff_tget_short</name><argument_list>(<argument><expr><name>gbytes</name></expr></argument>, <argument><expr><name>le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gbytes</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>entries</name> <operator>*</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>entries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>exif_decode_tag</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>gbytes</name></expr></argument>, <argument><expr><name>le</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<return>return <expr><call><name>ff_tget_long</name><argument_list>(<argument><expr><name>gbytes</name></expr></argument>, <argument><expr><name>le</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>avpriv_exif_decode_ifd</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>le</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>metadata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_exif_decode_ifd</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>le</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
