<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vc1dsp.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264chroma.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qpeldsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rnd_avg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vc1dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"startcode.h"</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_v_overlap_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rnd</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>-</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>d</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>d</name> <operator>+</operator> <name>b</name> <operator>-</operator> <name>c</name> <operator>+</operator> <literal type="number">4</literal> <operator>-</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><operator>-</operator><name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>c</name> <operator>+</operator> <name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><name>stride</name></expr>]</index></name> <operator>=</operator> <name>d</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>rnd</name> <operator>=</operator> <operator>!</operator><name>rnd</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_h_overlap_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rnd</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>d</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>d</name> <operator>+</operator> <name>b</name> <operator>-</operator> <name>c</name> <operator>+</operator> <literal type="number">4</literal> <operator>-</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>c</name> <operator>+</operator> <name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>d</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rnd</name> <operator>=</operator> <operator>!</operator><name>rnd</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_v_s_overlap_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>bottom</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rnd1</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"/><name>rnd2</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>bottom</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>bottom</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>d</name> <operator>+</operator> <name>b</name> <operator>-</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>top</name><index>[<expr><literal type="number">48</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>-</operator> <name>d1</name> <operator>+</operator> <name>rnd1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><index>[<expr><literal type="number">56</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>b</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>-</operator> <name>d2</name> <operator>+</operator> <name>rnd2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bottom</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>d2</name> <operator>+</operator> <name>rnd1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bottom</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>d1</name> <operator>+</operator> <name>rnd2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bottom</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>top</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>rnd2</name> <operator>=</operator> <literal type="number">7</literal> <operator>-</operator> <name>rnd2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rnd1</name> <operator>=</operator> <literal type="number">7</literal> <operator>-</operator> <name>rnd1</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_h_s_overlap_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>right</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rnd1</name> <init>= <expr><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rnd2</name> <init>= <expr><literal type="number">7</literal> <operator>-</operator> <name>rnd1</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>left</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>left</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>right</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>d</name> <operator>+</operator> <name>b</name> <operator>-</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>-</operator> <name>d1</name> <operator>+</operator> <name>rnd1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>left</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>b</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>-</operator> <name>d2</name> <operator>+</operator> <name>rnd2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>d2</name> <operator>+</operator> <name>rnd1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>right</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>d1</name> <operator>+</operator> <name>rnd2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>+=</operator> <name>right_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> <operator>+=</operator> <name>left_stride</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rnd2</name> <operator>=</operator> <literal type="number">7</literal> <operator>-</operator> <name>rnd2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rnd1</name> <operator>=</operator> <literal type="number">7</literal> <operator>-</operator> <name>rnd1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>vc1_filter_line</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a0</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name><operator>)</operator> <operator>-</operator>
<literal type="number">5</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a0_sign</name> <init>= <expr><name>a0</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>a0</name> <operator>=</operator> <operator>(</operator><name>a0</name> <operator>^</operator> <name>a0_sign</name><operator>)</operator> <operator>-</operator> <name>a0_sign</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>a0</name> <operator>&lt;</operator> <name>pq</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a1</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name><operator>)</operator> <operator>-</operator>
<literal type="number">5</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a2</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[ <expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[ <expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name><operator>)</operator> <operator>-</operator>
<literal type="number">5</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[ <expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[ <expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>a1</name> <operator>&lt;</operator> <name>a0</name> <operator>||</operator> <name>a2</name> <operator>&lt;</operator> <name>a0</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>clip</name> <init>= <expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clip_sign</name> <init>= <expr><name>clip</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>clip</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>clip</name> <operator>^</operator> <name>clip_sign</name><operator>)</operator> <operator>-</operator> <name>clip_sign</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>clip</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a3</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><literal type="number">5</literal> <operator>*</operator> <operator>(</operator><name>a3</name> <operator>-</operator> <name>a0</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d_sign</name> <init>= <expr><operator>(</operator><name>d</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>^</operator> <name>d_sign</name><operator>)</operator> <operator>-</operator> <name>d_sign</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d_sign</name> <operator>^=</operator> <name>a0_sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d_sign</name> <operator>^</operator> <name>clip_sign</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>d</name> <operator>^</operator> <name>d_sign</name><operator>)</operator> <operator>-</operator> <name>d_sign</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[ <expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>src</name><index>[ <expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vc1_loop_filter</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filt3</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>filt3</name> <operator>=</operator> <call><name>vc1_filter_line</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>step</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>filt3</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vc1_filter_line</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <name>step</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vc1_filter_line</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>step</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vc1_filter_line</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>step</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>step</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_v_loop_filter4_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vc1_loop_filter</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_h_loop_filter4_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vc1_loop_filter</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_v_loop_filter8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vc1_loop_filter</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_h_loop_filter8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vc1_loop_filter</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_v_loop_filter16_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vc1_loop_filter</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_h_loop_filter16_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vc1_loop_filter</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_inv_trans_8x8_dc_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dc</name> <init>= <expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>dc</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>dc</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_inv_trans_8x8_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>, <decl><type ref="prev"/><name>t8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"/><name><name>temp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">12</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">32</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">12</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">32</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <literal type="number">6</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t5</name> <operator>=</operator> <name>t1</name> <operator>+</operator> <name>t3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t6</name> <operator>=</operator> <name>t2</name> <operator>+</operator> <name>t4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t7</name> <operator>=</operator> <name>t2</name> <operator>-</operator> <name>t4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t8</name> <operator>=</operator> <name>t1</name> <operator>-</operator> <name>t3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">15</literal> <operator>*</operator> <name><name>src</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>-</operator> <literal type="number">9</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <literal type="number">9</literal> <operator>*</operator> <name><name>src</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>src</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <literal type="number">9</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t5</name> <operator>+</operator> <name>t1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t6</name> <operator>+</operator> <name>t2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t7</name> <operator>+</operator> <name>t3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t8</name> <operator>+</operator> <name>t4</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t8</name> <operator>-</operator> <name>t4</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t7</name> <operator>-</operator> <name>t3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t6</name> <operator>-</operator> <name>t2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t5</name> <operator>-</operator> <name>t1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">12</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">32</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">12</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">32</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <literal type="number">6</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t5</name> <operator>=</operator> <name>t1</name> <operator>+</operator> <name>t3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t6</name> <operator>=</operator> <name>t2</name> <operator>+</operator> <name>t4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t7</name> <operator>=</operator> <name>t2</name> <operator>-</operator> <name>t4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t8</name> <operator>=</operator> <name>t1</name> <operator>-</operator> <name>t3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">15</literal> <operator>*</operator> <name><name>src</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>-</operator> <literal type="number">9</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <literal type="number">9</literal> <operator>*</operator> <name><name>src</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>src</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <literal type="number">9</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t5</name> <operator>+</operator> <name>t1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t6</name> <operator>+</operator> <name>t2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t7</name> <operator>+</operator> <name>t3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t8</name> <operator>+</operator> <name>t4</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t8</name> <operator>-</operator> <name>t4</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t7</name> <operator>-</operator> <name>t3</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">48</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t6</name> <operator>-</operator> <name>t2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">56</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t5</name> <operator>-</operator> <name>t1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_inv_trans_8x4_dc_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dc</name> <init>= <expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>dc</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>(</operator><literal type="number">17</literal> <operator>*</operator> <name>dc</name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_inv_trans_8x4_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>, <decl><type ref="prev"/><name>t8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">12</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">12</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <literal type="number">6</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t5</name> <operator>=</operator> <name>t1</name> <operator>+</operator> <name>t3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t6</name> <operator>=</operator> <name>t2</name> <operator>+</operator> <name>t4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t7</name> <operator>=</operator> <name>t2</name> <operator>-</operator> <name>t4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t8</name> <operator>=</operator> <name>t1</name> <operator>-</operator> <name>t3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">15</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <literal type="number">9</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <literal type="number">9</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">9</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t5</name> <operator>+</operator> <name>t1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t6</name> <operator>+</operator> <name>t2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t7</name> <operator>+</operator> <name>t3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t8</name> <operator>+</operator> <name>t4</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t8</name> <operator>-</operator> <name>t4</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t7</name> <operator>-</operator> <name>t3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t6</name> <operator>-</operator> <name>t2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t5</name> <operator>-</operator> <name>t1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">17</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">16</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">17</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">16</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <literal type="number">22</literal> <operator>*</operator> <name><name>src</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <literal type="number">22</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>-</operator> <literal type="number">10</literal> <operator>*</operator> <name><name>src</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t1</name> <operator>+</operator> <name>t3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t2</name> <operator>-</operator> <name>t4</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t2</name> <operator>+</operator> <name>t4</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t1</name> <operator>-</operator> <name>t3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_inv_trans_4x8_dc_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dc</name> <init>= <expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>(</operator><literal type="number">17</literal> <operator>*</operator> <name>dc</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>(</operator><literal type="number">12</literal> <operator>*</operator> <name>dc</name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_inv_trans_4x8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>, <decl><type ref="prev"/><name>t8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">17</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">17</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <literal type="number">22</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <literal type="number">22</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">10</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t1</name> <operator>+</operator> <name>t3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t2</name> <operator>-</operator> <name>t4</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t2</name> <operator>+</operator> <name>t4</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t1</name> <operator>-</operator> <name>t3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">12</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">32</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">12</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">32</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <literal type="number">6</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t5</name> <operator>=</operator> <name>t1</name> <operator>+</operator> <name>t3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t6</name> <operator>=</operator> <name>t2</name> <operator>+</operator> <name>t4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t7</name> <operator>=</operator> <name>t2</name> <operator>-</operator> <name>t4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t8</name> <operator>=</operator> <name>t1</name> <operator>-</operator> <name>t3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">15</literal> <operator>*</operator> <name><name>src</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>-</operator> <literal type="number">9</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <literal type="number">9</literal> <operator>*</operator> <name><name>src</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>src</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <literal type="number">9</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t5</name> <operator>+</operator> <name>t1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t6</name> <operator>+</operator> <name>t2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t7</name> <operator>+</operator> <name>t3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t8</name> <operator>+</operator> <name>t4</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t8</name> <operator>-</operator> <name>t4</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t7</name> <operator>-</operator> <name>t3</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t6</name> <operator>-</operator> <name>t2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t5</name> <operator>-</operator> <name>t1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_inv_trans_4x4_dc_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dc</name> <init>= <expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>(</operator><literal type="number">17</literal> <operator>*</operator> <name>dc</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>(</operator><literal type="number">17</literal> <operator>*</operator> <name>dc</name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_inv_trans_4x4_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">17</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">17</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <literal type="number">22</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <literal type="number">22</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">10</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t1</name> <operator>+</operator> <name>t3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t2</name> <operator>-</operator> <name>t4</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t2</name> <operator>+</operator> <name>t4</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t1</name> <operator>-</operator> <name>t3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">17</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">16</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">17</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">16</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator> <literal type="number">22</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t4</name> <operator>=</operator> <literal type="number">22</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>-</operator> <literal type="number">10</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t1</name> <operator>+</operator> <name>t3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t2</name> <operator>-</operator> <name>t4</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t2</name> <operator>+</operator> <name>t4</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>t1</name> <operator>-</operator> <name>t3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VC1_MSPEL_FILTER_16B</name><parameter_list>(<parameter><type><name>DIR</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static av_always_inline int vc1_mspel_ ##DIR ##_filter_16bits(const TYPE *src, int stride, int mode) { switch(mode) { case 0: return 0; case 1: return -4 * src[-stride] + 53 * src[0] + 18 * src[stride] - 3 * src[stride * 2]; case 2: return -1 * src[-stride] + 9 * src[0] + 9 * src[stride] - 1 * src[stride * 2]; case 3: return -3 * src[-stride] + 18 * src[0] + 53 * src[stride] - 4 * src[stride * 2]; } return 0; }</cpp:value></cpp:define>




















<macro><name>VC1_MSPEL_FILTER_16B</name><argument_list>(<argument>ver</argument>, <argument>uint8_t</argument>)</argument_list></macro>
<macro><name>VC1_MSPEL_FILTER_16B</name><argument_list>(<argument>hor</argument>, <argument>int16_t</argument>)</argument_list></macro>


<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>vc1_mspel_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<return>return <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case> 
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">4</literal> <operator>*</operator> <name><name>src</name><index>[<expr><operator>-</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <literal type="number">53</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>
<literal type="number">18</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>stride</name></expr>]</index></name> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>stride</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">32</literal> <operator>-</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case> 
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name><name>src</name><index>[<expr><operator>-</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>
<literal type="number">9</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>stride</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>stride</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case> 
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name><name>src</name><index>[<expr><operator>-</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <literal type="number">18</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>
<literal type="number">53</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>stride</name></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>stride</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">32</literal> <operator>-</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VC1_MSPEL_MC</name><parameter_list>(<parameter><type><name>OP</name></type></parameter>, <parameter><type><name>OP4</name></type></parameter>, <parameter><type><name>OPNAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static av_always_inline void OPNAME ##vc1_mspel_mc(uint8_t *dst, const uint8_t *src, ptrdiff_t stride, int hmode, int vmode, int rnd) { int i, j; if (vmode) { int r; if (hmode) { static const int shift_value[] = { 0, 5, 1, 5 }; int shift = (shift_value[hmode] + shift_value[vmode]) &gt;&gt; 1; int16_t tmp[11 * 8], *tptr = tmp; r = (1 &lt;&lt; (shift - 1)) + rnd - 1; src -= 1; for (j = 0; j &lt; 8; j++) { for (i = 0; i &lt; 11; i++) tptr[i] = (vc1_mspel_ver_filter_16bits(src + i, stride, vmode) + r) &gt;&gt; shift; src += stride; tptr += 11; } r = 64 - rnd; tptr = tmp + 1; for (j = 0; j &lt; 8; j++) { for (i = 0; i &lt; 8; i++) OP(dst[i], (vc1_mspel_hor_filter_16bits(tptr + i, 1, hmode) + r) &gt;&gt; 7); dst += stride; tptr += 11; } return; } else { r = 1 - rnd; for (j = 0; j &lt; 8; j++) { for (i = 0; i &lt; 8; i++) OP(dst[i], vc1_mspel_filter(src + i, stride, vmode, r)); src += stride; dst += stride; } return; } } for (j = 0; j &lt; 8; j++) { for (i = 0; i &lt; 8; i++) OP(dst[i], vc1_mspel_filter(src + i, 1, hmode, rnd)); dst += stride; src += stride; } }static av_always_inline void OPNAME ##vc1_mspel_mc_16(uint8_t *dst, const uint8_t *src, ptrdiff_t stride, int hmode, int vmode, int rnd) { int i, j; if (vmode) { int r; if (hmode) { static const int shift_value[] = { 0, 5, 1, 5 }; int shift = (shift_value[hmode] + shift_value[vmode]) &gt;&gt; 1; int16_t tmp[19 * 16], *tptr = tmp; r = (1 &lt;&lt; (shift - 1)) + rnd - 1; src -= 1; for (j = 0; j &lt; 16; j++) { for (i = 0; i &lt; 19; i++) tptr[i] = (vc1_mspel_ver_filter_16bits(src + i, stride, vmode) + r) &gt;&gt; shift; src += stride; tptr += 19; } r = 64 - rnd; tptr = tmp + 1; for (j = 0; j &lt; 16; j++) { for (i = 0; i &lt; 16; i++) OP(dst[i], (vc1_mspel_hor_filter_16bits(tptr + i, 1, hmode) + r) &gt;&gt; 7); dst += stride; tptr += 19; } return; } else { r = 1 - rnd; for (j = 0; j &lt; 16; j++) { for (i = 0; i &lt; 16; i++) OP(dst[i], vc1_mspel_filter(src + i, stride, vmode, r)); src += stride; dst += stride; } return; } } for (j = 0; j &lt; 16; j++) { for (i = 0; i &lt; 16; i++) OP(dst[i], vc1_mspel_filter(src + i, 1, hmode, rnd)); dst += stride; src += stride; } }static void OPNAME ##pixels8x8_c(uint8_t *block, const uint8_t *pixels, ptrdiff_t line_size, int rnd){int i;for(i=0; i&lt;8; i++){OP4(*(uint32_t*)(block ), AV_RN32(pixels ));OP4(*(uint32_t*)(block+4), AV_RN32(pixels+4));pixels+=line_size;block +=line_size;}}static void OPNAME ##pixels16x16_c(uint8_t *block, const uint8_t *pixels, ptrdiff_t line_size, int rnd){int i;for(i=0; i&lt;16; i++){OP4(*(uint32_t*)(block ), AV_RN32(pixels ));OP4(*(uint32_t*)(block+ 4), AV_RN32(pixels+ 4));OP4(*(uint32_t*)(block+ 8), AV_RN32(pixels+ 8));OP4(*(uint32_t*)(block+12), AV_RN32(pixels+12));pixels+=line_size;block +=line_size;}}</cpp:value></cpp:define>









































































































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_put</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a) = av_clip_uint8(b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_avg</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a) = ((a) + av_clip_uint8(b) + 1) &gt;&gt; 1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op4_avg</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a) = rnd_avg32(a, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op4_put</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a) = (b)</cpp:value></cpp:define>

<macro><name>VC1_MSPEL_MC</name><argument_list>(<argument>op_put</argument>, <argument>op4_put</argument>, <argument>put_</argument>)</argument_list></macro>
<macro><name>VC1_MSPEL_MC</name><argument_list>(<argument>op_avg</argument>, <argument>op4_avg</argument>, <argument>avg_</argument>)</argument_list></macro>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_VC1_MSPEL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void put_vc1_mspel_mc ##a ##b ##_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride, int rnd) { put_vc1_mspel_mc(dst, src, stride, a, b, rnd); } static void avg_vc1_mspel_mc ##a ##b ##_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride, int rnd) { avg_vc1_mspel_mc(dst, src, stride, a, b, rnd); } static void put_vc1_mspel_mc ##a ##b ##_16_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride, int rnd) { put_vc1_mspel_mc_16(dst, src, stride, a, b, rnd); } static void avg_vc1_mspel_mc ##a ##b ##_16_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride, int rnd) { avg_vc1_mspel_mc_16(dst, src, stride, a, b, rnd); }</cpp:value></cpp:define>

























<macro><name>PUT_VC1_MSPEL</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>PUT_VC1_MSPEL</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>PUT_VC1_MSPEL</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>PUT_VC1_MSPEL</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>PUT_VC1_MSPEL</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>PUT_VC1_MSPEL</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>PUT_VC1_MSPEL</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>PUT_VC1_MSPEL</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>
<macro><name>PUT_VC1_MSPEL</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>
<macro><name>PUT_VC1_MSPEL</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>
<macro><name>PUT_VC1_MSPEL</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>PUT_VC1_MSPEL</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>
<macro><name>PUT_VC1_MSPEL</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>
<macro><name>PUT_VC1_MSPEL</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>
<macro><name>PUT_VC1_MSPEL</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chroma_mc</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((A * src[a] + B * src[a + 1] + C * src[stride + a] + D * src[stride + a + 1] + 32 - 4) &gt;&gt; 6)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type> <name>put_no_rnd_vc1_chroma_mc8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter> ,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter> ,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>A</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>B</name> <init>= <expr><operator>(</operator><name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>C</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>D</name> <init>= <expr><operator>(</operator><name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_no_rnd_vc1_chroma_mc4_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>A</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>B</name> <init>= <expr><operator>(</operator><name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>C</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>D</name> <init>= <expr><operator>(</operator><name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>avg2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) + (b) + 1) &gt;&gt; 1)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_no_rnd_vc1_chroma_mc8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter> ,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter> ,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>A</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>B</name> <init>= <expr><operator>(</operator><name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>C</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>D</name> <init>= <expr><operator>(</operator><name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_no_rnd_vc1_chroma_mc4_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter> ,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter> ,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>A</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>B</name> <init>= <expr><operator>(</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>C</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>D</name> <init>= <expr><operator>(</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>avg2</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>chroma_mc</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_WMV3IMAGE_DECODER</name> <operator>||</operator> <name>CONFIG_VC1IMAGE_DECODER</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sprite_h_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>advance</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name><name>src</name><index>[<expr><operator>(</operator><name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>src</name><index>[<expr><operator>(</operator><name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>a</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>b</name> <operator>-</operator> <name>a</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>advance</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>sprite_v_template</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1b</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset1</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>two_sprites</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2b</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scaled</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a1</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>width</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <operator>*</operator><name>src1a</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scaled</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <operator>*</operator><name>src1b</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <name>a1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>b1</name> <operator>-</operator> <name>a1</name><operator>)</operator> <operator>*</operator> <name>offset1</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>two_sprites</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <operator>*</operator><name>src2a</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>scaled</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b2</name> <operator>=</operator> <operator>*</operator><name>src2b</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <name>a2</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>b2</name> <operator>-</operator> <name>a2</name><operator>)</operator> <operator>*</operator> <name>offset2</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <name>a1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>a2</name> <operator>-</operator> <name>a1</name><operator>)</operator> <operator>*</operator> <name>alpha</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>a1</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sprite_v_single_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1b</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>sprite_v_template</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src1a</name></expr></argument>, <argument><expr><name>src1b</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sprite_v_double_noscale_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>sprite_v_template</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src1a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src2a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sprite_v_double_onescale_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1b</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>sprite_v_template</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src1a</name></expr></argument>, <argument><expr><name>src1b</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src2a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sprite_v_double_twoscale_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1b</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2b</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset2</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>sprite_v_template</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src1a</name></expr></argument>, <argument><expr><name>src1b</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src2a</name></expr></argument>, <argument><expr><name>src2b</name></expr></argument>, <argument><expr><name>offset2</name></expr></argument>,
<argument><expr><name>alpha</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FN_ASSIGN</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;put_vc1_mspel_pixels_tab[1][X+4*Y] = put_vc1_mspel_mc##X##Y##_c; dsp-&gt;put_vc1_mspel_pixels_tab[0][X+4*Y] = put_vc1_mspel_mc##X##Y##_16_c; dsp-&gt;avg_vc1_mspel_pixels_tab[1][X+4*Y] = avg_vc1_mspel_mc##X##Y##_c; dsp-&gt;avg_vc1_mspel_pixels_tab[0][X+4*Y] = avg_vc1_mspel_mc##X##Y##_16_c</cpp:value></cpp:define>





<function><type><name>av_cold</name> <name>void</name></type> <name>ff_vc1dsp_init</name><parameter_list>(<parameter><decl><type><name>VC1DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_inv_trans_8x8</name></name> <operator>=</operator> <name>vc1_inv_trans_8x8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_inv_trans_4x8</name></name> <operator>=</operator> <name>vc1_inv_trans_4x8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_inv_trans_8x4</name></name> <operator>=</operator> <name>vc1_inv_trans_8x4_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_inv_trans_4x4</name></name> <operator>=</operator> <name>vc1_inv_trans_4x4_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_inv_trans_8x8_dc</name></name> <operator>=</operator> <name>vc1_inv_trans_8x8_dc_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_inv_trans_4x8_dc</name></name> <operator>=</operator> <name>vc1_inv_trans_4x8_dc_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_inv_trans_8x4_dc</name></name> <operator>=</operator> <name>vc1_inv_trans_8x4_dc_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_inv_trans_4x4_dc</name></name> <operator>=</operator> <name>vc1_inv_trans_4x4_dc_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_h_overlap</name></name> <operator>=</operator> <name>vc1_h_overlap_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_v_overlap</name></name> <operator>=</operator> <name>vc1_v_overlap_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_h_s_overlap</name></name> <operator>=</operator> <name>vc1_h_s_overlap_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_v_s_overlap</name></name> <operator>=</operator> <name>vc1_v_s_overlap_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_v_loop_filter4</name></name> <operator>=</operator> <name>vc1_v_loop_filter4_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_h_loop_filter4</name></name> <operator>=</operator> <name>vc1_h_loop_filter4_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_v_loop_filter8</name></name> <operator>=</operator> <name>vc1_v_loop_filter8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_h_loop_filter8</name></name> <operator>=</operator> <name>vc1_h_loop_filter8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_v_loop_filter16</name></name> <operator>=</operator> <name>vc1_v_loop_filter16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>vc1_h_loop_filter16</name></name> <operator>=</operator> <name>vc1_h_loop_filter16_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>put_vc1_mspel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>put_pixels16x16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>avg_vc1_mspel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>avg_pixels16x16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>put_vc1_mspel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>put_pixels8x8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>avg_vc1_mspel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>avg_pixels8x8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FN_ASSIGN</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>put_no_rnd_vc1_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>put_no_rnd_vc1_chroma_mc8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>avg_no_rnd_vc1_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>avg_no_rnd_vc1_chroma_mc8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>put_no_rnd_vc1_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>put_no_rnd_vc1_chroma_mc4_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>avg_no_rnd_vc1_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>avg_no_rnd_vc1_chroma_mc4_c</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_WMV3IMAGE_DECODER</name> <operator>||</operator> <name>CONFIG_VC1IMAGE_DECODER</name></expr></cpp:if>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>sprite_h</name></name> <operator>=</operator> <name>sprite_h_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>sprite_v_single</name></name> <operator>=</operator> <name>sprite_v_single_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>sprite_v_double_noscale</name></name> <operator>=</operator> <name>sprite_v_double_noscale_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>sprite_v_double_onescale</name></name> <operator>=</operator> <name>sprite_v_double_onescale_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>sprite_v_double_twoscale</name></name> <operator>=</operator> <name>sprite_v_double_twoscale_c</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>startcode_find_candidate</name></name> <operator>=</operator> <name>ff_startcode_find_candidate_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_AARCH64</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_vc1dsp_init_aarch64</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_vc1dsp_init_arm</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_PPC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_vc1dsp_init_ppc</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_vc1dsp_init_x86</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ARCH_MIPS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_vc1dsp_init_mips</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
