<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\texturedspenc.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"texturedsp.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>expand5</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">90</literal></expr>,
<expr><literal type="number">99</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">115</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">132</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">148</literal></expr>, <expr><literal type="number">156</literal></expr>, <expr><literal type="number">165</literal></expr>, <expr><literal type="number">173</literal></expr>, <expr><literal type="number">181</literal></expr>, <expr><literal type="number">189</literal></expr>,
<expr><literal type="number">198</literal></expr>, <expr><literal type="number">206</literal></expr>, <expr><literal type="number">214</literal></expr>, <expr><literal type="number">222</literal></expr>, <expr><literal type="number">231</literal></expr>, <expr><literal type="number">239</literal></expr>, <expr><literal type="number">247</literal></expr>, <expr><literal type="number">255</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>expand6</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">44</literal></expr>,
<expr><literal type="number">48</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">89</literal></expr>, <expr><literal type="number">93</literal></expr>,
<expr><literal type="number">97</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">105</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">117</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">134</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">142</literal></expr>,
<expr><literal type="number">146</literal></expr>, <expr><literal type="number">150</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">158</literal></expr>, <expr><literal type="number">162</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">170</literal></expr>, <expr><literal type="number">174</literal></expr>, <expr><literal type="number">178</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">186</literal></expr>, <expr><literal type="number">190</literal></expr>,
<expr><literal type="number">195</literal></expr>, <expr><literal type="number">199</literal></expr>, <expr><literal type="number">203</literal></expr>, <expr><literal type="number">207</literal></expr>, <expr><literal type="number">211</literal></expr>, <expr><literal type="number">215</literal></expr>, <expr><literal type="number">219</literal></expr>, <expr><literal type="number">223</literal></expr>, <expr><literal type="number">227</literal></expr>, <expr><literal type="number">231</literal></expr>, <expr><literal type="number">235</literal></expr>, <expr><literal type="number">239</literal></expr>,
<expr><literal type="number">243</literal></expr>, <expr><literal type="number">247</literal></expr>, <expr><literal type="number">251</literal></expr>, <expr><literal type="number">255</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>match5</name><index>[<expr><literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">13</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">13</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">13</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">13</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">13</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">13</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">13</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">14</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">14</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">14</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">14</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">13</literal></expr>, <expr><literal type="number">13</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">14</literal></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">14</literal></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">13</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">13</literal></expr>, <expr><literal type="number">17</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">13</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">13</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">14</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">14</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">14</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">17</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">17</literal></expr>, <expr><literal type="number">13</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">17</literal></expr>, <expr><literal type="number">13</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">17</literal></expr>, <expr><literal type="number">14</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">17</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">17</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">17</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">14</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">14</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">14</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">19</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">19</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">19</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">19</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">19</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">19</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">19</literal></expr>, <expr><literal type="number">17</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">17</literal></expr>, <expr><literal type="number">21</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">19</literal></expr>, <expr><literal type="number">18</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">19</literal></expr>, <expr><literal type="number">18</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">17</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">17</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">18</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">18</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">18</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">19</literal></expr>, <expr><literal type="number">21</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">21</literal></expr>, <expr><literal type="number">17</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">21</literal></expr>, <expr><literal type="number">17</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">21</literal></expr>, <expr><literal type="number">18</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">21</literal></expr>, <expr><literal type="number">19</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">21</literal></expr>, <expr><literal type="number">19</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">21</literal></expr>, <expr><literal type="number">19</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">22</literal></expr>, <expr><literal type="number">18</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">22</literal></expr>, <expr><literal type="number">18</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">22</literal></expr>, <expr><literal type="number">18</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">22</literal></expr>, <expr><literal type="number">19</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">22</literal></expr>, <expr><literal type="number">20</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">22</literal></expr>, <expr><literal type="number">20</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">23</literal></expr>, <expr><literal type="number">19</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">23</literal></expr>, <expr><literal type="number">19</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">23</literal></expr>, <expr><literal type="number">19</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">23</literal></expr>, <expr><literal type="number">20</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">23</literal></expr>, <expr><literal type="number">20</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">23</literal></expr>, <expr><literal type="number">20</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">23</literal></expr>, <expr><literal type="number">21</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">21</literal></expr>, <expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">23</literal></expr>, <expr><literal type="number">22</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">23</literal></expr>, <expr><literal type="number">22</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">20</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">20</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">21</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">21</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">22</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">22</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">22</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">23</literal></expr>, <expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">21</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">21</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">22</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">24</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">23</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">23</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">23</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">26</literal></expr>, <expr><literal type="number">22</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">26</literal></expr>, <expr><literal type="number">22</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">26</literal></expr>, <expr><literal type="number">22</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">26</literal></expr>, <expr><literal type="number">23</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">26</literal></expr>, <expr><literal type="number">24</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">26</literal></expr>, <expr><literal type="number">24</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">27</literal></expr>, <expr><literal type="number">23</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">27</literal></expr>, <expr><literal type="number">23</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">27</literal></expr>, <expr><literal type="number">23</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">27</literal></expr>, <expr><literal type="number">24</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">27</literal></expr>, <expr><literal type="number">24</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">27</literal></expr>, <expr><literal type="number">24</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">27</literal></expr>, <expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">29</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">27</literal></expr>, <expr><literal type="number">26</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">27</literal></expr>, <expr><literal type="number">26</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">28</literal></expr>, <expr><literal type="number">24</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">28</literal></expr>, <expr><literal type="number">24</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">28</literal></expr>, <expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">28</literal></expr>, <expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">28</literal></expr>, <expr><literal type="number">26</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">28</literal></expr>, <expr><literal type="number">26</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">28</literal></expr>, <expr><literal type="number">26</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">27</literal></expr>, <expr><literal type="number">29</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">29</literal></expr>, <expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">29</literal></expr>, <expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">29</literal></expr>, <expr><literal type="number">26</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">29</literal></expr>, <expr><literal type="number">27</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">29</literal></expr>, <expr><literal type="number">27</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">29</literal></expr>, <expr><literal type="number">27</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">26</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">26</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">26</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">27</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">29</literal></expr>, <expr><literal type="number">29</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">28</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">28</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">28</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">27</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">27</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">27</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">28</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">28</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">28</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">29</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">29</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>match6</name><index>[<expr><literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">13</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">17</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">14</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">13</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">17</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">17</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">17</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">19</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">19</literal></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">19</literal></expr>, <expr><literal type="number">13</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">13</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">14</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">19</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">21</literal></expr>, <expr><literal type="number">13</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">21</literal></expr>, <expr><literal type="number">14</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">21</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">17</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">22</literal></expr>, <expr><literal type="number">14</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">22</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">22</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">23</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">23</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">26</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">23</literal></expr>, <expr><literal type="number">17</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">17</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">27</literal></expr>, <expr><literal type="number">12</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">18</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">17</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">18</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">28</literal></expr>, <expr><literal type="number">13</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">19</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">26</literal></expr>, <expr><literal type="number">18</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">26</literal></expr>, <expr><literal type="number">19</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">29</literal></expr>, <expr><literal type="number">14</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">26</literal></expr>, <expr><literal type="number">20</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">27</literal></expr>, <expr><literal type="number">19</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">27</literal></expr>, <expr><literal type="number">20</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">27</literal></expr>, <expr><literal type="number">21</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">28</literal></expr>, <expr><literal type="number">20</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">28</literal></expr>, <expr><literal type="number">21</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">28</literal></expr>, <expr><literal type="number">21</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">28</literal></expr>, <expr><literal type="number">22</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">29</literal></expr>, <expr><literal type="number">21</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">29</literal></expr>, <expr><literal type="number">22</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">29</literal></expr>, <expr><literal type="number">23</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">22</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">23</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">24</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">23</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">24</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">27</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">26</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">24</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">26</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">29</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">33</literal></expr>, <expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">33</literal></expr>, <expr><literal type="number">26</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">33</literal></expr>, <expr><literal type="number">27</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">34</literal></expr>, <expr><literal type="number">26</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">34</literal></expr>, <expr><literal type="number">27</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">34</literal></expr>, <expr><literal type="number">28</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">35</literal></expr>, <expr><literal type="number">27</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">35</literal></expr>, <expr><literal type="number">28</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">35</literal></expr>, <expr><literal type="number">29</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">36</literal></expr>, <expr><literal type="number">28</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">36</literal></expr>, <expr><literal type="number">29</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">36</literal></expr>, <expr><literal type="number">30</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">35</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">37</literal></expr>, <expr><literal type="number">29</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">37</literal></expr>, <expr><literal type="number">30</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">37</literal></expr>, <expr><literal type="number">31</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">36</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">38</literal></expr>, <expr><literal type="number">30</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">38</literal></expr>, <expr><literal type="number">31</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">41</literal></expr>, <expr><literal type="number">26</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">38</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">39</literal></expr>, <expr><literal type="number">31</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">39</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">42</literal></expr>, <expr><literal type="number">27</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">39</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">43</literal></expr>, <expr><literal type="number">28</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">34</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">41</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">41</literal></expr>, <expr><literal type="number">34</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">44</literal></expr>, <expr><literal type="number">29</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">41</literal></expr>, <expr><literal type="number">35</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">42</literal></expr>, <expr><literal type="number">34</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">42</literal></expr>, <expr><literal type="number">35</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">45</literal></expr>, <expr><literal type="number">30</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">42</literal></expr>, <expr><literal type="number">36</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">43</literal></expr>, <expr><literal type="number">35</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">43</literal></expr>, <expr><literal type="number">36</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">46</literal></expr>, <expr><literal type="number">31</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">43</literal></expr>, <expr><literal type="number">37</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">44</literal></expr>, <expr><literal type="number">36</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">44</literal></expr>, <expr><literal type="number">37</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">44</literal></expr>, <expr><literal type="number">37</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">44</literal></expr>, <expr><literal type="number">38</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">45</literal></expr>, <expr><literal type="number">37</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">45</literal></expr>, <expr><literal type="number">38</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">48</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">45</literal></expr>, <expr><literal type="number">39</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">46</literal></expr>, <expr><literal type="number">38</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">46</literal></expr>, <expr><literal type="number">39</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">41</literal></expr>, <expr><literal type="number">49</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">46</literal></expr>, <expr><literal type="number">40</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">47</literal></expr>, <expr><literal type="number">39</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">47</literal></expr>, <expr><literal type="number">40</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">43</literal></expr>, <expr><literal type="number">48</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">47</literal></expr>, <expr><literal type="number">41</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">47</literal></expr>, <expr><literal type="number">42</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">48</literal></expr>, <expr><literal type="number">40</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">48</literal></expr>, <expr><literal type="number">41</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">48</literal></expr>, <expr><literal type="number">42</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">47</literal></expr>, <expr><literal type="number">45</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">49</literal></expr>, <expr><literal type="number">41</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">49</literal></expr>, <expr><literal type="number">42</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">49</literal></expr>, <expr><literal type="number">43</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">47</literal></expr>, <expr><literal type="number">48</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">50</literal></expr>, <expr><literal type="number">42</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">50</literal></expr>, <expr><literal type="number">43</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">50</literal></expr>, <expr><literal type="number">44</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">51</literal></expr>, <expr><literal type="number">43</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">51</literal></expr>, <expr><literal type="number">44</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">51</literal></expr>, <expr><literal type="number">45</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">52</literal></expr>, <expr><literal type="number">44</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">52</literal></expr>, <expr><literal type="number">45</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">52</literal></expr>, <expr><literal type="number">46</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">51</literal></expr>, <expr><literal type="number">48</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">53</literal></expr>, <expr><literal type="number">45</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">53</literal></expr>, <expr><literal type="number">46</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">53</literal></expr>, <expr><literal type="number">47</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">52</literal></expr>, <expr><literal type="number">49</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">54</literal></expr>, <expr><literal type="number">46</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">54</literal></expr>, <expr><literal type="number">47</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">57</literal></expr>, <expr><literal type="number">42</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">54</literal></expr>, <expr><literal type="number">48</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">55</literal></expr>, <expr><literal type="number">47</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">55</literal></expr>, <expr><literal type="number">48</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">58</literal></expr>, <expr><literal type="number">43</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">55</literal></expr>, <expr><literal type="number">49</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">56</literal></expr>, <expr><literal type="number">48</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">56</literal></expr>, <expr><literal type="number">49</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">59</literal></expr>, <expr><literal type="number">44</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">56</literal></expr>, <expr><literal type="number">50</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">57</literal></expr>, <expr><literal type="number">49</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">57</literal></expr>, <expr><literal type="number">50</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">60</literal></expr>, <expr><literal type="number">45</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">57</literal></expr>, <expr><literal type="number">51</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">58</literal></expr>, <expr><literal type="number">50</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">58</literal></expr>, <expr><literal type="number">51</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">61</literal></expr>, <expr><literal type="number">46</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">58</literal></expr>, <expr><literal type="number">52</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">59</literal></expr>, <expr><literal type="number">51</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">59</literal></expr>, <expr><literal type="number">52</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">62</literal></expr>, <expr><literal type="number">47</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">59</literal></expr>, <expr><literal type="number">53</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">60</literal></expr>, <expr><literal type="number">52</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">60</literal></expr>, <expr><literal type="number">53</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">60</literal></expr>, <expr><literal type="number">53</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">60</literal></expr>, <expr><literal type="number">54</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">61</literal></expr>, <expr><literal type="number">53</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">61</literal></expr>, <expr><literal type="number">54</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">61</literal></expr>, <expr><literal type="number">54</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">61</literal></expr>, <expr><literal type="number">55</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">62</literal></expr>, <expr><literal type="number">54</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">62</literal></expr>, <expr><literal type="number">55</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">62</literal></expr>, <expr><literal type="number">55</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">62</literal></expr>, <expr><literal type="number">56</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">63</literal></expr>, <expr><literal type="number">55</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">63</literal></expr>, <expr><literal type="number">56</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">63</literal></expr>, <expr><literal type="number">56</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">63</literal></expr>, <expr><literal type="number">57</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">63</literal></expr>, <expr><literal type="number">58</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">63</literal></expr>, <expr><literal type="number">59</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">63</literal></expr>, <expr><literal type="number">59</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">63</literal></expr>, <expr><literal type="number">60</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">63</literal></expr>, <expr><literal type="number">61</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">63</literal></expr>, <expr><literal type="number">62</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">63</literal></expr>, <expr><literal type="number">62</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">63</literal></expr>, <expr><literal type="number">63</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mul8</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) * (b) + 128 + (((a) * (b) + 128) &gt;&gt; 8)) &gt;&gt; 8)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rgb2rgb565</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((mul8(r, 31) &lt;&lt; 11) | (mul8(g, 63) &lt;&lt; 5) | (mul8(b, 31) &lt;&lt; 0))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lerp13</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((2 * (a) + (b)) / 3)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lerp13rgb</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>lerp13</name><argument_list>(<argument><expr><name><name>p1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>lerp13</name><argument_list>(<argument><expr><name><name>p1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>lerp13</name><argument_list>(<argument><expr><name><name>p1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rgb5652rgb</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0xf800</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gv</name> <init>= <expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x07e0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bv</name> <init>= <expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x001f</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>expand5</name><index>[<expr><name>rv</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>expand6</name><index>[<expr><name>gv</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>expand5</name><index>[<expr><name>bv</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>match_colors</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>c0</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>c1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dirr</name></decl>, <decl><type ref="prev"/><name>dirg</name></decl>, <decl><type ref="prev"/><name>dirb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dots</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>stops</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c0_point</name></decl>, <decl><type ref="prev"/><name>half_point</name></decl>, <decl><type ref="prev"/><name>c3_point</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>color</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>indexMap</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>, <expr><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>, <expr><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>, <expr><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>,
<expr><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>, <expr><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>, <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>, <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>rgb5652rgb</name><argument_list>(<argument><expr><name>color</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>c0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rgb5652rgb</name><argument_list>(<argument><expr><name>color</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lerp13rgb</name><argument_list>(<argument><expr><name>color</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>color</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>color</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lerp13rgb</name><argument_list>(<argument><expr><name>color</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>color</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>color</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dirr</name> <operator>=</operator> <name><name>color</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>color</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dirg</name> <operator>=</operator> <name><name>color</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>color</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dirb</name> <operator>=</operator> <name><name>color</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>color</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dots</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>*</operator> <name>dirr</name> <operator>+</operator>
<name><name>block</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>*</operator> <name>dirg</name> <operator>+</operator>
<name><name>block</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>*</operator> <name>dirb</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>stops</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name><name>color</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name>dirr</name> <operator>+</operator>
<name><name>color</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name>dirg</name> <operator>+</operator>
<name><name>color</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name>dirb</name></expr>;</expr_stmt>
</block_content>}</block></for>










<expr_stmt><expr><name>c0_point</name> <operator>=</operator> <operator>(</operator><name><name>stops</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>stops</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>half_point</name> <operator>=</operator> <operator>(</operator><name><name>stops</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>stops</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c3_point</name> <operator>=</operator> <operator>(</operator><name><name>stops</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>stops</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dot</name> <init>= <expr><name><name>dots</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>dot</name> <operator>&lt;</operator> <name>half_point</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>
<operator>(</operator><ternary><condition><expr><name>dot</name> <operator>&lt;</operator> <name>c0_point</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>
<operator>(</operator><ternary><condition><expr><name>dot</name> <operator>&lt;</operator> <name>c3_point</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name><name>indexMap</name><index>[<expr><name>bits</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>mask</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>optimize_colors</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pmax16</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pmin16</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>minp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>maxp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iter_power</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>magn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v_r</name></decl>, <decl><type ref="prev"/><name>v_g</name></decl>, <decl><type ref="prev"/><name>v_b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>covf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>vfr</name></decl>, <decl><type ref="prev"/><name>vfg</name></decl>, <decl><type ref="prev"/><name>vfb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mind</name></decl>, <decl><type ref="prev"/><name>maxd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cov</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>mu</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>min</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>max</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>iter</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><operator>&amp;</operator><name><name>block</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>muv</name></decl>, <decl><type ref="prev"/><name>minv</name></decl>, <decl><type ref="prev"/><name>maxv</name></decl>;</decl_stmt>

<expr_stmt><expr><name>muv</name> <operator>=</operator> <name>minv</name> <operator>=</operator> <name>maxv</name> <operator>=</operator> <name><name>bp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>muv</name> <operator>+=</operator> <name><name>bp</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;</operator> <name>minv</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>minv</name> <operator>=</operator> <name><name>bp</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>bp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name>maxv</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxv</name> <operator>=</operator> <name><name>bp</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>mu</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>muv</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>min</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name>minv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>max</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name>maxv</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>block</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>stride</name> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>mu</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><name><name>block</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>stride</name> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>mu</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>block</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>stride</name> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>mu</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>r</name> <operator>*</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cov</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>r</name> <operator>*</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cov</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>r</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cov</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>g</name> <operator>*</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cov</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name>g</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cov</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name>b</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>covf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>cov</name><index>[<expr><name>x</name></expr>]</index></name> <operator>/</operator> <literal type="number">255.0f</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>vfr</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>min</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>vfg</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name><name>max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>min</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>vfb</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name><name>max</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>min</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <name>iter_power</name></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>r</name> <init>= <expr><name>vfr</name> <operator>*</operator> <name><name>covf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>vfg</name> <operator>*</operator> <name><name>covf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>vfb</name> <operator>*</operator> <name><name>covf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>g</name> <init>= <expr><name>vfr</name> <operator>*</operator> <name><name>covf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>vfg</name> <operator>*</operator> <name><name>covf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>vfb</name> <operator>*</operator> <name><name>covf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>b</name> <init>= <expr><name>vfr</name> <operator>*</operator> <name><name>covf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>vfg</name> <operator>*</operator> <name><name>covf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>vfb</name> <operator>*</operator> <name><name>covf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vfr</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vfg</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vfb</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>magn</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>vfr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>vfg</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>magn</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>magn</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>vfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>vfb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>magn</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>magn</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>vfb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>magn</name> <operator>&lt;</operator> <literal type="number">4.0f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v_r</name> <operator>=</operator> <literal type="number">299</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v_g</name> <operator>=</operator> <literal type="number">587</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v_b</name> <operator>=</operator> <literal type="number">114</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>magn</name> <operator>=</operator> <literal type="number">512.0</literal> <operator>/</operator> <name>magn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v_r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>vfr</name> <operator>*</operator> <name>magn</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v_g</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>vfg</name> <operator>*</operator> <name>magn</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>v_b</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>vfb</name> <operator>*</operator> <name>magn</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>mind</name> <operator>=</operator> <name>maxd</name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>v_r</name> <operator>+</operator> <name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>v_g</name> <operator>+</operator> <name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>v_b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>minp</name> <operator>=</operator> <name>maxp</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dot</name> <init>= <expr><name><name>block</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>v_r</name> <operator>+</operator>
<name><name>block</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>v_g</name> <operator>+</operator>
<name><name>block</name><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>v_b</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dot</name> <operator>&lt;</operator> <name>mind</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mind</name> <operator>=</operator> <name>dot</name></expr>;</expr_stmt>
<expr_stmt><expr><name>minp</name> <operator>=</operator> <name>block</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dot</name> <operator>&gt;</operator> <name>maxd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>maxd</name> <operator>=</operator> <name>dot</name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxp</name> <operator>=</operator> <name>block</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pmax16</name> <operator>=</operator> <call><name>rgb2rgb565</name><argument_list>(<argument><expr><name><name>maxp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>maxp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>maxp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pmin16</name> <operator>=</operator> <call><name>rgb2rgb565</name><argument_list>(<argument><expr><name><name>minp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>minp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>minp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>refine_colors</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pmax16</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pmin16</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cm</name> <init>= <expr><name>mask</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>oldMin</name> <init>= <expr><operator>*</operator><name>pmin16</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>oldMax</name> <init>= <expr><operator>*</operator><name>pmax16</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>min16</name></decl>, <decl><type ref="prev"/><name>max16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>w1tab</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>prods</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x090000</literal></expr>, <expr><literal type="number">0x000900</literal></expr>, <expr><literal type="number">0x040102</literal></expr>, <expr><literal type="number">0x010402</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mask</name> <operator>^</operator> <operator>(</operator><name>mask</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>


<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, <decl><type ref="prev"/><name>g</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>r</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max16</name> <operator>=</operator> <operator>(</operator><name><name>match5</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>match6</name><index>[<expr><name>g</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <name><name>match5</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>min16</name> <operator>=</operator> <operator>(</operator><name><name>match5</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>match6</name><index>[<expr><name>g</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <name><name>match5</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>fr</name></decl>, <decl><type ref="prev"/><name>fg</name></decl>, <decl><type ref="prev"/><name>fb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>at1_r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>at1_g</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>at1_b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>at2_r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>at2_g</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>at2_b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>akku</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xx</name></decl>, <decl><type ref="prev"/><name>xy</name></decl>, <decl><type ref="prev"/><name>yy</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><name>cm</name> <operator>&amp;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w1</name> <init>= <expr><name><name>w1tab</name><index>[<expr><name>step</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>block</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><name><name>block</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>block</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>akku</name> <operator>+=</operator> <name><name>prods</name><index>[<expr><name>step</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>at1_r</name> <operator>+=</operator> <name>w1</name> <operator>*</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>at1_g</name> <operator>+=</operator> <name>w1</name> <operator>*</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name>at1_b</name> <operator>+=</operator> <name>w1</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>at2_r</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>at2_g</name> <operator>+=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name>at2_b</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cm</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name>at2_r</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name>at2_r</name> <operator>-</operator> <name>at1_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>at2_g</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name>at2_g</name> <operator>-</operator> <name>at1_g</name></expr>;</expr_stmt>
<expr_stmt><expr><name>at2_b</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name>at2_b</name> <operator>-</operator> <name>at1_b</name></expr>;</expr_stmt>


<expr_stmt><expr><name>xx</name> <operator>=</operator> <name>akku</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>yy</name> <operator>=</operator> <operator>(</operator><name>akku</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>xy</name> <operator>=</operator> <operator>(</operator><name>akku</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fr</name> <operator>=</operator> <literal type="number">3.0f</literal> <operator>*</operator> <literal type="number">31.0f</literal> <operator>/</operator> <literal type="number">255.0f</literal> <operator>/</operator> <operator>(</operator><name>xx</name> <operator>*</operator> <name>yy</name> <operator>-</operator> <name>xy</name> <operator>*</operator> <name>xy</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>fg</name> <operator>=</operator> <name>fr</name> <operator>*</operator> <literal type="number">63.0f</literal> <operator>/</operator> <literal type="number">31.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fb</name> <operator>=</operator> <name>fr</name></expr>;</expr_stmt>


<expr_stmt><expr><name>max16</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><operator>(</operator><name>at1_r</name> <operator>*</operator> <name>yy</name> <operator>-</operator> <name>at2_r</name> <operator>*</operator> <name>xy</name><operator>)</operator> <operator>*</operator> <name>fr</name> <operator>+</operator> <literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>max16</name> <operator>|=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><operator>(</operator><name>at1_g</name> <operator>*</operator> <name>yy</name> <operator>-</operator> <name>at2_g</name> <operator>*</operator> <name>xy</name><operator>)</operator> <operator>*</operator> <name>fg</name> <operator>+</operator> <literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>max16</name> <operator>|=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><operator>(</operator><name>at1_b</name> <operator>*</operator> <name>yy</name> <operator>-</operator> <name>at2_b</name> <operator>*</operator> <name>xy</name><operator>)</operator> <operator>*</operator> <name>fb</name> <operator>+</operator> <literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>min16</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><operator>(</operator><name>at2_r</name> <operator>*</operator> <name>xx</name> <operator>-</operator> <name>at1_r</name> <operator>*</operator> <name>xy</name><operator>)</operator> <operator>*</operator> <name>fr</name> <operator>+</operator> <literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>min16</name> <operator>|=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><operator>(</operator><name>at2_g</name> <operator>*</operator> <name>xx</name> <operator>-</operator> <name>at1_g</name> <operator>*</operator> <name>xy</name><operator>)</operator> <operator>*</operator> <name>fg</name> <operator>+</operator> <literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>min16</name> <operator>|=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><operator>(</operator><name>at2_b</name> <operator>*</operator> <name>xx</name> <operator>-</operator> <name>at1_b</name> <operator>*</operator> <name>xy</name><operator>)</operator> <operator>*</operator> <name>fb</name> <operator>+</operator> <literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pmin16</name> <operator>=</operator> <name>min16</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pmax16</name> <operator>=</operator> <name>max16</name></expr>;</expr_stmt>
<return>return <expr><name>oldMin</name> <operator>!=</operator> <name>min16</name> <operator>||</operator> <name>oldMax</name> <operator>!=</operator> <name>max16</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>constant_color</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>first</name> <init>= <expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>first</name> <operator>!=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>compress_color</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>max16</name></decl>, <decl><type ref="prev"/><name>min16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>constant</name> <init>= <expr><call><name>constant_color</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>constant</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0xAAAAAAAA</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>max16</name> <operator>=</operator> <operator>(</operator><name><name>match5</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>match6</name><index>[<expr><name>g</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <name><name>match5</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>min16</name> <operator>=</operator> <operator>(</operator><name><name>match5</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>match6</name><index>[<expr><name>g</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <name><name>match5</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>refine</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>optimize_colors</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>max16</name> <operator>!=</operator> <name>min16</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>match_colors</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>max16</name></expr></argument>, <argument><expr><name>min16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>refine</name> <operator>=</operator> <call><name>refine_colors</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max16</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min16</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>refine</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>max16</name> <operator>!=</operator> <name>min16</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>match_colors</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>max16</name></expr></argument>, <argument><expr><name>min16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>max16</name> <operator>&lt;</operator> <name>min16</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><name>min16</name></expr></argument>, <argument><expr><name>max16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>^=</operator> <literal type="number">0x55555555</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>max16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>min16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>compress_alpha</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dist</name></decl>, <decl><type ref="prev"/><name>bias</name></decl>, <decl><type ref="prev"/><name>dist4</name></decl>, <decl><type ref="prev"/><name>dist2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mn</name></decl>, <decl><type ref="prev"/><name>mx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>mn</name> <operator>=</operator> <name>mx</name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name><name>block</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <name>mn</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mn</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>mx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <name>mx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <name>mn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>mn</name> <operator>==</operator> <name>mx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>dist</name> <operator>=</operator> <name>mx</name> <operator>-</operator> <name>mn</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dist4</name> <operator>=</operator> <name>dist</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dist2</name> <operator>=</operator> <name>dist</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dist</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bias</name> <operator>=</operator> <name>dist</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>mn</name> <operator>*</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bias</name> <operator>=</operator> <name>dist</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <name>mn</name> <operator>*</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>alp</name> <init>= <expr><name><name>block</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>*</operator> <literal type="number">7</literal> <operator>+</operator> <name>bias</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ind</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>



<expr_stmt><expr><name>tmp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>alp</name> <operator>&gt;=</operator> <name>dist4</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>ind</name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>alp</name> <operator>-=</operator> <name>dist4</name> <operator>&amp;</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>alp</name> <operator>&gt;=</operator> <name>dist2</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>ind</name> <operator>+=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>alp</name> <operator>-=</operator> <name>dist2</name> <operator>&amp;</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ind</name> <operator>+=</operator> <operator>(</operator><name>alp</name> <operator>&gt;=</operator> <name>dist</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>ind</name> <operator>=</operator> <operator>-</operator><name>ind</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ind</name> <operator>^=</operator> <operator>(</operator><literal type="number">2</literal> <operator>&gt;</operator> <name>ind</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>ind</name> <operator>&lt;&lt;</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type> <name>rgba2ycocg</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>pixel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><operator>(</operator><name><name>pixel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>pixel</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>r</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><literal type="number">128</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>-</operator> <name>b</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><literal type="number">128</literal> <operator>+</operator> <name>g</name> <operator>-</operator> <name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>g</name> <operator>+</operator> <name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>dxt1_block</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>compress_color</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>dxt5_block</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>compress_alpha</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compress_color</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">16</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>dxt5ys_block</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>reorder</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rgba2ycocg</name><argument_list>(<argument><expr><name>reorder</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><call><name>compress_alpha</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>reorder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compress_color</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>reorder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">16</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>rgtc1u_alpha_block</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>compress_alpha</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_texturedspenc_init</name><parameter_list>(<parameter><decl><type><name>TextureDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dxt1_block</name></name> <operator>=</operator> <name>dxt1_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dxt5_block</name></name> <operator>=</operator> <name>dxt5_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dxt5ys_block</name></name> <operator>=</operator> <name>dxt5ys_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>rgtc1u_alpha_block</name></name> <operator>=</operator> <name>rgtc1u_alpha_block</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
