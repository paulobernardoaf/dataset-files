<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\movtextenc.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ass_split.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ass.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_FLAG_BOLD</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_FLAG_ITALIC</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_FLAG_UNDERLINE</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_RECORD_SIZE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_ADD</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYL_BOX</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HLIT_BOX</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HCLR_BOX</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_bprint_append_any</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>data</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_bprint_append_data(buf, ((const char*)data), size)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>style_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>style_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>style_flag</name></decl>;</decl_stmt>
}</block></struct></type> <name>StyleBox</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>end</name></decl>;</decl_stmt>
}</block></struct></type> <name>HighlightBox</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>color</name></decl>;</decl_stmt>
}</block></struct></type> <name>HilightcolorBox</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASSSplitContext</name> <modifier>*</modifier></type><name>ass_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StyleBox</name> <modifier>*</modifier><modifier>*</modifier></type><name>style_attributes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StyleBox</name> <modifier>*</modifier></type><name>style_attributes_temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HighlightBox</name></type> <name>hlit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HilightcolorBox</name></type> <name>hclr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>box_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>style_entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>style_fontID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>style_fontsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>style_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>text_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>byte_count</name></decl>;</decl_stmt>
}</block></struct></type> <name>MovTextContext</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>type</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>encode</name>)<parameter_list>(<parameter><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>tsmb_type</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>Box</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mov_text_cleanup</name><parameter_list>(<parameter><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>&amp;</operator> <name>STYL_BOX</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>style_attributes</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>style_attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_styl</name><parameter_list>(<parameter><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>tsmb_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tsmb_size</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>&amp;</operator> <name>STYL_BOX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tsmb_size</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>count</name></name> <operator>*</operator> <name>STYLE_RECORD_SIZE</name> <operator>+</operator> <name>SIZE_ADD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tsmb_size</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsmb_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_entries</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_fontID</name></name> <operator>=</operator> <literal type="number">0x00</literal> <operator>|</operator> <literal type="number">0x01</literal><operator>&lt;&lt;</operator><literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_fontsize</name></name> <operator>=</operator> <literal type="number">0x12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_color</name></name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_bprint_append_any</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsmb_size</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_append_any</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsmb_type</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_append_any</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>style_entries</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>av_bprint_append_any</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>style_attributes</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>style_start</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_append_any</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>style_attributes</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>style_end</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_append_any</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>style_fontID</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_append_any</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>style_attributes</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>style_flag</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_append_any</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>style_fontsize</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_append_any</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>style_color</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>mov_text_cleanup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_hlit</name><parameter_list>(<parameter><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>tsmb_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tsmb_size</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>&amp;</operator> <name>HLIT_BOX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tsmb_size</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tsmb_size</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsmb_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_append_any</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsmb_size</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_append_any</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsmb_type</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_append_any</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hlit</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_append_any</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hlit</name><operator>.</operator><name>end</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_hclr</name><parameter_list>(<parameter><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>tsmb_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tsmb_size</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>&amp;</operator> <name>HCLR_BOX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tsmb_size</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tsmb_size</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsmb_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_append_any</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsmb_size</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_append_any</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsmb_type</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_append_any</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hclr</name><operator>.</operator><name>color</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Box</name></type> <name><name>box_types</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'y'</literal></expr></argument>,<argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>encode_styl</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'h'</literal></expr></argument>,<argument><expr><literal type="char">'l'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>encode_hlit</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'h'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'l'</literal></expr></argument>,<argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr>, <expr><name>encode_hclr</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>size_t</name></type> <name>box_count</name> <init>= <expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>box_types</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>mov_text_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>text_sample_entry</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 
<expr><literal type="number">0x01</literal></expr>, 
<expr><literal type="number">0xFF</literal></expr>, 
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 


<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, 
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, 
<expr><literal type="number">0x00</literal></expr>, 
<expr><literal type="number">0x12</literal></expr>, 
<expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, 


<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x12</literal></expr>, 
<expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, 
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, 

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, 
<expr><literal type="number">0x05</literal></expr>, 
<expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'f'</literal></expr>,


}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <sizeof>sizeof <name>text_sample_entry</name></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name>text_sample_entry</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ass_ctx</name></name> <operator>=</operator> <call><name>ff_ass_split</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>subtitle_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>ass_ctx</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>AVERROR_INVALIDDATA</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mov_text_style_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>close</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>close</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>&amp;</operator> <name>STYL_BOX</name><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>STYL_BOX</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name><operator>-&gt;</operator><name>style_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name><operator>-&gt;</operator><name>style_start</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>text_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name><operator>-&gt;</operator><name>style_flag</name></name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name><operator>-&gt;</operator><name>style_end</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>text_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>style_attributes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mov_text_cleanup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>STYL_BOX</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name><operator>-&gt;</operator><name>style_flag</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>style_attributes</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>style_flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name><operator>-&gt;</operator><name>style_start</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>text_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name><operator>-&gt;</operator><name>style_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name><operator>-&gt;</operator><name>style_start</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>text_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<switch>switch <condition>(<expr><name>style</name></expr>)</condition><block>{<block_content>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name><operator>-&gt;</operator><name>style_flag</name></name> <operator>|=</operator> <name>STYLE_FLAG_BOLD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name><operator>-&gt;</operator><name>style_flag</name></name> <operator>|=</operator> <name>STYLE_FLAG_ITALIC</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name><operator>-&gt;</operator><name>style_flag</name></name> <operator>|=</operator> <name>STYLE_FLAG_UNDERLINE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Ignoring unmatched close tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name><operator>-&gt;</operator><name>style_end</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>text_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>style_attributes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mov_text_cleanup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>STYL_BOX</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name><operator>-&gt;</operator><name>style_flag</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>style_attributes</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>style_flag</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>style</name></expr>)</condition><block>{<block_content>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name><operator>-&gt;</operator><name>style_flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>STYLE_FLAG_BOLD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name><operator>-&gt;</operator><name>style_flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>STYLE_FLAG_ITALIC</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name><operator>-&gt;</operator><name>style_flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>STYLE_FLAG_UNDERLINE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name><operator>-&gt;</operator><name>style_flag</name></name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_attributes_temp</name><operator>-&gt;</operator><name>style_start</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>text_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>|=</operator> <name>STYL_BOX</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mov_text_color_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>color_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>color_id</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>&amp;</operator> <name>HLIT_BOX</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hlit</name><operator>.</operator><name>end</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>text_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>|=</operator> <name>HCLR_BOX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>|=</operator> <name>HLIT_BOX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hlit</name><operator>.</operator><name>start</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>text_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hclr</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>color</name> <operator>|</operator> <operator>(</operator><literal type="number">0xFF</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>




</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint16_t</name></type> <name>utf8_strlen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xE0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xC0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xE0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xF8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mov_text_text_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>utf8_len</name> <init>= <expr><call><name>utf8_strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_bprint_append_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>text_pos</name></name> <operator>+=</operator> <ternary><condition><expr><name>utf8_len</name></expr> ?</condition><then> <expr><name>utf8_len</name></expr> </then><else>: <expr><name>len</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>byte_count</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mov_text_new_line_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>forced</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_bprint_append_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>text_pos</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>byte_count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ASSCodesCallbacks</name></type> <name>mov_text_callbacks</name> <init>= <expr><block>{
<expr><operator>.</operator><name>text</name> <operator>=</operator> <name>mov_text_text_cb</name></expr>,
<expr><operator>.</operator><name>new_line</name> <operator>=</operator> <name>mov_text_new_line_cb</name></expr>,
<expr><operator>.</operator><name>style</name> <operator>=</operator> <name>mov_text_style_cb</name></expr>,
<expr><operator>.</operator><name>color</name> <operator>=</operator> <name>mov_text_color_cb</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_text_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASSDialog</name> <modifier>*</modifier></type><name>dialog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>byte_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>text_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>style_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ass</name> <init>= <expr><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ass</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>SUBTITLE_ASS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only SUBTITLE_ASS type supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_ASS_TIMING</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>ass</name></expr></argument>, <argument><expr><literal type="string">"Dialogue: "</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dialog</name> <operator>=</operator> <call><name>ff_ass_split_dialog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ass_ctx</name></name></expr></argument>, <argument><expr><name>ass</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>dialog</name> <operator>&amp;&amp;</operator> <name>num</name><operator>--</operator></expr>;</condition> <incr><expr><name>dialog</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_ass_split_override_codes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mov_text_callbacks</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>dialog</name> <operator>=</operator> <call><name>ff_ass_split_dialog2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ass_ctx</name></name></expr></argument>, <argument><expr><name>ass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dialog</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ff_ass_split_override_codes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mov_text_callbacks</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_ass_free_dialog</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_ASS_TIMING</name></expr></cpp:if>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>box_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>box_types</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>encode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>box_types</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>byte_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_bprint_is_complete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <name>bufsize</name> <operator>-</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Buffer too small for ASS event.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>len</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<label><name>exit</name>:</label>
<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>length</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_text_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ff_ass_split_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ass_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_movtext_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mov_text"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"3GPP Timed Text subtitle"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MOV_TEXT</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MovTextContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>mov_text_encode_init</name></expr>,
<expr><operator>.</operator><name>encode_sub</name> <operator>=</operator> <name>mov_text_encode_frame</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>mov_text_encode_close</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
