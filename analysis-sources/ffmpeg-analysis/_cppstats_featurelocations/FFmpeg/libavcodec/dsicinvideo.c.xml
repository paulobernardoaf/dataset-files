<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\dsicinvideo.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <name>CinVideoBitmapIndex</name> <block>{
<decl><name>CIN_CUR_BMP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>CIN_PRE_BMP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>CIN_INT_BMP</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> 
}</block></enum></type> <name>CinVideoBitmapIndex</name>;</typedef>

<typedef>typedef <type><struct>struct <name>CinVideoContext</name> <block>{
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bitmap_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>palette</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>bitmap_table</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>CinVideoContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>destroy_buffers</name><parameter_list>(<parameter><decl><type><name>CinVideoContext</name> <modifier>*</modifier></type><name>cin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cin</name><operator>-&gt;</operator><name>bitmap_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>allocate_buffers</name><parameter_list>(<parameter><decl><type><name>CinVideoContext</name> <modifier>*</modifier></type><name>cin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cin</name><operator>-&gt;</operator><name>bitmap_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't allocate bitmap buffers.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroy_buffers</name><argument_list>(<argument><expr><name>cin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>cinvideo_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CinVideoContext</name> <modifier>*</modifier></type><name>cin</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cin</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_PAL8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cin</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cin</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>allocate_buffers</name><argument_list>(<argument><expr><name>cin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cin_apply_delta_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>size</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>+=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cin_decode_huffman</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>huff_code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>huff_code_table</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dst_cur</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst</name> <operator>+</operator> <name>dst_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src_end</name> <init>= <expr><name>src</name> <operator>+</operator> <name>src_size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>huff_code_table</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>src</name> <operator>&lt;</operator> <name>src_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>huff_code</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>huff_code</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>huff_code</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>huff_code</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst_cur</name><operator>++</operator> <operator>=</operator> <name>b</name> <operator>|</operator> <operator>(</operator><name>huff_code</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst_cur</name><operator>++</operator> <operator>=</operator> <name><name>huff_code_table</name><index>[<expr><name>huff_code</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dst_cur</name> <operator>&gt;=</operator> <name>dst_end</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>huff_code</name> <operator>&amp;=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>huff_code</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst_cur</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst_cur</name><operator>++</operator> <operator>=</operator> <name><name>huff_code_table</name><index>[<expr><name>huff_code</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dst_cur</name> <operator>&gt;=</operator> <name>dst_end</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>dst_cur</name> <operator>-</operator> <name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cin_decode_lzss</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sz</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst</name> <operator>+</operator> <name>dst_size</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst_start</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src_end</name> <init>= <expr><name>src</name> <operator>+</operator> <name>src_size</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>src</name> <operator>&lt;</operator> <name>src_end</name> <operator>&amp;&amp;</operator> <name>dst</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>src</name> <operator>&lt;</operator> <name>src_end</name> <operator>&amp;&amp;</operator> <name>dst</name> <operator>&lt;</operator> <name>dst_end</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>cmd</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>dst</name> <operator>-</operator> <name>dst_start</name><operator>)</operator> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <operator>(</operator><name>cmd</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><name>dst_end</name> <operator>-</operator> <name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>sz</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>dst</name> <operator>-</operator> <name>offset</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>dst</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>dst_end</name> <operator>-</operator> <name>dst</name> <operator>&gt;</operator> <name>dst_size</name> <operator>-</operator> <name>dst_size</name><operator>/</operator><literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cin_decode_rle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><name>dst</name> <operator>+</operator> <name>dst_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src_end</name> <init>= <expr><name>src</name> <operator>+</operator> <name>src_size</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>src</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>src_end</name> <operator>&amp;&amp;</operator> <name>dst</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>code</name> <operator>-</operator> <literal type="number">0x7F</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name><operator>++</operator></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>dst_end</name> <operator>-</operator> <name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>code</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>src_end</name><operator>-</operator><name>src</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"RLE overread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>FFMIN3</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>dst_end</name> <operator>-</operator> <name>dst</name></expr></argument>, <argument><expr><name>src_end</name> <operator>-</operator> <name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>dst_end</name> <operator>-</operator> <name>dst</name> <operator>&gt;</operator> <name>dst_size</name> <operator>-</operator> <name>dst_size</name><operator>/</operator><literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cinvideo_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CinVideoContext</name> <modifier>*</modifier></type><name>cin</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>palette_type</name></decl>, <decl><type ref="prev"/><name>palette_colors_count</name></decl>,
<decl><type ref="prev"/><name>bitmap_frame_type</name></decl>, <decl><type ref="prev"/><name>bitmap_frame_size</name></decl>, <decl><type ref="prev"/><name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>palette_type</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>palette_colors_count</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bitmap_frame_type</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap_frame_size</name> <operator>=</operator> <name>buf_size</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>bitmap_frame_size</name> <operator>&lt;</operator> <name>palette_colors_count</name> <operator>*</operator> <operator>(</operator><literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name>palette_type</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>palette_type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>palette_colors_count</name> <operator>&gt;</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>palette_colors_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>cin</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFU</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator> <call><name>bytestream_get_le24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bitmap_frame_size</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>palette_colors_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>cin</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFU</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator> <call><name>AV_RL24</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bitmap_frame_size</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>



<switch>switch <condition>(<expr><name>bitmap_frame_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>cin_decode_rle</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bitmap_frame_size</name></expr></argument>,
<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_table</name><index>[<expr><name>CIN_CUR_BMP</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">34</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>cin_decode_rle</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bitmap_frame_size</name></expr></argument>,
<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_table</name><index>[<expr><name>CIN_CUR_BMP</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cin_apply_delta_data</name><argument_list>(<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_table</name><index>[<expr><name>CIN_PRE_BMP</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_table</name><index>[<expr><name>CIN_CUR_BMP</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">35</literal></expr>:</case>
<expr_stmt><expr><name>bitmap_frame_size</name> <operator>=</operator> <call><name>cin_decode_huffman</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bitmap_frame_size</name></expr></argument>,
<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_table</name><index>[<expr><name>CIN_INT_BMP</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>cin_decode_rle</name><argument_list>(<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_table</name><index>[<expr><name>CIN_INT_BMP</name></expr>]</index></name></expr></argument>, <argument><expr><name>bitmap_frame_size</name></expr></argument>,
<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_table</name><index>[<expr><name>CIN_CUR_BMP</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">36</literal></expr>:</case>
<expr_stmt><expr><name>bitmap_frame_size</name> <operator>=</operator> <call><name>cin_decode_huffman</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bitmap_frame_size</name></expr></argument>,
<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_table</name><index>[<expr><name>CIN_INT_BMP</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>cin_decode_rle</name><argument_list>(<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_table</name><index>[<expr><name>CIN_INT_BMP</name></expr>]</index></name></expr></argument>, <argument><expr><name>bitmap_frame_size</name></expr></argument>,
<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_table</name><index>[<expr><name>CIN_CUR_BMP</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cin_apply_delta_data</name><argument_list>(<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_table</name><index>[<expr><name>CIN_PRE_BMP</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_table</name><index>[<expr><name>CIN_CUR_BMP</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">37</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>cin_decode_huffman</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bitmap_frame_size</name></expr></argument>,
<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_table</name><index>[<expr><name>CIN_CUR_BMP</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_size</name></name> <operator>-</operator> <name><name>avctx</name><operator>-&gt;</operator><name>discard_damaged_percentage</name></name><operator>*</operator><name><name>cin</name><operator>-&gt;</operator><name>bitmap_size</name></name><operator>/</operator><literal type="number">100</literal> <operator>&gt;</operator> <name>res</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">38</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>cin_decode_lzss</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bitmap_frame_size</name></expr></argument>,
<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_table</name><index>[<expr><name>CIN_CUR_BMP</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">39</literal></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>cin_decode_lzss</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bitmap_frame_size</name></expr></argument>,
<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_table</name><index>[<expr><name>CIN_CUR_BMP</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cin_apply_delta_data</name><argument_list>(<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_table</name><index>[<expr><name>CIN_PRE_BMP</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_table</name><index>[<expr><name>CIN_CUR_BMP</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>ff_reget_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>cin</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cin</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cin</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>palette_has_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>cin</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>cin</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name><name>cin</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_table</name><index>[<expr><name>CIN_CUR_BMP</name></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>cin</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,
<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_table</name><index>[<expr><name>CIN_CUR_BMP</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>cin</name><operator>-&gt;</operator><name>bitmap_table</name><index>[<expr><name>CIN_PRE_BMP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>cin</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>cinvideo_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CinVideoContext</name> <modifier>*</modifier></type><name>cin</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cin</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>destroy_buffers</name><argument_list>(<argument><expr><name>cin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_dsicinvideo_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dsicinvideo"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Delphine Software International CIN video"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_DSICINVIDEO</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CinVideoContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>cinvideo_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>cinvideo_decode_end</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>cinvideo_decode_frame</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
