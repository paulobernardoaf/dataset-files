<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\lsp.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAC_BITS</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mips/lsp_mips.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>ff_acelp_reorder_lsf</name><parameter_list>(<parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>lsfq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lsfq_min_distance</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lsfq_min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lsfq_max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lp_order</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>



<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>lp_order</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name></expr>;</init> <condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>lsfq</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name><name>lsfq</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name><name>lsfq</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>lsfq</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>lp_order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>lsfq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>lsfq</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>lsfq_min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lsfq_min</name> <operator>=</operator> <name><name>lsfq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>lsfq_min_distance</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>lsfq</name><index>[<expr><name>lp_order</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>lsfq</name><index>[<expr><name>lp_order</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lsfq_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_set_min_dist_lsf</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lsf</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>min_spacing</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>prev</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>lsf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>lsf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>prev</name> <operator>+</operator> <name>min_spacing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>tab_cos</name><index>[<expr><literal type="number">65</literal></expr>]</index></name> <init>=
<expr><block>{
<expr><literal type="number">32767</literal></expr>, <expr><literal type="number">32738</literal></expr>, <expr><literal type="number">32617</literal></expr>, <expr><literal type="number">32421</literal></expr>, <expr><literal type="number">32145</literal></expr>, <expr><literal type="number">31793</literal></expr>, <expr><literal type="number">31364</literal></expr>, <expr><literal type="number">30860</literal></expr>,
<expr><literal type="number">30280</literal></expr>, <expr><literal type="number">29629</literal></expr>, <expr><literal type="number">28905</literal></expr>, <expr><literal type="number">28113</literal></expr>, <expr><literal type="number">27252</literal></expr>, <expr><literal type="number">26326</literal></expr>, <expr><literal type="number">25336</literal></expr>, <expr><literal type="number">24285</literal></expr>,
<expr><literal type="number">23176</literal></expr>, <expr><literal type="number">22011</literal></expr>, <expr><literal type="number">20793</literal></expr>, <expr><literal type="number">19525</literal></expr>, <expr><literal type="number">18210</literal></expr>, <expr><literal type="number">16851</literal></expr>, <expr><literal type="number">15451</literal></expr>, <expr><literal type="number">14014</literal></expr>,
<expr><literal type="number">12543</literal></expr>, <expr><literal type="number">11043</literal></expr>, <expr><literal type="number">9515</literal></expr>, <expr><literal type="number">7965</literal></expr>, <expr><literal type="number">6395</literal></expr>, <expr><literal type="number">4810</literal></expr>, <expr><literal type="number">3214</literal></expr>, <expr><literal type="number">1609</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1607</literal></expr>, <expr><operator>-</operator><literal type="number">3211</literal></expr>, <expr><operator>-</operator><literal type="number">4808</literal></expr>, <expr><operator>-</operator><literal type="number">6393</literal></expr>, <expr><operator>-</operator><literal type="number">7962</literal></expr>, <expr><operator>-</operator><literal type="number">9513</literal></expr>, <expr><operator>-</operator><literal type="number">11040</literal></expr>,
<expr><operator>-</operator><literal type="number">12541</literal></expr>, <expr><operator>-</operator><literal type="number">14012</literal></expr>, <expr><operator>-</operator><literal type="number">15449</literal></expr>, <expr><operator>-</operator><literal type="number">16848</literal></expr>, <expr><operator>-</operator><literal type="number">18207</literal></expr>, <expr><operator>-</operator><literal type="number">19523</literal></expr>, <expr><operator>-</operator><literal type="number">20791</literal></expr>, <expr><operator>-</operator><literal type="number">22009</literal></expr>,
<expr><operator>-</operator><literal type="number">23174</literal></expr>, <expr><operator>-</operator><literal type="number">24283</literal></expr>, <expr><operator>-</operator><literal type="number">25334</literal></expr>, <expr><operator>-</operator><literal type="number">26324</literal></expr>, <expr><operator>-</operator><literal type="number">27250</literal></expr>, <expr><operator>-</operator><literal type="number">28111</literal></expr>, <expr><operator>-</operator><literal type="number">28904</literal></expr>, <expr><operator>-</operator><literal type="number">29627</literal></expr>,
<expr><operator>-</operator><literal type="number">30279</literal></expr>, <expr><operator>-</operator><literal type="number">30858</literal></expr>, <expr><operator>-</operator><literal type="number">31363</literal></expr>, <expr><operator>-</operator><literal type="number">31792</literal></expr>, <expr><operator>-</operator><literal type="number">32144</literal></expr>, <expr><operator>-</operator><literal type="number">32419</literal></expr>, <expr><operator>-</operator><literal type="number">32616</literal></expr>, <expr><operator>-</operator><literal type="number">32736</literal></expr>, <expr><operator>-</operator><literal type="number">32768</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int16_t</name></type> <name>ff_cos</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>offset</name><init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>ind</name> <init>= <expr><name>arg</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>arg</name> <operator>&lt;=</operator> <literal type="number">0x3fff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>tab_cos</name><index>[<expr><name>ind</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>offset</name> <operator>*</operator> <operator>(</operator><name><name>tab_cos</name><index>[<expr><name>ind</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>tab_cos</name><index>[<expr><name>ind</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_acelp_lsf2lsp</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lsp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>lsf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lp_order</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>lp_order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lsp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ff_cos</name><argument_list>(<argument><expr><name><name>lsf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">20861</literal> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_acelp_lsf2lspd</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>lsp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>lsf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lp_order</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lp_order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>lsp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">2.0</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name><name>lsf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>lsp2poly</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>lsp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lp_half_order</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x400000</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>lsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt> 

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>lp_half_order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name></expr>;</init> <condition><expr><name>j</name><operator>&gt;</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-=</operator> <call><name>MULL</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lsp</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FRAC_BITS</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>f</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <name><name>lsp</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_acelp_lsp2lpc</name><parameter_list>(<parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>lp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>lsp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lp_half_order</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>f1</name><index>[<expr><name>MAX_LP_HALF_ORDER</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>f2</name><index>[<expr><name>MAX_LP_HALF_ORDER</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>lsp2poly</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><name>lsp</name></expr></argument> , <argument><expr><name>lp_half_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lsp2poly</name><argument_list>(<argument><expr><name>f2</name></expr></argument>, <argument><expr><name>lsp</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>lp_half_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>lp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>lp_half_order</name><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ff1</name> <init>= <expr><name><name>f1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>f1</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ff2</name> <init>= <expr><name><name>f2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>f2</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>ff1</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>lp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ff1</name> <operator>+</operator> <name>ff2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>lp</name><index>[<expr><operator>(</operator><name>lp_half_order</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ff1</name> <operator>-</operator> <name>ff2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt> 
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_amrwb_lsp2lpc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>lsp</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lp_order</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>lp_half_order</name> <init>= <expr><name>lp_order</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>buf</name><index>[<expr><name>MAX_LP_HALF_ORDER</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>pa</name><index>[<expr><name>MAX_LP_HALF_ORDER</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>qa</name> <init>= <expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>qa</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_lsp2polyf</name><argument_list>(<argument><expr><name>lsp</name></expr></argument> , <argument><expr><name>pa</name></expr></argument>, <argument><expr><name>lp_half_order</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_lsp2polyf</name><argument_list>(<argument><expr><name>lsp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>qa</name></expr></argument>, <argument><expr><name>lp_half_order</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name>lp_order</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lp_half_order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>paf</name> <init>= <expr><name><name>pa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>lsp</name><index>[<expr><name>lp_order</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>qaf</name> <init>= <expr><operator>(</operator><name><name>qa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>qa</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>lsp</name><index>[<expr><name>lp_order</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>lp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>paf</name> <operator>+</operator> <name>qaf</name><operator>)</operator> <operator>*</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lp</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>paf</name> <operator>-</operator> <name>qaf</name><operator>)</operator> <operator>*</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>lp</name><index>[<expr><name>lp_half_order</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>+</operator> <name><name>lsp</name><index>[<expr><name>lp_order</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator>
<name><name>pa</name><index>[<expr><name>lp_half_order</name></expr>]</index></name> <operator>*</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lp</name><index>[<expr><name>lp_order</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lsp</name><index>[<expr><name>lp_order</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_acelp_lp_decode</name><parameter_list>(<parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>lp_1st</name></decl></parameter>, <parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>lp_2nd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>lsp_2nd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>lsp_prev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lp_order</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>lsp_1st</name><index>[<expr><name>MAX_LP_ORDER</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>lp_order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>G729_BITEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>lsp_1st</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>lsp_2nd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>lsp_prev</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>lsp_1st</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>lsp_2nd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>lsp_prev</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ff_acelp_lsp2lpc</name><argument_list>(<argument><expr><name>lp_1st</name></expr></argument>, <argument><expr><name>lsp_1st</name></expr></argument>, <argument><expr><name>lp_order</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ff_acelp_lsp2lpc</name><argument_list>(<argument><expr><name>lp_2nd</name></expr></argument>, <argument><expr><name>lsp_2nd</name></expr></argument>, <argument><expr><name>lp_order</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ff_lsp2polyf</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>ff_lsp2polyf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>lsp</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lp_half_order</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name><name>lsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lsp</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>lp_half_order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>val</name> <init>= <expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name><name>lsp</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>val</name> <operator>*</operator> <name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&gt;</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>f</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>val</name> <operator>+</operator> <name><name>f</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type> <name>ff_acelp_lspd2lpc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>lsp</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lpc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lp_half_order</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>pa</name><index>[<expr><name>MAX_LP_HALF_ORDER</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>qa</name><index>[<expr><name>MAX_LP_HALF_ORDER</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>lpc2</name> <init>= <expr><name>lpc</name> <operator>+</operator> <operator>(</operator><name>lp_half_order</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>lp_half_order</name> <operator>&lt;=</operator> <name>MAX_LP_HALF_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_lsp2polyf</name><argument_list>(<argument><expr><name>lsp</name></expr></argument>, <argument><expr><name>pa</name></expr></argument>, <argument><expr><name>lp_half_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_lsp2polyf</name><argument_list>(<argument><expr><name>lsp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>qa</name></expr></argument>, <argument><expr><name>lp_half_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>lp_half_order</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>paf</name> <init>= <expr><name><name>pa</name><index>[<expr><name>lp_half_order</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>pa</name><index>[<expr><name>lp_half_order</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>qaf</name> <init>= <expr><name><name>qa</name><index>[<expr><name>lp_half_order</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>qa</name><index>[<expr><name>lp_half_order</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lpc</name> <index>[ <expr><name>lp_half_order</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.5</literal><operator>*</operator><operator>(</operator><name>paf</name><operator>+</operator><name>qaf</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lpc2</name><index>[<expr><operator>-</operator><name>lp_half_order</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.5</literal><operator>*</operator><operator>(</operator><name>paf</name><operator>-</operator><name>qaf</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_sort_nearly_sorted_floats</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>vals</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>vals</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name><name>vals</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>vals</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>vals</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></function>
</unit>
