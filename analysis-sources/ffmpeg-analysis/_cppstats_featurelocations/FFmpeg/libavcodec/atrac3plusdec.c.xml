<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\atrac3plusdec.c">



































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atrac.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atrac3plus.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>ATRAC3PContext</name> <block>{
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>ATRAC3P_FRAME_SAMPLES</name></expr>]</index></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>mdct_buf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>ATRAC3P_FRAME_SAMPLES</name></expr>]</index></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>time_buf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>ATRAC3P_FRAME_SAMPLES</name></expr>]</index></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>outp_buf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>ATRAC3P_FRAME_SAMPLES</name></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AtracGCContext</name></type> <name>gainc_ctx</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>FFTContext</name></type> <name>mdct_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTContext</name></type> <name>ipqf_dct_ctx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ch_units</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>num_channel_blocks</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>channel_blocks</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>my_channel_layout</name></decl>;</decl_stmt> 
}</block></struct></type> <name>ATRAC3PContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>atrac3p_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ATRAC3PContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mdct_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ipqf_dct_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>set_channel_params</name><parameter_list>(<parameter><decl><type><name>ATRAC3PContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>!=</operator> <name>AV_CH_FRONT_LEFT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_MONO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_channel_blocks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CH_UNIT_MONO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_STEREO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_channel_blocks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CH_UNIT_STEREO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_SURROUND</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_channel_blocks</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CH_UNIT_STEREO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>CH_UNIT_MONO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_4POINT0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_channel_blocks</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CH_UNIT_STEREO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>CH_UNIT_MONO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>CH_UNIT_MONO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_5POINT1_BACK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_channel_blocks</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CH_UNIT_STEREO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>CH_UNIT_MONO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>CH_UNIT_STEREO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>CH_UNIT_MONO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_6POINT1_BACK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_channel_blocks</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CH_UNIT_STEREO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>CH_UNIT_MONO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>CH_UNIT_STEREO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>CH_UNIT_MONO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>CH_UNIT_MONO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_7POINT1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_channel_blocks</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CH_UNIT_STEREO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>CH_UNIT_MONO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>CH_UNIT_STEREO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>CH_UNIT_STEREO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>CH_UNIT_MONO</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Unsupported channel count: %d!\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>atrac3p_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ATRAC3PContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"block_align is not set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_atrac3p_init_vlcs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ff_mdct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ipqf_dct_ctx</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">32.0</literal> <operator>/</operator> <literal type="number">32768.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_atrac3p_init_imdct</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mdct_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_atrac_init_gain_compensation</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gainc_ctx</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_atrac3p_init_wave_synth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_channel_params</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>my_channel_layout</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_channel_blocks</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fdsp</name></name> <operator>=</operator> <call><name>avpriv_float_dsp_alloc</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>fdsp</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_channel_blocks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>ch_num</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>wnd_shape</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>wnd_shape_hist</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>wnd_shape_prev</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>wnd_shape_hist</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>gain_data</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>gain_data_hist</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>gain_data_prev</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>gain_data_hist</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>tones_info</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>tones_info_hist</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>tones_info_prev</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>tones_info_hist</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>waves_info</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>wave_synth_hist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>waves_info_prev</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>wave_synth_hist</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_residual_spectrum</name><parameter_list>(<parameter><decl><type><name>ATRAC3PContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ch_unit</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>ATRAC3P_FRAME_SAMPLES</name></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>,
<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>qu</name></decl>, <decl><type ref="prev"/><name>nspeclines</name></decl>, <decl><type ref="prev"/><name>RNG_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>sb_RNG_index</name><index>[<expr><name>ATRAC3P_SUBBANDS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ch_unit</name><operator>-&gt;</operator><name>mute_flag</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>num_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>out</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ATRAC3P_FRAME_SAMPLES</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>out</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>qu</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>RNG_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>qu</name> <operator>&lt;</operator> <name><name>ch_unit</name><operator>-&gt;</operator><name>used_quant_units</name></name></expr>;</condition> <incr><expr><name>qu</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>RNG_index</name> <operator>+=</operator> <name><name>ch_unit</name><operator>-&gt;</operator><name>channels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>qu_sf_idx</name><index>[<expr><name>qu</name></expr>]</index></name> <operator>+</operator>
<name><name>ch_unit</name><operator>-&gt;</operator><name>channels</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>qu_sf_idx</name><index>[<expr><name>qu</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>ch_unit</name><operator>-&gt;</operator><name>num_coded_subbands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr><operator>,</operator> <expr><name>RNG_index</name> <operator>+=</operator> <literal type="number">128</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sb_RNG_index</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <name>RNG_index</name> <operator>&amp;</operator> <literal type="number">0x3FC</literal></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>num_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>out</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ATRAC3P_FRAME_SAMPLES</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>out</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>qu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>qu</name> <operator>&lt;</operator> <name><name>ch_unit</name><operator>-&gt;</operator><name>used_quant_units</name></name></expr>;</condition> <incr><expr><name>qu</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>&amp;</operator><name><name>ch_unit</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>spectrum</name><index>[<expr><name><name>ff_atrac3p_qu_to_spec_pos</name><index>[<expr><name>qu</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>&amp;</operator><name><name>out</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name><name>ff_atrac3p_qu_to_spec_pos</name><index>[<expr><name>qu</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nspeclines</name> <operator>=</operator> <name><name>ff_atrac3p_qu_to_spec_pos</name><index>[<expr><name>qu</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator>
<name><name>ff_atrac3p_qu_to_spec_pos</name><index>[<expr><name>qu</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ch_unit</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>qu_wordlen</name><index>[<expr><name>qu</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>ff_atrac3p_sf_tab</name><index>[<expr><name><name>ch_unit</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>qu_sf_idx</name><index>[<expr><name>qu</name></expr>]</index></name></expr>]</index></name> <operator>*</operator>
<name><name>ff_atrac3p_mant_tab</name><index>[<expr><name><name>ch_unit</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>qu_wordlen</name><index>[<expr><name>qu</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nspeclines</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>q</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>ch_unit</name><operator>-&gt;</operator><name>num_coded_subbands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_atrac3p_power_compensation</name><argument_list>(<argument><expr><name>ch_unit</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>sb_RNG_index</name><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ch_unit</name><operator>-&gt;</operator><name>unit_type</name></name> <operator>==</operator> <name>CH_UNIT_STEREO</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>ch_unit</name><operator>-&gt;</operator><name>num_coded_subbands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ch_unit</name><operator>-&gt;</operator><name>swap_channels</name><index>[<expr><name>sb</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ATRAC3P_SUBBAND_SAMPLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>sb</name> <operator>*</operator> <name>ATRAC3P_SUBBAND_SAMPLES</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>sb</name> <operator>*</operator> <name>ATRAC3P_SUBBAND_SAMPLES</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ch_unit</name><operator>-&gt;</operator><name>negate_coeffs</name><index>[<expr><name>sb</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ATRAC3P_SUBBAND_SAMPLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>sb</name> <operator>*</operator> <name>ATRAC3P_SUBBAND_SAMPLES</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>sb</name> <operator>*</operator> <name>ATRAC3P_SUBBAND_SAMPLES</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reconstruct_frame</name><parameter_list>(<parameter><decl><type><name>ATRAC3PContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ch_unit</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>num_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>ch_unit</name><operator>-&gt;</operator><name>num_subbands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ff_atrac3p_imdct</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mdct_ctx</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name> <operator>*</operator> <name>ATRAC3P_SUBBAND_SAMPLES</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mdct_buf</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name> <operator>*</operator> <name>ATRAC3P_SUBBAND_SAMPLES</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>ch_unit</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>wnd_shape_prev</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator>
<name><name>ch_unit</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>wnd_shape</name><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ff_atrac_gain_compensation</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gainc_ctx</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mdct_buf</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name> <operator>*</operator> <name>ATRAC3P_SUBBAND_SAMPLES</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ch_unit</name><operator>-&gt;</operator><name>prev_buf</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name> <operator>*</operator> <name>ATRAC3P_SUBBAND_SAMPLES</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ch_unit</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>gain_data_prev</name><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ch_unit</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>,
<argument><expr><name>ATRAC3P_SUBBAND_SAMPLES</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>time_buf</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name> <operator>*</operator> <name>ATRAC3P_SUBBAND_SAMPLES</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ch_unit</name><operator>-&gt;</operator><name>prev_buf</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name><name>ch_unit</name><operator>-&gt;</operator><name>num_subbands</name></name> <operator>*</operator> <name>ATRAC3P_SUBBAND_SAMPLES</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>ATRAC3P_SUBBANDS</name> <operator>-</operator> <name><name>ch_unit</name><operator>-&gt;</operator><name>num_subbands</name></name><operator>)</operator> <operator>*</operator>
<name>ATRAC3P_SUBBAND_SAMPLES</name> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name><name>ch_unit</name><operator>-&gt;</operator><name>prev_buf</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name><name>ch_unit</name><operator>-&gt;</operator><name>num_subbands</name></name> <operator>*</operator> <name>ATRAC3P_SUBBAND_SAMPLES</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>time_buf</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name><name>ch_unit</name><operator>-&gt;</operator><name>num_subbands</name></name> <operator>*</operator> <name>ATRAC3P_SUBBAND_SAMPLES</name></expr>]</index></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>ATRAC3P_SUBBANDS</name> <operator>-</operator> <name><name>ch_unit</name><operator>-&gt;</operator><name>num_subbands</name></name><operator>)</operator> <operator>*</operator>
<name>ATRAC3P_SUBBAND_SAMPLES</name> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>time_buf</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name><name>ch_unit</name><operator>-&gt;</operator><name>num_subbands</name></name> <operator>*</operator> <name>ATRAC3P_SUBBAND_SAMPLES</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>ch_unit</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>tones_present</name></name> <operator>||</operator>
<name><name>ch_unit</name><operator>-&gt;</operator><name>waves_info_prev</name><operator>-&gt;</operator><name>tones_present</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>ch_unit</name><operator>-&gt;</operator><name>num_subbands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ch_unit</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>tones_info</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name> <operator>||</operator>
<name><name>ch_unit</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>tones_info_prev</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ff_atrac3p_generate_tones</name><argument_list>(<argument><expr><name>ch_unit</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>time_buf</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name> <operator>*</operator> <literal type="number">128</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ff_atrac3p_ipqf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ipqf_dct_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ch_unit</name><operator>-&gt;</operator><name>ipqf_ctx</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>time_buf</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>outp_buf</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>num_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>ch_unit</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>wnd_shape</name></expr></argument>,
<argument><expr><name><name>ch_unit</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>wnd_shape_prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>AtracGainInfo</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>ch_unit</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>gain_data</name></expr></argument>,
<argument><expr><name><name>ch_unit</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>gain_data_prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>Atrac3pWavesData</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>ch_unit</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>tones_info</name></expr></argument>,
<argument><expr><name><name>ch_unit</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>tones_info_prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>Atrac3pWaveSynthParams</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>ch_unit</name><operator>-&gt;</operator><name>waves_info</name></name></expr></argument>, <argument><expr><name><name>ch_unit</name><operator>-&gt;</operator><name>waves_info_prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>atrac3p_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ATRAC3PContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>ch_unit_id</name></decl>, <decl><type ref="prev"/><name>ch_block</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>out_ch_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>channels_to_process</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples_p</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>ATRAC3P_FRAME_SAMPLES</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid start bit!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>ch_unit_id</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CH_UNIT_TERMINATOR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ch_unit_id</name> <operator>==</operator> <name>CH_UNIT_EXTENSION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Channel unit extension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ch_block</name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_channel_blocks</name></name> <operator>||</operator>
<name><name>ctx</name><operator>-&gt;</operator><name>channel_blocks</name><index>[<expr><name>ch_block</name></expr>]</index></name> <operator>!=</operator> <name>ch_unit_id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Frame data doesn't match channel configuration!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name><index>[<expr><name>ch_block</name></expr>]</index></name><operator>.</operator><name>unit_type</name> <operator>=</operator> <name>ch_unit_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name>channels_to_process</name> <operator>=</operator> <name>ch_unit_id</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_atrac3p_decode_channel_unit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name><index>[<expr><name>ch_block</name></expr>]</index></name></expr></argument>,
<argument><expr><name>channels_to_process</name></expr></argument>,
<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>decode_residual_spectrum</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name><index>[<expr><name>ch_block</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>,
<argument><expr><name>channels_to_process</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reconstruct_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ch_units</name><index>[<expr><name>ch_block</name></expr>]</index></name></expr></argument>,
<argument><expr><name>channels_to_process</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels_to_process</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>samples_p</name><index>[<expr><name>out_ch_index</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outp_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>ATRAC3P_FRAME_SAMPLES</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>samples_p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>ch_block</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>out_ch_index</name> <operator>+=</operator> <name>channels_to_process</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ATRAC3P</name></expr> ?</condition><then> <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_atrac3p_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"atrac3plus"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"ATRAC3+ (Adaptive TRansform Acoustic Coding 3+)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_ATRAC3P</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ATRAC3PContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>atrac3p_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>atrac3p_decode_close</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>atrac3p_decode_frame</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_atrac3pal_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"atrac3plusal"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"ATRAC3+ AL (Adaptive TRansform Acoustic Coding 3+ Advanced Lossless)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_ATRAC3PAL</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ATRAC3PContext</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>atrac3p_decode_init</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>atrac3p_decode_close</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>atrac3p_decode_frame</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
