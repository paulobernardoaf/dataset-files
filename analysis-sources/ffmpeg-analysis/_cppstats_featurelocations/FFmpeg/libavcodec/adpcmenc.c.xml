<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\adpcmenc.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adpcm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adpcm_data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>







<typedef>typedef <type><struct>struct <name>TrellisPath</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nibble</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev</name></decl>;</decl_stmt>
}</block></struct></type> <name>TrellisPath</name>;</typedef>

<typedef>typedef <type><struct>struct <name>TrellisNode</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ssd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>step</name></decl>;</decl_stmt>
}</block></struct></type> <name>TrellisNode</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ADPCMEncodeContext</name> <block>{
<decl_stmt><decl><type><name>ADPCMChannelStatus</name></type> <name><name>status</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TrellisPath</name> <modifier>*</modifier></type><name>paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TrellisNode</name> <modifier>*</modifier></type><name>node_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TrellisNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodep_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>trellis_hash</name></decl>;</decl_stmt>
}</block></struct></type> <name>ADPCMEncodeContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREEZE_INTERVAL</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>adpcm_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>adpcm_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ADPCMEncodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>extradata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"only stereo or mono is supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name> <operator>&gt;</operator> <literal type="number">16U</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid trellis size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>frontier</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_paths</name> <init>= <expr><name>frontier</name> <operator>*</operator> <name>FREEZE_INTERVAL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FF_ALLOC_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>paths</name></name></expr></argument>,
<argument><expr><name>max_paths</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>paths</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_ALLOC_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>node_buf</name></name></expr></argument>,
<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>frontier</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>node_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_ALLOC_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nodep_buf</name></name></expr></argument>,
<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>frontier</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>nodep_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_ALLOC_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>trellis_hash</name></name></expr></argument>,
<argument><expr><literal type="number">65536</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>trellis_hash</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <call><name>av_get_bits_per_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_WAV</name></expr>:</case>


<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <operator>(</operator><name>BLKSIZE</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>/</operator>
<operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>=</operator> <name>BLKSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_QT</name></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>=</operator> <literal type="number">34</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_MS</name></expr>:</case>


<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <operator>(</operator><name>BLKSIZE</name> <operator>-</operator> <literal type="number">7</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>=</operator> <name>BLKSIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>extradata</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extradata</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extradata</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extradata</name></expr></argument>, <argument><expr><name><name>ff_adpcm_AdaptCoeff1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extradata</name></expr></argument>, <argument><expr><name><name>ff_adpcm_AdaptCoeff2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_YAMAHA</name></expr>:</case>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name>BLKSIZE</name> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>=</operator> <name>BLKSIZE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_SWF</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>!=</operator> <literal type="number">11025</literal> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>!=</operator> <literal type="number">22050</literal> <operator>&amp;&amp;</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>!=</operator> <literal type="number">44100</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Sample rate must be 11025, "</literal>
<literal type="string">"22050 or 44100\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <literal type="number">512</literal> <operator>*</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">11025</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>adpcm_encode_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>adpcm_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ADPCMEncodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>paths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>node_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>nodep_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>trellis_hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>adpcm_ima_compress_sample</name><parameter_list>(<parameter><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name>sample</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><name>sample</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>prev_sample</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nibble</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4</literal> <operator>/</operator>
<name><name>ff_adpcm_step_table</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>step_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>delta</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prev_sample</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>ff_adpcm_step_table</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>step_index</name></name></expr>]</index></name> <operator>*</operator>
<name><name>ff_adpcm_yamaha_difflookup</name><index>[<expr><name>nibble</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prev_sample</name></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>prev_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step_index</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>step_index</name></name> <operator>+</operator> <name><name>ff_adpcm_index_table</name><index>[<expr><name>nibble</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>nibble</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>adpcm_ima_qt_compress_sample</name><parameter_list>(<parameter><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name>sample</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><name>sample</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>prev_sample</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>, <decl><type ref="prev"/><name>step</name> <init>= <expr><name><name>ff_adpcm_step_table</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>step_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nibble</name> <init>= <expr><literal type="number">8</literal><operator>*</operator><operator>(</operator><name>delta</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>delta</name><operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>delta</name> <operator>+</operator> <operator>(</operator><name>step</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;=</operator> <name>step</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nibble</name> <operator>|=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>-=</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>step</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;=</operator> <name>step</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nibble</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>-=</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>step</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;=</operator> <name>step</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nibble</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>-=</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>-=</operator> <name>delta</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nibble</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prev_sample</name></name> <operator>-=</operator> <name>diff</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prev_sample</name></name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prev_sample</name></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>prev_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step_index</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>step_index</name></name> <operator>+</operator> <name><name>ff_adpcm_index_table</name><index>[<expr><name>nibble</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>nibble</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>adpcm_ms_compress_sample</name><parameter_list>(<parameter><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name>sample</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>predictor</name></decl>, <decl><type ref="prev"/><name>nibble</name></decl>, <decl><type ref="prev"/><name>bias</name></decl>;</decl_stmt>

<expr_stmt><expr><name>predictor</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>sample1</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>coeff1</name></name><operator>)</operator><operator>)</operator> <operator>+</operator>
<operator>(</operator><operator>(</operator> <name><name>c</name><operator>-&gt;</operator><name>sample2</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>coeff2</name></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nibble</name> <operator>=</operator> <name>sample</name> <operator>-</operator> <name>predictor</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nibble</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bias</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>idelta</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bias</name> <operator>=</operator> <operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>idelta</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>nibble</name> <operator>=</operator> <operator>(</operator><name>nibble</name> <operator>+</operator> <name>bias</name><operator>)</operator> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>idelta</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nibble</name> <operator>=</operator> <call><name>av_clip_intp2</name><argument_list>(<argument><expr><name>nibble</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>predictor</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>nibble</name> <operator>&amp;</operator> <literal type="number">0x08</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>nibble</name> <operator>-</operator> <literal type="number">0x10</literal><operator>)</operator></expr> </then><else>: <expr><name>nibble</name></expr></else></ternary><operator>)</operator> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>idelta</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sample2</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>sample1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sample1</name></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>predictor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idelta</name></name> <operator>=</operator> <operator>(</operator><name><name>ff_adpcm_AdaptationTable</name><index>[<expr><name>nibble</name></expr>]</index></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>idelta</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>idelta</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idelta</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>nibble</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>adpcm_yamaha_compress_sample</name><parameter_list>(<parameter><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name></type> <name>sample</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nibble</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>step</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <literal type="number">127</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>sample</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>predictor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nibble</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4</literal> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>step</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>delta</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>step</name></name> <operator>*</operator> <name><name>ff_adpcm_yamaha_difflookup</name><index>[<expr><name>nibble</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>step</name></name> <operator>*</operator> <name><name>ff_adpcm_yamaha_indexscale</name><index>[<expr><name>nibble</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>step</name></name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">24576</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>nibble</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>adpcm_compress_trellis</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>ADPCMEncodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>frontier</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>version</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TrellisPath</name> <modifier>*</modifier></type><name>paths</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>paths</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TrellisNode</name> <modifier>*</modifier></type><name>node_buf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>node_buf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TrellisNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodep_buf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>nodep_buf</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TrellisNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodes</name> <init>= <expr><name>nodep_buf</name></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>TrellisNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodes_next</name> <init>= <expr><name>nodep_buf</name> <operator>+</operator> <name>frontier</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pathn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>froze</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>generation</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>trellis_hash</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">65536</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>nodep_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>frontier</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>nodep_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>node_buf</name> <operator>+</operator> <name>frontier</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ssd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>path</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>step</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>step_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sample1</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>sample1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sample2</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>sample2</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_IMA_WAV</name> <operator>||</operator>
<name>version</name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_IMA_QT</name> <operator>||</operator>
<name>version</name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_SWF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sample1</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>prev_sample</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_MS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>step</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>idelta</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_YAMAHA</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>step</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>step</name> <operator>=</operator> <literal type="number">127</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sample1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>step</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sample1</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>predictor</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>TrellisNode</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>node_buf</name> <operator>+</operator> <name>frontier</name><operator>*</operator><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TrellisNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sample</name> <init>= <expr><name><name>samples</name><index>[<expr><name>i</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>heap_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>nodes_next</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>frontier</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TrellisNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>frontier</name> <operator>&amp;&amp;</operator> <name><name>nodes</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>range</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>j</name> <operator>&lt;</operator> <name>frontier</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>step</name> <init>= <expr><name><name>nodes</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>step</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nidx</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_MS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>predictor</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>nodes</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>sample1</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>coeff1</name></name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name><name>nodes</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>sample2</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>coeff2</name></name><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">64</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>div</name> <init>= <expr><operator>(</operator><name>sample</name> <operator>-</operator> <name>predictor</name><operator>)</operator> <operator>/</operator> <name>step</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nmin</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>div</name><operator>-</operator><name>range</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nmax</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name>div</name><operator>+</operator><name>range</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>nidx</name> <operator>=</operator> <name>nmin</name></expr>;</init> <condition><expr><name>nidx</name> <operator>&lt;=</operator> <name>nmax</name></expr>;</condition> <incr><expr><name>nidx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nibble</name> <init>= <expr><name>nidx</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dec_sample</name> <init>= <expr><name>predictor</name> <operator>+</operator> <name>nidx</name> <operator>*</operator> <name>step</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE_NODE</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>STEP_INDEX</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>int d;uint32_t ssd;int pos;TrellisNode *u;uint8_t *h;dec_sample = av_clip_int16(dec_sample);d = sample - dec_sample;ssd = nodes[j]-&gt;ssd + d*(unsigned)d;if (ssd &lt; nodes[j]-&gt;ssd)goto next_##NAME;</cpp:value></cpp:define>
























\
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>&amp;</operator><name><name>hash</name><index>[<expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <name>dec_sample</name></expr>]</index></name></expr>;</expr_stmt>\
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>h</name> <operator>==</operator> <name>generation</name></expr>)</condition><block type="pseudo"><block_content>\
<goto>goto <name>next_</name>##<name>NAME</name>;</goto></block_content></block></if></if_stmt>\
<if_stmt><if>if <condition>(<expr><name>heap_pos</name> <operator>&lt;</operator> <name>frontier</name></expr>)</condition> <block>{<block_content>\
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>heap_pos</name><operator>++</operator></expr>;</expr_stmt>\
</block_content>}</block></if> <else>else <block>{<block_content>\

\
<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>frontier</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator>\
<operator>(</operator><name>heap_pos</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>frontier</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>\
<if_stmt><if>if <condition>(<expr><name>ssd</name> <operator>&gt;</operator> <name><name>nodes_next</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><name>ssd</name></expr>)</condition><block type="pseudo"><block_content>\
<goto>goto <name>next_</name>##<name>NAME</name>;</goto></block_content></block></if></if_stmt>\
<expr_stmt><expr><name>heap_pos</name><operator>++</operator></expr>;</expr_stmt>\
</block_content>}</block></else></if_stmt>\
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <name>generation</name></expr>;</expr_stmt>\
<expr_stmt><expr><name>u</name> <operator>=</operator> <name><name>nodes_next</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>\
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>u</name></expr>)</condition> <block>{<block_content>\
<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>pathn</name> <operator>&lt;</operator> <name>FREEZE_INTERVAL</name> <operator>&lt;&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>\
<expr_stmt><expr><name>u</name> <operator>=</operator> <name>t</name><operator>++</operator></expr>;</expr_stmt>\
<expr_stmt><expr><name><name>nodes_next</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>\
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>pathn</name><operator>++</operator></expr>;</expr_stmt>\
</block_content>}</block></if></if_stmt>\
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>ssd</name></name> <operator>=</operator> <name>ssd</name></expr>;</expr_stmt>\
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name>STEP_INDEX</name></expr>;</expr_stmt>\
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>sample2</name></name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>sample1</name></expr>;</expr_stmt>\
<expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>sample1</name></name> <operator>=</operator> <name>dec_sample</name></expr>;</expr_stmt>\
<expr_stmt><expr><name><name>paths</name><index>[<expr><name><name>u</name><operator>-&gt;</operator><name>path</name></name></expr>]</index></name><operator>.</operator><name>nibble</name> <operator>=</operator> <name>nibble</name></expr>;</expr_stmt>\
<expr_stmt><expr><name><name>paths</name><index>[<expr><name><name>u</name><operator>-&gt;</operator><name>path</name></name></expr>]</index></name><operator>.</operator><name>prev</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>path</name></expr>;</expr_stmt>\

\
<while>while <condition>(<expr><name>pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>\
<decl_stmt><decl><type><name>int</name></type> <name>parent</name> <init>= <expr><operator>(</operator><name>pos</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>\
<if_stmt><if>if <condition>(<expr><name><name>nodes_next</name><index>[<expr><name>parent</name></expr>]</index></name><operator>-&gt;</operator><name>ssd</name> <operator>&lt;=</operator> <name>ssd</name></expr>)</condition><block type="pseudo"><block_content>\
<break>break;</break></block_content></block></if></if_stmt>\
<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>TrellisNode</name><operator>*</operator></expr></argument>, <argument><expr><name><name>nodes_next</name><index>[<expr><name>parent</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>nodes_next</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>\
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>\
</block_content>}</block></while>\
<expr_stmt><expr><name>next_</name><operator>#</operator><operator>#</operator><name>NAME</name><operator>:</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE_NODE</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>ff_adpcm_AdaptationTable</name><index>[<expr><name>nibble</name></expr>]</index></name> <operator>*</operator> <name>step</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>version</name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_IMA_WAV</name> <operator>||</operator>
<name>version</name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_IMA_QT</name> <operator>||</operator>
<name>version</name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_SWF</name></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOP_NODES</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>STEP_TABLE</name></type></parameter>, <parameter><type><name>STEP_INDEX</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>const int predictor = nodes[j]-&gt;sample1;const int div = (sample - predictor) * 4 / STEP_TABLE;int nmin = av_clip(div - range, -7, 6);int nmax = av_clip(div + range, -6, 7);if (nmin &lt;= 0)nmin--; if (nmax &lt; 0)nmax--;for (nidx = nmin; nidx &lt;= nmax; nidx++) {const int nibble = nidx &lt; 0 ? 7 - nidx : nidx;int dec_sample = predictor +(STEP_TABLE *ff_adpcm_yamaha_difflookup[nibble]) / 8;STORE_NODE(NAME, STEP_INDEX);}</cpp:value></cpp:define>















<expr_stmt><expr><call><name>LOOP_NODES</name><argument_list>(<argument><expr><name>ima</name></expr></argument>, <argument><expr><name><name>ff_adpcm_step_table</name><index>[<expr><name>step</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>av_clip</name><argument_list>(<argument><expr><name>step</name> <operator>+</operator> <name><name>ff_adpcm_index_table</name><index>[<expr><name>nibble</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 
<expr_stmt><expr><call><name>LOOP_NODES</name><argument_list>(<argument><expr><name>yamaha</name></expr></argument>, <argument><expr><name>step</name></expr></argument>,
<argument><expr><call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name>step</name> <operator>*</operator> <name><name>ff_adpcm_yamaha_indexscale</name><index>[<expr><name>nibble</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>,
<argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">24576</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOOP_NODES</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STORE_NODE</name></cpp:undef>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>u</name> <operator>=</operator> <name>nodes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nodes</name> <operator>=</operator> <name>nodes_next</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nodes_next</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>

<expr_stmt><expr><name>generation</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>generation</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">65536</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>generation</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ssd</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>frontier</name> <operator>&amp;&amp;</operator> <name><name>nodes</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>ssd</name> <operator>-=</operator> <name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ssd</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ssd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>froze</name> <operator>+</operator> <name>FREEZE_INTERVAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>paths</name><index>[<expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>path</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <name>froze</name></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nibble</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>paths</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>prev</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>froze</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pathn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>nodes</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>frontier</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TrellisNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>paths</name><index>[<expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>path</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>froze</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nibble</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>paths</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>prev</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sample1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sample1</name></name> <operator>=</operator> <name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sample1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sample2</name></name> <operator>=</operator> <name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sample2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step_index</name></name> <operator>=</operator> <name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>step</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>step</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idelta</name></name> <operator>=</operator> <name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>step</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>adpcm_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>st</name></decl>, <decl><type ref="prev"/><name>pkt_size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>samples</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ADPCMEncodeContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>samples</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>samples_p</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ADPCM_SWF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pkt_size</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <operator>(</operator><literal type="number">22</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pkt_size</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>pkt_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_WAV</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>blocks</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>blocks</name> <operator>=</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>status</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>status</name><operator>-&gt;</operator><name>prev_sample</name></name> <operator>=</operator> <name><name>samples_p</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>, <argument><expr><name><name>status</name><operator>-&gt;</operator><name>prev_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>status</name><operator>-&gt;</operator><name>step_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FF_ALLOC_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>blocks</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>adpcm_compress_trellis</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>samples_p</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>buf</name> <operator>+</operator> <name>ch</name> <operator>*</operator> <name>blocks</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,
<argument><expr><name>blocks</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf1</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>ch</name> <operator>*</operator> <name>blocks</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>buf1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>buf1</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>status</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>smp</name> <init>= <expr><operator>&amp;</operator><name><name>samples_p</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>v</name> <init>= <expr><call><name>adpcm_ima_compress_sample</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>smp</name><index>[<expr><name>j</name></expr> ]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>v</name> <operator>|=</operator> <call><name>adpcm_ima_compress_sample</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>smp</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>AV_CODEC_ID_ADPCM_IMA_QT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pkt_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ADPCMChannelStatus</name> <modifier>*</modifier></type><name>status</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>status</name><operator>-&gt;</operator><name>prev_sample</name></name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name><name>status</name><operator>-&gt;</operator><name>step_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>adpcm_compress_trellis</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>samples_p</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>i</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>status</name><operator>-&gt;</operator><name>prev_sample</name></name> <operator>=</operator> <name><name>status</name><operator>-&gt;</operator><name>predictor</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>adpcm_ima_qt_compress_sample</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>samples_p</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr> ]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>adpcm_ima_qt_compress_sample</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>samples_p</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>AV_CODEC_ID_ADPCM_SWF</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pkt_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>step_index</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>step_index</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>step_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prev_sample</name> <operator>=</operator> <name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FF_ALLOC_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>adpcm_compress_trellis</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>samples</name> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>adpcm_compress_trellis</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>samples</name> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>buf</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>n</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>adpcm_ima_compress_sample</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>samples</name><index>[<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>adpcm_ima_compress_sample</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>samples</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>AV_CODEC_ID_ADPCM_MS</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>predictor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>predictor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coeff1</name> <operator>=</operator> <name><name>ff_adpcm_AdaptCoeff1</name><index>[<expr><name>predictor</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coeff2</name> <operator>=</operator> <name><name>ff_adpcm_AdaptCoeff2</name><index>[<expr><name>predictor</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idelta</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idelta</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>idelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sample2</name><operator>=</operator> <operator>*</operator><name>samples</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sample1</name> <operator>=</operator> <operator>*</operator><name>samples</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sample1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sample2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>-</operator> <literal type="number">7</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF_ALLOC_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>adpcm_compress_trellis</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>adpcm_compress_trellis</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>adpcm_compress_trellis</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>samples</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>n</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><name>n</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">7</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nibble</name></decl>;</decl_stmt>
<expr_stmt><expr><name>nibble</name> <operator>=</operator> <call><name>adpcm_ms_compress_sample</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>samples</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nibble</name> <operator>|=</operator> <call><name>adpcm_ms_compress_sample</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>st</name></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>samples</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>nibble</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_ADPCM_YAMAHA</name></expr>:</case>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FF_ALLOC_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>adpcm_compress_trellis</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>,
<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>adpcm_compress_trellis</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>adpcm_compress_trellis</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>samples</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>n</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>n</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>n</name> <operator>*=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nibble</name></decl>;</decl_stmt>
<expr_stmt><expr><name>nibble</name> <operator>=</operator> <call><name>adpcm_yamaha_compress_sample</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>samples</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nibble</name> <operator>|=</operator> <call><name>adpcm_yamaha_compress_sample</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>st</name></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>samples</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>nibble</name></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>pkt_size</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_packet_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>error</name>:</label>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_SAMPLE_FMT_S16</name></expr>, <expr><name>AV_SAMPLE_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>sample_fmts_p</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>AV_SAMPLE_FMT_S16P</name></expr>, <expr><name>AV_SAMPLE_FMT_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADPCM_ENCODER</name><parameter_list>(<parameter><type><name>id_</name></type></parameter>, <parameter><type><name>name_</name></type></parameter>, <parameter><type><name>sample_fmts_</name></type></parameter>, <parameter><type><name>long_name_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AVCodec ff_ ##name_ ##_encoder = { .name = #name_, .long_name = NULL_IF_CONFIG_SMALL(long_name_), .type = AVMEDIA_TYPE_AUDIO, .id = id_, .priv_data_size = sizeof(ADPCMEncodeContext), .init = adpcm_encode_init, .encode2 = adpcm_encode_frame, .close = adpcm_encode_close, .sample_fmts = sample_fmts_, }</cpp:value></cpp:define>












<expr_stmt><expr><call><name>ADPCM_ENCODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_IMA_QT</name></expr></argument>, <argument><expr><name>adpcm_ima_qt</name></expr></argument>, <argument><expr><name>sample_fmts_p</name></expr></argument>, <argument><expr><literal type="string">"ADPCM IMA QuickTime"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_ENCODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_IMA_WAV</name></expr></argument>, <argument><expr><name>adpcm_ima_wav</name></expr></argument>, <argument><expr><name>sample_fmts_p</name></expr></argument>, <argument><expr><literal type="string">"ADPCM IMA WAV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_ENCODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_MS</name></expr></argument>, <argument><expr><name>adpcm_ms</name></expr></argument>, <argument><expr><name>sample_fmts</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Microsoft"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_ENCODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_SWF</name></expr></argument>, <argument><expr><name>adpcm_swf</name></expr></argument>, <argument><expr><name>sample_fmts</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Shockwave Flash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADPCM_ENCODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ADPCM_YAMAHA</name></expr></argument>, <argument><expr><name>adpcm_yamaha</name></expr></argument>, <argument><expr><name>sample_fmts</name></expr></argument>, <argument><expr><literal type="string">"ADPCM Yamaha"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>
