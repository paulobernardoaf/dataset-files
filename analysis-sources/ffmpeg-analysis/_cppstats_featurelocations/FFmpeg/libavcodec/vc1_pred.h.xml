<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\vc1_pred.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_VC1_PRED_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_VC1_PRED_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vc1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vc1data.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>ff_vc1_pred_mv</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dmv_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dmv_y</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mv1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>is_intra</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>pred_flag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vc1_pred_mv_intfr</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dmv_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dmv_y</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mvn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>is_intra</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vc1_pred_b_mv</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dmv_x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>dmv_y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>direct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mvtype</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_vc1_pred_b_mv_intfi</name><parameter_list>(<parameter><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dmv_x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dmv_y</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mv1</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pred_flag</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>scale_mv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bfrac</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>bfrac</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>B_FRACTION_DEN</name><operator>==</operator><literal type="number">256</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>inv</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>qs</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>value</name> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">255</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>value</name> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>inv</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <name>B_FRACTION_DEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>qs</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>value</name> <operator>*</operator> <name>n</name> <operator>+</operator> <name>B_FRACTION_DEN</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>B_FRACTION_DEN</name><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>value</name> <operator>*</operator> <name>n</name> <operator>+</operator> <name>B_FRACTION_DEN</name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>B_FRACTION_DEN</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
