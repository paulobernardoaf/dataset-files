<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\imgconvert.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/colorspace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_GETCHROMA</name></expr></cpp:if>
<function><type><name>void</name></type> <name>avcodec_get_chroma_sub_sample</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>h_shift</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>v_shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>h_shift</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>v_shift</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>avcodec_get_pix_fmt_loss</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dst_pix_fmt</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>src_pix_fmt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>has_alpha</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>av_get_pix_fmt_loss</name><argument_list>(<argument><expr><name>dst_pix_fmt</name></expr></argument>, <argument><expr><name>src_pix_fmt</name></expr></argument>, <argument><expr><name>has_alpha</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>avcodec_find_best_pix_fmt_of_2</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dst_pix_fmt1</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dst_pix_fmt2</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>src_pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_alpha</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>loss_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>av_find_best_pix_fmt_of_2</name><argument_list>(<argument><expr><name>dst_pix_fmt1</name></expr></argument>, <argument><expr><name>dst_pix_fmt2</name></expr></argument>, <argument><expr><name>src_pix_fmt</name></expr></argument>, <argument><expr><name>has_alpha</name></expr></argument>, <argument><expr><name>loss_ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>avcodec_find_best_pix_fmt2</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dst_pix_fmt1</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>dst_pix_fmt2</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>src_pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_alpha</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>loss_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>avcodec_find_best_pix_fmt_of_2</name><argument_list>(<argument><expr><name>dst_pix_fmt1</name></expr></argument>, <argument><expr><name>dst_pix_fmt2</name></expr></argument>, <argument><expr><name>src_pix_fmt</name></expr></argument>, <argument><expr><name>has_alpha</name></expr></argument>, <argument><expr><name>loss_ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>avcodec_find_best_pix_fmt_of_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>pix_fmt_list</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>src_pix_fmt</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>has_alpha</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>loss_ptr</name></decl></parameter>)</parameter_list><block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>best</name> <init>= <expr><name>AV_PIX_FMT_NONE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>loss</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pix_fmt_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>loss</name> <operator>=</operator> <ternary><condition><expr><name>loss_ptr</name></expr> ?</condition><then> <expr><operator>*</operator><name>loss_ptr</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>best</name> <operator>=</operator> <call><name>avcodec_find_best_pix_fmt_of_2</name><argument_list>(<argument><expr><name>best</name></expr></argument>, <argument><expr><name><name>pix_fmt_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>src_pix_fmt</name></expr></argument>, <argument><expr><name>has_alpha</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>loss_ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>loss_ptr</name> <operator>=</operator> <name>loss</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>best</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_AVPICTURE</name></expr></cpp:if>
<function><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name>

<specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_yuv_planar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>planes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name>
<operator>||</operator> <operator>!</operator><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PLANAR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>planes</name><index>[<expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>plane</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>planes</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_picture_crop</name><parameter_list>(<parameter><decl><type><name>AVPicture</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPicture</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>top_band</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left_band</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>max_step</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pix_fmt</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>pix_fmt</name> <operator>&gt;=</operator> <name>AV_PIX_FMT_NB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y_shift</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x_shift</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_image_fill_max_pixsteps</name><argument_list>(<argument><expr><name>max_step</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_yuv_planar</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>top_band</name> <operator>*</operator> <name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <name>left_band</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>top_band</name> <operator>&gt;&gt;</operator> <name>y_shift</name><operator>)</operator> <operator>*</operator> <name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>left_band</name> <operator>&gt;&gt;</operator> <name>x_shift</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>top_band</name> <operator>&gt;&gt;</operator> <name>y_shift</name><operator>)</operator> <operator>*</operator> <name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>left_band</name> <operator>&gt;&gt;</operator> <name>x_shift</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>top_band</name> <operator>%</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>y_shift</name><operator>)</operator> <operator>||</operator> <name>left_band</name> <operator>%</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>x_shift</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>top_band</name> <operator>*</operator> <name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>left_band</name> <operator>*</operator> <name><name>max_step</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_picture_pad</name><parameter_list>(<parameter><decl><type><name>AVPicture</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPicture</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>padtop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>padbottom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>padleft</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>padright</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>optr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>yheight</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>max_step</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pix_fmt</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>pix_fmt</name> <operator>&gt;=</operator> <name>AV_PIX_FMT_NB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_yuv_planar</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>src</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>av_image_fill_max_pixsteps</name><argument_list>(<argument><expr><name>max_step</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>padtop</name> <operator>||</operator> <name>padleft</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>padtop</name> <operator>+</operator> <operator>(</operator><name>padleft</name> <operator>*</operator> <name><name>max_step</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>padleft</name> <operator>||</operator> <name>padright</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>optr</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>padtop</name> <operator>+</operator>
<operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>padright</name> <operator>*</operator> <name><name>max_step</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>yheight</name> <operator>=</operator> <name>height</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>padtop</name> <operator>+</operator> <name>padbottom</name><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>yheight</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>optr</name></expr></argument>, <argument><expr><name><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>padleft</name> <operator>+</operator> <name>padright</name><operator>)</operator> <operator>*</operator> <name><name>max_step</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>optr</name> <operator>+=</operator> <name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>padbottom</name> <operator>||</operator> <name>padright</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>optr</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>height</name> <operator>-</operator> <name>padbottom</name><operator>)</operator> <operator>-</operator>
<operator>(</operator><name>padright</name> <operator>*</operator> <name><name>max_step</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>optr</name></expr></argument>, <argument><expr><name><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>padbottom</name> <operator>+</operator>
<operator>(</operator><name>padright</name> <operator>*</operator> <name><name>max_step</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x_shift</name> <operator>=</operator> <ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>y_shift</name> <operator>=</operator> <ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>padtop</name> <operator>||</operator> <name>padleft</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>padtop</name> <operator>&gt;&gt;</operator> <name>y_shift</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>padleft</name> <operator>&gt;&gt;</operator> <name>x_shift</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>padleft</name> <operator>||</operator> <name>padright</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>optr</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>padtop</name> <operator>&gt;&gt;</operator> <name>y_shift</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>padright</name> <operator>&gt;&gt;</operator> <name>x_shift</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>yheight</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>padtop</name> <operator>+</operator> <name>padbottom</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>y_shift</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>yheight</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>optr</name></expr></argument>, <argument><expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>padleft</name> <operator>+</operator> <name>padright</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>x_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>optr</name> <operator>+=</operator> <name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>src</name></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>iptr</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>optr</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>padtop</name> <operator>&gt;&gt;</operator> <name>y_shift</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>padleft</name> <operator>&gt;&gt;</operator> <name>x_shift</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>optr</name></expr></argument>, <argument><expr><name>iptr</name></expr></argument>, <argument><expr><operator>(</operator><name>width</name> <operator>-</operator> <name>padleft</name> <operator>-</operator> <name>padright</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>x_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iptr</name> <operator>+=</operator> <name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>optr</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>padtop</name> <operator>&gt;&gt;</operator> <name>y_shift</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>padright</name> <operator>&gt;&gt;</operator> <name>x_shift</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>yheight</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>padtop</name> <operator>+</operator> <name>padbottom</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>y_shift</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>yheight</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>optr</name></expr></argument>, <argument><expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>padleft</name> <operator>+</operator> <name>padright</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>x_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>optr</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>padleft</name> <operator>+</operator> <name>padright</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>x_shift</name><operator>)</operator></expr></argument>, <argument><expr><name>iptr</name></expr></argument>,
<argument><expr><operator>(</operator><name>width</name> <operator>-</operator> <name>padleft</name> <operator>-</operator> <name>padright</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>x_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iptr</name> <operator>+=</operator> <name><name>src</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>optr</name> <operator>+=</operator> <name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>padbottom</name> <operator>||</operator> <name>padright</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>optr</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator>
<operator>(</operator><operator>(</operator><name>height</name> <operator>-</operator> <name>padbottom</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>y_shift</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>padright</name> <operator>&gt;&gt;</operator> <name>x_shift</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>optr</name></expr></argument>, <argument><expr><name><name>color</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator>
<operator>(</operator><name>padbottom</name> <operator>&gt;&gt;</operator> <name>y_shift</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>padright</name> <operator>&gt;&gt;</operator> <name>x_shift</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<expr><name>FF_ENABLE_DEPRECATION_WARNINGS</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
