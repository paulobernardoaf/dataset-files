<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\dxva2_h264.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dxva2_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_ps.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>

<struct>struct <name>dxva2_picture_context</name> <block>{
<decl_stmt><decl><type><name>DXVA_PicParams_H264</name></type> <name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DXVA_Qmatrix_H264</name></type> <name>qm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>slice_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DXVA_Slice_H264_Short</name></type> <name><name>slice_short</name><index>[<expr><name>MAX_SLICES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DXVA_Slice_H264_Long</name></type> <name><name>slice_long</name><index>[<expr><name>MAX_SLICES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bitstream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>bitstream_size</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_picture_entry</name><parameter_list>(<parameter><decl><type><name>DXVA_PicEntry_H264</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>index</name><operator>&amp;</operator><literal type="number">0x7f</literal><operator>)</operator> <operator>==</operator> <name>index</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flag</name><operator>&amp;</operator><literal type="number">0x01</literal><operator>)</operator> <operator>==</operator> <name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>bPicEntry</name></name> <operator>=</operator> <name>index</name> <operator>|</operator> <operator>(</operator><name>flag</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_picture_parameters</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVDXVAContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><name>DXVA_PicParams_H264</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>H264Picture</name> <modifier>*</modifier></type><name>current_picture</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>SPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>PPS</name> <modifier>*</modifier></type><name>pps</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_picture_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>CurrPic</name></name></expr></argument>,
<argument><expr><call><name>ff_dxva2_get_surface_index</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>current_picture</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_BOTTOM_FIELD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>UsedForReferenceFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>NonExistingFrameFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>RefFrameList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>H264Picture</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name>r</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name> <operator>+</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[<expr><name>j</name><operator>++</operator> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fill_picture_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>RefFrameList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>ff_dxva2_get_surface_index</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>r</name><operator>-&gt;</operator><name>long_ref</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>reference</name></name> <operator>&amp;</operator> <name>PICT_TOP_FIELD</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>FieldOrderCntList</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>reference</name></name> <operator>&amp;</operator> <name>PICT_BOTTOM_FIELD</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>FieldOrderCntList</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>FrameNumList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>r</name><operator>-&gt;</operator><name>long_ref</name></name></expr> ?</condition><then> <expr><name><name>r</name><operator>-&gt;</operator><name>pic_id</name></name></expr> </then><else>: <expr><name><name>r</name><operator>-&gt;</operator><name>frame_num</name></name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>reference</name></name> <operator>&amp;</operator> <name>PICT_TOP_FIELD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>UsedForReferenceFlags</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>reference</name></name> <operator>&amp;</operator> <name>PICT_BOTTOM_FIELD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>UsedForReferenceFlags</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>RefFrameList</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bPicEntry</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>FieldOrderCntList</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>FieldOrderCntList</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>FrameNumList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wFrameWidthInMbsMinus1</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wFrameHeightInMbsMinus1</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>num_ref_frames</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>ref_frame_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wBitFields</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>!=</operator> <name>PICT_FRAME</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>mb_aff</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_FRAME</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>residual_color_transform_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>nal_ref_idc</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>constrained_intra_pred</name></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>weighted_pred</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>weighted_bipred_idc</name></name> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>transform_8x8_mode</name></name> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>level_idc</name></name> <operator>&gt;=</operator> <literal type="number">31</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>|</operator>


<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bit_depth_luma_minus8</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>bit_depth_chroma_minus8</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma</name></name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>DXVA_CONTEXT_WORKAROUND</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>FF_DXVA2_WORKAROUND_SCALING_LIST_ZIGZAG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>Reserved16Bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>DXVA_CONTEXT_WORKAROUND</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>FF_DXVA2_WORKAROUND_INTEL_CLEARVIDEO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>Reserved16Bits</name></name> <operator>=</operator> <literal type="number">0x34c</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>Reserved16Bits</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>StatusReportFeedbackNumber</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>DXVA_CONTEXT_REPORT_ID</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>CurrFieldOrderCnt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>&amp;</operator> <name>PICT_TOP_FIELD</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>current_picture</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>CurrFieldOrderCnt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>current_picture</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>CurrFieldOrderCnt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>&amp;</operator> <name>PICT_BOTTOM_FIELD</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>current_picture</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>CurrFieldOrderCnt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>current_picture</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pic_init_qs_minus26</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>init_qs</name></name> <operator>-</operator> <literal type="number">26</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>second_chroma_qp_index_offset</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>ContinuationFlag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pic_init_qp_minus26</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>init_qp</name></name> <operator>-</operator> <literal type="number">26</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>num_ref_idx_l0_active_minus1</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>num_ref_idx_l1_active_minus1</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>Reserved8BitsA</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>log2_max_frame_num_minus4</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_frame_num</name></name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pic_order_cnt_type</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>poc_type</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>poc_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>log2_max_pic_order_cnt_lsb_minus4</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_poc_lsb</name></name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>poc_type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>delta_pic_order_always_zero_flag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>delta_pic_order_always_zero_flag</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>direct_8x8_inference_flag</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>direct_8x8_inference_flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>entropy_coding_mode_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cabac</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pic_order_present_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>pic_order_present</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>num_slice_groups_minus1</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>slice_group_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>slice_group_map_type</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>mb_slice_group_map_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>deblocking_filter_control_present_flag</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>deblocking_filter_parameters_present</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>redundant_pic_cnt_present_flag</name></name><operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>redundant_pic_cnt_present</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>Reserved8BitsB</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>slice_group_change_rate_minus1</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_scaling_lists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVDXVAContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>DXVA_Qmatrix_H264</name> <modifier>*</modifier></type><name>qm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>PPS</name> <modifier>*</modifier></type><name>pps</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>qm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>qm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>DXVA_CONTEXT_WORKAROUND</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>FF_DXVA2_WORKAROUND_SCALING_LIST_ZIGZAG</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>qm</name><operator>-&gt;</operator><name>bScalingLists4x4</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix4</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>qm</name><operator>-&gt;</operator><name>bScalingLists8x8</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix8</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qm</name><operator>-&gt;</operator><name>bScalingLists8x8</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix8</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>qm</name><operator>-&gt;</operator><name>bScalingLists4x4</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix4</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>ff_zigzag_scan</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>qm</name><operator>-&gt;</operator><name>bScalingLists8x8</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix8</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>ff_zigzag_direct</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qm</name><operator>-&gt;</operator><name>bScalingLists8x8</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix8</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name><name>ff_zigzag_direct</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_slice_short</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVDXVAContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>DXVA_CONTEXT_CFG_BITSTREAM</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator>
<call><name>DXVA_CONTEXT_CFG_BITSTREAM</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>DXVA_CONTEXT_CFG_BITSTREAM</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_slice_short</name><parameter_list>(<parameter><decl><type><name>DXVA_Slice_H264_Short</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>slice</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>BSNALunitDataLocation</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>SliceBytesInBuffer</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>wBadSliceChopping</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_refpic_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DXVA_PicParams_H264</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>surface_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>RefFrameList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pp</name><operator>-&gt;</operator><name>RefFrameList</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bPicEntry</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>==</operator> <name>surface_index</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0x7f</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_slice_long</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>DXVA_Slice_H264_Long</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>DXVA_PicParams_H264</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDXVAContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>DXVA_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>list</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>slice</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>BSNALunitDataLocation</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>SliceBytesInBuffer</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>wBadSliceChopping</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>first_mb_in_slice</name></name> <operator>=</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;&gt;</operator> <call><name>FIELD_OR_MBAFF_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>NumMbsForSlice</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>BitOffsetToSliceData</name></name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>=</operator> <call><name>ff_h264_get_slice_type</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type_fixed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>luma_log2_weight_denom</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>luma_log2_weight_denom</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>chroma_log2_weight_denom</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_log2_weight_denom</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>num_ref_idx_l0_active_minus1</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>num_ref_idx_l1_active_minus1</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice_alpha_c0_offset_div2</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_alpha_c0_offset</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice_beta_offset_div2</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_beta_offset</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>Reserved8Bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>list</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>RefPicList</name><index>[<expr><name>list</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>list</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><name>list</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>H264Picture</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>plane</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>index</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>DXVA_CONTEXT_WORKAROUND</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>FF_DXVA2_WORKAROUND_INTEL_CLEARVIDEO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>ff_dxva2_get_surface_index</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>get_refpic_index</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><call><name>ff_dxva2_get_surface_index</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>fill_picture_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slice</name><operator>-&gt;</operator><name>RefPicList</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reference</name> <operator>==</operator> <name>PICT_BOTTOM_FIELD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>o</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>plane</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>luma_weight_flag</name><index>[<expr><name>list</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>luma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>luma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>plane</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_weight_flag</name><index>[<expr><name>list</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>plane</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_weight</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>plane</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>plane</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>luma_log2_weight_denom</name></name></expr> </then><else>:
<expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_log2_weight_denom</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>Weights</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>plane</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>Weights</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>plane</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>plane</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>RefPicList</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bPicEntry</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>Weights</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>plane</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>Weights</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>plane</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice_qs_delta</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice_qp_delta</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>init_qp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>redundant_pic_cnt</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>redundant_pic_count</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>direct_spatial_mv_pred_flag</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>direct_spatial_mv_pred</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>cabac_init_idc</name></name> <operator>=</operator> <ternary><condition><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>cabac</name></name></expr> ?</condition><then> <expr><name><name>sl</name><operator>-&gt;</operator><name>cabac_init_idc</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>disable_deblocking_filter_idc</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>disable_deblocking_filter_idc</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice_id</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>current_slice</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>commit_bitstream_and_slice_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>DECODER_BUFFER_DESC</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>,
<parameter><decl><type><name>DECODER_BUFFER_DESC</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>mb_count</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDXVAContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>DXVA_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>H264Picture</name> <modifier>*</modifier></type><name>current_picture</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dxva2_picture_context</name></name> <modifier>*</modifier></type><name>ctx_pic</name> <init>= <expr><name><name>current_picture</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DXVA_Slice_H264_Short</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dxva_data_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dxva_data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>current</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>dxva_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>slice_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>slice_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>padding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>type</name></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ff_dxva2_is_d3d11</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>D3D11_VIDEO_DECODER_BUFFER_BITSTREAM</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>ID3D11VideoContext_GetDecoderBuffer</name><argument_list>(<argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>video_context</name></expr></argument>,
<argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>,
<argument><expr><name>type</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dxva_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dxva_data_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>DXVA2_BitStreamDateBufferType</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>IDirectXVideoDecoder_GetBuffer</name><argument_list>(<argument><expr><call><name>DXVA2_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>,
<argument><expr><name>type</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dxva_data_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dxva_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>dxva_data</name> <operator>=</operator> <name>dxva_data_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>current</name> <operator>=</operator> <name>dxva_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>dxva_data</name> <operator>+</operator> <name>dxva_size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>start_code</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>start_code_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>start_code</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>position</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>DXVA_Slice_H264_Short</name></expr></argument>, <argument><expr><name>BSNALunitDataLocation</name></expr></argument>)</argument_list></call> <operator>==</operator>
<call><name>offsetof</name><argument_list>(<argument><expr><name>DXVA_Slice_H264_Long</name></expr></argument>, <argument><expr><name>BSNALunitDataLocation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>DXVA_Slice_H264_Short</name></expr></argument>, <argument><expr><name>SliceBytesInBuffer</name></expr></argument>)</argument_list></call> <operator>==</operator>
<call><name>offsetof</name><argument_list>(<argument><expr><name>DXVA_Slice_H264_Long</name></expr></argument>, <argument><expr><name>SliceBytesInBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_slice_short</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>slice</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_short</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>slice</name> <operator>=</operator> <operator>(</operator><name>DXVA_Slice_H264_Short</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_long</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>position</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>BSNALunitDataLocation</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>SliceBytesInBuffer</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>start_code_size</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name>end</name> <operator>-</operator> <name>current</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to build bitstream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>BSNALunitDataLocation</name></name> <operator>=</operator> <name>current</name> <operator>-</operator> <name>dxva_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>SliceBytesInBuffer</name></name> <operator>=</operator> <name>start_code_size</name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_slice_short</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DXVA_Slice_H264_Long</name> <modifier>*</modifier></type><name>slice_long</name> <init>= <expr><operator>(</operator><name>DXVA_Slice_H264_Long</name><operator>*</operator><operator>)</operator><name>slice</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>slice_long</name><operator>-&gt;</operator><name>NumMbsForSlice</name></name> <operator>=</operator>
<name><name>slice_long</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first_mb_in_slice</name> <operator>-</operator> <name><name>slice_long</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first_mb_in_slice</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>slice_long</name><operator>-&gt;</operator><name>NumMbsForSlice</name></name> <operator>=</operator> <name>mb_count</name> <operator>-</operator> <name><name>slice_long</name><operator>-&gt;</operator><name>first_mb_in_slice</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>start_code</name></expr></argument>, <argument><expr><name>start_code_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current</name> <operator>+=</operator> <name>start_code_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>padding</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">128</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>current</name> <operator>-</operator> <name>dxva_data</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">127</literal><operator>)</operator></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slice</name> <operator>&amp;&amp;</operator> <name>padding</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current</name> <operator>+=</operator> <name>padding</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>SliceBytesInBuffer</name></name> <operator>+=</operator> <name>padding</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ff_dxva2_is_d3d11</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>ID3D11VideoContext_ReleaseDecoderBuffer</name><argument_list>(<argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>video_context</name></expr></argument>, <argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>IDirectXVideoDecoder_ReleaseBuffer</name><argument_list>(<argument><expr><call><name>DXVA2_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ff_dxva2_is_d3d11</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>D3D11_VIDEO_DECODER_BUFFER_DESC</name> <modifier>*</modifier></type><name>dsc11</name> <init>= <expr><name>bs</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dsc11</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dsc11</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc11</name><operator>-&gt;</operator><name>BufferType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc11</name><operator>-&gt;</operator><name>DataSize</name></name> <operator>=</operator> <name>current</name> <operator>-</operator> <name>dxva_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc11</name><operator>-&gt;</operator><name>NumMBsInBuffer</name></name> <operator>=</operator> <name>mb_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>D3D11_VIDEO_DECODER_BUFFER_SLICE_CONTROL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>(</operator><name><name>dsc11</name><operator>-&gt;</operator><name>DataSize</name></name> <operator>&amp;</operator> <literal type="number">127</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DXVA2_DecodeBufferDesc</name> <modifier>*</modifier></type><name>dsc2</name> <init>= <expr><name>bs</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dsc2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dsc2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc2</name><operator>-&gt;</operator><name>CompressedBufferType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc2</name><operator>-&gt;</operator><name>DataSize</name></name> <operator>=</operator> <name>current</name> <operator>-</operator> <name>dxva_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsc2</name><operator>-&gt;</operator><name>NumMBsInBuffer</name></name> <operator>=</operator> <name>mb_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>DXVA2_SliceControlBufferType</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>(</operator><name><name>dsc2</name><operator>-&gt;</operator><name>DataSize</name></name> <operator>&amp;</operator> <literal type="number">127</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>is_slice_short</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slice_data</name> <operator>=</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_short</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_size</name> <operator>=</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_short</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>slice_data</name> <operator>=</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_long</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>slice_size</name> <operator>=</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_long</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>ff_dxva2_commit_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>,
<argument><expr><name>type</name></expr></argument>,
<argument><expr><name>slice_data</name></expr></argument>, <argument><expr><name>slice_size</name></expr></argument>, <argument><expr><name>mb_count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_h264_start_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>av_unused</name> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>av_unused</name> <name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDXVAContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>DXVA_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dxva2_picture_context</name></name> <modifier>*</modifier></type><name>ctx_pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DXVA_CONTEXT_VALID</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ctx_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fill_picture_parameters</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fill_scaling_lists</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>qm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_h264_decode_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVDXVAContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>DXVA_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>H264Picture</name> <modifier>*</modifier></type><name>current_picture</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dxva2_picture_context</name></name> <modifier>*</modifier></type><name>ctx_pic</name> <init>= <expr><name><name>current_picture</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>position</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>&gt;=</operator> <name>MAX_SLICES</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream_size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>position</name> <operator>=</operator> <name>buffer</name> <operator>-</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_slice_short</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fill_slice_short</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_short</name><index>[<expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name>position</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fill_slice_long</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_long</name><index>[<expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_I</name> <operator>&amp;&amp;</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_SI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>pp</name><operator>.</operator><name>wBitFields</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_h264_end_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dxva2_picture_context</name></name> <modifier>*</modifier></type><name>ctx_pic</name> <init>=
<expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_dxva2_common_end_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>f</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>qm</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>qm</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>commit_bitstream_and_slice_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_h264_draw_horiz_band</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_H264_DXVA2_HWACCEL</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_h264_dxva2_hwaccel</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"h264_dxva2"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_H264</name></expr>,
<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_dxva2_decode_init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_dxva2_decode_uninit</name></expr>,
<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>dxva2_h264_start_frame</name></expr>,
<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>dxva2_h264_decode_slice</name></expr>,
<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>dxva2_h264_end_frame</name></expr>,
<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>ff_dxva2_common_frame_params</name></expr>,
<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>dxva2_picture_context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFDXVASharedContext</name></expr></argument>)</argument_list></sizeof></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_H264_D3D11VA_HWACCEL</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_h264_d3d11va_hwaccel</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"h264_d3d11va"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_H264</name></expr>,
<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_D3D11VA_VLD</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_dxva2_decode_init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_dxva2_decode_uninit</name></expr>,
<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>dxva2_h264_start_frame</name></expr>,
<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>dxva2_h264_decode_slice</name></expr>,
<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>dxva2_h264_end_frame</name></expr>,
<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>ff_dxva2_common_frame_params</name></expr>,
<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>dxva2_picture_context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFDXVASharedContext</name></expr></argument>)</argument_list></sizeof></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_H264_D3D11VA2_HWACCEL</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_h264_d3d11va2_hwaccel</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"h264_d3d11va2"</literal></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_H264</name></expr>,
<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_D3D11</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_dxva2_decode_init</name></expr>,
<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_dxva2_decode_uninit</name></expr>,
<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>dxva2_h264_start_frame</name></expr>,
<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>dxva2_h264_decode_slice</name></expr>,
<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>dxva2_h264_end_frame</name></expr>,
<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>ff_dxva2_common_frame_params</name></expr>,
<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>dxva2_picture_context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFDXVASharedContext</name></expr></argument>)</argument_list></sizeof></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
