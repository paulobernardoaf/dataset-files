<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\aarch64\h264pred_init.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/aarch64/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/h264pred.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>ff_pred16x16_vert_neon</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_pred16x16_hor_neon</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_pred16x16_plane_neon</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_pred16x16_dc_neon</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_pred16x16_128_dc_neon</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_pred16x16_left_dc_neon</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_pred16x16_top_dc_neon</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_pred8x8_vert_neon</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_pred8x8_hor_neon</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_pred8x8_plane_neon</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_pred8x8_dc_neon</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_pred8x8_128_dc_neon</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_pred8x8_left_dc_neon</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_pred8x8_top_dc_neon</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_pred8x8_l0t_dc_neon</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_pred8x8_0lt_dc_neon</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_pred8x8_l00_dc_neon</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ff_pred8x8_0l0_dc_neon</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>h264_pred_init_neon</name><parameter_list>(<parameter><decl><type><name>H264PredContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codec_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>bit_depth</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_format_idc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>high_depth</name> <init>= <expr><name>bit_depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>high_depth</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>VERT_PRED8x8</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred8x8_vert_neon</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>HOR_PRED8x8</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred8x8_hor_neon</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>codec_id</name> <operator>!=</operator> <name>AV_CODEC_ID_VP7</name> <operator>&amp;&amp;</operator> <name>codec_id</name> <operator>!=</operator> <name>AV_CODEC_ID_VP8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>PLANE_PRED8x8</name></expr>]</index></name> <operator>=</operator> <name>ff_pred8x8_plane_neon</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>DC_128_PRED8x8</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred8x8_128_dc_neon</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>codec_id</name> <operator>!=</operator> <name>AV_CODEC_ID_RV40</name> <operator>&amp;&amp;</operator> <name>codec_id</name> <operator>!=</operator> <name>AV_CODEC_ID_VP7</name> <operator>&amp;&amp;</operator>
<name>codec_id</name> <operator>!=</operator> <name>AV_CODEC_ID_VP8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>DC_PRED8x8</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred8x8_dc_neon</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>LEFT_DC_PRED8x8</name></expr>]</index></name> <operator>=</operator> <name>ff_pred8x8_left_dc_neon</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>TOP_DC_PRED8x8</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred8x8_top_dc_neon</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>ALZHEIMER_DC_L0T_PRED8x8</name></expr>]</index></name> <operator>=</operator> <name>ff_pred8x8_l0t_dc_neon</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>ALZHEIMER_DC_0LT_PRED8x8</name></expr>]</index></name> <operator>=</operator> <name>ff_pred8x8_0lt_dc_neon</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>ALZHEIMER_DC_L00_PRED8x8</name></expr>]</index></name> <operator>=</operator> <name>ff_pred8x8_l00_dc_neon</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>ALZHEIMER_DC_0L0_PRED8x8</name></expr>]</index></name> <operator>=</operator> <name>ff_pred8x8_0l0_dc_neon</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><name>DC_PRED8x8</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred16x16_dc_neon</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><name>VERT_PRED8x8</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred16x16_vert_neon</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><name>HOR_PRED8x8</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred16x16_hor_neon</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><name>LEFT_DC_PRED8x8</name></expr>]</index></name> <operator>=</operator> <name>ff_pred16x16_left_dc_neon</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><name>TOP_DC_PRED8x8</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred16x16_top_dc_neon</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><name>DC_128_PRED8x8</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred16x16_128_dc_neon</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>codec_id</name> <operator>!=</operator> <name>AV_CODEC_ID_SVQ3</name> <operator>&amp;&amp;</operator> <name>codec_id</name> <operator>!=</operator> <name>AV_CODEC_ID_RV40</name> <operator>&amp;&amp;</operator>
<name>codec_id</name> <operator>!=</operator> <name>AV_CODEC_ID_VP7</name> <operator>&amp;&amp;</operator> <name>codec_id</name> <operator>!=</operator> <name>AV_CODEC_ID_VP8</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><name>PLANE_PRED8x8</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred16x16_plane_neon</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_h264_pred_init_aarch64</name><parameter_list>(<parameter><decl><type><name>H264PredContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codec_id</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bit_depth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_format_idc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>have_neon</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>h264_pred_init_neon</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>codec_id</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>, <argument><expr><name>chroma_format_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
