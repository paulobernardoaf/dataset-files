<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\aarch64\vp9dsp_init_16bpp_aarch64_template.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/aarch64/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9dsp_init.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>declare_fpel</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>suffix</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_vp9_##type##sz##suffix##_neon(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *src, ptrdiff_t src_stride, int h, int mx, int my)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>decl_mc_func</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>filter</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_vp9_##op##_##filter##sz##_##dir##_##bpp##_neon(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *src, ptrdiff_t src_stride, int h, int mx, int my)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>define_8tap_2d_fn</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>filter</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void op##_##filter##sz##_hv_##bpp##_neon(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *src, ptrdiff_t src_stride, int h, int mx, int my) { LOCAL_ALIGNED_16(uint8_t, temp, [((1 + (sz &lt; 64)) * sz + 8) * sz * 2]); ff_vp9_put_##filter##sz##_h_##bpp##_neon(temp, 2 * sz, src - 3 * src_stride, src_stride, h + 8, mx, 0); ff_vp9_##op##_##filter##sz##_v_##bpp##_neon(dst, dst_stride, temp + 3 * 2 * sz, 2 * sz, h, 0, my); }</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>decl_filter_funcs</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>decl_mc_func(op, regular, dir, sz, bpp); decl_mc_func(op, sharp, dir, sz, bpp); decl_mc_func(op, smooth, dir, sz, bpp)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>decl_mc_funcs</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>decl_filter_funcs(put, h, sz, bpp); decl_filter_funcs(avg, h, sz, bpp); decl_filter_funcs(put, v, sz, bpp); decl_filter_funcs(avg, v, sz, bpp); decl_filter_funcs(put, hv, sz, bpp); decl_filter_funcs(avg, hv, sz, bpp)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_vp9_copy32_neon</name></cpp:macro> <cpp:value>ff_vp9_copy32_aarch64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_vp9_copy64_neon</name></cpp:macro> <cpp:value>ff_vp9_copy64_aarch64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_vp9_copy128_neon</name></cpp:macro> <cpp:value>ff_vp9_copy128_aarch64</cpp:value></cpp:define>

<expr_stmt><expr><call><name>declare_fpel</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>declare_fpel</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>declare_fpel</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>declare_fpel</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>declare_fpel</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>declare_fpel</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>_16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>declare_fpel</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>_16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>declare_fpel</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>declare_fpel</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>_16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>declare_fpel</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>_16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_mc_funcs</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decl_mc_funcs</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decl_mc_funcs</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decl_mc_funcs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decl_mc_funcs</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>define_8tap_2d_funcs</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>define_8tap_2d_fn(put, regular, sz, bpp) define_8tap_2d_fn(put, sharp, sz, bpp) define_8tap_2d_fn(put, smooth, sz, bpp) define_8tap_2d_fn(avg, regular, sz, bpp) define_8tap_2d_fn(avg, sharp, sz, bpp) define_8tap_2d_fn(avg, smooth, sz, bpp)</cpp:value></cpp:define>







<macro><name>define_8tap_2d_funcs</name><argument_list>(<argument><literal type="number">64</literal></argument>, <argument>BPP</argument>)</argument_list></macro>
<macro><name>define_8tap_2d_funcs</name><argument_list>(<argument><literal type="number">32</literal></argument>, <argument>BPP</argument>)</argument_list></macro>
<macro><name>define_8tap_2d_funcs</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>BPP</argument>)</argument_list></macro>
<macro><name>define_8tap_2d_funcs</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>BPP</argument>)</argument_list></macro>
<macro><name>define_8tap_2d_funcs</name><argument_list>(<argument><literal type="number">4</literal></argument>, <argument>BPP</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>vp9dsp_mc_init_aarch64</name><parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_fpel</name><parameter_list>(<parameter><type><name>idx1</name></type></parameter>, <parameter><type><name>idx2</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>suffix</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;mc[idx1][FILTER_8TAP_SMOOTH ][idx2][0][0] = dsp-&gt;mc[idx1][FILTER_8TAP_REGULAR][idx2][0][0] = dsp-&gt;mc[idx1][FILTER_8TAP_SHARP ][idx2][0][0] = dsp-&gt;mc[idx1][FILTER_BILINEAR ][idx2][0][0] = ff_vp9_##type##sz##suffix</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_copy</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>suffix</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_fpel(idx, 0, sz, copy, suffix)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_avg</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>suffix</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_fpel(idx, 1, sz, avg, suffix)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_copy_avg</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>sz1</name></type></parameter>, <parameter><type><name>sz2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_copy(idx, sz2, _neon); init_avg (idx, sz1, _16_neon)</cpp:value></cpp:define>



<if_stmt><if>if <condition>(<expr><call><name>have_armv8</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>init_copy</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>_aarch64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_copy</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>_aarch64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_copy</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>_aarch64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>have_neon</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_mc_func</name><parameter_list>(<parameter><type><name>idx1</name></type></parameter>, <parameter><type><name>idx2</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>filter</name></type></parameter>, <parameter><type><name>fname</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>mx</name></type></parameter>, <parameter><type><name>my</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>pfx</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;mc[idx1][filter][idx2][mx][my] = pfx##op##_##fname##sz##_##dir##_##bpp##_neon</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_mc_funcs</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>mx</name></type></parameter>, <parameter><type><name>my</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>pfx</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_mc_func(idx, 0, put, FILTER_8TAP_REGULAR, regular, dir, mx, my, sz, pfx, bpp); init_mc_func(idx, 0, put, FILTER_8TAP_SHARP, sharp, dir, mx, my, sz, pfx, bpp); init_mc_func(idx, 0, put, FILTER_8TAP_SMOOTH, smooth, dir, mx, my, sz, pfx, bpp); init_mc_func(idx, 1, avg, FILTER_8TAP_REGULAR, regular, dir, mx, my, sz, pfx, bpp); init_mc_func(idx, 1, avg, FILTER_8TAP_SHARP, sharp, dir, mx, my, sz, pfx, bpp); init_mc_func(idx, 1, avg, FILTER_8TAP_SMOOTH, smooth, dir, mx, my, sz, pfx, bpp)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_mc_funcs_dirs</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_mc_funcs(idx, v, 0, 1, sz, ff_vp9_, bpp); init_mc_funcs(idx, h, 1, 0, sz, ff_vp9_, bpp); init_mc_funcs(idx, hv, 1, 1, sz, , bpp)</cpp:value></cpp:define>





<expr_stmt><expr><call><name>init_avg</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>_16_neon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_avg</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>_16_neon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_avg</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_16_neon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_copy_avg</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_copy_avg</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_mc_funcs_dirs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_mc_funcs_dirs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_mc_funcs_dirs</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_mc_funcs_dirs</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_mc_funcs_dirs</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>define_itxfm2</name><parameter_list>(<parameter><type><name>type_a</name></type></parameter>, <parameter><type><name>type_b</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_vp9_##type_a##_##type_b##_##sz##x##sz##_add_##bpp##_neon(uint8_t *_dst, ptrdiff_t stride, int16_t *_block, int eob)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>define_itxfm</name><parameter_list>(<parameter><type><name>type_a</name></type></parameter>, <parameter><type><name>type_b</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>define_itxfm2(type_a, type_b, sz, bpp)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>define_itxfm_funcs</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>define_itxfm(idct, idct, sz, bpp); define_itxfm(iadst, idct, sz, bpp); define_itxfm(idct, iadst, sz, bpp); define_itxfm(iadst, iadst, sz, bpp)</cpp:value></cpp:define>





<expr_stmt><expr><call><name>define_itxfm_funcs</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>define_itxfm_funcs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>define_itxfm_funcs</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>define_itxfm</name><argument_list>(<argument><expr><name>idct</name></expr></argument>, <argument><expr><name>idct</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>define_itxfm</name><argument_list>(<argument><expr><name>iwht</name></expr></argument>, <argument><expr><name>iwht</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>vp9dsp_itxfm_init_aarch64</name><parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>have_neon</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_itxfm2</name><parameter_list>(<parameter><type><name>tx</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;itxfm_add[tx][DCT_DCT] = ff_vp9_idct_idct_##sz##_add_##bpp##_neon; dsp-&gt;itxfm_add[tx][DCT_ADST] = ff_vp9_iadst_idct_##sz##_add_##bpp##_neon; dsp-&gt;itxfm_add[tx][ADST_DCT] = ff_vp9_idct_iadst_##sz##_add_##bpp##_neon; dsp-&gt;itxfm_add[tx][ADST_ADST] = ff_vp9_iadst_iadst_##sz##_add_##bpp##_neon</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_itxfm</name><parameter_list>(<parameter><type><name>tx</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_itxfm2(tx, sz, bpp)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_idct2</name><parameter_list>(<parameter><type><name>tx</name></type></parameter>, <parameter><type><name>nm</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;itxfm_add[tx][DCT_DCT] = dsp-&gt;itxfm_add[tx][ADST_DCT] = dsp-&gt;itxfm_add[tx][DCT_ADST] = dsp-&gt;itxfm_add[tx][ADST_ADST] = ff_vp9_##nm##_add_##bpp##_neon</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_idct</name><parameter_list>(<parameter><type><name>tx</name></type></parameter>, <parameter><type><name>nm</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_idct2(tx, nm, bpp)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>init_itxfm</name><argument_list>(<argument><expr><name>TX_4X4</name></expr></argument>, <argument><expr><literal type="number">4x4</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_itxfm</name><argument_list>(<argument><expr><name>TX_8X8</name></expr></argument>, <argument><expr><literal type="number">8x8</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_itxfm</name><argument_list>(<argument><expr><name>TX_16X16</name></expr></argument>, <argument><expr><literal type="number">16x16</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_idct</name><argument_list>(<argument><expr><name>TX_32X32</name></expr></argument>, <argument><expr><name>idct_idct_32x32</name></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_idct</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>iwht_iwht_4x4</name></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>define_loop_filter</name><parameter_list>(<parameter><type><name>dir</name></type></parameter>, <parameter><type><name>wd</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_vp9_loop_filter_##dir##_##wd##_##size##_##bpp##_neon(uint8_t *dst, ptrdiff_t stride, int E, int I, int H)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>define_loop_filters</name><parameter_list>(<parameter><type><name>wd</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>define_loop_filter(h, wd, size, bpp); define_loop_filter(v, wd, size, bpp)</cpp:value></cpp:define>



<expr_stmt><expr><call><name>define_loop_filters</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>define_loop_filters</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>define_loop_filters</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>define_loop_filters</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>define_loop_filters</name><argument_list>(<argument><expr><literal type="number">44</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>define_loop_filters</name><argument_list>(<argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>define_loop_filters</name><argument_list>(<argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>define_loop_filters</name><argument_list>(<argument><expr><literal type="number">88</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>vp9dsp_loopfilter_init_aarch64</name><parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>have_neon</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_lpf_func_8</name><parameter_list>(<parameter><type><name>idx1</name></type></parameter>, <parameter><type><name>idx2</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>wd</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;loop_filter_8[idx1][idx2] = ff_vp9_loop_filter_##dir##_##wd##_8_##bpp##_neon</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_lpf_func_16</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;loop_filter_16[idx] = ff_vp9_loop_filter_##dir##_16_16_##bpp##_neon</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_lpf_func_mix2</name><parameter_list>(<parameter><type><name>idx1</name></type></parameter>, <parameter><type><name>idx2</name></type></parameter>, <parameter><type><name>idx3</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>wd</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;loop_filter_mix2[idx1][idx2][idx3] = ff_vp9_loop_filter_##dir##_##wd##_16_##bpp##_neon</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_lpf_funcs_8_wd</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>wd</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_lpf_func_8(idx, 0, h, wd, bpp); init_lpf_func_8(idx, 1, v, wd, bpp)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_lpf_funcs_16</name><parameter_list>(<parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_lpf_func_16(0, h, bpp); init_lpf_func_16(1, v, bpp)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_lpf_funcs_mix2_wd</name><parameter_list>(<parameter><type><name>idx1</name></type></parameter>, <parameter><type><name>idx2</name></type></parameter>, <parameter><type><name>wd</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_lpf_func_mix2(idx1, idx2, 0, h, wd, bpp); init_lpf_func_mix2(idx1, idx2, 1, v, wd, bpp)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_lpf_funcs_8</name><parameter_list>(<parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_lpf_funcs_8_wd(0, 4, bpp); init_lpf_funcs_8_wd(1, 8, bpp); init_lpf_funcs_8_wd(2, 16, bpp)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_lpf_funcs_mix2</name><parameter_list>(<parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_lpf_funcs_mix2_wd(0, 0, 44, bpp); init_lpf_funcs_mix2_wd(0, 1, 48, bpp); init_lpf_funcs_mix2_wd(1, 0, 84, bpp); init_lpf_funcs_mix2_wd(1, 1, 88, bpp)</cpp:value></cpp:define>





<expr_stmt><expr><call><name>init_lpf_funcs_8</name><argument_list>(<argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_lpf_funcs_16</name><argument_list>(<argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_lpf_funcs_mix2</name><argument_list>(<argument><expr><name>BPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>INIT_FUNC</name><parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vp9dsp_mc_init_aarch64</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vp9dsp_loopfilter_init_aarch64</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vp9dsp_itxfm_init_aarch64</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
