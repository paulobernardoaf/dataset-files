<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\ac3.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ac3.h"</cpp:file></cpp:include>




<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_ac3_band_start_tab</name><index>[<expr><name>AC3_CRITICAL_BANDS</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>,
<expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">31</literal></expr>,
<expr><literal type="number">34</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">73</literal></expr>,
<expr><literal type="number">79</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">133</literal></expr>, <expr><literal type="number">157</literal></expr>, <expr><literal type="number">181</literal></expr>, <expr><literal type="number">205</literal></expr>, <expr><literal type="number">229</literal></expr>, <expr><literal type="number">253</literal></expr>
}</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_ac3_bin_to_band_tab</name><index>[<expr><literal type="number">253</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>,
<expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>,
<expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">30</literal></expr>,
<expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">34</literal></expr>,
<expr><literal type="number">35</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">36</literal></expr>,
<expr><literal type="number">37</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">38</literal></expr>,
<expr><literal type="number">39</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">40</literal></expr>,
<expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>,
<expr><literal type="number">42</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">42</literal></expr>,
<expr><literal type="number">43</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">43</literal></expr>,
<expr><literal type="number">44</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">44</literal></expr>,
<expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>,
<expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">45</literal></expr>,
<expr><literal type="number">46</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">46</literal></expr>,
<expr><literal type="number">46</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">46</literal></expr>,
<expr><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>,
<expr><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">47</literal></expr>,
<expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>,
<expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">48</literal></expr>,
<expr><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr>,
<expr><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">49</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>calc_lowcomp1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>b0</name> <operator>+</operator> <literal type="number">256</literal><operator>)</operator> <operator>==</operator> <name>b1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>b0</name> <operator>&gt;</operator> <name>b1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>calc_lowcomp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bin</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>calc_lowcomp1</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b0</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><literal type="number">384</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bin</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>calc_lowcomp1</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b0</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><literal type="number">320</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ac3_bit_alloc_calc_psd</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>psd</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>band_psd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bin</name></decl>, <decl><type ref="prev"/><name>band</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>bin</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>bin</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>bin</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>psd</name><index>[<expr><name>bin</name></expr>]</index></name><operator>=</operator><operator>(</operator><literal type="number">3072</literal> <operator>-</operator> <operator>(</operator><name><name>exp</name><index>[<expr><name>bin</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>bin</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>band</name> <operator>=</operator> <name><name>ff_ac3_bin_to_band_tab</name><index>[<expr><name>start</name></expr>]</index></name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>psd</name><index>[<expr><name>bin</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>band_end</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>ff_ac3_band_start_tab</name><index>[<expr><name>band</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>bin</name> <operator>&lt;</operator> <name>band_end</name></expr>;</condition> <incr><expr><name>bin</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>psd</name><index>[<expr><name>bin</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>adr</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>max</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>v</name> <operator>+</operator> <name><name>psd</name><index>[<expr><name>bin</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>max</name> <operator>+</operator> <name><name>ff_ac3_log_add_tab</name><index>[<expr><name>adr</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>band_psd</name><index>[<expr><name>band</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>end</name> <operator>&gt;</operator> <name><name>ff_ac3_band_start_tab</name><index>[<expr><name>band</name></expr>]</index></name></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_ac3_bit_alloc_calc_mask</name><parameter_list>(<parameter><decl><type><name>AC3BitAllocParameters</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>band_psd</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fast_gain</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_lfe</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dba_mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dba_nsegs</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dba_offsets</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dba_lengths</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dba_values</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>excite</name><index>[<expr><name>AC3_CRITICAL_BANDS</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>band</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>band_start</name></decl>, <decl><type ref="prev"/><name>band_end</name></decl>, <decl><type ref="prev"/><name>begin</name></decl>, <decl><type ref="prev"/><name>end1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lowcomp</name></decl>, <decl><type ref="prev"/><name>fastleak</name></decl>, <decl><type ref="prev"/><name>slowleak</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>band_start</name> <operator>=</operator> <name><name>ff_ac3_bin_to_band_tab</name><index>[<expr><name>start</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>band_end</name> <operator>=</operator> <name><name>ff_ac3_bin_to_band_tab</name><index>[<expr><name>end</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>band_start</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lowcomp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lowcomp</name> <operator>=</operator> <call><name>calc_lowcomp1</name><argument_list>(<argument><expr><name>lowcomp</name></expr></argument>, <argument><expr><name><name>band_psd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>band_psd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">384</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>excite</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>band_psd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>fast_gain</name> <operator>-</operator> <name>lowcomp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lowcomp</name> <operator>=</operator> <call><name>calc_lowcomp1</name><argument_list>(<argument><expr><name>lowcomp</name></expr></argument>, <argument><expr><name><name>band_psd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>band_psd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">384</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>excite</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>band_psd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>fast_gain</name> <operator>-</operator> <name>lowcomp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>begin</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>is_lfe</name> <operator>&amp;&amp;</operator> <name>band</name> <operator>==</operator> <literal type="number">6</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lowcomp</name> <operator>=</operator> <call><name>calc_lowcomp1</name><argument_list>(<argument><expr><name>lowcomp</name></expr></argument>, <argument><expr><name><name>band_psd</name><index>[<expr><name>band</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>band_psd</name><index>[<expr><name>band</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">384</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fastleak</name> <operator>=</operator> <name><name>band_psd</name><index>[<expr><name>band</name></expr>]</index></name> <operator>-</operator> <name>fast_gain</name></expr>;</expr_stmt>
<expr_stmt><expr><name>slowleak</name> <operator>=</operator> <name><name>band_psd</name><index>[<expr><name>band</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>slow_gain</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>excite</name><index>[<expr><name>band</name></expr>]</index></name> <operator>=</operator> <name>fastleak</name> <operator>-</operator> <name>lowcomp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>is_lfe</name> <operator>&amp;&amp;</operator> <name>band</name> <operator>==</operator> <literal type="number">6</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>band_psd</name><index>[<expr><name>band</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>band_psd</name><index>[<expr><name>band</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>begin</name> <operator>=</operator> <name>band</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>end1</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>band_end</name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <name>begin</name></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <name>end1</name></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>is_lfe</name> <operator>&amp;&amp;</operator> <name>band</name> <operator>==</operator> <literal type="number">6</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lowcomp</name> <operator>=</operator> <call><name>calc_lowcomp</name><argument_list>(<argument><expr><name>lowcomp</name></expr></argument>, <argument><expr><name><name>band_psd</name><index>[<expr><name>band</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>band_psd</name><index>[<expr><name>band</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>band</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fastleak</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>fastleak</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>fast_decay</name></name></expr></argument>, <argument><expr><name><name>band_psd</name><index>[<expr><name>band</name></expr>]</index></name> <operator>-</operator> <name>fast_gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slowleak</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>slowleak</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>slow_decay</name></name></expr></argument>, <argument><expr><name><name>band_psd</name><index>[<expr><name>band</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>slow_gain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>excite</name><index>[<expr><name>band</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>fastleak</name> <operator>-</operator> <name>lowcomp</name></expr></argument>, <argument><expr><name>slowleak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>begin</name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>begin</name> <operator>=</operator> <name>band_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fastleak</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>cpl_fast_leak</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">768</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>slowleak</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>cpl_slow_leak</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">768</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <name>begin</name></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <name>band_end</name></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>fastleak</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>fastleak</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>fast_decay</name></name></expr></argument>, <argument><expr><name><name>band_psd</name><index>[<expr><name>band</name></expr>]</index></name> <operator>-</operator> <name>fast_gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slowleak</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>slowleak</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>slow_decay</name></name></expr></argument>, <argument><expr><name><name>band_psd</name><index>[<expr><name>band</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>slow_gain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>excite</name><index>[<expr><name>band</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>fastleak</name></expr></argument>, <argument><expr><name>slowleak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>



<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <name>band_start</name></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <name>band_end</name></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>db_per_bit</name></name> <operator>-</operator> <name><name>band_psd</name><index>[<expr><name>band</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>excite</name><index>[<expr><name>band</name></expr>]</index></name> <operator>+=</operator> <name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mask</name><index>[<expr><name>band</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>ff_ac3_hearing_threshold_tab</name><index>[<expr><name>band</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>sr_shift</name></name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>sr_code</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>excite</name><index>[<expr><name>band</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><name>dba_mode</name> <operator>==</operator> <name>DBA_REUSE</name> <operator>||</operator> <name>dba_mode</name> <operator>==</operator> <name>DBA_NEW</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>seg</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dba_nsegs</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>band</name> <operator>=</operator> <name>band_start</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>seg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>seg</name> <operator>&lt;</operator> <name>dba_nsegs</name></expr>;</condition> <incr><expr><name>seg</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>band</name> <operator>+=</operator> <name><name>dba_offsets</name><index>[<expr><name>seg</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>band</name> <operator>&gt;=</operator> <name>AC3_CRITICAL_BANDS</name> <operator>||</operator> <name><name>dba_lengths</name><index>[<expr><name>seg</name></expr>]</index></name> <operator>&gt;</operator> <name>AC3_CRITICAL_BANDS</name><operator>-</operator><name>band</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dba_values</name><index>[<expr><name>seg</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>(</operator><name><name>dba_values</name><index>[<expr><name>seg</name></expr>]</index></name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">128</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>(</operator><name><name>dba_values</name><index>[<expr><name>seg</name></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">128</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dba_lengths</name><index>[<expr><name>seg</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>mask</name><index>[<expr><name>band</name><operator>++</operator></expr>]</index></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
