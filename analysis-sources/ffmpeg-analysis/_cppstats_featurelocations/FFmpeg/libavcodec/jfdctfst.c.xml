<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\jfdctfst.c">



































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dct.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCTSIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLOBAL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIGHT_SHIFT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &gt;&gt; (n))</cpp:value></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DCTSIZE</name> <operator>!=</operator> <literal type="number">8</literal></expr></cpp:if>
<expr_stmt><expr><name>Sorry</name></expr><operator>,</operator> <expr><name>this</name> <name>code</name> <name>only</name> <name>copes</name> <name>with</name> <literal type="number">8x8</literal> <name><name>DCTs</name><operator>.</operator> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST_BITS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONST_BITS</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_382683433</name></cpp:macro> <cpp:value>((int32_t) 98)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_541196100</name></cpp:macro> <cpp:value>((int32_t) 139)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_707106781</name></cpp:macro> <cpp:value>((int32_t) 181)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_1_306562965</name></cpp:macro> <cpp:value>((int32_t) 334)</cpp:value></cpp:define> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_382683433</name></cpp:macro> <cpp:value>FIX(0.382683433)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_541196100</name></cpp:macro> <cpp:value>FIX(0.541196100)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_0_707106781</name></cpp:macro> <cpp:value>FIX(0.707106781)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_1_306562965</name></cpp:macro> <cpp:value>FIX(1.306562965)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_ACCURATE_ROUNDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DESCALE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DESCALE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RIGHT_SHIFT(x, n)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTIPLY</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><specifier>const</specifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int16_t) DESCALE((var) * (const), CONST_BITS))</cpp:value></cpp:define>

<name/></name>static <name>av_always_inline</name> <name>void</name> <macro><name>row_fdct</name><argument_list>(<argument>int16_t * data</argument>)</argument_list></macro><block>{
<expr><name>int</name> <name>tmp0</name></expr>, <expr><name>tmp1</name></expr>, <expr><name>tmp2</name></expr>, <expr><name>tmp3</name></expr>, <expr><name>tmp4</name></expr>, <expr><name>tmp5</name></expr>, <expr><name>tmp6</name></expr>, <expr><name>tmp7</name></expr>;
<expr><name>int</name> <name>tmp10</name></expr>, <expr><name>tmp11</name></expr>, <expr><name>tmp12</name></expr>, <expr><name>tmp13</name></expr>;
<expr><name>int</name> <name>z1</name></expr>, <expr><name>z2</name></expr>, <expr><name>z3</name></expr>, <expr><name>z4</name></expr>, <expr><name>z5</name></expr>, <expr><name>z11</name></expr>, <expr><name>z13</name></expr>;
<expr><name>int16_t</name> <operator>*</operator><name>dataptr</name></expr>;
<expr><name>int</name> <name>ctr</name></expr>;



<expr><name>dataptr</name> <operator>=</operator> <name>data</name></expr>;
<for>for <control>(<init><expr><name>ctr</name> <operator>=</operator> <name>DCTSIZE</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>ctr</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ctr</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>



<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp0</name> <operator>+</operator> <name>tmp3</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <name>tmp0</name> <operator>-</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp10</name> <operator>+</operator> <name>tmp11</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>tmp10</name> <operator>-</operator> <name>tmp11</name></expr>;</expr_stmt>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp12</name> <operator>+</operator> <name>tmp13</name></expr></argument>, <argument><expr><name>FIX_0_707106781</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>tmp13</name> <operator>+</operator> <name>z1</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>tmp13</name> <operator>-</operator> <name>z1</name></expr>;</expr_stmt>



<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp4</name> <operator>+</operator> <name>tmp5</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp5</name> <operator>+</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp6</name> <operator>+</operator> <name>tmp7</name></expr>;</expr_stmt>


<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp10</name> <operator>-</operator> <name>tmp12</name></expr></argument>, <argument><expr><name>FIX_0_382683433</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp10</name></expr></argument>, <argument><expr><name>FIX_0_541196100</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>z5</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>FIX_1_306562965</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>z5</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp11</name></expr></argument>, <argument><expr><name>FIX_0_707106781</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>z11</name> <operator>=</operator> <name>tmp7</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>z13</name> <operator>=</operator> <name>tmp7</name> <operator>-</operator> <name>z3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>z13</name> <operator>+</operator> <name>z2</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>z13</name> <operator>-</operator> <name>z2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>z11</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>z11</name> <operator>-</operator> <name>z4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dataptr</name> <operator>+=</operator> <name>DCTSIZE</name></expr>;</expr_stmt> 
<expr_stmt/></block_content></block></for>}</block></expr></expr_stmt>
}





GLOBAL<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator>
<macro><name>ff_fdct_ifast</name> <argument_list>(<argument>int16_t * data</argument>)</argument_list></macro>
<block>{
<expr><name>int</name> <name>tmp0</name></expr>, <expr><name>tmp1</name></expr>, <expr><name>tmp2</name></expr>, <expr><name>tmp3</name></expr>, <expr><name>tmp4</name></expr>, <expr><name>tmp5</name></expr>, <expr><name>tmp6</name></expr>, <expr><name>tmp7</name></expr>;
<expr><name>int</name> <name>tmp10</name></expr>, <expr><name>tmp11</name></expr>, <expr><name>tmp12</name></expr>, <expr><name>tmp13</name></expr>;
<expr><name>int</name> <name>z1</name></expr>, <expr><name>z2</name></expr>, <expr><name>z3</name></expr>, <expr><name>z4</name></expr>, <expr><name>z5</name></expr>, <expr><name>z11</name></expr>, <expr><name>z13</name></expr>;
<expr><name>int16_t</name> <operator>*</operator><name>dataptr</name></expr>;
<expr><name>int</name> <name>ctr</name></expr>;

<expr><call><name>row_fdct</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;



<expr><name>dataptr</name> <operator>=</operator> <name>data</name></expr>;
<for>for <control>(<init><expr><name>ctr</name> <operator>=</operator> <name>DCTSIZE</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>ctr</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ctr</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>



<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp0</name> <operator>+</operator> <name>tmp3</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <name>tmp0</name> <operator>-</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp10</name> <operator>+</operator> <name>tmp11</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>tmp10</name> <operator>-</operator> <name>tmp11</name></expr>;</expr_stmt>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp12</name> <operator>+</operator> <name>tmp13</name></expr></argument>, <argument><expr><name>FIX_0_707106781</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>tmp13</name> <operator>+</operator> <name>z1</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>tmp13</name> <operator>-</operator> <name>z1</name></expr>;</expr_stmt>



<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp4</name> <operator>+</operator> <name>tmp5</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp5</name> <operator>+</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp6</name> <operator>+</operator> <name>tmp7</name></expr>;</expr_stmt>


<expr_stmt><expr><name>z5</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp10</name> <operator>-</operator> <name>tmp12</name></expr></argument>, <argument><expr><name>FIX_0_382683433</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp10</name></expr></argument>, <argument><expr><name>FIX_0_541196100</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>z5</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>z4</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp12</name></expr></argument>, <argument><expr><name>FIX_1_306562965</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>z5</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp11</name></expr></argument>, <argument><expr><name>FIX_0_707106781</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>z11</name> <operator>=</operator> <name>tmp7</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>z13</name> <operator>=</operator> <name>tmp7</name> <operator>-</operator> <name>z3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>z13</name> <operator>+</operator> <name>z2</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>z13</name> <operator>-</operator> <name>z2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>z11</name> <operator>+</operator> <name>z4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>z11</name> <operator>-</operator> <name>z4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dataptr</name><operator>++</operator></expr>;</expr_stmt> 
<expr_stmt/></block_content></block></for>}</block></expr></expr_stmt>
}





GLOBAL<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator>
<macro><name>ff_fdct_ifast248</name> <argument_list>(<argument>int16_t * data</argument>)</argument_list></macro>
<block>{
<expr><name>int</name> <name>tmp0</name></expr>, <expr><name>tmp1</name></expr>, <expr><name>tmp2</name></expr>, <expr><name>tmp3</name></expr>, <expr><name>tmp4</name></expr>, <expr><name>tmp5</name></expr>, <expr><name>tmp6</name></expr>, <expr><name>tmp7</name></expr>;
<expr><name>int</name> <name>tmp10</name></expr>, <expr><name>tmp11</name></expr>, <expr><name>tmp12</name></expr>, <expr><name>tmp13</name></expr>;
<expr><name>int</name> <name>z1</name></expr>;
<expr><name>int16_t</name> <operator>*</operator><name>dataptr</name></expr>;
<expr><name>int</name> <name>ctr</name></expr>;

<expr><call><name>row_fdct</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;



<expr><name>dataptr</name> <operator>=</operator> <name>data</name></expr>;
<for>for <control>(<init><expr><name>ctr</name> <operator>=</operator> <name>DCTSIZE</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>ctr</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ctr</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>



<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp0</name> <operator>+</operator> <name>tmp3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <name>tmp0</name> <operator>-</operator> <name>tmp3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp10</name> <operator>+</operator> <name>tmp11</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>tmp10</name> <operator>-</operator> <name>tmp11</name></expr>;</expr_stmt>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp12</name> <operator>+</operator> <name>tmp13</name></expr></argument>, <argument><expr><name>FIX_0_707106781</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>tmp13</name> <operator>+</operator> <name>z1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>tmp13</name> <operator>-</operator> <name>z1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp10</name> <operator>=</operator> <name>tmp4</name> <operator>+</operator> <name>tmp7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp11</name> <operator>=</operator> <name>tmp5</name> <operator>+</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp12</name> <operator>=</operator> <name>tmp5</name> <operator>-</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp13</name> <operator>=</operator> <name>tmp4</name> <operator>-</operator> <name>tmp7</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmp10</name> <operator>+</operator> <name>tmp11</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>tmp10</name> <operator>-</operator> <name>tmp11</name></expr>;</expr_stmt>

<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>MULTIPLY</name><argument_list>(<argument><expr><name>tmp12</name> <operator>+</operator> <name>tmp13</name></expr></argument>, <argument><expr><name>FIX_0_707106781</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>tmp13</name> <operator>+</operator> <name>z1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dataptr</name><index>[<expr><name>DCTSIZE</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>tmp13</name> <operator>-</operator> <name>z1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dataptr</name><operator>++</operator></expr>;</expr_stmt> 
<expr_stmt/></block_content></block></for>}</block></expr></expr_stmt>
}


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GLOBAL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CONST_BITS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DESCALE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FIX_0_541196100</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FIX_1_306562965</name></cpp:undef>
</unit>
