<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\cbs.c">

















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_internal.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>CodedBitstreamType</name> <modifier>*</modifier></type><name><name>cbs_type_table</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CBS_AV1</name></expr></cpp:if>
<expr><operator>&amp;</operator><name>ff_cbs_type_av1</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CBS_H264</name></expr></cpp:if>
<expr><operator>&amp;</operator><name>ff_cbs_type_h264</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CBS_H265</name></expr></cpp:if>
<expr><operator>&amp;</operator><name>ff_cbs_type_h265</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CBS_JPEG</name></expr></cpp:if>
<expr><operator>&amp;</operator><name>ff_cbs_type_jpeg</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CBS_MPEG2</name></expr></cpp:if>
<expr><operator>&amp;</operator><name>ff_cbs_type_mpeg2</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CBS_VP9</name></expr></cpp:if>
<expr><operator>&amp;</operator><name>ff_cbs_type_vp9</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVCodecID</name></name></type> <name><name>ff_cbs_all_codec_ids</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CBS_AV1</name></expr></cpp:if>
<expr><name>AV_CODEC_ID_AV1</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CBS_H264</name></expr></cpp:if>
<expr><name>AV_CODEC_ID_H264</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CBS_H265</name></expr></cpp:if>
<expr><name>AV_CODEC_ID_H265</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CBS_JPEG</name></expr></cpp:if>
<expr><name>AV_CODEC_ID_MJPEG</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CBS_MPEG2</name></expr></cpp:if>
<expr><name>AV_CODEC_ID_MPEG2VIDEO</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_CBS_VP9</name></expr></cpp:if>
<expr><name>AV_CODEC_ID_VP9</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>AV_CODEC_ID_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>ff_cbs_init</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx_ptr</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CodedBitstreamType</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>cbs_type_table</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cbs_type_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>codec_id</name> <operator>==</operator> <name>codec_id</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>cbs_type_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>type</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name> <operator>=</operator> <name>log_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>priv_data_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>decompose_unit_types</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_level</name></name> <operator>=</operator> <name>AV_LOG_TRACE</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ctx_ptr</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_cbs_close</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>*</operator><name>ctx_ptr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>close</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>close</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>write_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>ctx_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_unit_uninit</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>unit</name><operator>-&gt;</operator><name>content_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>unit</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>data_bit_padding</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_cbs_fragment_reset</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cbs_unit_uninit</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frag</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frag</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>data_bit_padding</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_cbs_fragment_free</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frag</name><operator>-&gt;</operator><name>units</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>nb_units_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_read_fragment_content</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><operator>&amp;</operator><name><name>frag</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>decompose_unit_types</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_decompose_unit_types</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>decompose_unit_types</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_decompose_unit_types</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>unit</name><operator>-&gt;</operator><name>content_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>read_unit</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,
<argument><expr><literal type="string">"Decomposition unimplemented for unit %d "</literal>
<literal type="string">"(type %"</literal><name>PRIu32</name><literal type="string">").\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to read unit %d "</literal>
<literal type="string">"(type %"</literal><name>PRIu32</name><literal type="string">").\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_fill_fragment_data</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>frag</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>data_ref</name></name> <operator>=</operator>
<call><name>av_buffer_alloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frag</name><operator>-&gt;</operator><name>data_ref</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_cbs_read_extradata</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_fill_fragment_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>,
<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>split_fragment</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>cbs_read_fragment_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_cbs_read_packet</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>data_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frag</name><operator>-&gt;</operator><name>data_ref</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_fill_fragment_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>split_fragment</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>cbs_read_fragment_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_cbs_read</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_fill_fragment_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>split_fragment</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>cbs_read_fragment_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_write_unit_data</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pbc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>write_buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>write_buffer_size</name></name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<label><name>reallocate_and_try_again</name>:</label>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>write_buffer</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>write_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to allocate a "</literal>
<literal type="string">"sufficiently large write buffer (last attempt "</literal>
<literal type="string">"%"</literal><name>SIZE_SPECIFIER</name><literal type="string">" bytes).\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>write_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>write_buffer</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>write_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>write_unit</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSPC</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>write_buffer_size</name></name> <operator>==</operator> <name>INT_MAX</name> <operator>/</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>write_buffer_size</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>write_buffer_size</name></name></expr></argument>, <argument><expr><name>INT_MAX</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>reallocate_and_try_again</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>write_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>data_bit_padding</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>-</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>data_bit_padding</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_cbs_alloc_unit_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>write_buffer</name></name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_cbs_write_fragment_data</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><operator>&amp;</operator><name><name>frag</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>unit</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_write_unit_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write unit %d "</literal>
<literal type="string">"(type %"</literal><name>PRIu32</name><literal type="string">").\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frag</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>assemble_fragment</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to assemble fragment.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_cbs_write_extradata</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>par</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_write_fragment_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name> <operator>+</operator>
<name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>par</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>par</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_cbs_write_packet</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_write_fragment_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ff_cbs_trace_header</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_level</name></name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_cbs_trace_syntax_element</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>subscripts</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>name_len</name></decl>, <decl><type ref="prev"/><name>bits_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pad</name></decl>, <decl><type ref="prev"/><name>subs</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>value</name> <operator>&gt;=</operator> <name>INT_MIN</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>subs</name> <operator>=</operator> <ternary><condition><expr><name>subscripts</name></expr> ?</condition><then> <expr><name><name>subscripts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>subs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>j</name></expr></argument>, <argument><expr><literal type="string">"[%d"</literal></expr></argument>, <argument><expr><name><name>subscripts</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>+</operator> <name>k</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><operator>++</operator><name>i</name></expr>;</init> <condition><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">']'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>str</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>str</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <name>subs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bits_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name_len</name> <operator>+</operator> <name>bits_len</name> <operator>&gt;</operator> <literal type="number">60</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pad</name> <operator>=</operator> <name>bits_len</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pad</name> <operator>=</operator> <literal type="number">61</literal> <operator>-</operator> <name>name_len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_level</name></name></expr></argument>, <argument><expr><literal type="string">"%-10d %s%*s = %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>position</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_cbs_read_unsigned</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>subscripts</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>write_to</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>range_min</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>range_max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>width</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>width</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid value at "</literal>
<literal type="string">"%s: bitstream ended.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>bits</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>value</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>width</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="char">'1'</literal></expr> </then><else>: <expr><literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_trace_syntax_element</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>subscripts</name></expr></argument>,
<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><name>range_min</name> <operator>||</operator> <name>value</name></expr></argument> &gt;</argument_list></name> <name>range_max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s out of range: "</literal>
<literal type="string">"%"</literal><name>PRIu32</name><literal type="string">", but must be in [%"</literal><name>PRIu32</name><literal type="string">",%"</literal><name>PRIu32</name><literal type="string">"].\n"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>range_min</name></expr></argument>, <argument><expr><name>range_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>write_to</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_cbs_write_unsigned</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pbc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>subscripts</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>range_min</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>range_max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>width</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>width</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><name>range_min</name> <operator>||</operator> <name>value</name></expr></argument> &gt;</argument_list></name> <name>range_max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s out of range: "</literal>
<literal type="string">"%"</literal><name>PRIu32</name><literal type="string">", but must be in [%"</literal><name>PRIu32</name><literal type="string">",%"</literal><name>PRIu32</name><literal type="string">"].\n"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>range_min</name></expr></argument>, <argument><expr><name>range_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>put_bits_left</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSPC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>bits</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>value</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>width</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="char">'1'</literal></expr> </then><else>: <expr><literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_trace_syntax_element</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>subscripts</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_cbs_read_signed</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>subscripts</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>write_to</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>range_min</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>range_max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>width</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>width</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid value at "</literal>
<literal type="string">"%s: bitstream ended.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>get_sbits_long</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>bits</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>value</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>width</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'1'</literal></expr> </then><else>: <expr><literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_trace_syntax_element</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>subscripts</name></expr></argument>,
<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><name>range_min</name> <operator>||</operator> <name>value</name></expr></argument> &gt;</argument_list></name> <name>range_max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s out of range: "</literal>
<literal type="string">"%"</literal><name>PRId32</name><literal type="string">", but must be in [%"</literal><name>PRId32</name><literal type="string">",%"</literal><name>PRId32</name><literal type="string">"].\n"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>range_min</name></expr></argument>, <argument><expr><name>range_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>write_to</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_cbs_write_signed</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pbc</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>subscripts</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>value</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>range_min</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>range_max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>width</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>width</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>value</name> <argument_list type="generic">&lt; <argument><expr><name>range_min</name> <operator>||</operator> <name>value</name></expr></argument> &gt;</argument_list></name> <name>range_max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s out of range: "</literal>
<literal type="string">"%"</literal><name>PRId32</name><literal type="string">", but must be in [%"</literal><name>PRId32</name><literal type="string">",%"</literal><name>PRId32</name><literal type="string">"].\n"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>range_min</name></expr></argument>, <argument><expr><name>range_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>put_bits_left</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSPC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace_enable</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>bits</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>value</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>width</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'1'</literal></expr> </then><else>: <expr><literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_trace_syntax_element</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>subscripts</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>ff_cbs_alloc_unit_content</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>unit</name><operator>-&gt;</operator><name>content</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>unit</name><operator>-&gt;</operator><name>content_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>content_ref</name></name> <operator>=</operator> <call><name>av_buffer_create</name><argument_list>(<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
<argument><expr><name>free</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>unit</name><operator>-&gt;</operator><name>content_ref</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_cbs_alloc_unit_data</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>unit</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>unit</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>data_ref</name></name> <operator>=</operator> <call><name>av_buffer_alloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>unit</name><operator>-&gt;</operator><name>data_ref</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_insert_unit</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>units</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units_allocated</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>units</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>units</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>position</name> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>units</name> <operator>+</operator> <name>position</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>units</name> <operator>+</operator> <name>position</name></expr></argument>,
<argument><expr><operator>(</operator><name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name> <operator>-</operator> <name>position</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>units</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>units</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>units</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>units</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>frag</name><operator>-&gt;</operator><name>nb_units_allocated</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>position</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>units</name></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>units</name></name></expr></argument>, <argument><expr><name>position</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>units</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>position</name> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>units</name> <operator>+</operator> <name>position</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>units</name></name> <operator>+</operator> <name>position</name></expr></argument>,
<argument><expr><operator>(</operator><name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name> <operator>-</operator> <name>position</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>units</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>units</name> <operator>+</operator> <name>position</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>units</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>units</name> <operator>!=</operator> <name><name>frag</name><operator>-&gt;</operator><name>units</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>units</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>units</name></name> <operator>=</operator> <name>units</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_cbs_insert_unit_content</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamUnitType</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>content</name></decl></parameter>,
<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>content_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>content_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>position</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>position</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>position</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>position</name> <operator>&lt;=</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>content_buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>content_ref</name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name>content_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>content_ref</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>content_ref</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_insert_unit</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>content_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>unit</name> <operator>=</operator> <operator>&amp;</operator><name><name>frag</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>position</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name> <operator>=</operator> <name>content</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>content_ref</name></name> <operator>=</operator> <name>content_ref</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_cbs_insert_unit_data</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamUnitType</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_size</name></decl></parameter>,
<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>data_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>data_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>position</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>position</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>position</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>position</name> <operator>&lt;=</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data_buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>data_ref</name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name>data_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>data_ref</name> <operator>=</operator> <call><name>av_buffer_create</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data_ref</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data_buf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_insert_unit</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>unit</name> <operator>=</operator> <operator>&amp;</operator><name><name>frag</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>position</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name>data_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>unit</name><operator>-&gt;</operator><name>data_ref</name></name> <operator>=</operator> <name>data_ref</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_cbs_delete_unit</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>position</name> <operator>&amp;&amp;</operator> <name>position</name> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name>
<operator>&amp;&amp;</operator> <literal type="string">"Unit to be deleted not in fragment."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cbs_unit_uninit</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>frag</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>units</name></name> <operator>+</operator> <name>position</name></expr></argument>,
<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>units</name></name> <operator>+</operator> <name>position</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name> <operator>-</operator> <name>position</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>frag</name><operator>-&gt;</operator><name>units</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
