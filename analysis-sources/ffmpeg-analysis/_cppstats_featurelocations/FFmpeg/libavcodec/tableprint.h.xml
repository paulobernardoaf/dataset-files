<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\tableprint.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_TABLEPRINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_TABLEPRINT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_1D_FUNC_ARGV</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>linebrk</name></type></parameter>, <parameter><type><name>fmtstr</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro><cpp:value>void write_##type##_array(const type *data, int len){int i;printf(" ");for (i = 0; i &lt; len - 1; i++) {printf(" "fmtstr",", __VA_ARGS__);if ((i &amp; linebrk) == linebrk) printf("\n ");}printf(" "fmtstr"\n", __VA_ARGS__);}</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_1D_FUNC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>fmtstr</name></type></parameter>, <parameter><type><name>linebrk</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>WRITE_1D_FUNC_ARGV(type, linebrk, fmtstr, data[i])</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_2D_FUNC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>void write_##type##_2d_array(const void *arg, int len, int len2){const type *data = arg;int i;printf(" {\n");for (i = 0; i &lt; len; i++) {write_##type##_array(data + i * len2, len2);printf(i == len - 1 ? " }\n" : " }, {\n");}}</cpp:value></cpp:define>
















<function_decl><type><name>void</name></type> <name>write_int8_t_array</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>write_uint8_t_array</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>write_uint16_t_array</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>write_uint32_t_array</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>write_int32_t_array</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>write_float_array</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>write_int8_t_2d_array</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>write_uint8_t_2d_array</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>write_uint32_t_2d_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>write_float_2d_array</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT</name></cpp:macro> <cpp:value>"Iu"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT</name></cpp:macro> <cpp:value>"zu"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_ARRAY_ALIGNED</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>, <parameter><type><name>align</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const size_t array_size = FF_ARRAY_ELEMS(name); printf(prefix" DECLARE_ALIGNED("#align", " #type", "#name")[%"FMT"] = {\n", array_size); write_##type##_array(name, array_size); printf("};\n"); } while(0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_ARRAY</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const size_t array_size = FF_ARRAY_ELEMS(name); printf(prefix" "#type" "#name"[%"FMT"] = {\n", array_size); write_##type##_array(name, array_size); printf("};\n"); } while(0)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_2D_ARRAY</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const size_t array_size1 = FF_ARRAY_ELEMS(name); const size_t array_size2 = FF_ARRAY_ELEMS(name[0]); printf(prefix" "#type" "#name"[%"FMT"][%"FMT"] = {\n", array_size1, array_size2 ); write_##type##_2d_array(name, array_size1, array_size2); printf("};\n"); } while(0)</cpp:value></cpp:define>










<macro><name>WRITE_1D_FUNC</name><argument_list>(<argument>int8_t</argument>, <argument><literal type="string">"%3"</literal>PRIi8</argument>, <argument><literal type="number">15</literal></argument>)</argument_list></macro>
<macro><name>WRITE_1D_FUNC</name><argument_list>(<argument>uint8_t</argument>, <argument><literal type="string">"0x%02"</literal>PRIx8</argument>, <argument><literal type="number">15</literal></argument>)</argument_list></macro>
<macro><name>WRITE_1D_FUNC</name><argument_list>(<argument>uint16_t</argument>, <argument><literal type="string">"0x%08"</literal>PRIx16</argument>, <argument><literal type="number">7</literal></argument>)</argument_list></macro>
<macro><name>WRITE_1D_FUNC</name><argument_list>(<argument>int16_t</argument>, <argument><literal type="string">"%5"</literal>PRIi16</argument>, <argument><literal type="number">7</literal></argument>)</argument_list></macro>
<macro><name>WRITE_1D_FUNC</name><argument_list>(<argument>uint32_t</argument>, <argument><literal type="string">"0x%08"</literal>PRIx32</argument>, <argument><literal type="number">7</literal></argument>)</argument_list></macro>
<macro><name>WRITE_1D_FUNC</name><argument_list>(<argument>int32_t</argument>, <argument><literal type="string">"0x%08"</literal>PRIx32</argument>, <argument><literal type="number">7</literal></argument>)</argument_list></macro>
<macro><name>WRITE_1D_FUNC</name><argument_list>(<argument>float</argument>, <argument><literal type="string">"%.18e"</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>WRITE_2D_FUNC</name><argument_list>(<argument>int8_t</argument>)</argument_list></macro>
<macro><name>WRITE_2D_FUNC</name><argument_list>(<argument>uint8_t</argument>)</argument_list></macro>
<macro><name>WRITE_2D_FUNC</name><argument_list>(<argument>uint32_t</argument>)</argument_list></macro>
<macro><name>WRITE_2D_FUNC</name><argument_list>(<argument>float</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>write_fileheader</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"/* This file was automatically generated. */\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"#include &lt;stdint.h&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
