<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\diracdsp.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diracdsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((21*((src)[ 0*stride] + (src)[1*stride]) -7*((src)[-1*stride] + (src)[2*stride]) +3*((src)[-2*stride] + (src)[3*stride]) -1*((src)[-3*stride] + (src)[4*stride]) + 16) &gt;&gt; 5)</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <name>void</name></type> <name>dirac_hpel_filter</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dsth</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstv</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name><operator>+</operator><literal type="number">5</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dstv</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><call><name>FILTER</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><name>x</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dstc</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><call><name>FILTER</name><argument_list>(<argument><expr><name>dstv</name><operator>+</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dsth</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><call><name>FILTER</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dsth</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstv</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dstc</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXOP_BILINEAR</name><parameter_list>(<parameter><type><name>PFX</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>, <parameter><type><name>WIDTH</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void ff_ ##PFX ##_dirac_pixels ##WIDTH ##_bilinear_c(uint8_t *dst, const uint8_t *src[5], int stride, int h) { int x; const uint8_t *s0 = src[0]; const uint8_t *s1 = src[1]; const uint8_t *s2 = src[2]; const uint8_t *s3 = src[3]; const uint8_t *w = src[4]; while (h--) { for (x = 0; x &lt; WIDTH; x++) { OP(dst[x], (s0[x]*w[0] + s1[x]*w[1] + s2[x]*w[2] + s3[x]*w[3] + 8) &gt;&gt; 4); } dst += stride; s0 += stride; s1 += stride; s2 += stride; s3 += stride; } }</cpp:value></cpp:define>






















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_PUT</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(dst) = (val)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_AVG</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(dst) = (((dst) + (val) + 1)&gt;&gt;1)</cpp:value></cpp:define>

<macro><name>PIXOP_BILINEAR</name><argument_list>(<argument>put</argument>, <argument>OP_PUT</argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>PIXOP_BILINEAR</name><argument_list>(<argument>put</argument>, <argument>OP_PUT</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>PIXOP_BILINEAR</name><argument_list>(<argument>put</argument>, <argument>OP_PUT</argument>, <argument><literal type="number">32</literal></argument>)</argument_list></macro>
<macro><name>PIXOP_BILINEAR</name><argument_list>(<argument>avg</argument>, <argument>OP_AVG</argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>PIXOP_BILINEAR</name><argument_list>(<argument>avg</argument>, <argument>OP_AVG</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>PIXOP_BILINEAR</name><argument_list>(<argument>avg</argument>, <argument>OP_AVG</argument>, <argument><literal type="number">32</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_scale1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>block[x] = av_clip_uint8( (block[x]*weight + (1&lt;&lt;(log2_denom-1))) &gt;&gt; log2_denom)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_scale2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dst[x] = av_clip_uint8( (src[x]*weights + dst[x]*weightd + (1&lt;&lt;(log2_denom-1))) &gt;&gt; log2_denom)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRAC_WEIGHT</name><parameter_list>(<parameter><type><name>W</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void weight_dirac_pixels ##W ##_c(uint8_t *block, int stride, int log2_denom, int weight, int h) { int x; while (h--) { for (x = 0; x &lt; W; x++) { op_scale1(x); op_scale1(x+1); } block += stride; } } static void biweight_dirac_pixels ##W ##_c(uint8_t *dst, const uint8_t *src, int stride, int log2_denom, int weightd, int weights, int h) { int x; while (h--) { for (x = 0; x &lt; W; x++) { op_scale2(x); op_scale2(x+1); } dst += stride; src += stride; } }</cpp:value></cpp:define>
























<macro><name>DIRAC_WEIGHT</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>DIRAC_WEIGHT</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>DIRAC_WEIGHT</name><argument_list>(<argument><literal type="number">32</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_OBMC</name><parameter_list>(<parameter><type><name>xblen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void add_obmc ##xblen ##_c(uint16_t *dst, const uint8_t *src, int stride, const uint8_t *obmc_weight, int yblen) { int x; while (yblen--) { for (x = 0; x &lt; xblen; x += 2) { dst[x ] += src[x ] * obmc_weight[x ]; dst[x+1] += src[x+1] * obmc_weight[x+1]; } dst += stride; src += stride; obmc_weight += 32; } }</cpp:value></cpp:define>















<macro><name>ADD_OBMC</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>
<macro><name>ADD_OBMC</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>
<macro><name>ADD_OBMC</name><argument_list>(<argument><literal type="number">32</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_signed_rect_clamped_8bit_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr> ]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name></expr> ]</index></name> <operator>+</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_SIGNED_RECT_CLAMPED</name><parameter_list>(<parameter><type><name>PX</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void put_signed_rect_clamped_ ##PX ##bit_c(uint8_t *_dst, int dst_stride, const uint8_t *_src, int src_stride, int width, int height) { int x, y; uint16_t *dst = (uint16_t *)_dst; int32_t *src = (int32_t *)_src; for (y = 0; y &lt; height; y++) { for (x = 0; x &lt; width; x+=4) { dst[x ] = av_clip_uintp2(src[x ] + (1U &lt;&lt; (PX - 1)), PX); dst[x+1] = av_clip_uintp2(src[x+1] + (1U &lt;&lt; (PX - 1)), PX); dst[x+2] = av_clip_uintp2(src[x+2] + (1U &lt;&lt; (PX - 1)), PX); dst[x+3] = av_clip_uintp2(src[x+3] + (1U &lt;&lt; (PX - 1)), PX); } dst += dst_stride &gt;&gt; 1; src += src_stride &gt;&gt; 2; } }</cpp:value></cpp:define>


















<macro><name>PUT_SIGNED_RECT_CLAMPED</name><argument_list>(<argument><literal type="number">10</literal></argument>)</argument_list></macro>
<macro><name>PUT_SIGNED_RECT_CLAMPED</name><argument_list>(<argument><literal type="number">12</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_rect_clamped_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>idwt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idwt_stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr> ]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>src</name><index>[<expr><name>x</name></expr> ]</index></name><operator>+</operator><literal type="number">32</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator> <operator>+</operator> <name><name>idwt</name><index>[<expr><name>x</name></expr> ]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">32</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator> <operator>+</operator> <name><name>idwt</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>idwt</name> <operator>+=</operator> <name>idwt_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEQUANT_SUBBAND</name><parameter_list>(<parameter><type><name>PX</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void dequant_subband_ ##PX ##_c(uint8_t *src, uint8_t *dst, ptrdiff_t stride, const int qf, const int qs, int tot_v, int tot_h) { int i, y; for (y = 0; y &lt; tot_v; y++) { PX c, sign, *src_r = (PX *)src, *dst_r = (PX *)dst; for (i = 0; i &lt; tot_h; i++) { c = *src_r++; sign = FFSIGN(c)*(!!c); c = (FFABS(c)*(unsigned)qf + qs) &gt;&gt; 2; *dst_r++ = c*sign; } src += tot_h &lt;&lt; (sizeof(PX) &gt;&gt; 1); dst += stride; } }</cpp:value></cpp:define>

















<macro><name>DEQUANT_SUBBAND</name><argument_list>(<argument>int16_t</argument>)</argument_list></macro>
<macro><name>DEQUANT_SUBBAND</name><argument_list>(<argument>int32_t</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXFUNC</name><parameter_list>(<parameter><type><name>PFX</name></type></parameter>, <parameter><type><name>WIDTH</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c-&gt;PFX ##_dirac_pixels_tab[WIDTH&gt;&gt;4][0] = ff_ ##PFX ##_dirac_pixels ##WIDTH ##_c; c-&gt;PFX ##_dirac_pixels_tab[WIDTH&gt;&gt;4][1] = ff_ ##PFX ##_dirac_pixels ##WIDTH ##_l2_c; c-&gt;PFX ##_dirac_pixels_tab[WIDTH&gt;&gt;4][2] = ff_ ##PFX ##_dirac_pixels ##WIDTH ##_l4_c; c-&gt;PFX ##_dirac_pixels_tab[WIDTH&gt;&gt;4][3] = ff_ ##PFX ##_dirac_pixels ##WIDTH ##_bilinear_c</cpp:value></cpp:define>





<function><type><name>av_cold</name> <name>void</name></type> <name>ff_diracdsp_init</name><parameter_list>(<parameter><decl><type><name>DiracDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dirac_hpel_filter</name></name> <operator>=</operator> <name>dirac_hpel_filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>add_rect_clamped</name></name> <operator>=</operator> <name>add_rect_clamped_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_signed_rect_clamped</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>put_signed_rect_clamped_8bit_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_signed_rect_clamped</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>put_signed_rect_clamped_10bit_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_signed_rect_clamped</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>put_signed_rect_clamped_12bit_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>add_dirac_obmc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>add_obmc8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>add_dirac_obmc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>add_obmc16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>add_dirac_obmc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>add_obmc32_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight_dirac_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>weight_dirac_pixels8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight_dirac_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>weight_dirac_pixels16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>weight_dirac_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>weight_dirac_pixels32_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_dirac_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>biweight_dirac_pixels8_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_dirac_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>biweight_dirac_pixels16_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>biweight_dirac_pixels_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>biweight_dirac_pixels32_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dequant_subband</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dequant_subband</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>dequant_subband_int16_t_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dequant_subband</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dequant_subband</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>dequant_subband_int32_t_c</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PIXFUNC</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PIXFUNC</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PIXFUNC</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PIXFUNC</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PIXFUNC</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PIXFUNC</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_diracdsp_init_x86</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
