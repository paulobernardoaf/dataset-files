<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\binkdsp.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"binkdsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A1</name></cpp:macro> <cpp:value>2896</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A2</name></cpp:macro> <cpp:value>2217</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A3</name></cpp:macro> <cpp:value>3784</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A4</name></cpp:macro> <cpp:value>-5352</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((unsigned)(X) * (Y)) &gt;&gt; 11)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT_TRANSFORM</name><parameter_list>(<parameter><type><name>dest</name></type></parameter>,<parameter><type><name>s0</name></type></parameter>,<parameter><type><name>s1</name></type></parameter>,<parameter><type><name>s2</name></type></parameter>,<parameter><type><name>s3</name></type></parameter>,<parameter><type><name>s4</name></type></parameter>,<parameter><type><name>s5</name></type></parameter>,<parameter><type><name>s6</name></type></parameter>,<parameter><type><name>s7</name></type></parameter>,<parameter><type><name>d0</name></type></parameter>,<parameter><type><name>d1</name></type></parameter>,<parameter><type><name>d2</name></type></parameter>,<parameter><type><name>d3</name></type></parameter>,<parameter><type><name>d4</name></type></parameter>,<parameter><type><name>d5</name></type></parameter>,<parameter><type><name>d6</name></type></parameter>,<parameter><type><name>d7</name></type></parameter>,<parameter><type><name>munge</name></type></parameter>,<parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{const int a0 = (src)[s0] + (src)[s4]; const int a1 = (src)[s0] - (src)[s4]; const int a2 = (src)[s2] + (src)[s6]; const int a3 = MUL(A1, (src)[s2] - (src)[s6]); const int a4 = (src)[s5] + (src)[s3]; const int a5 = (src)[s5] - (src)[s3]; const int a6 = (src)[s1] + (src)[s7]; const int a7 = (src)[s1] - (src)[s7]; const int b0 = a4 + a6; const int b1 = MUL(A3, a5 + a7); const int b2 = MUL(A4, a5) - b0 + b1; const int b3 = MUL(A1, a6 - a4) - b2; const int b4 = MUL(A2, a7) + b3 - b1; (dest)[d0] = munge(a0+a2 +b0); (dest)[d1] = munge(a1+a3-a2+b2); (dest)[d2] = munge(a1-a3+a2+b3); (dest)[d3] = munge(a0-a2 -b4); (dest)[d4] = munge(a0-a2 +b4); (dest)[d5] = munge(a1-a3+a2-b3); (dest)[d6] = munge(a1+a3-a2-b2); (dest)[d7] = munge(a0+a2 -b0); }</cpp:value></cpp:define>
























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUNGE_NONE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT_COL</name><parameter_list>(<parameter><type><name>dest</name></type></parameter>,<parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IDCT_TRANSFORM(dest,0,8,16,24,32,40,48,56,0,8,16,24,32,40,48,56,MUNGE_NONE,src)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUNGE_ROW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) + 0x7F)&gt;&gt;8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT_ROW</name><parameter_list>(<parameter><type><name>dest</name></type></parameter>,<parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IDCT_TRANSFORM(dest,0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,MUNGE_ROW,src)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>bink_idct_col</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>|</operator><name><name>src</name><index>[<expr><literal type="number">16</literal></expr>]</index></name><operator>|</operator><name><name>src</name><index>[<expr><literal type="number">24</literal></expr>]</index></name><operator>|</operator><name><name>src</name><index>[<expr><literal type="number">32</literal></expr>]</index></name><operator>|</operator><name><name>src</name><index>[<expr><literal type="number">40</literal></expr>]</index></name><operator>|</operator><name><name>src</name><index>[<expr><literal type="number">48</literal></expr>]</index></name><operator>|</operator><name><name>src</name><index>[<expr><literal type="number">56</literal></expr>]</index></name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<name><name>dest</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator>
<name><name>dest</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator>
<name><name>dest</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator>
<name><name>dest</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator>
<name><name>dest</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>=</operator>
<name><name>dest</name><index>[<expr><literal type="number">48</literal></expr>]</index></name> <operator>=</operator>
<name><name>dest</name><index>[<expr><literal type="number">56</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>IDCT_COL</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bink_idct_c</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>temp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bink_idct_col</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>IDCT_ROW</name><argument_list>( <argument><expr><operator>(</operator><operator>&amp;</operator><name><name>block</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><operator>&amp;</operator><name><name>temp</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name></expr>]</index></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bink_idct_add_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bink_idct_c</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>dest</name> <operator>+=</operator> <name>linesize</name></expr><operator>,</operator> <expr><name>block</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dest</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bink_idct_put_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>temp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bink_idct_col</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>IDCT_ROW</name><argument_list>( <argument><expr><operator>(</operator><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name><operator>*</operator><name>linesize</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><operator>&amp;</operator><name><name>temp</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name></expr>]</index></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scale_block_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>src</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst1</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst2</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>dst</name> <operator>+</operator> <name>linesize</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dst2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">0x0101</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst1</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst2</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_pixels8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><name>av_restrict</name></type> <name>pixels</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>line_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pixels</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>block</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_binkdsp_init</name><parameter_list>(<parameter><decl><type><name>BinkDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_add</name></name> <operator>=</operator> <name>bink_idct_add_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_put</name></name> <operator>=</operator> <name>bink_idct_put_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>scale_block</name></name> <operator>=</operator> <name>scale_block_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>add_pixels8</name></name> <operator>=</operator> <name>add_pixels8_c</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
