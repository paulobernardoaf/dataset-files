<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\opus_celt.h">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_OPUS_CELT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_OPUS_CELT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opus.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opus_pvq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opusdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mdct15.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CELT_VECTORS</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CELT_ALLOC_STEPS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CELT_FINE_OFFSET</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CELT_MAX_FINE_BITS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CELT_NORM_SCALE</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CELT_QTHETA_OFFSET</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CELT_QTHETA_OFFSET_TWOPHASE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CELT_POSTFILTER_MINPERIOD</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CELT_ENERGY_SILENCE</name></cpp:macro> <cpp:value>(-28.0f)</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>CeltPVQ</name></name></type> <name>CeltPVQ</name>;</typedef>

<enum>enum <name>CeltSpread</name> <block>{
<decl><name>CELT_SPREAD_NONE</name></decl>,
<decl><name>CELT_SPREAD_LIGHT</name></decl>,
<decl><name>CELT_SPREAD_NORMAL</name></decl>,
<decl><name>CELT_SPREAD_AGGRESSIVE</name></decl>
}</block>;</enum>

<enum>enum <name>CeltBlockSize</name> <block>{
<decl><name>CELT_BLOCK_120</name></decl>,
<decl><name>CELT_BLOCK_240</name></decl>,
<decl><name>CELT_BLOCK_480</name></decl>,
<decl><name>CELT_BLOCK_960</name></decl>,

<decl><name>CELT_BLOCK_NB</name></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct <name>CeltBlock</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name><name>energy</name><index>[<expr><name>CELT_MAX_BANDS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>lin_energy</name><index>[<expr><name>CELT_MAX_BANDS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>error_energy</name><index>[<expr><name>CELT_MAX_BANDS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>prev_energy</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>CELT_MAX_BANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>collapse_masks</name><index>[<expr><name>CELT_MAX_BANDS</name></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2048</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>coeffs</name></expr></argument>)</argument_list></call><index>[<expr><name>CELT_MAX_FRAME_SIZE</name></expr>]</index></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>overlap</name></expr></argument>)</argument_list></call><index>[<expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>CELT_OVERLAP</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call><index>[<expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>CELT_MAX_FRAME_SIZE</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>]</index></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>pf_period_new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>pf_gains_new</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pf_period</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>pf_gains</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pf_period_old</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>pf_gains_old</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>emph_coeff</name></decl>;</decl_stmt>
}</block></struct></type> <name>CeltBlock</name>;</typedef>

<struct>struct <name>CeltFrame</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MDCT15Context</name> <modifier>*</modifier></type><name><name>imdct</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CeltBlock</name></type> <name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CeltPVQ</name> <modifier>*</modifier></type><name>pvq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpusDSP</name></type> <name>opusdsp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>output_channels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>apply_phase_inv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>CeltBlockSize</name></name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start_band</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end_band</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>coded_bands</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>transient</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pfilter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_band_floor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tf_select</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alloc_trim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>alloc_boost</name><index>[<expr><name>CELT_MAX_BANDS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blocks</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>blocksize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>silence</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>anticollapse_needed</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>anticollapse</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>intensity_stereo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dual_stereo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flushed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>seed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>CeltSpread</name></name></type> <name>spread</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>pf_octave</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pf_period</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pf_tapset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>pf_gain</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>framebits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>remaining2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>caps</name> <index>[<expr><name>CELT_MAX_BANDS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>fine_bits</name> <index>[<expr><name>CELT_MAX_BANDS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>fine_priority</name><index>[<expr><name>CELT_MAX_BANDS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pulses</name> <index>[<expr><name>CELT_MAX_BANDS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>tf_change</name> <index>[<expr><name>CELT_MAX_BANDS</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint32_t</name></type> <name>celt_rng</name><parameter_list>(<parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <literal type="number">1664525</literal> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>seed</name></name> <operator>+</operator> <literal type="number">1013904223</literal></expr>;</expr_stmt>
<return>return <expr><name><name>f</name><operator>-&gt;</operator><name>seed</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>celt_renormalize_vector</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>gain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>g</name> <init>= <expr><literal type="number">1e-15f</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>g</name> <operator>+=</operator> <name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>X</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name>gain</name> <operator>/</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name>g</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>ff_celt_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_channels</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>apply_phase_inv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_celt_free</name><parameter_list>(<parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_celt_flush</name><parameter_list>(<parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_celt_decode_frame</name><parameter_list>(<parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>coded_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startband</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endband</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
