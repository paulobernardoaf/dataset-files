<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\pthread_frame.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwaccel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/frame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/thread.h"</cpp:file></cpp:include>

<enum>enum <block>{

<decl><name>STATE_INPUT_READY</name></decl>,

<decl><name>STATE_SETTING_UP</name></decl>,




<decl><name>STATE_GET_BUFFER</name></decl>,




<decl><name>STATE_GET_FORMAT</name></decl>,

<decl><name>STATE_SETUP_FINISHED</name></decl>,
}</block>;</enum>




<typedef>typedef <type><struct>struct <name>PerThreadContext</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>FrameThreadContext</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>thread_init</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>input_cond</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>progress_cond</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>output_cond</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>progress_mutex</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVPacket</name></type> <name>avpkt</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>got_frame</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>atomic_int</name></type> <name>state</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>released_buffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_released_buffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>released_buffers_allocated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>requested_frame</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>requested_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>available_formats</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>result_format</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>die</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>hwaccel_serializing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>async_serializing</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_int</name></type> <name>debug_threads</name></decl>;</decl_stmt> 
}</block></struct></type> <name>PerThreadContext</name>;</typedef>




<typedef>typedef <type><struct>struct <name>FrameThreadContext</name> <block>{
<decl_stmt><decl><type><name>PerThreadContext</name> <modifier>*</modifier></type><name>threads</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>PerThreadContext</name> <modifier>*</modifier></type><name>prev_thread</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>buffer_mutex</name></decl>;</decl_stmt> 




<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>hwaccel_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>async_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>async_cond</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>async_lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_decoding</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>next_finished</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>delaying</name></decl>;</decl_stmt> 



}</block></struct></type> <name>FrameThreadContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_SAFE_CALLBACKS</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((avctx)-&gt;thread_safe_callbacks || (avctx)-&gt;get_buffer2 == avcodec_default_get_buffer2)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type> <name>async_lock</name><parameter_list>(<parameter><decl><type><name>FrameThreadContext</name> <modifier>*</modifier></type><name>fctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>fctx</name><operator>-&gt;</operator><name>async_lock</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>async_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>async_lock</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>async_unlock</name><parameter_list>(<parameter><decl><type><name>FrameThreadContext</name> <modifier>*</modifier></type><name>fctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>fctx</name><operator>-&gt;</operator><name>async_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>async_lock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>async_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>attribute_align_arg</name> <name>void</name> <modifier>*</modifier></type><name>frame_worker_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PerThreadContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STATE_INPUT_READY</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>die</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>input_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>die</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>codec</name><operator>-&gt;</operator><name>update_thread_context</name></name> <operator>&amp;&amp;</operator> <call><name>THREAD_SAFE_CALLBACKS</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_thread_finish_setup</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>







<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>hwaccel_serializing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>hwaccel_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>hwaccel_serializing</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>got_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name><name>codec</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>got_frame</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>avpkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>result</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>got_frame</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>allocate_progress</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"A frame threaded decoder did not "</literal>
<literal type="string">"free the frame on failure. This is a bug, please report it.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STATE_SETTING_UP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_thread_finish_setup</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>hwaccel_serializing</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>hwaccel_serializing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>hwaccel_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>async_serializing</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>async_serializing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>async_unlock</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>STATE_INPUT_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>output_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type> <name>update_context_from_thread</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>for_user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>src</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>for_user</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>codec_descriptor</name><operator>-&gt;</operator><name>props</name></name> <operator>&amp;</operator> <name>AV_CODEC_PROP_INTRA_ONLY</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>time_base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>framerate</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>framerate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sw_pix_fmt</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>sw_pix_fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>coded_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>coded_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>has_b_frames</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>idct_algo</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>profile</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ticks_per_frame</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>ticks_per_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>color_trc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>color_range</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>chroma_sample_location</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>chroma_sample_location</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>hwaccel</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>hwaccel</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>hwaccel_context</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>!=</operator> <operator>!</operator><operator>!</operator><name><name>src</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>||</operator>
<operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>&amp;&amp;</operator> <name><name>dst</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name><name>src</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>hwaccel_flags</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>hwaccel_flags</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>for_user</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>
<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>
<name><name>dst</name><operator>-&gt;</operator><name>coded_frame</name></name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>coded_frame</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>FF_ENABLE_DEPRECATION_WARNINGS</name></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>update_thread_context</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>dst</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>update_thread_context</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>update_context_from_user</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>copy_fields</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcpy(&amp;dst-&gt;s, &amp;src-&gt;s, (char*)&amp;dst-&gt;e - (char*)&amp;dst-&gt;s);</cpp:value></cpp:define>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>draw_horiz_band</name></name><operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>draw_horiz_band</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>get_buffer2</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>get_buffer2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>opaque</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>debug</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>debug</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>debug_mv</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>debug_mv</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>slice_flags</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>slice_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>flags2</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>flags2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>export_side_data</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>export_side_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_fields</name><argument_list>(<argument><expr><name>skip_loop_filter</name></expr></argument>, <argument><expr><name>subtitle_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>frame_number</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>reordered_opaque</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>reordered_opaque</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>thread_safe_callbacks</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>thread_safe_callbacks</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>&amp;&amp;</operator> <name><name>src</name><operator>-&gt;</operator><name>slice_offset</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>&lt;</operator> <name><name>src</name><operator>-&gt;</operator><name>slice_count</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>av_reallocp_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>slice_offset</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>slice_count</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dst</name><operator>-&gt;</operator><name>slice_offset</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>slice_offset</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>slice_offset</name></name></expr></argument>,
<argument><expr><name><name>src</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dst</name><operator>-&gt;</operator><name>slice_offset</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>slice_count</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>copy_fields</name></cpp:undef>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>release_delayed_buffers</name><parameter_list>(<parameter><decl><type><name>PerThreadContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FrameThreadContext</name> <modifier>*</modifier></type><name>fctx</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>num_released_buffers</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_VIDEO</name> <operator>||</operator>
<name><name>p</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>==</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>released_buffers</name><index>[<expr><operator>--</operator><name><name>p</name><operator>-&gt;</operator><name>num_released_buffers</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>extended_data</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>submit_packet</name><parameter_list>(<parameter><decl><type><name>PerThreadContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>user_avctx</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FrameThreadContext</name> <modifier>*</modifier></type><name>fctx</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PerThreadContext</name> <modifier>*</modifier></type><name>prev_thread</name> <init>= <expr><name><name>fctx</name><operator>-&gt;</operator><name>prev_thread</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>codec</name><operator>-&gt;</operator><name>capabilities</name></name> <operator>&amp;</operator> <name>AV_CODEC_CAP_DELAY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>update_context_from_user</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>user_avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>atomic_store_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>debug_threads</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_THREADS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>,
<argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>release_delayed_buffers</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_thread</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prev_thread</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STATE_SETTING_UP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prev_thread</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prev_thread</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STATE_SETTING_UP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prev_thread</name><operator>-&gt;</operator><name>progress_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prev_thread</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prev_thread</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>update_context_from_thread</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>prev_thread</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>avpkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_packet_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>avpkt</name></name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"av_packet_ref() failed in submit_packet()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>STATE_SETTING_UP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>input_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>thread_safe_callbacks</name></name> <operator>&amp;&amp;</operator> <operator>(</operator>
<name><name>p</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>get_format</name></name> <operator>!=</operator> <name>avcodec_default_get_format</name> <operator>||</operator>
<name><name>p</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>get_buffer2</name></name> <operator>!=</operator> <name>avcodec_default_get_buffer2</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STATE_SETUP_FINISHED</name> <operator>&amp;&amp;</operator> <call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STATE_INPUT_READY</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>call_done</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STATE_SETTING_UP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<switch>switch <condition>(<expr><call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>STATE_GET_BUFFER</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>requested_frame</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>requested_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>STATE_GET_FORMAT</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>result_format</name></name> <operator>=</operator> <call><name>ff_get_format</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>available_formats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>call_done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>call_done</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>STATE_SETTING_UP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>prev_thread</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>next_decoding</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_thread_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_picture_ptr</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FrameThreadContext</name> <modifier>*</modifier></type><name>fctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>finished</name> <init>= <expr><name><name>fctx</name><operator>-&gt;</operator><name>next_finished</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PerThreadContext</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>



<expr_stmt><expr><call><name>async_unlock</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>threads</name><index>[<expr><name><name>fctx</name><operator>-&gt;</operator><name>next_decoding</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>submit_packet</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>finish</name>;</goto></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>fctx</name><operator>-&gt;</operator><name>next_decoding</name></name> <operator>&gt;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name><operator>-</operator><literal type="number">1</literal><operator>-</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_FFV1</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>delaying</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fctx</name><operator>-&gt;</operator><name>delaying</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>got_picture_ptr</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<goto>goto <name>finish</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>








<do>do <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>threads</name><index>[<expr><name>finished</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STATE_INPUT_READY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STATE_INPUT_READY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>output_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_move_ref</name><argument_list>(<argument><expr><name>picture</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>got_picture_ptr</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>got_frame</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>pkt_dts</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>avpkt</name><operator>.</operator><name>dts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>result</name></name></expr>;</expr_stmt>







<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>got_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>finished</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>finished</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>!</operator><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>got_picture_ptr</name> <operator>&amp;&amp;</operator> <name>err</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>finished</name> <operator>!=</operator> <name><name>fctx</name><operator>-&gt;</operator><name>next_finished</name></name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>update_context_from_thread</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fctx</name><operator>-&gt;</operator><name>next_decoding</name></name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>next_decoding</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>next_finished</name></name> <operator>=</operator> <name>finished</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>finish</name>:</label>
<expr_stmt><expr><call><name>async_lock</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_thread_report_progress</name><parameter_list>(<parameter><decl><type><name>ThreadFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PerThreadContext</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_int</name> <modifier>*</modifier></type><name>progress</name> <init>= <expr><ternary><condition><expr><name><name>f</name><operator>-&gt;</operator><name>progress</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>atomic_int</name><operator>*</operator><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>progress</name><operator>-&gt;</operator><name>data</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>progress</name> <operator>||</operator>
<call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>progress</name><index>[<expr><name>field</name></expr>]</index></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>owner</name><index>[<expr><name>field</name></expr>]</index></name><operator>-&gt;</operator><name><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>debug_threads</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>owner</name><index>[<expr><name>field</name></expr>]</index></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"%p finished %d field %d\n"</literal></expr></argument>, <argument><expr><name>progress</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_store_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>progress</name><index>[<expr><name>field</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_thread_await_progress</name><parameter_list>(<parameter><decl><type><name>ThreadFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PerThreadContext</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomic_int</name> <modifier>*</modifier></type><name>progress</name> <init>= <expr><ternary><condition><expr><name><name>f</name><operator>-&gt;</operator><name>progress</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>atomic_int</name><operator>*</operator><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>progress</name><operator>-&gt;</operator><name>data</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>progress</name> <operator>||</operator>
<call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>progress</name><index>[<expr><name>field</name></expr>]</index></name></expr></argument>, <argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>owner</name><index>[<expr><name>field</name></expr>]</index></name><operator>-&gt;</operator><name><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>debug_threads</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>owner</name><index>[<expr><name>field</name></expr>]</index></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"thread awaiting %d field %d from %p\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>progress</name><index>[<expr><name>field</name></expr>]</index></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_thread_finish_setup</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>PerThreadContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name><operator>&amp;</operator><name>FF_THREAD_FRAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>hwaccel_serializing</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>hwaccel_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>hwaccel_serializing</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>caps_internal</name></name> <operator>&amp;</operator> <name>HWACCEL_CAP_ASYNC_SAFE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>async_serializing</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>async_lock</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STATE_SETUP_FINISHED</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Multiple ff_thread_finish_setup() calls\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>STATE_SETUP_FINISHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>park_frame_worker_threads</name><parameter_list>(<parameter><decl><type><name>FrameThreadContext</name> <modifier>*</modifier></type><name>fctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>async_unlock</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>thread_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>PerThreadContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STATE_INPUT_READY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STATE_INPUT_READY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>output_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>got_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>async_lock</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_frame_thread_free</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FrameThreadContext</name> <modifier>*</modifier></type><name>fctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>park_frame_worker_threads</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>, <argument><expr><name>thread_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fctx</name><operator>-&gt;</operator><name>prev_thread</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name> <operator>!=</operator>
<name><name>fctx</name><operator>-&gt;</operator><name>prev_thread</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>update_context_from_thread</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>fctx</name><operator>-&gt;</operator><name>prev_thread</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to update user thread.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fctx</name><operator>-&gt;</operator><name>prev_thread</name></name> <operator>&amp;&amp;</operator> <name><name>fctx</name><operator>-&gt;</operator><name>prev_thread</name></name> <operator>!=</operator> <name><name>fctx</name><operator>-&gt;</operator><name>threads</name></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>update_context_from_thread</name><argument_list>(<argument><expr><name><name>fctx</name><operator>-&gt;</operator><name>threads</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>fctx</name><operator>-&gt;</operator><name>prev_thread</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Final thread update failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>prev_thread</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>is_copy</name></name> <operator>=</operator> <name><name>fctx</name><operator>-&gt;</operator><name>threads</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>is_copy</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>threads</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>is_copy</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>thread_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>PerThreadContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>die</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>input_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>thread_init</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>thread_init</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>codec</name><operator>-&gt;</operator><name>close</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>avctx</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>codec</name><operator>-&gt;</operator><name>close</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>release_delayed_buffers</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>thread_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>PerThreadContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>input_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>output_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>avpkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>released_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>avctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>slice_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>avctx</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>hwaccel_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>async_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>priv_class</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_opt_free</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_frame_thread_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>thread_count</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>avctx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FrameThreadContext</name> <modifier>*</modifier></type><name>fctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>thread_count</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nb_cpus</name> <init>= <expr><call><name>av_cpu_count</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_DEBUG_MV</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <operator>(</operator><name>FF_DEBUG_VIS_QP</name> <operator>|</operator> <name>FF_DEBUG_VIS_MB_TYPE</name><operator>)</operator><operator>)</operator> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>debug_mv</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nb_cpus</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>nb_cpus</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>thread_count</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>nb_cpus</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>MAX_AUTO_THREADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>thread_count</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>thread_count</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name> <operator>=</operator> <name>fctx</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FrameThreadContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>threads</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>thread_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PerThreadContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fctx</name><operator>-&gt;</operator><name>threads</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>buffer_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>hwaccel_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>async_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>async_cond</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>async_lock</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>delaying</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>thread_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>copy</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVCodecContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PerThreadContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>input_cond</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_cond</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>output_cond</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>fctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>copy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>copy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>copy</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>copy</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVCodecInternal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>copy</name><operator>-&gt;</operator><name>internal</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>copy</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name><name>copy</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <operator>*</operator><name><name>src</name><operator>-&gt;</operator><name>internal</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>last_pkt_props</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>avpkt</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name>copy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>codec</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>codec</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>update_context_from_thread</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>copy</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>codec</name><operator>-&gt;</operator><name>priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>copy</name><operator>-&gt;</operator><name>priv_data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>copy</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>, <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>is_copy</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>codec</name><operator>-&gt;</operator><name>init_thread_copy</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>codec</name><operator>-&gt;</operator><name>init_thread_copy</name></name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>debug_threads</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>copy</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_THREADS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>frame_worker_thread</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>thread_init</name></name><operator>=</operator> <operator>!</operator><name>err</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>thread_init</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>ff_frame_thread_free</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_thread_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FrameThreadContext</name> <modifier>*</modifier></type><name>fctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fctx</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>park_frame_worker_threads</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fctx</name><operator>-&gt;</operator><name>prev_thread</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fctx</name><operator>-&gt;</operator><name>prev_thread</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>threads</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>update_context_from_thread</name><argument_list>(<argument><expr><name><name>fctx</name><operator>-&gt;</operator><name>threads</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>avctx</name></expr></argument>, <argument><expr><name><name>fctx</name><operator>-&gt;</operator><name>prev_thread</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>next_decoding</name></name> <operator>=</operator> <name><name>fctx</name><operator>-&gt;</operator><name>next_finished</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>delaying</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>prev_thread</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>PerThreadContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>got_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>release_delayed_buffers</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>flush</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>flush</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_thread_can_start_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PerThreadContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name><operator>&amp;</operator><name>FF_THREAD_FRAME</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STATE_SETTING_UP</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>update_thread_context</name></name> <operator>||</operator> <operator>!</operator><call><name>THREAD_SAFE_CALLBACKS</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>thread_get_buffer_internal</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>ThreadFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PerThreadContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>owner</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>owner</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_FRAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STATE_SETTING_UP</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>update_thread_context</name></name> <operator>||</operator> <operator>!</operator><call><name>THREAD_SAFE_CALLBACKS</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"get_buffer() cannot be called after ff_thread_finish_setup()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>allocate_progress</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>atomic_int</name> <modifier>*</modifier></type><name>progress</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>progress</name></name> <operator>=</operator> <call><name>av_buffer_alloc</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>progress</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>progress</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>progress</name> <operator>=</operator> <operator>(</operator><name>atomic_int</name><operator>*</operator><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>progress</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>progress</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>progress</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>THREAD_SAFE_CALLBACKS</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>requested_frame</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>f</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>requested_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>STATE_GET_BUFFER</name></expr></argument>, <argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STATE_SETTING_UP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>result</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>THREAD_SAFE_CALLBACKS</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>update_thread_context</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_thread_finish_setup</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>ff_thread_get_format</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PerThreadContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_FRAME</name><operator>)</operator> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>thread_safe_callbacks</name></name> <operator>||</operator>
<name><name>avctx</name><operator>-&gt;</operator><name>get_format</name></name> <operator>==</operator> <name>avcodec_default_get_format</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ff_get_format</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STATE_SETTING_UP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"get_format() cannot be called after ff_thread_finish_setup()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>available_formats</name></name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>STATE_GET_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>STATE_SETTING_UP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>result_format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_thread_get_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>ThreadFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>thread_get_buffer_internal</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"thread_get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_thread_release_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>ThreadFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PerThreadContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>thread_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FrameThreadContext</name> <modifier>*</modifier></type><name>fctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>can_direct_free</name> <init>= <expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_FRAME</name><operator>)</operator> <operator>||</operator>
<call><name>THREAD_SAFE_CALLBACKS</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>f</name></name> <operator>||</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_BUFFERS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"thread_release_buffer called on pic %p\n"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>owner</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>owner</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>can_direct_free</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fctx</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>num_released_buffers</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>released_buffers</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_fast_realloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>released_buffers</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>released_buffers_allocated</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>num_released_buffers</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>released_buffers</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>released_buffers</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>released_buffers</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>num_released_buffers</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_frame_move_ref</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>num_released_buffers</name></name><operator>++</operator></expr>;</expr_stmt>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fctx</name><operator>-&gt;</operator><name>buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
