<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\ivi.h">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_IVI_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_IVI_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>




<enum>enum <block>{
<decl><name>IVI4_FRAMETYPE_INTRA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>IVI4_FRAMETYPE_INTRA1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>IVI4_FRAMETYPE_INTER</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 
<decl><name>IVI4_FRAMETYPE_BIDIR</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 
<decl><name>IVI4_FRAMETYPE_INTER_NOREF</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 
<decl><name>IVI4_FRAMETYPE_NULL_FIRST</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>, 
<decl><name>IVI4_FRAMETYPE_NULL_LAST</name> <init>= <expr><literal type="number">6</literal></expr></init></decl> 
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVI_VLC_BITS</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVI5_IS_PROTECTED</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>




<typedef>typedef <type><struct>struct <name>IVIHuffDesc</name> <block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name>num_rows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>xbits</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>IVIHuffDesc</name>;</typedef>




<typedef>typedef <type><struct>struct <name>IVIHuffTab</name> <block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name>tab_sel</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>VLC</name> <modifier>*</modifier></type><name>tab</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>IVIHuffDesc</name></type> <name>cust_desc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>VLC</name></type> <name>cust_tab</name></decl>;</decl_stmt> 
}</block></struct></type> <name>IVIHuffTab</name>;</typedef>

<enum>enum <block>{
<decl><name>IVI_MB_HUFF</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 
<decl><name>IVI_BLK_HUFF</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> 
}</block>;</enum>





<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_ivi_vertical_scan_8x8</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_ivi_horizontal_scan_8x8</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_ivi_direct_scan_4x4</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>





<typedef>typedef <function_decl><type><name>void</name></type> (<name>InvTransformPtr</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>DCTransformPtr</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blk_size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>





<typedef>typedef <type><struct>struct <name>RVMapDesc</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>eob_sym</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>esc_sym</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>runtab</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name><name>valtab</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>RVMapDesc</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>RVMapDesc</name></type> <name><name>ff_ivi_rvmap_tabs</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>





<typedef>typedef <type><struct>struct <name>IVIMbInfo</name> <block>{
<decl_stmt><decl><type><name>int16_t</name></type> <name>xpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>ypos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>buf_offs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>cbp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int8_t</name></type> <name>q_delta</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int8_t</name></type> <name>mv_x</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int8_t</name></type> <name>mv_y</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int8_t</name></type> <name>b_mv_x</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int8_t</name></type> <name>b_mv_y</name></decl>;</decl_stmt> 
}</block></struct></type> <name>IVIMbInfo</name>;</typedef>





<typedef>typedef <type><struct>struct <name>IVITile</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>xpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ypos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mb_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_empty</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>data_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>num_MBs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>IVIMbInfo</name> <modifier>*</modifier></type><name>mbs</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>IVIMbInfo</name> <modifier>*</modifier></type><name>ref_mbs</name></decl>;</decl_stmt> 
}</block></struct></type> <name>IVITile</name>;</typedef>





<typedef>typedef <type><struct>struct <name>IVIBandDesc</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>band_num</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aheight</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data_ptr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>data_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>ref_buf</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>b_ref_buf</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name><name>bufs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>pitch</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>is_empty</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mb_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>blk_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>is_halfpel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>inherit_mv</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>inherit_qdelta</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>qdelta_present</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>quant_mat</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>glob_quant</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scan</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>scan_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>IVIHuffTab</name></type> <name>blk_vlc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>num_corr</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>corr</name><index>[<expr><literal type="number">61</literal><operator>*</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>rvmap_sel</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>RVMapDesc</name> <modifier>*</modifier></type><name>rv_map</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>num_tiles</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>IVITile</name> <modifier>*</modifier></type><name>tiles</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>InvTransformPtr</name> <modifier>*</modifier></type><name>inv_transform</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>transform_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DCTransformPtr</name> <modifier>*</modifier></type><name>dc_transform</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_2d_trans</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int32_t</name></type> <name>checksum</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>checksum_present</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bufsize</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>intra_base</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>inter_base</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>intra_scale</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>inter_scale</name></decl>;</decl_stmt> 
}</block></struct></type> <name>IVIBandDesc</name>;</typedef>





<typedef>typedef <type><struct>struct <name>IVIPlaneDesc</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>num_bands</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>IVIBandDesc</name> <modifier>*</modifier></type><name>bands</name></decl>;</decl_stmt> 
}</block></struct></type> <name>IVIPlaneDesc</name>;</typedef>


<typedef>typedef <type><struct>struct <name>IVIPicConfig</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pic_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pic_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>chroma_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>chroma_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>tile_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>tile_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>luma_bands</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>chroma_bands</name></decl>;</decl_stmt>
}</block></struct></type> <name>IVIPicConfig</name>;</typedef>

<typedef>typedef <type><struct>struct <name>IVI45DecContext</name> <block>{
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RVMapDesc</name></type> <name><name>rvmap_tabs</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>frame_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_frame_type</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>data_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>is_scalable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>frame_data</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>inter_scal</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>frame_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pic_hdr_size</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>frame_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>checksum</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>IVIPicConfig</name></type> <name>pic_conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IVIPlaneDesc</name></type> <name><name>planes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>buf_switch</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>dst_buf</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ref_buf</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>ref2_buf</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>b_ref_buf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>IVIHuffTab</name></type> <name>mb_vlc</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>IVIHuffTab</name></type> <name>blk_vlc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>rvmap_sel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>in_imf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>in_q</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>pic_glob_quant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>unknown1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>gop_hdr_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>gop_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lock_word</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>show_indeo4_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>has_b_frames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>has_transp</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>uses_tiling</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>uses_haar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>uses_fullpel</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>decode_pic_hdr</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IVI45DecContext</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>decode_band_hdr</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IVI45DecContext</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>IVIBandDesc</name> <modifier>*</modifier></type><name>band</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>decode_mb_info</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IVI45DecContext</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>IVIBandDesc</name> <modifier>*</modifier></type><name>band</name></decl></parameter>, <parameter><decl><type><name>IVITile</name> <modifier>*</modifier></type><name>tile</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>switch_buffers</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IVI45DecContext</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>is_nonnull_frame</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IVI45DecContext</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>gop_invalid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>buf_invalid</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_indeo4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>p_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>got_p_frame</name></decl>;</decl_stmt>
}</block></struct></type> <name>IVI45DecContext</name>;</typedef>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ivi_pic_config_cmp</name><parameter_list>(<parameter><decl><type><name>IVIPicConfig</name> <modifier>*</modifier></type><name>str1</name></decl></parameter>, <parameter><decl><type><name>IVIPicConfig</name> <modifier>*</modifier></type><name>str2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>str1</name><operator>-&gt;</operator><name>pic_width</name></name> <operator>!=</operator> <name><name>str2</name><operator>-&gt;</operator><name>pic_width</name></name> <operator>||</operator> <name><name>str1</name><operator>-&gt;</operator><name>pic_height</name></name> <operator>!=</operator> <name><name>str2</name><operator>-&gt;</operator><name>pic_height</name></name> <operator>||</operator>
<name><name>str1</name><operator>-&gt;</operator><name>chroma_width</name></name> <operator>!=</operator> <name><name>str2</name><operator>-&gt;</operator><name>chroma_width</name></name> <operator>||</operator> <name><name>str1</name><operator>-&gt;</operator><name>chroma_height</name></name> <operator>!=</operator> <name><name>str2</name><operator>-&gt;</operator><name>chroma_height</name></name> <operator>||</operator>
<name><name>str1</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>!=</operator> <name><name>str2</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>||</operator> <name><name>str1</name><operator>-&gt;</operator><name>tile_height</name></name> <operator>!=</operator> <name><name>str2</name><operator>-&gt;</operator><name>tile_height</name></name> <operator>||</operator>
<name><name>str1</name><operator>-&gt;</operator><name>luma_bands</name></name> <operator>!=</operator> <name><name>str2</name><operator>-&gt;</operator><name>luma_bands</name></name> <operator>||</operator> <name><name>str1</name><operator>-&gt;</operator><name>chroma_bands</name></name> <operator>!=</operator> <name><name>str2</name><operator>-&gt;</operator><name>chroma_bands</name></name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVI_NUM_TILES</name><parameter_list>(<parameter><type><name>stride</name></type></parameter>, <parameter><type><name>tile_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((stride) + (tile_size) - 1) / (tile_size))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVI_MBs_PER_TILE</name><parameter_list>(<parameter><type><name>tile_width</name></type></parameter>, <parameter><type><name>tile_height</name></type></parameter>, <parameter><type><name>mb_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((tile_width) + (mb_size) - 1) / (mb_size)) * (((tile_height) + (mb_size) - 1) / (mb_size)))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVI_TOSIGNED</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(-(((val) &gt;&gt; 1) ^ -((val) &amp; 1)))</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ivi_scale_mv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mv_scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>mv</name> <operator>+</operator> <operator>(</operator><name>mv</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>mv_scale</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>mv_scale</name></expr>;</return>
</block_content>}</block></function>




<function_decl><type><name>void</name></type> <name>ff_ivi_init_static_vlc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>int</name></type> <name>ff_ivi_dec_huff_desc</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>desc_coded</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>which_tab</name></decl></parameter>,
<parameter><decl><type><name>IVIHuffTab</name> <modifier>*</modifier></type><name>huff_tab</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>int</name></type> <name>ff_ivi_init_planes</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>IVIPlaneDesc</name> <modifier>*</modifier></type><name>planes</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>IVIPicConfig</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_indeo4</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>int</name></type> <name>ff_ivi_init_tiles</name><parameter_list>(<parameter><decl><type><name>IVIPlaneDesc</name> <modifier>*</modifier></type><name>planes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tile_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tile_height</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_ivi_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,
<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ff_ivi_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
