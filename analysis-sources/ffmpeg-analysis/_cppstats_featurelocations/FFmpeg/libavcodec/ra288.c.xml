<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\ra288.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSTREAM_READER_LE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"celp_filters.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lpc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra288.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BACKWARD_FILTER_ORDER</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BACKWARD_FILTER_LEN</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BACKWARD_FILTER_NONREC</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RA288_BLOCK_SIZE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RA288_BLOCKS_PER_FRAME</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>RA288Context</name> <block>{
<decl_stmt><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>sp_lpc</name></expr></argument>)</argument_list></call><index>[<expr><call><name>FFALIGN</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>]</index></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>gain_lpc</name></expr></argument>)</argument_list></call><index>[<expr><call><name>FFALIGN</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>]</index></expr>;</expr_stmt> 




<decl_stmt><decl><type><name>float</name></type> <name><name>sp_hist</name><index>[<expr><literal type="number">111</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name><name>sp_rec</name><index>[<expr><literal type="number">37</literal></expr>]</index></name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>float</name></type> <name><name>gain_hist</name><index>[<expr><literal type="number">38</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name><name>gain_rec</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>RA288Context</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>ra288_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RA288Context</name> <modifier>*</modifier></type><name>ractx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ractx</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>ra288_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>RA288Context</name> <modifier>*</modifier></type><name>ractx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_MONO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>!=</operator> <literal type="number">38</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported block align\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ractx</name><operator>-&gt;</operator><name>fdsp</name></name> <operator>=</operator> <call><name>avpriv_float_dsp_alloc</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ractx</name><operator>-&gt;</operator><name>fdsp</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>convolve</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>tgt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tgt</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>avpriv_scalarproduct_float_c</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>n</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>RA288Context</name> <modifier>*</modifier></type><name>ractx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>gain</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cb_coef</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sumsum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>sum</name></decl>, <decl><type ref="prev"/><name><name>buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><name><name>ractx</name><operator>-&gt;</operator><name>sp_hist</name></name> <operator>+</operator> <literal type="number">70</literal> <operator>+</operator> <literal type="number">36</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>gain_block</name> <init>= <expr><name><name>ractx</name><operator>-&gt;</operator><name>gain_hist</name></name> <operator>+</operator> <literal type="number">28</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ractx</name><operator>-&gt;</operator><name>sp_hist</name></name> <operator>+</operator> <literal type="number">70</literal></expr></argument>, <argument><expr><name><name>ractx</name><operator>-&gt;</operator><name>sp_hist</name></name> <operator>+</operator> <literal type="number">75</literal></expr></argument>, <argument><expr><literal type="number">36</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">32.0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name><name>gain_block</name><index>[<expr><literal type="number">9</literal><operator>-</operator><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>ractx</name><operator>-&gt;</operator><name>gain_lpc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>sumsum</name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><name>sum</name> <operator>*</operator> <literal type="number">0.1151292546497</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>gain</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal><operator>/</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">23</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>codetable</name><index>[<expr><name>cb_coef</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>sumsum</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>avpriv_scalarproduct_float_c</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">5.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>gain_block</name></expr></argument>, <argument><expr><name>gain_block</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">9</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>gain_block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gain_block</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <call><name>log10</name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><literal type="number">10</literal><operator>*</operator><call><name>log10</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>/</operator><literal type="number">5.</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filterf</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name><name>ractx</name><operator>-&gt;</operator><name>sp_lpc</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>void</name></type> <name>do_hybrid_window</name><parameter_list>(<parameter><decl><type><name>RA288Context</name> <modifier>*</modifier></type><name>ractx</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>non_rec</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>hist</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>buffer1</name><index>[<expr><name>MAX_BACKWARD_FILTER_ORDER</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>buffer2</name><index>[<expr><name>MAX_BACKWARD_FILTER_ORDER</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>work</name></expr></argument>, <argument><expr><index>[<expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>MAX_BACKWARD_FILTER_ORDER</name> <operator>+</operator>
<name>MAX_BACKWARD_FILTER_LEN</name> <operator>+</operator>
<name>MAX_BACKWARD_FILTER_NONREC</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>order</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ractx</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul</name></name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>hist</name></expr></argument>, <argument><expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>order</name> <operator>+</operator> <name>n</name> <operator>+</operator> <name>non_rec</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>convolve</name><argument_list>(<argument><expr><name>buffer1</name></expr></argument>, <argument><expr><name>work</name> <operator>+</operator> <name>order</name></expr></argument> , <argument><expr><name>n</name></expr></argument> , <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>convolve</name><argument_list>(<argument><expr><name>buffer2</name></expr></argument>, <argument><expr><name>work</name> <operator>+</operator> <name>order</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>non_rec</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>out2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>out2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">0.5625</literal> <operator>+</operator> <name><name>buffer1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>out2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>buffer2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><operator>*</operator><name>out</name> <operator>*=</operator> <literal type="number">257.0</literal> <operator>/</operator> <literal type="number">256.0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type> <name>backward_filter</name><parameter_list>(<parameter><decl><type><name>RA288Context</name> <modifier>*</modifier></type><name>ractx</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>hist</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>rec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>window</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lpc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>non_rec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>move_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name><name>temp</name><index>[<expr><name>MAX_BACKWARD_FILTER_ORDER</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>do_hybrid_window</name><argument_list>(<argument><expr><name>ractx</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>non_rec</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>hist</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>compute_lpc_coefs</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>lpc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ractx</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul</name></name><argument_list>(<argument><expr><name>lpc</name></expr></argument>, <argument><expr><name>lpc</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>, <argument><expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>hist</name></expr></argument>, <argument><expr><name>hist</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>move_size</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ra288_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type> <name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RA288Context</name> <modifier>*</modifier></type><name>ractx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Error! Input buffer is too small [%d&lt;%d]\n"</literal></expr></argument>,
<argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>RA288_BLOCK_SIZE</name> <operator>*</operator> <name>RA288_BLOCKS_PER_FRAME</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RA288_BLOCKS_PER_FRAME</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>gain</name> <init>= <expr><name><name>amptable</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cb_coef</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>+</operator> <operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode</name><argument_list>(<argument><expr><name>ractx</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>, <argument><expr><name>cb_coef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ractx</name><operator>-&gt;</operator><name>sp_hist</name><index>[<expr><literal type="number">70</literal> <operator>+</operator> <literal type="number">36</literal></expr>]</index></name></expr></argument>, <argument><expr><name>RA288_BLOCK_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>RA288_BLOCK_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>backward_filter</name><argument_list>(<argument><expr><name>ractx</name></expr></argument>, <argument><expr><name><name>ractx</name><operator>-&gt;</operator><name>sp_hist</name></name></expr></argument>, <argument><expr><name><name>ractx</name><operator>-&gt;</operator><name>sp_rec</name></name></expr></argument>, <argument><expr><name>syn_window</name></expr></argument>,
<argument><expr><name><name>ractx</name><operator>-&gt;</operator><name>sp_lpc</name></name></expr></argument>, <argument><expr><name>syn_bw_tab</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>, <argument><expr><literal type="number">70</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>backward_filter</name><argument_list>(<argument><expr><name>ractx</name></expr></argument>, <argument><expr><name><name>ractx</name><operator>-&gt;</operator><name>gain_hist</name></name></expr></argument>, <argument><expr><name><name>ractx</name><operator>-&gt;</operator><name>gain_rec</name></name></expr></argument>, <argument><expr><name>gain_window</name></expr></argument>,
<argument><expr><name><name>ractx</name><operator>-&gt;</operator><name>gain_lpc</name></name></expr></argument>, <argument><expr><name>gain_bw_tab</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_ra_288_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"real_288"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"RealAudio 2.0 (28.8K)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_RA_288</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RA288Context</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ra288_decode_init</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>ra288_decode_frame</name></expr>,
<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ra288_decode_close</name></expr>,
<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
