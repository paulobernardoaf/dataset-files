<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\opusenc_psy.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opusenc_psy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opus_pvq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opustab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mdct15.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/qsort.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>float</name></type> <name>pvq_band_cost</name><parameter_list>(<parameter><decl><type><name>CeltPVQ</name> <modifier>*</modifier></type><name>pvq</name></decl></parameter>, <parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>band</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>lambda</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>cm</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>blocks</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>blocks</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>band_size</name> <init>= <expr><name><name>ff_celt_freq_range</name><index>[<expr><name>band</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>buf</name><index>[<expr><literal type="number">176</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>lowband_scratch</name><index>[<expr><literal type="number">176</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>norm1</name><index>[<expr><literal type="number">176</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>norm2</name><index>[<expr><literal type="number">176</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dist</name></decl>, <decl><type ref="prev"/><name>cost</name></decl>, <decl><type ref="prev"/><name>err_x</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>err_y</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>X_orig</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>coeffs</name> <operator>+</operator> <operator>(</operator><name><name>ff_celt_freq_bands</name><index>[<expr><name>band</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>Y</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">176</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>Y_orig</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>coeffs</name> <operator>+</operator> <operator>(</operator><name><name>ff_celt_freq_bands</name><index>[<expr><name>band</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>OPUS_RC_CHECKPOINT_SPAWN</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>X_orig</name></expr></argument>, <argument><expr><name>band_size</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Y</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>Y</name></expr></argument>, <argument><expr><name>Y_orig</name></expr></argument>, <argument><expr><name>band_size</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>remaining2</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>framebits</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>anticollapse_needed</name></name><operator>)</operator> <operator>-</operator> <call><name>opus_rc_tell_frac</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>band</name> <operator>&lt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>coded_bands</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>curr_balance</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>remaining</name></name> <operator>/</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>coded_bands</name></name> <operator>-</operator> <name>band</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>remaining2</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>pulses</name><index>[<expr><name>band</name></expr>]</index></name> <operator>+</operator> <name>curr_balance</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>dual_stereo</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>pvq</name><operator>-&gt;</operator><name>quant_band</name></name><argument_list>(<argument><expr><name>pvq</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>band</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>band_size</name></expr></argument>, <argument><expr><name>b</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>norm1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>lowband_scratch</name></expr></argument>, <argument><expr><name><name>cm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pvq</name><operator>-&gt;</operator><name>quant_band</name></name><argument_list>(<argument><expr><name>pvq</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>band</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>band_size</name></expr></argument>, <argument><expr><name>b</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>norm2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>lowband_scratch</name></expr></argument>, <argument><expr><name><name>cm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>pvq</name><operator>-&gt;</operator><name>quant_band</name></name><argument_list>(<argument><expr><name>pvq</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>band</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>band_size</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><name>norm1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>lowband_scratch</name></expr></argument>, <argument><expr><name><name>cm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>cm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>band_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>err_x</name> <operator>+=</operator> <operator>(</operator><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>X_orig</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>X_orig</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Y</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>err_y</name> <operator>+=</operator> <operator>(</operator><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>Y_orig</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>Y_orig</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>err_x</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>err_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cost</name> <operator>=</operator> <call><name>OPUS_RC_CHECKPOINT_BITS</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">8.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>+=</operator> <name>cost</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OPUS_RC_CHECKPOINT_ROLLBACK</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>lambda</name><operator>*</operator><name>dist</name><operator>*</operator><name>cost</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>step_collect_psy_metrics</name><parameter_list>(<parameter><decl><type><name>OpusPsyContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>silence</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpusPsyStep</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>steps</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lap_size</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bsize_analysis</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>lap_size</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>offset</name> <init>= <expr><name>i</name><operator>*</operator><literal type="number">120</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>ff_bufqueue_peek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bufqueue</name></name></expr></argument>, <argument><expr><name>index</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scratch</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>nb_samples</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lap_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>offset</name> <init>= <expr><name>i</name><operator>*</operator><literal type="number">120</literal> <operator>+</operator> <name>lap_size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>ff_bufqueue_peek</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bufqueue</name></name></expr></argument>, <argument><expr><name>index</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scratch</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>nb_samples</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>-&gt;</operator><name>vector_fmul</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>scratch</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>scratch</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>window</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>bsize_analysis</name></name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><call><name>OPUS_BLOCK_SIZE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bsize_analysis</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mdct</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>bsize_analysis</name></name></expr>]</index></name><operator>-&gt;</operator><call><name>mdct</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mdct</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>bsize_analysis</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>scratch</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CELT_MAX_BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>bands</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name><name>ff_celt_freq_bands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bsize_analysis</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CELT_MAX_BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>avg_c_s</name></decl>, <decl><type ref="prev"/><name>energy</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>dist_dev</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>range</name> <init>= <expr><name><name>ff_celt_freq_range</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bsize_analysis</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>coeffs</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>bands</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>range</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>energy</name> <operator>+=</operator> <name><name>coeffs</name><index>[<expr><name>j</name></expr>]</index></name><operator>*</operator><name><name>coeffs</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>energy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>energy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>silence</name> <operator>|=</operator> <operator>!</operator><operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>energy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>avg_c_s</name> <operator>=</operator> <name>energy</name> <operator>/</operator> <name>range</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>range</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>c_s</name> <init>= <expr><name><name>coeffs</name><index>[<expr><name>j</name></expr>]</index></name><operator>*</operator><name><name>coeffs</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>dist_dev</name> <operator>+=</operator> <operator>(</operator><name>avg_c_s</name> <operator>-</operator> <name>c_s</name><operator>)</operator><operator>*</operator><operator>(</operator><name>avg_c_s</name> <operator>-</operator> <name>c_s</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>tone</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>dist_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>silence</name></name> <operator>=</operator> <operator>!</operator><name>silence</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CELT_MAX_BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>incompat</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>coeffs1</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>bands</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>coeffs2</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>bands</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>range</name> <init>= <expr><name><name>ff_celt_freq_range</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bsize_analysis</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>range</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>incompat</name> <operator>+=</operator> <operator>(</operator><name><name>coeffs1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name><name>coeffs2</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>coeffs1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name><name>coeffs2</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>stereo</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>incompat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CELT_MAX_BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>OpusBandExcitation</name> <modifier>*</modifier></type><name>ex</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ex</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>bp_e</name> <init>= <expr><call><name>bessel_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bfilter_lo</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>energy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bp_e</name> <operator>=</operator> <call><name>bessel_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bfilter_hi</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bp_e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bp_e</name> <operator>*=</operator> <name>bp_e</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bp_e</name> <operator>&gt;</operator> <name><name>ex</name><operator>-&gt;</operator><name>excitation</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>change_amp</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>bp_e</name> <operator>-</operator> <name><name>ex</name><operator>-&gt;</operator><name>excitation</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>total_change</name></name> <operator>+=</operator> <name><name>st</name><operator>-&gt;</operator><name>change_amp</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>-&gt;</operator><name>excitation</name></name> <operator>=</operator> <name><name>ex</name><operator>-&gt;</operator><name>excitation_init</name></name> <operator>=</operator> <name>bp_e</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>-&gt;</operator><name>excitation_dist</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ex</name><operator>-&gt;</operator><name>excitation</name></name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ex</name><operator>-&gt;</operator><name>excitation</name></name> <operator>-=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal><operator>/</operator><call><name>expf</name><argument_list>(<argument><expr><name><name>ex</name><operator>-&gt;</operator><name>excitation_dist</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name><name>ex</name><operator>-&gt;</operator><name>excitation_init</name></name><operator>/</operator><literal type="number">20</literal></expr></argument>, <argument><expr><name><name>ex</name><operator>-&gt;</operator><name>excitation_init</name></name><operator>/</operator><literal type="number">1.09</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>-&gt;</operator><name>excitation</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>ex</name><operator>-&gt;</operator><name>excitation</name></name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ex</name><operator>-&gt;</operator><name>excitation_dist</name></name> <operator>+=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>search_for_change_points</name><parameter_list>(<parameter><decl><type><name>OpusPsyContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>tgt_change</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>offset_s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset_e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resolution</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>c_change</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>offset_e</name> <operator>-</operator> <name>offset_s</name><operator>)</operator> <operator>&lt;=</operator> <name>resolution</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>offset_s</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>offset_e</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>c_change</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>steps</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>total_change</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c_change</name> <operator>&gt;</operator> <name>tgt_change</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>offset_e</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>search_for_change_points</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tgt_change</name> <operator>/</operator> <literal type="number">2.0f</literal></expr></argument>, <argument><expr><name>offset_s</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>resolution</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inflection_points</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>inflection_points_count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>search_for_change_points</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tgt_change</name> <operator>/</operator> <literal type="number">2.0f</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>offset_e</name></expr></argument>, <argument><expr><name>resolution</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>flush_silent_frames</name><parameter_list>(<parameter><decl><type><name>OpusPsyContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fsize</name></decl>, <decl><type ref="prev"/><name>silent_frames</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>silent_frames</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>silent_frames</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>buffered_steps</name></name></expr>;</condition> <incr><expr><name>silent_frames</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>steps</name><index>[<expr><name>silent_frames</name></expr>]</index></name><operator>-&gt;</operator><name>silence</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>silent_frames</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>fsize</name> <operator>=</operator> <name>CELT_BLOCK_960</name></expr>;</init> <condition><expr><name>fsize</name> <operator>&gt;</operator> <name>CELT_BLOCK_120</name></expr>;</condition> <incr><expr><name>fsize</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>fsize</name><operator>)</operator> <operator>&gt;</operator> <name>silent_frames</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>frames</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>silent_frames</name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>fsize</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">48</literal> <operator>&gt;&gt;</operator> <name>fsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>framesize</name></name> <operator>=</operator> <name>fsize</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>psy_output_groups</name><parameter_list>(<parameter><decl><type><name>OpusPsyContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>max_delay_samples</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>-&gt;</operator><name>max_delay_ms</name></name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name><operator>)</operator><operator>/</operator><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_bsize</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>OPUS_SAMPLES_TO_BLOCK_SIZE</name><argument_list>(<argument><expr><name>max_delay_samples</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CELT_BLOCK_960</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>OPUS_MODE_CELT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>bandwidth</name></name> <operator>=</operator> <name>OPUS_BANDWIDTH_FULLBAND</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>steps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>silence</name> <operator>&amp;&amp;</operator> <call><name>flush_silent_frames</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>framesize</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>max_bsize</name></expr></argument>, <argument><expr><name>CELT_BLOCK_960</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>frames</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_opus_psy_process</name><parameter_list>(<parameter><decl><type><name>OpusPsyContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>OpusPacketInfo</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>total_energy_change</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buffered_steps</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_steps</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>awin</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bsize_analysis</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>steps_to_process</name></name> <operator>&gt;=</operator> <name>awin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>step_collect_psy_metrics</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffered_steps</name></name> <operator>-</operator> <name>awin</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>steps_to_process</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>buffered_steps</name></name><operator>)</operator> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_steps</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>buffered_steps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>total_energy_change</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>steps</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>total_change</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>search_for_change_points</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>total_energy_change</name> <operator>/</operator> <literal type="number">2.0f</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffered_steps</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>psy_output_groups</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>frames</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>frames</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>framesize</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>framesize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bandwidth</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>bandwidth</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_opus_psy_celt_frame_init</name><parameter_list>(<parameter><decl><type><name>OpusPsyContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>neighbouring_points</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>start_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>radius</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>framesize</name></name><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>step_offset</name> <init>= <expr><name>radius</name><operator>*</operator><name>index</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>silence</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>start_band</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>OPUS_MODE_HYBRID</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">17</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>end_band</name></name> <operator>=</operator> <name><name>ff_celt_band_end</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>bandwidth</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>framesize</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>silence</name> <operator>&amp;=</operator> <name><name>s</name><operator>-&gt;</operator><name>steps</name><index>[<expr><name>index</name><operator>*</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>+</operator> <name>i</name></expr>]</index></name><operator>-&gt;</operator><name>silence</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>silence</name></name> <operator>=</operator> <name>silence</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>silence</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>framebits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>inflection_points_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>inflection_points</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>step_offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>start_offset</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start_offset</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>radius</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>inflection_points_count</name></name> <operator>-</operator> <name>start_offset</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>inflection_points</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <operator>(</operator><name>step_offset</name> <operator>+</operator> <name>radius</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>neighbouring_points</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>transient</name></name> <operator>=</operator> <name>neighbouring_points</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <ternary><condition><expr><name><name>f</name><operator>-&gt;</operator><name>transient</name></name></expr> ?</condition><then> <expr><call><name>OPUS_BLOCK_SIZE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>framesize</name></name></expr></argument>)</argument_list></call><operator>/</operator><name>CELT_OVERLAP</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>


<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>pfilter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>pf_gain</name></name> <operator>=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>pf_octave</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>pf_period</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>pf_tapset</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>tf_select</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>anticollapse</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>alloc_trim</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>skip_band_floor</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>end_band</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>intensity_stereo</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>end_band</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>dual_stereo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>spread</name></name> <operator>=</operator> <name>CELT_SPREAD_NORMAL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>tf_change</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>CELT_MAX_BANDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>alloc_boost</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>CELT_MAX_BANDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>celt_gauge_psy_weight</name><parameter_list>(<parameter><decl><type><name>OpusPsyContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>OpusPsyStep</name> <modifier>*</modifier><modifier>*</modifier></type><name>start</name></decl></parameter>,
<parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name> <init>= <expr><call><name>OPUS_BLOCK_SIZE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>framesize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>rate</name></decl>, <decl><type ref="prev"/><name>frame_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name>tonal</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>float</name></type> <name><name>band_score</name><index>[<expr><name>CELT_MAX_BANDS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>max_score</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CELT_MAX_BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>weight</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>tonal_contrib</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>f</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>framesize</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>weight</name> <operator>=</operator> <name><name>start</name><index>[<expr><name>f</name></expr>]</index></name><operator>-&gt;</operator><name><name>stereo</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>weight</name> <operator>+=</operator> <name><name>start</name><index>[<expr><name>f</name></expr>]</index></name><operator>-&gt;</operator><name><name>change_amp</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>start</name><index>[<expr><name>f</name></expr>]</index></name><operator>-&gt;</operator><name><name>tone</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>start</name><index>[<expr><name>f</name></expr>]</index></name><operator>-&gt;</operator><name><name>energy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tonal_contrib</name> <operator>+=</operator> <name><name>start</name><index>[<expr><name>f</name></expr>]</index></name><operator>-&gt;</operator><name><name>tone</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name>tonal</name> <operator>+=</operator> <name>tonal_contrib</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>band_score</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>weight</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>tonal</name> <operator>/=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>CELT_MAX_BANDS</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CELT_MAX_BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>band_score</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>max_score</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_score</name> <operator>=</operator> <name><name>band_score</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CELT_MAX_BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>f_out</name><operator>-&gt;</operator><name>alloc_boost</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>band_score</name><index>[<expr><name>i</name></expr>]</index></name><operator>/</operator><name>max_score</name><operator>)</operator><operator>*</operator><literal type="number">3.0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>frame_bits</name> <operator>+=</operator> <name><name>band_score</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><literal type="number">8.0f</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>tonal</name> <operator>/=</operator> <literal type="number">1333136.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f_out</name><operator>-&gt;</operator><name>spread</name></name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><call><name>lrintf</name><argument_list>(<argument><expr><name>tonal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rate</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name><operator>)</operator> <operator>+</operator> <name>frame_bits</name><operator>*</operator><name>frame_size</name><operator>*</operator><literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rate</name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rate</name> <operator>/=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name><operator>/</operator><name>frame_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f_out</name><operator>-&gt;</operator><name>framebits</name></name> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f_out</name><operator>-&gt;</operator><name>framebits</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>f_out</name><operator>-&gt;</operator><name>framebits</name></name></expr></argument>, <argument><expr><name>OPUS_MAX_PACKET_SIZE</name><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f_out</name><operator>-&gt;</operator><name>framebits</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>f_out</name><operator>-&gt;</operator><name>framebits</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bands_dist</name><parameter_list>(<parameter><decl><type><name>OpusPsyContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>total_dist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>tdist</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpusRangeCoder</name></type> <name>dump</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_opus_rc_enc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_celt_bitalloc</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dump</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CELT_MAX_BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>bits</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dist</name> <init>= <expr><call><name>pvq_band_cost</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>pvq</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dump</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tdist</name> <operator>+=</operator> <name>dist</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>total_dist</name> <operator>=</operator> <name>tdist</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>celt_search_for_dual_stereo</name><parameter_list>(<parameter><decl><type><name>OpusPsyContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>td1</name></decl>, <decl><type ref="prev"/><name>td2</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>dual_stereo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bands_dist</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>dual_stereo</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bands_dist</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>td2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>dual_stereo</name></name> <operator>=</operator> <name>td2</name> <operator>&lt;</operator> <name>td1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dual_stereo_used</name></name> <operator>+=</operator> <name>td2</name> <operator>&lt;</operator> <name>td1</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>celt_search_for_intensity</name><parameter_list>(<parameter><decl><type><name>OpusPsyContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>best_band</name> <init>= <expr><name>CELT_MAX_BANDS</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>dist</name></decl>, <decl><type ref="prev"/><name>best_dist</name> <init>= <expr><name>FLT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>end_band</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>end_band</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>end_band</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>intensity_stereo</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bands_dist</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>best_dist</name> <operator>&gt;</operator> <name>dist</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>best_dist</name> <operator>=</operator> <name>dist</name></expr>;</expr_stmt>
<expr_stmt><expr><name>best_band</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>intensity_stereo</name></name> <operator>=</operator> <name>best_band</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avg_is_band</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avg_is_band</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>intensity_stereo</name></name><operator>)</operator><operator>/</operator><literal type="number">2.0f</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>celt_search_for_tf</name><parameter_list>(<parameter><decl><type><name>OpusPsyContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>OpusPsyStep</name> <modifier>*</modifier><modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>cway</name></decl>, <decl><type ref="prev"/><name><name>config</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>CELT_MAX_BANDS</name></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>score</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cway</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cway</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>cway</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>mag</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>base</name> <init>= <expr><ternary><condition><expr><name><name>f</name><operator>-&gt;</operator><name>transient</name></name></expr> ?</condition><then> <expr><literal type="number">120</literal></expr> </then><else>: <expr><literal type="number">960</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>ff_celt_tf_select</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr>]</index><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>transient</name></name></expr>]</index><index>[<expr><name>cway</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>?</operator> <name>base</name></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>:</operator> <name>base</name> <operator>&lt;&lt;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CELT_MAX_BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>iscore0</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>iscore1</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>iscore0</name> <operator>+=</operator> <name><name>start</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>tone</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>start</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>change_amp</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>/</operator><name><name>mag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>iscore1</name> <operator>+=</operator> <name><name>start</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>tone</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>start</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>change_amp</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>/</operator><name><name>mag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name><name>config</name><index>[<expr><name>cway</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>iscore0</name> <operator>-</operator> <literal type="number">1.0f</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>iscore1</name> <operator>-</operator> <literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>score</name><index>[<expr><name>cway</name></expr>]</index></name> <operator>+=</operator> <ternary><condition><expr><name><name>config</name><index>[<expr><name>cway</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><name>iscore1</name></expr> </then><else>: <expr><name>iscore0</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>tf_select</name></name> <operator>=</operator> <name><name>score</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>score</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>tf_change</name></name></expr></argument>, <argument><expr><name><name>config</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>tf_select</name></name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>CELT_MAX_BANDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_opus_psy_celt_frame_process</name><parameter_list>(<parameter><decl><type><name>OpusPsyContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>start_transient_flag</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>transient</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpusPsyStep</name> <modifier>*</modifier><modifier>*</modifier></type><name>start</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>steps</name><index>[<expr><name>index</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>framesize</name></name><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>silence</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>celt_gauge_psy_weight</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>celt_search_for_intensity</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>celt_search_for_dual_stereo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>celt_search_for_tf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>transient</name></name> <operator>!=</operator> <name>start_transient_flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <ternary><condition><expr><name><name>f</name><operator>-&gt;</operator><name>transient</name></name></expr> ?</condition><then> <expr><call><name>OPUS_BLOCK_SIZE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>framesize</name></name></expr></argument>)</argument_list></call><operator>/</operator><name>CELT_OVERLAP</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>redo_analysis</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>redo_analysis</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_opus_psy_postencode_update</name><parameter_list>(<parameter><decl><type><name>OpusPsyContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>frame_size</name> <init>= <expr><call><name>OPUS_BLOCK_SIZE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>framesize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>steps_out</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>frames</name></name><operator>*</operator><operator>(</operator><name>frame_size</name><operator>/</operator><literal type="number">120</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>tmp</name><index>[<expr><name>FF_BUFQUEUE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>ideal_fbits</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>steps_out</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>steps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OpusPsyStep</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_steps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>steps</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_steps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_new</name> <init>= <expr><name>i</name> <operator>-</operator> <name>steps_out</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>steps</name><index>[<expr><ternary><condition><expr><name>i_new</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>max_steps</name></name> <operator>+</operator> <name>i_new</name></expr> </then><else>: <expr><name>i_new</name></expr></else></ternary></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>steps_out</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>buffered_steps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>steps</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>index</name> <operator>-=</operator> <name>steps_out</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>ideal_fbits</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name><operator>/</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name><operator>/</operator><name>frame_size</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>frames</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avg_is_band</name></name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>intensity_stereo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>*=</operator> <name>ideal_fbits</name> <operator>/</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>framebits</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avg_is_band</name></name> <operator>/=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>frames</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cs_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>steps_to_process</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffered_steps</name></name> <operator>-=</operator> <name>steps_out</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>total_packets_out</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>frames</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inflection_points_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_opus_psy_init</name><parameter_list>(<parameter><decl><type><name>OpusPsyContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>FFBufQueue</name></name> <modifier>*</modifier></type><name>bufqueue</name></decl></parameter>, <parameter><decl><type><name>OpusEncOptions</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>redo_analysis</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bufqueue</name></name> <operator>=</operator> <name>bufqueue</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_steps</name></name> <operator>=</operator> <call><name>ceilf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>-&gt;</operator><name>max_delay_ms</name></name><operator>/</operator><literal type="number">2.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bsize_analysis</name></name> <operator>=</operator> <name>CELT_BLOCK_960</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avg_is_band</name></name> <operator>=</operator> <name>CELT_MAX_BANDS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inflection_points_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>inflection_points</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>inflection_points</name></name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>max_steps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>inflection_points</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name></name> <operator>=</operator> <call><name>avpriv_float_dsp_alloc</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>dsp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CELT_MAX_BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>bessel_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bfilter_hi</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">19.0f</literal></expr></argument>, <argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bessel_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bfilter_lo</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">20.0f</literal></expr></argument>, <argument><expr><literal type="number">100.0f</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_steps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>steps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OpusPsyStep</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>steps</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CELT_BLOCK_NB</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name> <init>= <expr><call><name>OPUS_BLOCK_SIZE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>len</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>generate_window_func</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>WFUNC_SINE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mdct15_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mdct</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">68</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>CELT_BLOCK_NB</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>inflection_points</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CELT_BLOCK_NB</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_mdct15_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mdct</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_steps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>steps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_opus_psy_signal_eof</name><parameter_list>(<parameter><decl><type><name>OpusPsyContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_opus_psy_end</name><parameter_list>(<parameter><decl><type><name>OpusPsyContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>inflection_points</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CELT_BLOCK_NB</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ff_mdct15_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mdct</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_steps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>steps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Average Intensity Stereo band: %0.1f\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avg_is_band</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Dual Stereo used: %0.2f%%\n"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>dual_stereo_used</name></name><operator>/</operator><name><name>s</name><operator>-&gt;</operator><name>total_packets_out</name></name><operator>)</operator><operator>*</operator><literal type="number">100.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
