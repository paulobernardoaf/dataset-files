<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\xsubenc.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PADDING</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PADDING_COLOR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>void</name></type> <name>put_xsub_rle</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>ff_log2_tab</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type> <name>xsub_encode_rle</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>color</name> <init>= <expr><name>PADDING_COLOR</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>x0</name> <operator>&lt;</operator> <name>w</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pb</name><operator>-&gt;</operator><name>size_in_bits</name></name> <operator>-</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">7</literal><operator>*</operator><literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <name>x0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>color</name> <operator>=</operator> <name><name>bitmap</name><index>[<expr><name>x1</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>x1</name> <operator>&lt;</operator> <name>w</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>bitmap</name><index>[<expr><name>x1</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <name>color</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>x1</name> <operator>-</operator> <name>x0</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>PADDING</name> <operator>&amp;&amp;</operator> <name>x0</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>color</name> <operator>==</operator> <name>PADDING_COLOR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>PADDING</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x0</name> <operator>-=</operator> <name>PADDING</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_xsub_rle</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>PADDING</name></expr></argument>, <argument><expr><name>PADDING_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>x1</name> <operator>==</operator> <name>w</name> <operator>&amp;&amp;</operator> <name>color</name> <operator>==</operator> <name>PADDING_COLOR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>PADDING</name> <operator>+</operator> <operator>(</operator><name>w</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>put_xsub_rle</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x0</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>color</name> <operator>!=</operator> <name>PADDING_COLOR</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>PADDING</name> <operator>+</operator> <operator>(</operator><name>w</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>put_xsub_rle</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>PADDING</name> <operator>+</operator> <operator>(</operator><name>w</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>PADDING_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avpriv_align_put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>make_tc</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>ms</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>tc_divs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1000</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ms</name> <operator>%</operator> <name><name>tc_divs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ms</name> <operator>/=</operator> <name><name>tc_divs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ms</name></expr>;</expr_stmt>
<return>return <expr><name>ms</name> <operator>&gt;</operator> <literal type="number">99</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xsub_encode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVSubtitle</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>startTime</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>pts</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint64_t</name></type> <name>endTime</name> <init>= <expr><name>startTime</name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>end_display_time</name></name> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>start_display_time</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>start_tc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>end_tc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>hdr</name> <init>= <expr><name>buf</name> <operator>+</operator> <literal type="number">27</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rlelenptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bufsize</name> <operator>&lt;</operator> <literal type="number">27</literal> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Buffer too small for XSUB header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>num_rects</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Only single rects supported (%d in subtitle.)\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>num_rects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_AVPICTURE</name></expr></cpp:if>
<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>AVSubtitleRect</name> <modifier>*</modifier></type><name>rect</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>rect</name><operator>-&gt;</operator><name>pict</name><operator>.</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rect</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>rect</name><operator>-&gt;</operator><name>pict</name><operator>.</operator><name>linesize</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No subtitle bitmap available.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>nb_colors</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No more than 4 subtitle colors supported (%d found.)\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>nb_colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>&amp;</operator> <literal type="number">0xff000000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Color index 0 is not transparent. Transparency will be messed up.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>make_tc</name><argument_list>(<argument><expr><name>startTime</name></expr></argument>, <argument><expr><name>start_tc</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>make_tc</name><argument_list>(<argument><expr><name>endTime</name></expr></argument>, <argument><expr><name>end_tc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Time code &gt;= 100 hours.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>,
<argument><expr><literal type="string">"[%02d:%02d:%02d.%03d-%02d:%02d:%02d.%03d]"</literal></expr></argument>,
<argument><expr><name><name>start_tc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>start_tc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>start_tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>start_tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>end_tc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>end_tc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>end_tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>end_tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>PADDING</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>x</name> <operator>+</operator> <name>width</name> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>y</name> <operator>+</operator> <name>height</name> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rlelenptr</name> <operator>=</operator> <name>hdr</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>hdr</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bytestream_put_be24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>bufsize</name> <operator>-</operator> <operator>(</operator><name>hdr</name> <operator>-</operator> <name>buf</name><operator>)</operator> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>xsub_encode_rle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name></expr></argument>, <argument><expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bytestream_put_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rlelenptr</name></expr></argument>, <argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>xsub_encode_rle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>h</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>put_xsub_rle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>w</name></expr></argument>, <argument><expr><name>PADDING_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avpriv_align_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hdr</name> <operator>-</operator> <name>buf</name> <operator>+</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>xsub_encoder_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'X'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="char">'B'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_xsub_encoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"xsub"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"DivX subtitles (XSUB)"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_XSUB</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>xsub_encoder_init</name></expr>,
<expr><operator>.</operator><name>encode_sub</name> <operator>=</operator> <name>xsub_encode</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
