<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\ass.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ass.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>ff_ass_subtitle_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>font</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>font_size</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>back_color</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bold</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>italic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>underline</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>border_style</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alignment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>subtitle_header</name></name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(
<argument><expr><literal type="string">"[Script Info]\r\n"</literal>
<literal type="string">"; Script generated by FFmpeg/Lavc%s\r\n"</literal>
<literal type="string">"ScriptType: v4.00+\r\n"</literal>
<literal type="string">"PlayResX: %d\r\n"</literal>
<literal type="string">"PlayResY: %d\r\n"</literal>
<literal type="string">"\r\n"</literal>
<literal type="string">"[V4+ Styles]\r\n"</literal>


<literal type="string">"Format: Name, "</literal>
<literal type="string">"Fontname, Fontsize, "</literal>
<literal type="string">"PrimaryColour, SecondaryColour, OutlineColour, BackColour, "</literal>
<literal type="string">"Bold, Italic, Underline, StrikeOut, "</literal>
<literal type="string">"ScaleX, ScaleY, "</literal>
<literal type="string">"Spacing, Angle, "</literal>
<literal type="string">"BorderStyle, Outline, Shadow, "</literal>
<literal type="string">"Alignment, MarginL, MarginR, MarginV, "</literal>
<literal type="string">"Encoding\r\n"</literal>

<literal type="string">"Style: "</literal>
<literal type="string">"Default,"</literal> 
<literal type="string">"%s,%d,"</literal> 
<literal type="string">"&amp;H%x,&amp;H%x,&amp;H%x,&amp;H%x,"</literal> 
<literal type="string">"%d,%d,%d,0,"</literal> 
<literal type="string">"100,100,"</literal> 
<literal type="string">"0,0,"</literal> 
<literal type="string">"%d,1,0,"</literal> 
<literal type="string">"%d,10,10,10,"</literal> 
<literal type="string">"0\r\n"</literal> 

<literal type="string">"\r\n"</literal>
<literal type="string">"[Events]\r\n"</literal>
<literal type="string">"Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\r\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>AV_STRINGIFY</name><argument_list>(<argument><expr><name>LIBAVCODEC_VERSION</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
<argument><expr><name>ASS_DEFAULT_PLAYRESX</name></expr></argument>, <argument><expr><name>ASS_DEFAULT_PLAYRESY</name></expr></argument>,
<argument><expr><name>font</name></expr></argument>, <argument><expr><name>font_size</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>back_color</name></expr></argument>, <argument><expr><name>back_color</name></expr></argument>,
<argument><expr><operator>-</operator><name>bold</name></expr></argument>, <argument><expr><operator>-</operator><name>italic</name></expr></argument>, <argument><expr><operator>-</operator><name>underline</name></expr></argument>, <argument><expr><name>border_style</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>subtitle_header</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>subtitle_header_size</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>subtitle_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_ass_subtitle_header_default</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ff_ass_subtitle_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ASS_DEFAULT_FONT</name></expr></argument>,
<argument><expr><name>ASS_DEFAULT_FONT_SIZE</name></expr></argument>,
<argument><expr><name>ASS_DEFAULT_COLOR</name></expr></argument>,
<argument><expr><name>ASS_DEFAULT_BACK_COLOR</name></expr></argument>,
<argument><expr><name>ASS_DEFAULT_BOLD</name></expr></argument>,
<argument><expr><name>ASS_DEFAULT_ITALIC</name></expr></argument>,
<argument><expr><name>ASS_DEFAULT_UNDERLINE</name></expr></argument>,
<argument><expr><name>ASS_DEFAULT_BORDERSTYLE</name></expr></argument>,
<argument><expr><name>ASS_DEFAULT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>ff_ass_get_dialog</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>readorder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>layer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>style</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>speaker</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>av_asprintf</name><argument_list>(<argument><expr><literal type="string">"%d,%d,%s,%s,0,0,0,,%s"</literal></expr></argument>,
<argument><expr><name>readorder</name></expr></argument>, <argument><expr><name>layer</name></expr></argument>, <argument><expr><ternary><condition><expr><name>style</name></expr> ?</condition><then> <expr><name>style</name></expr> </then><else>: <expr><literal type="string">"Default"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>speaker</name></expr> ?</condition><then> <expr><name>speaker</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_ass_add_rect</name><parameter_list>(<parameter><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dialog</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>readorder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>layer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>style</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>speaker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ass_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVSubtitleRect</name> <modifier>*</modifier><modifier>*</modifier></type><name>rects</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rects</name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>rects</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sub</name><operator>-&gt;</operator><name>rects</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rects</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>rects</name></name> <operator>=</operator> <name>rects</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rects</name><index>[<expr><name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>rects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rects</name><index>[<expr><name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rects</name><index>[<expr><name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>=</operator> <name>SUBTITLE_ASS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ass_str</name> <operator>=</operator> <call><name>ff_ass_get_dialog</name><argument_list>(<argument><expr><name>readorder</name></expr></argument>, <argument><expr><name>layer</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>speaker</name></expr></argument>, <argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ass_str</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rects</name><index>[<expr><name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name></expr>]</index></name><operator>-&gt;</operator><name>ass</name> <operator>=</operator> <name>ass_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ass_decoder_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FFASSDecoderContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags2</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG2_RO_FLUSH_NOOP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>readorder</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ass_bprint_text_event</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>linebreaks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keep_ass_markup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_end</name> <init>= <expr><name>p</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>p_end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>linebreaks</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>linebreaks</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\N"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>keep_ass_markup</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"{}\\"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\%c"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>p_end</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\N"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>p_end</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>


<continue>continue;</continue>


</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
