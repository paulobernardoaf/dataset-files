<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\dvaudio.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_DVAUDIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_DVAUDIO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>dv_get_audio_sample_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dsf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>samples</name> <init>= <expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr></init></decl>;</decl_stmt> 

<switch>switch <condition>(<expr><operator>(</operator><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<return>return <expr><name>samples</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>dsf</name></expr> ?</condition><then> <expr><literal type="number">1896</literal></expr> </then><else>: <expr><literal type="number">1580</literal></expr></else></ternary><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<return>return <expr><name>samples</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>dsf</name></expr> ?</condition><then> <expr><literal type="number">1742</literal></expr> </then><else>: <expr><literal type="number">1452</literal></expr></else></ternary><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<default>default:</default>
<return>return <expr><name>samples</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>dsf</name></expr> ?</condition><then> <expr><literal type="number">1264</literal></expr> </then><else>: <expr><literal type="number">1053</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
