<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\microdvddec.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/parseutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ass.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>indexof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>f</name></expr> ?</condition><then> <expr><operator>(</operator><name>f</name> <operator>-</operator> <name>s</name><operator>)</operator></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>microdvd_tag</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>persistent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>data1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>data2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>data_string_len</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MICRODVD_PERSISTENT_OFF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MICRODVD_PERSISTENT_ON</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MICRODVD_PERSISTENT_OPENED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MICRODVD_TAGS</name></cpp:macro> <cpp:value>"cfshyYpo"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>microdvd_set_tag</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>microdvd_tag</name></name> <modifier>*</modifier></type><name>tags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>microdvd_tag</name></name></type> <name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>tag_index</name> <init>= <expr><call><name>indexof</name><argument_list>(<argument><expr><name>MICRODVD_TAGS</name></expr></argument>, <argument><expr><name><name>tag</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tag_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tags</name><index>[<expr><name>tag_index</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MICRODVD_STYLES</name></cpp:macro> <cpp:value>"ibus"</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>check_for_italic_slash_marker</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>microdvd_tag</name></name> <modifier>*</modifier></type><name>tags</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>microdvd_tag</name></name></type> <name>tag</name> <init>= <expr><name><name>tags</name><index>[<expr><call><name>indexof</name><argument_list>(<argument><expr><name>MICRODVD_TAGS</name></expr></argument>, <argument><expr><literal type="char">'y'</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>key</name></name> <operator>=</operator> <literal type="char">'y'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>data1</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>microdvd_set_tag</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>microdvd_load_tags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>microdvd_tag</name></name> <modifier>*</modifier></type><name>tags</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>check_for_italic_slash_marker</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>tag_char</name> <init>= <expr><operator>*</operator><operator>(</operator><name>s</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>microdvd_tag</name></name></type> <name>tag</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag_char</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>s</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>tag_char</name></expr>)</condition> <block>{<block_content>


<case>case <expr><literal type="char">'Y'</literal></expr>:</case>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>persistent</name></name> <operator>=</operator> <name>MICRODVD_PERSISTENT_ON</name></expr>;</expr_stmt>
<case>case <expr><literal type="char">'y'</literal></expr>:</case>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'}'</literal> <operator>&amp;&amp;</operator> <name>s</name> <operator>-</operator> <name>start</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>style_index</name> <init>= <expr><call><name>indexof</name><argument_list>(<argument><expr><name>MICRODVD_STYLES</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>style_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>data1</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>style_index</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>tag_char</name></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>persistent</name></name> <operator>=</operator> <name>MICRODVD_PERSISTENT_ON</name></expr>;</expr_stmt>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'$'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>data1</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x00ffffff</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>key</name></name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>persistent</name></name> <operator>=</operator> <name>MICRODVD_PERSISTENT_ON</name></expr>;</expr_stmt>
<case>case <expr><literal type="char">'f'</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>indexof</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>data_string</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>data_string_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>key</name></name> <operator>=</operator> <literal type="char">'f'</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>


<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>persistent</name></name> <operator>=</operator> <name>MICRODVD_PERSISTENT_ON</name></expr>;</expr_stmt>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>data1</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>key</name></name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'H'</literal></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>indexof</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>data_string</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>data_string_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>key</name></name> <operator>=</operator> <literal type="char">'h'</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>


<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>persistent</name></name> <operator>=</operator> <name>MICRODVD_PERSISTENT_ON</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>data1</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>s</name><operator>++</operator> <operator>==</operator> <literal type="char">'1'</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>key</name></name> <operator>=</operator> <literal type="char">'p'</literal></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>persistent</name></name> <operator>=</operator> <name>MICRODVD_PERSISTENT_ON</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>data1</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>data2</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>key</name></name> <operator>=</operator> <literal type="char">'o'</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default> 
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>tag</name><operator>.</operator><name>key</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>start</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>microdvd_set_tag</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><call><name>check_for_italic_slash_marker</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>microdvd_open_tags</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>new_line</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>microdvd_tag</name></name> <modifier>*</modifier></type><name>tags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sidx</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MICRODVD_TAGS</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>persistent</name> <operator>==</operator> <name>MICRODVD_PERSISTENT_OPENED</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'Y'</literal></expr>:</case>
<case>case <expr><literal type="char">'y'</literal></expr>:</case>
<for>for <control>(<init><expr><name>sidx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sidx</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MICRODVD_STYLES</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>sidx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data1</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>sidx</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>new_line</name></expr></argument>, <argument><expr><literal type="string">"{\\%c1}"</literal></expr></argument>, <argument><expr><name><name>MICRODVD_STYLES</name><index>[<expr><name>sidx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>new_line</name></expr></argument>, <argument><expr><literal type="string">"{\\c&amp;H%06"</literal><name>PRIX32</name><literal type="string">"&amp;}"</literal></expr></argument>, <argument><expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>new_line</name></expr></argument>, <argument><expr><literal type="string">"{\\fn%.*s}"</literal></expr></argument>,
<argument><expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data_string_len</name></expr></argument>, <argument><expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>new_line</name></expr></argument>, <argument><expr><literal type="string">"{\\fs%"</literal><name>PRId32</name><literal type="string">"}"</literal></expr></argument>, <argument><expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>new_line</name></expr></argument>, <argument><expr><literal type="string">"{\\an8}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>new_line</name></expr></argument>, <argument><expr><literal type="string">"{\\pos(%"</literal><name>PRId32</name><literal type="string">",%"</literal><name>PRId32</name><literal type="string">")}"</literal></expr></argument>,
<argument><expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data1</name></expr></argument>, <argument><expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>persistent</name> <operator>==</operator> <name>MICRODVD_PERSISTENT_ON</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>persistent</name> <operator>=</operator> <name>MICRODVD_PERSISTENT_OPENED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>microdvd_close_no_persistent_tags</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>new_line</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>microdvd_tag</name></name> <modifier>*</modifier></type><name>tags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sidx</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MICRODVD_TAGS</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>persistent</name> <operator>!=</operator> <name>MICRODVD_PERSISTENT_OFF</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'y'</literal></expr>:</case>
<for>for <control>(<init><expr><name>sidx</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MICRODVD_STYLES</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>sidx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>sidx</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data1</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>sidx</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>new_line</name></expr></argument>, <argument><expr><literal type="string">"{\\%c0}"</literal></expr></argument>, <argument><expr><name><name>MICRODVD_STYLES</name><index>[<expr><name>sidx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>new_line</name></expr></argument>, <argument><expr><literal type="string">"{\\c}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>new_line</name></expr></argument>, <argument><expr><literal type="string">"{\\fn}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>new_line</name></expr></argument>, <argument><expr><literal type="string">"{\\fs}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>microdvd_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_sub_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>new_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFASSDecoderContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>microdvd_tag</name></name></type> <name><name>tags</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>MICRODVD_TAGS</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_line</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><name>line</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>line</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>microdvd_load_tags</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>microdvd_open_tags</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_line</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><name>line</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>line</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>line</name> <operator>!=</operator> <literal type="char">'|'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_line</name></expr></argument>, <argument><expr><operator>*</operator><name>line</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name>line</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>microdvd_close_no_persistent_tags</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_line</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_line</name></expr></argument>, <argument><expr><literal type="string">"\\N"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>new_line</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ff_ass_add_rect</name><argument_list>(<argument><expr><name>sub</name></expr></argument>, <argument><expr><name><name>new_line</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>readorder</name></name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_line</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_sub_ptr</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>microdvd_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AVBPrint</name></type> <name>font_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>font_size</name> <init>= <expr><name>ASS_DEFAULT_FONT_SIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>color</name> <init>= <expr><name>ASS_DEFAULT_COLOR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bold</name> <init>= <expr><name>ASS_DEFAULT_BOLD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>italic</name> <init>= <expr><name>ASS_DEFAULT_ITALIC</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>underline</name> <init>= <expr><name>ASS_DEFAULT_UNDERLINE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alignment</name> <init>= <expr><name>ASS_DEFAULT_ALIGNMENT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>microdvd_tag</name></name></type> <name><name>tags</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>MICRODVD_TAGS</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>font_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_AUTOMATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>font_buf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>ASS_DEFAULT_FONT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>microdvd_load_tags</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MICRODVD_TAGS</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>av_tolower</name><argument_list>(<argument><expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'y'</literal></expr>:</case>
<for>for <control>(<init><expr><name>sidx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sidx</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MICRODVD_STYLES</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>sidx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data1</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>sidx</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>MICRODVD_STYLES</name><index>[<expr><name>sidx</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'i'</literal></expr>:</case> <expr_stmt><expr><name>italic</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><name>bold</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case> <expr_stmt><expr><name>underline</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> <expr_stmt><expr><name>color</name> <operator>=</operator> <name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data1</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><name>font_size</name> <operator>=</operator> <name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data1</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case> <expr_stmt><expr><name>alignment</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>font_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>font_buf</name></expr></argument>, <argument><expr><literal type="string">"%.*s"</literal></expr></argument>,
<argument><expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data_string_len</name></expr></argument>, <argument><expr><name><name>tags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ff_ass_subtitle_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>font_buf</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>font_size</name></expr></argument>, <argument><expr><name>color</name></expr></argument>,
<argument><expr><name>ASS_DEFAULT_BACK_COLOR</name></expr></argument>, <argument><expr><name>bold</name></expr></argument>, <argument><expr><name>italic</name></expr></argument>,
<argument><expr><name>underline</name></expr></argument>, <argument><expr><name>ASS_DEFAULT_BORDERSTYLE</name></expr></argument>,
<argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_microdvd_decoder</name> <init>= <expr><block>{
<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"microdvd"</literal></expr>,
<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MicroDVD subtitle"</literal></expr></argument>)</argument_list></call></expr>,
<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>,
<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MICRODVD</name></expr>,
<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>microdvd_init</name></expr>,
<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>microdvd_decode_frame</name></expr>,
<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>ff_ass_decoder_flush</name></expr>,
<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFASSDecoderContext</name></expr></argument>)</argument_list></sizeof></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
