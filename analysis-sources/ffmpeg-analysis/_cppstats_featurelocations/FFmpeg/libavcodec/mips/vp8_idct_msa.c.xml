<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mips\vp8_idct_msa.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/vp8dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/generic_macros_msa.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp8dsp_mips.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>cospi8sqrt2minus1</name> <init>= <expr><literal type="number">20091</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>sinpi8sqrt2</name> <init>= <expr><literal type="number">35468</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP8_IDCT_1D_W</name><parameter_list>(<parameter><type><name>in0</name></type></parameter>, <parameter><type><name>in1</name></type></parameter>, <parameter><type><name>in2</name></type></parameter>, <parameter><type><name>in3</name></type></parameter>, <parameter><type><name>out0</name></type></parameter>, <parameter><type><name>out1</name></type></parameter>, <parameter><type><name>out2</name></type></parameter>, <parameter><type><name>out3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v4i32 a1_m, b1_m, c1_m, d1_m; v4i32 c_tmp1_m, c_tmp2_m, d_tmp1_m, d_tmp2_m; v4i32 const_cospi8sqrt2minus1_m, sinpi8_sqrt2_m; const_cospi8sqrt2minus1_m = __msa_fill_w(cospi8sqrt2minus1); sinpi8_sqrt2_m = __msa_fill_w(sinpi8sqrt2); a1_m = in0 + in2; b1_m = in0 - in2; c_tmp1_m = ((in1) * sinpi8_sqrt2_m) &gt;&gt; 16; c_tmp2_m = in3 + (((in3) * const_cospi8sqrt2minus1_m) &gt;&gt; 16); c1_m = c_tmp1_m - c_tmp2_m; d_tmp1_m = (in1) + (((in1) * const_cospi8sqrt2minus1_m) &gt;&gt; 16); d_tmp2_m = ((in3) * sinpi8_sqrt2_m) &gt;&gt; 16; d1_m = d_tmp1_m + d_tmp2_m; BUTTERFLY_4(a1_m, b1_m, c1_m, d1_m, out0, out1, out2, out3); }</cpp:value></cpp:define>


















<function><type><name>void</name></type> <name>ff_vp8_idct_add_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>input</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v8i16</name></type> <name>input0</name></decl>, <decl><type ref="prev"/><name>input1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4i32</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>, <decl><type ref="prev"/><name>hz0</name></decl>, <decl><type ref="prev"/><name>hz1</name></decl>, <decl><type ref="prev"/><name>hz2</name></decl>, <decl><type ref="prev"/><name>hz3</name></decl>, <decl><type ref="prev"/><name>vt0</name></decl>, <decl><type ref="prev"/><name>vt1</name></decl>, <decl><type ref="prev"/><name>vt2</name></decl>, <decl><type ref="prev"/><name>vt3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4i32</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>pred0</name></decl>, <decl><type ref="prev"/><name>pred1</name></decl>, <decl><type ref="prev"/><name>pred2</name></decl>, <decl><type ref="prev"/><name>pred3</name></decl>, <decl><type ref="prev"/><name>dest0</name></decl>, <decl><type ref="prev"/><name>dest1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>LD_SH2</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>input0</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>input0</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>input1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP8_IDCT_1D_W</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>hz0</name></expr></argument>, <argument><expr><name>hz1</name></expr></argument>, <argument><expr><name>hz2</name></expr></argument>, <argument><expr><name>hz3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE4x4_SW_SW</name><argument_list>(<argument><expr><name>hz0</name></expr></argument>, <argument><expr><name>hz1</name></expr></argument>, <argument><expr><name>hz2</name></expr></argument>, <argument><expr><name>hz3</name></expr></argument>, <argument><expr><name>hz0</name></expr></argument>, <argument><expr><name>hz1</name></expr></argument>, <argument><expr><name>hz2</name></expr></argument>, <argument><expr><name>hz3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP8_IDCT_1D_W</name><argument_list>(<argument><expr><name>hz0</name></expr></argument>, <argument><expr><name>hz1</name></expr></argument>, <argument><expr><name>hz2</name></expr></argument>, <argument><expr><name>hz3</name></expr></argument>, <argument><expr><name>vt0</name></expr></argument>, <argument><expr><name>vt1</name></expr></argument>, <argument><expr><name>vt2</name></expr></argument>, <argument><expr><name>vt3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_W4_SW</name><argument_list>(<argument><expr><name>vt0</name></expr></argument>, <argument><expr><name>vt1</name></expr></argument>, <argument><expr><name>vt2</name></expr></argument>, <argument><expr><name>vt3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE4x4_SW_SW</name><argument_list>(<argument><expr><name>vt0</name></expr></argument>, <argument><expr><name>vt1</name></expr></argument>, <argument><expr><name>vt2</name></expr></argument>, <argument><expr><name>vt3</name></expr></argument>, <argument><expr><name>vt0</name></expr></argument>, <argument><expr><name>vt1</name></expr></argument>, <argument><expr><name>vt2</name></expr></argument>, <argument><expr><name>vt3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_SB4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>pred0</name></expr></argument>, <argument><expr><name>pred1</name></expr></argument>, <argument><expr><name>pred2</name></expr></argument>, <argument><expr><name>pred3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B4_SW</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pred0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pred1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pred2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pred3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_H4_SW</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>vt0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>vt1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>vt2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>vt3</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SW4_0_255</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>dest0</name></expr></argument>, <argument><expr><name>dest1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W2</name><argument_list>(<argument><expr><name>dest0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W2</name><argument_list>(<argument><expr><name>dest1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>input</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_idct_dc_add_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>in_dc</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v8i16</name></type> <name>vec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>pred0</name></decl>, <decl><type ref="prev"/><name>pred1</name></decl>, <decl><type ref="prev"/><name>pred2</name></decl>, <decl><type ref="prev"/><name>pred3</name></decl>, <decl><type ref="prev"/><name>dest0</name></decl>, <decl><type ref="prev"/><name>dest1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vec</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>in_dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_SB4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>pred0</name></expr></argument>, <argument><expr><name>pred1</name></expr></argument>, <argument><expr><name>pred2</name></expr></argument>, <argument><expr><name>pred3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B4_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pred0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pred1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pred2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pred3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH4_0_255</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_SB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>dest0</name></expr></argument>, <argument><expr><name>dest1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W2</name><argument_list>(<argument><expr><name>dest0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W2</name><argument_list>(<argument><expr><name>dest1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in_dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_luma_dc_wht_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>input</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>mb_dq_coeff</name> <init>= <expr><operator>&amp;</operator><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>input0</name></decl>, <decl><type ref="prev"/><name>input1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4i32</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4i32</name></type> <name>hz0</name></decl>, <decl><type ref="prev"/><name>hz1</name></decl>, <decl><type ref="prev"/><name>hz2</name></decl>, <decl><type ref="prev"/><name>hz3</name></decl>, <decl><type ref="prev"/><name>vt0</name></decl>, <decl><type ref="prev"/><name>vt1</name></decl>, <decl><type ref="prev"/><name>vt2</name></decl>, <decl><type ref="prev"/><name>vt3</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>LD_SH2</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>input0</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>input0</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>input1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>hz0</name></expr></argument>, <argument><expr><name>hz1</name></expr></argument>, <argument><expr><name>hz3</name></expr></argument>, <argument><expr><name>hz2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE4x4_SW_SW</name><argument_list>(<argument><expr><name>hz0</name></expr></argument>, <argument><expr><name>hz1</name></expr></argument>, <argument><expr><name>hz2</name></expr></argument>, <argument><expr><name>hz3</name></expr></argument>, <argument><expr><name>hz0</name></expr></argument>, <argument><expr><name>hz1</name></expr></argument>, <argument><expr><name>hz2</name></expr></argument>, <argument><expr><name>hz3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>hz0</name></expr></argument>, <argument><expr><name>hz1</name></expr></argument>, <argument><expr><name>hz2</name></expr></argument>, <argument><expr><name>hz3</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>vt0</name></expr></argument>, <argument><expr><name>vt1</name></expr></argument>, <argument><expr><name>vt3</name></expr></argument>, <argument><expr><name>vt2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>vt0</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>vt1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>vt2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>vt3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>vt0</name></expr></argument>, <argument><expr><name>vt1</name></expr></argument>, <argument><expr><name>vt2</name></expr></argument>, <argument><expr><name>vt3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>vt0</name></expr></argument>, <argument><expr><name>vt1</name></expr></argument>, <argument><expr><name>vt2</name></expr></argument>, <argument><expr><name>vt3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_dq_coeff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>vt0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_dq_coeff</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>vt1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_dq_coeff</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>vt2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_dq_coeff</name><index>[<expr><literal type="number">48</literal></expr>]</index></name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>vt3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_dq_coeff</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>vt0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_dq_coeff</name><index>[<expr><literal type="number">80</literal></expr>]</index></name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>vt1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_dq_coeff</name><index>[<expr><literal type="number">96</literal></expr>]</index></name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>vt2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_dq_coeff</name><index>[<expr><literal type="number">112</literal></expr>]</index></name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>vt3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_dq_coeff</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>vt0</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_dq_coeff</name><index>[<expr><literal type="number">144</literal></expr>]</index></name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>vt1</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_dq_coeff</name><index>[<expr><literal type="number">160</literal></expr>]</index></name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>vt2</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_dq_coeff</name><index>[<expr><literal type="number">176</literal></expr>]</index></name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>vt3</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_dq_coeff</name><index>[<expr><literal type="number">192</literal></expr>]</index></name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>vt0</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_dq_coeff</name><index>[<expr><literal type="number">208</literal></expr>]</index></name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>vt1</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_dq_coeff</name><index>[<expr><literal type="number">224</literal></expr>]</index></name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>vt2</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mb_dq_coeff</name><index>[<expr><literal type="number">240</literal></expr>]</index></name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>vt3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_idct_dc_add4y_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_vp8_idct_dc_add_msa</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_vp8_idct_dc_add_msa</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_vp8_idct_dc_add_msa</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_vp8_idct_dc_add_msa</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_idct_dc_add4uv_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_vp8_idct_dc_add_msa</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_vp8_idct_dc_add_msa</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_vp8_idct_dc_add_msa</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_vp8_idct_dc_add_msa</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
