<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mips\iirfilter_mips.c">





















































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/iirfilter.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_MIPS32R6</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>HAVE_MIPS64R6</name></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>FFIIRFilterCoeffs</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>gain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>cx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>cy</name></decl>;</decl_stmt>
}</block></struct></type> <name>FFIIRFilterCoeffs</name>;</typedef>

<typedef>typedef <type><struct>struct <name>FFIIRFilterState</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>FFIIRFilterState</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>iir_filter_flt_mips</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>FFIIRFilterCoeffs</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>FFIIRFilterState</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>sstep</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src0</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst0</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>in</name> <init>= <expr><operator>*</operator><name>src0</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>gain</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>cy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>cy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>dst0</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>in</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>cx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>+=</operator> <name>sstep</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>+=</operator> <name>dstep</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src0</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst0</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>four</name> <init>= <expr><literal type="number">4.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>six</name> <init>= <expr><literal type="number">6.0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>, <decl><type ref="prev"/><name>in4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>, <decl><type ref="prev"/><name>res4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>cy</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>cy</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>gain</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>gain</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>src0_0</name> <init>= <expr><name><name>src0</name><index>[<expr><literal type="number">0</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>src0_1</name> <init>= <expr><name><name>src0</name><index>[<expr><name>sstep</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>src0_2</name> <init>= <expr><name><name>src0</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>sstep</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>src0_3</name> <init>= <expr><name><name>src0</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>sstep</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
"lwc1 $f0, 0(%[cy]) \n\t"
"lwc1 $f4, 0(%[x]) \n\t"
"lwc1 $f5, 4(%[x]) \n\t"
"lwc1 $f6, 8(%[x]) \n\t"
"lwc1 $f7, 12(%[x]) \n\t"
"mul.s %[in1], %[src0_0], %[gain] \n\t"
"mul.s %[in2], %[src0_1], %[gain] \n\t"
"mul.s %[in3], %[src0_2], %[gain] \n\t"
"mul.s %[in4], %[src0_3], %[gain] \n\t"
"lwc1 $f1, 4(%[cy]) \n\t"
"madd.s %[in1], %[in1], $f0, $f4 \n\t"
"madd.s %[in2], %[in2], $f0, $f5 \n\t"
"madd.s %[in3], %[in3], $f0, $f6 \n\t"
"madd.s %[in4], %[in4], $f0, $f7 \n\t"
"lwc1 $f2, 8(%[cy]) \n\t"
"madd.s %[in1], %[in1], $f1, $f5 \n\t"
"madd.s %[in2], %[in2], $f1, $f6 \n\t"
"madd.s %[in3], %[in3], $f1, $f7 \n\t"
"lwc1 $f3, 12(%[cy]) \n\t"
"add.s $f8, $f5, $f7 \n\t"
"madd.s %[in1], %[in1], $f2, $f6 \n\t"
"madd.s %[in2], %[in2], $f2, $f7 \n\t"
"mul.s $f9, $f6, %[six] \n\t"
"mul.s $f10, $f7, %[six] \n\t"
"madd.s %[in1], %[in1], $f3, $f7 \n\t"
"madd.s %[in2], %[in2], $f3, %[in1] \n\t"
"madd.s %[in3], %[in3], $f2, %[in1] \n\t"
"madd.s %[in4], %[in4], $f1, %[in1] \n\t"
"add.s %[res1], $f4, %[in1] \n\t"
"swc1 %[in1], 0(%[x]) \n\t"
"add.s $f0, $f6, %[in1] \n\t"
"madd.s %[in3], %[in3], $f3, %[in2] \n\t"
"madd.s %[in4], %[in4], $f2, %[in2] \n\t"
"add.s %[res2], $f5, %[in2] \n\t"
"madd.s %[res1], %[res1], $f8, %[four] \n\t"
"add.s $f8, $f7, %[in2] \n\t"
"swc1 %[in2], 4(%[x]) \n\t"
"madd.s %[in4], %[in4], $f3, %[in3] \n\t"
"add.s %[res3], $f6, %[in3] \n\t"
"add.s %[res1], %[res1], $f9 \n\t"
"madd.s %[res2], %[res2], $f0, %[four] \n\t"
"swc1 %[in3], 8(%[x]) \n\t"
"add.s %[res4], $f7, %[in4] \n\t"
"madd.s %[res3], %[res3], $f8, %[four] \n\t"
"swc1 %[in4], 12(%[x]) \n\t"
"add.s %[res2], %[res2], $f10 \n\t"
"add.s $f8, %[in1], %[in3] \n\t"
"madd.s %[res3], %[res3], %[in1], %[six] \n\t"
"madd.s %[res4], %[res4], $f8, %[four] \n\t"
"madd.s %[res4], %[res4], %[in2], %[six] \n\t"

: [in1]"=&amp;f"(in1), [in2]"=&amp;f"(in2),
[in3]"=&amp;f"(in3), [in4]"=&amp;f"(in4),
[res1]"=&amp;f"(res1), [res2]"=&amp;f"(res2),
[res3]"=&amp;f"(res3), [res4]"=&amp;f"(res4)
: [src0_0]"f"(src0_0), [src0_1]"f"(src0_1),
[src0_2]"f"(src0_2), [src0_3]"f"(src0_3),
[gain]"f"(gain), [x]"r"(x), [cy]"r"(cy),
[four]"f"(four), [six]"f"(six)
: "$f0", "$f1", "$f2", "$f3",
"$f4", "$f5", "$f6", "$f7",
"$f8", "$f9", "$f10",
"memory"
);</asm>

<expr_stmt><expr><name><name>dst0</name><index>[<expr><literal type="number">0</literal></expr> ]</index></name> <operator>=</operator> <name>res1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst0</name><index>[<expr><name>sstep</name></expr> ]</index></name> <operator>=</operator> <name>res2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst0</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>sstep</name></expr>]</index></name> <operator>=</operator> <name>res3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst0</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>sstep</name></expr>]</index></name> <operator>=</operator> <name>res4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>sstep</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>dstep</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src0</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst0</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>in</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><name>in</name> <operator>=</operator> <operator>*</operator><name>src0</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>gain</name></name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>order</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>cy</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>in</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>x</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>order</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>cx</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>order</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>j</name> <argument_list type="generic">&lt; <argument><expr><name><name>c</name><operator>-&gt;</operator><name>order</name></name></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>+=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>x</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>order</name></name> <operator>-</operator> <name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>cx</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>order</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>dst0</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>order</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>+=</operator> <name>sstep</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>+=</operator> <name>dstep</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type> <name>ff_iir_filter_init_mips</name><parameter_list>(<parameter><decl><type><name>FFIIRFilterContext</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_MIPS32R6</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>HAVE_MIPS64R6</name></expr></cpp:if>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>filter_flt</name></name> <operator>=</operator> <name>iir_filter_flt_mips</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
