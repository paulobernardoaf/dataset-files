<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mips\hpeldsp_msa.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/generic_macros_msa.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mips/hpeldsp_mips.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCKEV_AVG_ST_UB</name><parameter_list>(<parameter><type><name>in0</name></type></parameter>, <parameter><type><name>in1</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>pdst</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v16u8 tmp_m; tmp_m = (v16u8) __msa_pckev_b((v16i8) in0, (v16i8) in1); tmp_m = __msa_aver_u_b(tmp_m, (v16u8) dst); ST_UB(tmp_m, (pdst)); }</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCKEV_ST_SB4</name><parameter_list>(<parameter><type><name>in0</name></type></parameter>, <parameter><type><name>in1</name></type></parameter>, <parameter><type><name>in2</name></type></parameter>, <parameter><type><name>in3</name></type></parameter>, <parameter><type><name>in4</name></type></parameter>, <parameter><type><name>in5</name></type></parameter>, <parameter><type><name>in6</name></type></parameter>, <parameter><type><name>in7</name></type></parameter>, <parameter><type><name>pdst</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v16i8 tmp0_m, tmp1_m, tmp2_m, tmp3_m; uint8_t *pdst_m = (uint8_t *) (pdst); PCKEV_B4_SB(in0, in1, in2, in3, in4, in5, in6, in7, tmp0_m, tmp1_m, tmp2_m, tmp3_m); ST_SB4(tmp0_m, tmp1_m, tmp2_m, tmp3_m, pdst_m, stride); }</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCKEV_AVG_ST8x4_UB</name><parameter_list>(<parameter><type><name>in1</name></type></parameter>, <parameter><type><name>dst0</name></type></parameter>, <parameter><type><name>in2</name></type></parameter>, <parameter><type><name>dst1</name></type></parameter>, <parameter><type><name>in3</name></type></parameter>, <parameter><type><name>dst2</name></type></parameter>, <parameter><type><name>in4</name></type></parameter>, <parameter><type><name>dst3</name></type></parameter>, <parameter><type><name>pdst</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v16u8 tmp0_m, tmp1_m, tmp2_m, tmp3_m; uint8_t *pdst_m = (uint8_t *) (pdst); PCKEV_B2_UB(in2, in1, in4, in3, tmp0_m, tmp1_m); PCKEV_D2_UB(dst1, dst0, dst3, dst2, tmp2_m, tmp3_m); AVER_UB2_UB(tmp0_m, tmp2_m, tmp1_m, tmp3_m, tmp0_m, tmp1_m); ST_D4(tmp0_m, tmp1_m, 0, 1, 0, 1, pdst_m, stride); }</cpp:value></cpp:define>











<function><type><specifier>static</specifier> <name>void</name></type> <name>common_hz_bil_4w_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src0_sld1</name></decl>, <decl><type ref="prev"/><name>src1_sld1</name></decl>, <decl><type ref="prev"/><name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src0_sld1</name></expr></argument>, <argument><expr><name>src1_sld1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>src0_sld1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1_sld1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_hz_bil_8w_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src0_sld1</name></decl>, <decl><type ref="prev"/><name>src1_sld1</name></decl>, <decl><type ref="prev"/><name>src2_sld1</name></decl>, <decl><type ref="prev"/><name>src3_sld1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_SB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B4_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>src0_sld1</name></expr></argument>, <argument><expr><name>src1_sld1</name></expr></argument>, <argument><expr><name>src2_sld1</name></expr></argument>, <argument><expr><name>src3_sld1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_ST8x4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0_sld1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1_sld1</name></expr></argument>,
<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2_sld1</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3_sld1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_hz_bil_16w_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src8</name></decl>, <decl><type ref="prev"/><name>src9</name></decl>, <decl><type ref="prev"/><name>src10</name></decl>, <decl><type ref="prev"/><name>src11</name></decl>, <decl><type ref="prev"/><name>src12</name></decl>, <decl><type ref="prev"/><name>src13</name></decl>, <decl><type ref="prev"/><name>src14</name></decl>, <decl><type ref="prev"/><name>src15</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>,
<argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_ST16x4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_ST16x4_UB</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src15</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_hz_bil_no_rnd_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0_sld1</name></decl>, <decl><type ref="prev"/><name>src1_sld1</name></decl>, <decl><type ref="prev"/><name>src2_sld1</name></decl>, <decl><type ref="prev"/><name>src3_sld1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src4_sld1</name></decl>, <decl><type ref="prev"/><name>src5_sld1</name></decl>, <decl><type ref="prev"/><name>src6_sld1</name></decl>, <decl><type ref="prev"/><name>src7_sld1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_SB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B4_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>src0_sld1</name></expr></argument>, <argument><expr><name>src1_sld1</name></expr></argument>, <argument><expr><name>src2_sld1</name></expr></argument>, <argument><expr><name>src3_sld1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B4_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>src4_sld1</name></expr></argument>, <argument><expr><name>src5_sld1</name></expr></argument>, <argument><expr><name>src6_sld1</name></expr></argument>, <argument><expr><name>src7_sld1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVE_ST8x4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0_sld1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1_sld1</name></expr></argument>,
<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2_sld1</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3_sld1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVE_ST8x4_UB</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src4_sld1</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src5_sld1</name></expr></argument>,
<argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src6_sld1</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src7_sld1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_hz_bil_no_rnd_4x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src0_sld1</name></decl>, <decl><type ref="prev"/><name>src1_sld1</name></decl>, <decl><type ref="prev"/><name>src2_sld1</name></decl>, <decl><type ref="prev"/><name>src3_sld1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_SB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B4_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>src0_sld1</name></expr></argument>, <argument><expr><name>src1_sld1</name></expr></argument>, <argument><expr><name>src2_sld1</name></expr></argument>, <argument><expr><name>src3_sld1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVE_ST8x4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0_sld1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1_sld1</name></expr></argument>,
<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2_sld1</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3_sld1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_hz_bil_no_rnd_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>, <decl><type ref="prev"/><name>src8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src9</name></decl>, <decl><type ref="prev"/><name>src10</name></decl>, <decl><type ref="prev"/><name>src11</name></decl>, <decl><type ref="prev"/><name>src12</name></decl>, <decl><type ref="prev"/><name>src13</name></decl>, <decl><type ref="prev"/><name>src14</name></decl>, <decl><type ref="prev"/><name>src15</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>,
<argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVE_ST16x4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVE_ST16x4_UB</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src15</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVE_ST16x4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVE_ST16x4_UB</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src15</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_hz_bil_no_rnd_8x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>, <decl><type ref="prev"/><name>src8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src9</name></decl>, <decl><type ref="prev"/><name>src10</name></decl>, <decl><type ref="prev"/><name>src11</name></decl>, <decl><type ref="prev"/><name>src12</name></decl>, <decl><type ref="prev"/><name>src13</name></decl>, <decl><type ref="prev"/><name>src14</name></decl>, <decl><type ref="prev"/><name>src15</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>,
<argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVE_ST16x4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVE_ST16x4_UB</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src15</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_hz_bil_and_aver_dst_4w_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src0_sld1</name></decl>, <decl><type ref="prev"/><name>src1_sld1</name></decl>, <decl><type ref="prev"/><name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src0_sld1</name></expr></argument>, <argument><expr><name>src1_sld1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst1</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>src0_sld1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1_sld1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_hz_bil_and_aver_dst_8w_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src0_sld1</name></decl>, <decl><type ref="prev"/><name>src1_sld1</name></decl>, <decl><type ref="prev"/><name>src2_sld1</name></decl>, <decl><type ref="prev"/><name>src3_sld1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_SB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B4_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>src0_sld1</name></expr></argument>, <argument><expr><name>src1_sld1</name></expr></argument>, <argument><expr><name>src2_sld1</name></expr></argument>, <argument><expr><name>src3_sld1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_DST_ST8x4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0_sld1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1_sld1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2_sld1</name></expr></argument>,
<argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3_sld1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_hz_bil_and_aver_dst_16w_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>, <decl><type ref="prev"/><name>src8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src9</name></decl>, <decl><type ref="prev"/><name>src10</name></decl>, <decl><type ref="prev"/><name>src11</name></decl>, <decl><type ref="prev"/><name>src12</name></decl>, <decl><type ref="prev"/><name>src13</name></decl>, <decl><type ref="prev"/><name>src14</name></decl>, <decl><type ref="prev"/><name>src15</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>,
<argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_DST_ST16x4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_DST_ST16x4_UB</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src15</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_vt_bil_4w_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <name>src2</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_vt_bil_8w_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_ST8x4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <name>src4</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_vt_bil_16w_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>, <decl><type ref="prev"/><name>src8</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_ST16x4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_ST16x4_UB</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <name>src8</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_vt_bil_no_rnd_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>, <decl><type ref="prev"/><name>src8</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVE_ST8x4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVE_ST8x4_UB</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_vt_bil_no_rnd_4x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVE_ST8x4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_vt_bil_no_rnd_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>, <decl><type ref="prev"/><name>src8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src9</name></decl>, <decl><type ref="prev"/><name>src10</name></decl>, <decl><type ref="prev"/><name>src11</name></decl>, <decl><type ref="prev"/><name>src12</name></decl>, <decl><type ref="prev"/><name>src13</name></decl>, <decl><type ref="prev"/><name>src14</name></decl>, <decl><type ref="prev"/><name>src15</name></decl>, <decl><type ref="prev"/><name>src16</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>,
<argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src16</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVE_ST16x4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVE_ST16x4_UB</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVE_ST16x4_UB</name><argument_list>(<argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVE_ST16x4_UB</name><argument_list>(<argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src14</name></expr></argument>,
<argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src15</name></expr></argument>, <argument><expr><name>src15</name></expr></argument>, <argument><expr><name>src16</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_vt_bil_no_rnd_8x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>, <decl><type ref="prev"/><name>src8</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVE_ST16x4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVE_ST16x4_UB</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_vt_bil_and_aver_dst_4w_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst1</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>tmp1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <name>src2</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_vt_bil_and_aver_dst_8w_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_DST_ST8x4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <name>src4</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_vt_bil_and_aver_dst_16w_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>, <decl><type ref="prev"/><name>src8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>, <decl><type ref="prev"/><name>res4</name></decl>, <decl><type ref="prev"/><name>res5</name></decl>, <decl><type ref="prev"/><name>res6</name></decl>, <decl><type ref="prev"/><name>res7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>, <decl><type ref="prev"/><name>dst4</name></decl>, <decl><type ref="prev"/><name>dst5</name></decl>, <decl><type ref="prev"/><name>dst6</name></decl>, <decl><type ref="prev"/><name>dst7</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB4_UB</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>,
<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB4_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB4_UB</name><argument_list>(<argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>,
<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <name>src8</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_hv_bil_4w_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src0_sld1</name></decl>, <decl><type ref="prev"/><name>src1_sld1</name></decl>, <decl><type ref="prev"/><name>src2_sld1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>src2_r</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>add0</name></decl>, <decl><type ref="prev"/><name>add1</name></decl>, <decl><type ref="prev"/><name>add2</name></decl>, <decl><type ref="prev"/><name>sum0</name></decl>, <decl><type ref="prev"/><name>sum1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_SB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B3_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src0_sld1</name></expr></argument>,
<argument><expr><name>src1_sld1</name></expr></argument>, <argument><expr><name>src2_sld1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B3_UB</name><argument_list>(<argument><expr><name>src0_sld1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1_sld1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2_sld1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>,
<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>add0</name></expr></argument>, <argument><expr><name>add1</name></expr></argument>, <argument><expr><name>add2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>add0</name></expr></argument>, <argument><expr><name>add1</name></expr></argument>, <argument><expr><name>add1</name></expr></argument>, <argument><expr><name>add2</name></expr></argument>, <argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>sum1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H2_UH</name><argument_list>(<argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>sum1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>sum1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>sum0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>res</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <name>src2</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_hv_bil_8w_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0_sld1</name></decl>, <decl><type ref="prev"/><name>src1_sld1</name></decl>, <decl><type ref="prev"/><name>src2_sld1</name></decl>, <decl><type ref="prev"/><name>src3_sld1</name></decl>, <decl><type ref="prev"/><name>src4_sld1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>src2_r</name></decl>, <decl><type ref="prev"/><name>src3_r</name></decl>, <decl><type ref="prev"/><name>src4_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>add0</name></decl>, <decl><type ref="prev"/><name>add1</name></decl>, <decl><type ref="prev"/><name>add2</name></decl>, <decl><type ref="prev"/><name>add3</name></decl>, <decl><type ref="prev"/><name>add4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>sum0</name></decl>, <decl><type ref="prev"/><name>sum1</name></decl>, <decl><type ref="prev"/><name>sum2</name></decl>, <decl><type ref="prev"/><name>sum3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_SB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B3_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src0_sld1</name></expr></argument>,
<argument><expr><name>src1_sld1</name></expr></argument>, <argument><expr><name>src2_sld1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src3_sld1</name></expr></argument>, <argument><expr><name>src4_sld1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B3_UB</name><argument_list>(<argument><expr><name>src0_sld1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1_sld1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2_sld1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>,
<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B2_UB</name><argument_list>(<argument><expr><name>src3_sld1</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4_sld1</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>add0</name></expr></argument>, <argument><expr><name>add1</name></expr></argument>, <argument><expr><name>add2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB2_UH</name><argument_list>(<argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>add3</name></expr></argument>, <argument><expr><name>add4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>add0</name></expr></argument>, <argument><expr><name>add1</name></expr></argument>, <argument><expr><name>add1</name></expr></argument>, <argument><expr><name>add2</name></expr></argument>, <argument><expr><name>add2</name></expr></argument>, <argument><expr><name>add3</name></expr></argument>, <argument><expr><name>add3</name></expr></argument>, <argument><expr><name>add4</name></expr></argument>,
<argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>sum1</name></expr></argument>, <argument><expr><name>sum2</name></expr></argument>, <argument><expr><name>sum3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>sum1</name></expr></argument>, <argument><expr><name>sum2</name></expr></argument>, <argument><expr><name>sum3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_SB</name><argument_list>(<argument><expr><name>sum1</name></expr></argument>, <argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>sum3</name></expr></argument>, <argument><expr><name>sum2</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <name>src4</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_hv_bil_16w_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>, <decl><type ref="prev"/><name>src8</name></decl>, <decl><type ref="prev"/><name>src9</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src10</name></decl>, <decl><type ref="prev"/><name>src11</name></decl>, <decl><type ref="prev"/><name>src12</name></decl>, <decl><type ref="prev"/><name>src13</name></decl>, <decl><type ref="prev"/><name>src14</name></decl>, <decl><type ref="prev"/><name>src15</name></decl>, <decl><type ref="prev"/><name>src16</name></decl>, <decl><type ref="prev"/><name>src17</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>src2_r</name></decl>, <decl><type ref="prev"/><name>src3_r</name></decl>, <decl><type ref="prev"/><name>src4_r</name></decl>, <decl><type ref="prev"/><name>src5_r</name></decl>, <decl><type ref="prev"/><name>src6_r</name></decl>, <decl><type ref="prev"/><name>src7_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>src8_r</name></decl>, <decl><type ref="prev"/><name>src0_l</name></decl>, <decl><type ref="prev"/><name>src1_l</name></decl>, <decl><type ref="prev"/><name>src2_l</name></decl>, <decl><type ref="prev"/><name>src3_l</name></decl>, <decl><type ref="prev"/><name>src4_l</name></decl>, <decl><type ref="prev"/><name>src5_l</name></decl>, <decl><type ref="prev"/><name>src6_l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>src7_l</name></decl>, <decl><type ref="prev"/><name>src8_l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>sum0_r</name></decl>, <decl><type ref="prev"/><name>sum1_r</name></decl>, <decl><type ref="prev"/><name>sum2_r</name></decl>, <decl><type ref="prev"/><name>sum3_r</name></decl>, <decl><type ref="prev"/><name>sum4_r</name></decl>, <decl><type ref="prev"/><name>sum5_r</name></decl>, <decl><type ref="prev"/><name>sum6_r</name></decl>, <decl><type ref="prev"/><name>sum7_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>sum0_l</name></decl>, <decl><type ref="prev"/><name>sum1_l</name></decl>, <decl><type ref="prev"/><name>sum2_l</name></decl>, <decl><type ref="prev"/><name>sum3_l</name></decl>, <decl><type ref="prev"/><name>sum4_l</name></decl>, <decl><type ref="prev"/><name>sum5_l</name></decl>, <decl><type ref="prev"/><name>sum6_l</name></decl>, <decl><type ref="prev"/><name>sum7_l</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>,
<argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src15</name></expr></argument>, <argument><expr><name>src16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src17</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src4_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src15</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src6_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src16</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src17</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src8_r</name></expr></argument>, <argument><expr><name>src8_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>src8_r</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>src8_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src3_l</name></expr></argument>, <argument><expr><name>src4_l</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>, <argument><expr><name>src4_l</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src6_l</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>, <argument><expr><name>src8_l</name></expr></argument>, <argument><expr><name>src6_l</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>, <argument><expr><name>src8_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>,
<argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum1_r</name></expr></argument>, <argument><expr><name>sum2_r</name></expr></argument>, <argument><expr><name>sum3_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>src8_r</name></expr></argument>,
<argument><expr><name>sum4_r</name></expr></argument>, <argument><expr><name>sum5_r</name></expr></argument>, <argument><expr><name>sum6_r</name></expr></argument>, <argument><expr><name>sum7_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>, <argument><expr><name>src4_l</name></expr></argument>,
<argument><expr><name>sum0_l</name></expr></argument>, <argument><expr><name>sum1_l</name></expr></argument>, <argument><expr><name>sum2_l</name></expr></argument>, <argument><expr><name>sum3_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>src4_l</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>, <argument><expr><name>src6_l</name></expr></argument>, <argument><expr><name>src6_l</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>, <argument><expr><name>src8_l</name></expr></argument>,
<argument><expr><name>sum4_l</name></expr></argument>, <argument><expr><name>sum5_l</name></expr></argument>, <argument><expr><name>sum6_l</name></expr></argument>, <argument><expr><name>sum7_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum1_r</name></expr></argument>, <argument><expr><name>sum2_r</name></expr></argument>, <argument><expr><name>sum3_r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>sum4_r</name></expr></argument>, <argument><expr><name>sum5_r</name></expr></argument>, <argument><expr><name>sum6_r</name></expr></argument>, <argument><expr><name>sum7_r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>sum0_l</name></expr></argument>, <argument><expr><name>sum1_l</name></expr></argument>, <argument><expr><name>sum2_l</name></expr></argument>, <argument><expr><name>sum3_l</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>sum4_l</name></expr></argument>, <argument><expr><name>sum5_l</name></expr></argument>, <argument><expr><name>sum6_l</name></expr></argument>, <argument><expr><name>sum7_l</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_ST_SB4</name><argument_list>(<argument><expr><name>sum0_l</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum1_l</name></expr></argument>, <argument><expr><name>sum1_r</name></expr></argument>, <argument><expr><name>sum2_l</name></expr></argument>, <argument><expr><name>sum2_r</name></expr></argument>,
<argument><expr><name>sum3_l</name></expr></argument>, <argument><expr><name>sum3_r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_ST_SB4</name><argument_list>(<argument><expr><name>sum4_l</name></expr></argument>, <argument><expr><name>sum4_r</name></expr></argument>, <argument><expr><name>sum5_l</name></expr></argument>, <argument><expr><name>sum5_r</name></expr></argument>, <argument><expr><name>sum6_l</name></expr></argument>, <argument><expr><name>sum6_r</name></expr></argument>,
<argument><expr><name>sum7_l</name></expr></argument>, <argument><expr><name>sum7_r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_hv_bil_no_rnd_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>, <decl><type ref="prev"/><name>src8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0_sld1</name></decl>, <decl><type ref="prev"/><name>src1_sld1</name></decl>, <decl><type ref="prev"/><name>src2_sld1</name></decl>, <decl><type ref="prev"/><name>src3_sld1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src4_sld1</name></decl>, <decl><type ref="prev"/><name>src5_sld1</name></decl>, <decl><type ref="prev"/><name>src6_sld1</name></decl>, <decl><type ref="prev"/><name>src7_sld1</name></decl>, <decl><type ref="prev"/><name>src8_sld1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>src2_r</name></decl>, <decl><type ref="prev"/><name>src3_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>src4_r</name></decl>, <decl><type ref="prev"/><name>src5_r</name></decl>, <decl><type ref="prev"/><name>src6_r</name></decl>, <decl><type ref="prev"/><name>src7_r</name></decl>, <decl><type ref="prev"/><name>src8_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>add0</name></decl>, <decl><type ref="prev"/><name>add1</name></decl>, <decl><type ref="prev"/><name>add2</name></decl>, <decl><type ref="prev"/><name>add3</name></decl>, <decl><type ref="prev"/><name>add4</name></decl>, <decl><type ref="prev"/><name>add5</name></decl>, <decl><type ref="prev"/><name>add6</name></decl>, <decl><type ref="prev"/><name>add7</name></decl>, <decl><type ref="prev"/><name>add8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>sum0</name></decl>, <decl><type ref="prev"/><name>sum1</name></decl>, <decl><type ref="prev"/><name>sum2</name></decl>, <decl><type ref="prev"/><name>sum3</name></decl>, <decl><type ref="prev"/><name>sum4</name></decl>, <decl><type ref="prev"/><name>sum5</name></decl>, <decl><type ref="prev"/><name>sum6</name></decl>, <decl><type ref="prev"/><name>sum7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B4_UB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>src0_sld1</name></expr></argument>, <argument><expr><name>src1_sld1</name></expr></argument>, <argument><expr><name>src2_sld1</name></expr></argument>, <argument><expr><name>src3_sld1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B3_UB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src4_sld1</name></expr></argument>,
<argument><expr><name>src5_sld1</name></expr></argument>, <argument><expr><name>src6_sld1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src7_sld1</name></expr></argument>, <argument><expr><name>src8_sld1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B4_UH</name><argument_list>(<argument><expr><name>src0_sld1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1_sld1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2_sld1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3_sld1</name></expr></argument>,
<argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B3_UH</name><argument_list>(<argument><expr><name>src4_sld1</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5_sld1</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6_sld1</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>,
<argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B2_UH</name><argument_list>(<argument><expr><name>src7_sld1</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8_sld1</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>src8_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>add0</name></expr></argument>, <argument><expr><name>add1</name></expr></argument>, <argument><expr><name>add2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>add3</name></expr></argument>, <argument><expr><name>add4</name></expr></argument>, <argument><expr><name>add5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>src8_r</name></expr></argument>, <argument><expr><name>add6</name></expr></argument>, <argument><expr><name>add7</name></expr></argument>, <argument><expr><name>add8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum0</name> <operator>=</operator> <name>add0</name> <operator>+</operator> <name>add1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum1</name> <operator>=</operator> <name>add1</name> <operator>+</operator> <name>add2</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum2</name> <operator>=</operator> <name>add2</name> <operator>+</operator> <name>add3</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum3</name> <operator>=</operator> <name>add3</name> <operator>+</operator> <name>add4</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum4</name> <operator>=</operator> <name>add4</name> <operator>+</operator> <name>add5</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum5</name> <operator>=</operator> <name>add5</name> <operator>+</operator> <name>add6</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum6</name> <operator>=</operator> <name>add6</name> <operator>+</operator> <name>add7</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum7</name> <operator>=</operator> <name>add7</name> <operator>+</operator> <name>add8</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>sum1</name></expr></argument>, <argument><expr><name>sum2</name></expr></argument>, <argument><expr><name>sum3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>sum4</name></expr></argument>, <argument><expr><name>sum5</name></expr></argument>, <argument><expr><name>sum6</name></expr></argument>, <argument><expr><name>sum7</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_SB</name><argument_list>(<argument><expr><name>sum1</name></expr></argument>, <argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>sum3</name></expr></argument>, <argument><expr><name>sum2</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_SB</name><argument_list>(<argument><expr><name>sum5</name></expr></argument>, <argument><expr><name>sum4</name></expr></argument>, <argument><expr><name>sum7</name></expr></argument>, <argument><expr><name>sum6</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_hv_bil_no_rnd_4x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0_sld1</name></decl>, <decl><type ref="prev"/><name>src1_sld1</name></decl>, <decl><type ref="prev"/><name>src2_sld1</name></decl>, <decl><type ref="prev"/><name>src3_sld1</name></decl>, <decl><type ref="prev"/><name>src4_sld1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>src2_r</name></decl>, <decl><type ref="prev"/><name>src3_r</name></decl>, <decl><type ref="prev"/><name>src4_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>add0</name></decl>, <decl><type ref="prev"/><name>add1</name></decl>, <decl><type ref="prev"/><name>add2</name></decl>, <decl><type ref="prev"/><name>add3</name></decl>, <decl><type ref="prev"/><name>add4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>sum0</name></decl>, <decl><type ref="prev"/><name>sum1</name></decl>, <decl><type ref="prev"/><name>sum2</name></decl>, <decl><type ref="prev"/><name>sum3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_SB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src4</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B3_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src0_sld1</name></expr></argument>,
<argument><expr><name>src1_sld1</name></expr></argument>, <argument><expr><name>src2_sld1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src3_sld1</name></expr></argument>, <argument><expr><name>src4_sld1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B3_UH</name><argument_list>(<argument><expr><name>src0_sld1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1_sld1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2_sld1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>,
<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B2_UH</name><argument_list>(<argument><expr><name>src3_sld1</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4_sld1</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>add0</name></expr></argument>, <argument><expr><name>add1</name></expr></argument>, <argument><expr><name>add2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB2_UH</name><argument_list>(<argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>add3</name></expr></argument>, <argument><expr><name>add4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum0</name> <operator>=</operator> <name>add0</name> <operator>+</operator> <name>add1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum1</name> <operator>=</operator> <name>add1</name> <operator>+</operator> <name>add2</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum2</name> <operator>=</operator> <name>add2</name> <operator>+</operator> <name>add3</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum3</name> <operator>=</operator> <name>add3</name> <operator>+</operator> <name>add4</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>sum1</name></expr></argument>, <argument><expr><name>sum2</name></expr></argument>, <argument><expr><name>sum3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_SB</name><argument_list>(<argument><expr><name>sum1</name></expr></argument>, <argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>sum3</name></expr></argument>, <argument><expr><name>sum2</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_hv_bil_no_rnd_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>, <decl><type ref="prev"/><name>src8</name></decl>, <decl><type ref="prev"/><name>src9</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src10</name></decl>, <decl><type ref="prev"/><name>src11</name></decl>, <decl><type ref="prev"/><name>src12</name></decl>, <decl><type ref="prev"/><name>src13</name></decl>, <decl><type ref="prev"/><name>src14</name></decl>, <decl><type ref="prev"/><name>src15</name></decl>, <decl><type ref="prev"/><name>src16</name></decl>, <decl><type ref="prev"/><name>src17</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>src2_r</name></decl>, <decl><type ref="prev"/><name>src3_r</name></decl>, <decl><type ref="prev"/><name>src4_r</name></decl>, <decl><type ref="prev"/><name>src5_r</name></decl>, <decl><type ref="prev"/><name>src6_r</name></decl>, <decl><type ref="prev"/><name>src7_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>src8_r</name></decl>, <decl><type ref="prev"/><name>src0_l</name></decl>, <decl><type ref="prev"/><name>src1_l</name></decl>, <decl><type ref="prev"/><name>src2_l</name></decl>, <decl><type ref="prev"/><name>src3_l</name></decl>, <decl><type ref="prev"/><name>src4_l</name></decl>, <decl><type ref="prev"/><name>src5_l</name></decl>, <decl><type ref="prev"/><name>src6_l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>src7_l</name></decl>, <decl><type ref="prev"/><name>src8_l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>sum0_r</name></decl>, <decl><type ref="prev"/><name>sum1_r</name></decl>, <decl><type ref="prev"/><name>sum2_r</name></decl>, <decl><type ref="prev"/><name>sum3_r</name></decl>, <decl><type ref="prev"/><name>sum4_r</name></decl>, <decl><type ref="prev"/><name>sum5_r</name></decl>, <decl><type ref="prev"/><name>sum6_r</name></decl>, <decl><type ref="prev"/><name>sum7_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>sum0_l</name></decl>, <decl><type ref="prev"/><name>sum1_l</name></decl>, <decl><type ref="prev"/><name>sum2_l</name></decl>, <decl><type ref="prev"/><name>sum3_l</name></decl>, <decl><type ref="prev"/><name>sum4_l</name></decl>, <decl><type ref="prev"/><name>sum5_l</name></decl>, <decl><type ref="prev"/><name>sum6_l</name></decl>, <decl><type ref="prev"/><name>sum7_l</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>,
<argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src15</name></expr></argument>, <argument><expr><name>src16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src17</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src4_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src15</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src6_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src16</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src17</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src8_r</name></expr></argument>, <argument><expr><name>src8_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>src8_r</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>src8_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src3_l</name></expr></argument>, <argument><expr><name>src4_l</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>, <argument><expr><name>src4_l</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src6_l</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>, <argument><expr><name>src8_l</name></expr></argument>, <argument><expr><name>src6_l</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>, <argument><expr><name>src8_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum0_r</name> <operator>=</operator> <name>src0_r</name> <operator>+</operator> <name>src1_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum1_r</name> <operator>=</operator> <name>src1_r</name> <operator>+</operator> <name>src2_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum2_r</name> <operator>=</operator> <name>src2_r</name> <operator>+</operator> <name>src3_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum3_r</name> <operator>=</operator> <name>src3_r</name> <operator>+</operator> <name>src4_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum4_r</name> <operator>=</operator> <name>src4_r</name> <operator>+</operator> <name>src5_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum5_r</name> <operator>=</operator> <name>src5_r</name> <operator>+</operator> <name>src6_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum6_r</name> <operator>=</operator> <name>src6_r</name> <operator>+</operator> <name>src7_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum7_r</name> <operator>=</operator> <name>src7_r</name> <operator>+</operator> <name>src8_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum0_l</name> <operator>=</operator> <name>src0_l</name> <operator>+</operator> <name>src1_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum1_l</name> <operator>=</operator> <name>src1_l</name> <operator>+</operator> <name>src2_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum2_l</name> <operator>=</operator> <name>src2_l</name> <operator>+</operator> <name>src3_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum3_l</name> <operator>=</operator> <name>src3_l</name> <operator>+</operator> <name>src4_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum4_l</name> <operator>=</operator> <name>src4_l</name> <operator>+</operator> <name>src5_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum5_l</name> <operator>=</operator> <name>src5_l</name> <operator>+</operator> <name>src6_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum6_l</name> <operator>=</operator> <name>src6_l</name> <operator>+</operator> <name>src7_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum7_l</name> <operator>=</operator> <name>src7_l</name> <operator>+</operator> <name>src8_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum1_r</name></expr></argument>, <argument><expr><name>sum2_r</name></expr></argument>, <argument><expr><name>sum3_r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>sum4_r</name></expr></argument>, <argument><expr><name>sum5_r</name></expr></argument>, <argument><expr><name>sum6_r</name></expr></argument>, <argument><expr><name>sum7_r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>sum0_l</name></expr></argument>, <argument><expr><name>sum1_l</name></expr></argument>, <argument><expr><name>sum2_l</name></expr></argument>, <argument><expr><name>sum3_l</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>sum4_l</name></expr></argument>, <argument><expr><name>sum5_l</name></expr></argument>, <argument><expr><name>sum6_l</name></expr></argument>, <argument><expr><name>sum7_l</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_ST_SB4</name><argument_list>(<argument><expr><name>sum0_l</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum1_l</name></expr></argument>, <argument><expr><name>sum1_r</name></expr></argument>,
<argument><expr><name>sum2_l</name></expr></argument>, <argument><expr><name>sum2_r</name></expr></argument>, <argument><expr><name>sum3_l</name></expr></argument>, <argument><expr><name>sum3_r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>,
<argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src15</name></expr></argument>, <argument><expr><name>src16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src17</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_ST_SB4</name><argument_list>(<argument><expr><name>sum4_l</name></expr></argument>, <argument><expr><name>sum4_r</name></expr></argument>, <argument><expr><name>sum5_l</name></expr></argument>, <argument><expr><name>sum5_r</name></expr></argument>,
<argument><expr><name>sum6_l</name></expr></argument>, <argument><expr><name>sum6_r</name></expr></argument>, <argument><expr><name>sum7_l</name></expr></argument>, <argument><expr><name>sum7_r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src4_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src15</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src6_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src16</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src17</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src8_r</name></expr></argument>, <argument><expr><name>src8_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>src8_r</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>src8_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src3_l</name></expr></argument>, <argument><expr><name>src4_l</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>, <argument><expr><name>src4_l</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src6_l</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>, <argument><expr><name>src8_l</name></expr></argument>, <argument><expr><name>src6_l</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>, <argument><expr><name>src8_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum0_r</name> <operator>=</operator> <name>src0_r</name> <operator>+</operator> <name>src1_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum1_r</name> <operator>=</operator> <name>src1_r</name> <operator>+</operator> <name>src2_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum2_r</name> <operator>=</operator> <name>src2_r</name> <operator>+</operator> <name>src3_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum3_r</name> <operator>=</operator> <name>src3_r</name> <operator>+</operator> <name>src4_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum4_r</name> <operator>=</operator> <name>src4_r</name> <operator>+</operator> <name>src5_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum5_r</name> <operator>=</operator> <name>src5_r</name> <operator>+</operator> <name>src6_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum6_r</name> <operator>=</operator> <name>src6_r</name> <operator>+</operator> <name>src7_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum7_r</name> <operator>=</operator> <name>src7_r</name> <operator>+</operator> <name>src8_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum0_l</name> <operator>=</operator> <name>src0_l</name> <operator>+</operator> <name>src1_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum1_l</name> <operator>=</operator> <name>src1_l</name> <operator>+</operator> <name>src2_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum2_l</name> <operator>=</operator> <name>src2_l</name> <operator>+</operator> <name>src3_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum3_l</name> <operator>=</operator> <name>src3_l</name> <operator>+</operator> <name>src4_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum4_l</name> <operator>=</operator> <name>src4_l</name> <operator>+</operator> <name>src5_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum5_l</name> <operator>=</operator> <name>src5_l</name> <operator>+</operator> <name>src6_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum6_l</name> <operator>=</operator> <name>src6_l</name> <operator>+</operator> <name>src7_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum7_l</name> <operator>=</operator> <name>src7_l</name> <operator>+</operator> <name>src8_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum1_r</name></expr></argument>, <argument><expr><name>sum2_r</name></expr></argument>, <argument><expr><name>sum3_r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>sum4_r</name></expr></argument>, <argument><expr><name>sum5_r</name></expr></argument>, <argument><expr><name>sum6_r</name></expr></argument>, <argument><expr><name>sum7_r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>sum0_l</name></expr></argument>, <argument><expr><name>sum1_l</name></expr></argument>, <argument><expr><name>sum2_l</name></expr></argument>, <argument><expr><name>sum3_l</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>sum4_l</name></expr></argument>, <argument><expr><name>sum5_l</name></expr></argument>, <argument><expr><name>sum6_l</name></expr></argument>, <argument><expr><name>sum7_l</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_ST_SB4</name><argument_list>(<argument><expr><name>sum0_l</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum1_l</name></expr></argument>, <argument><expr><name>sum1_r</name></expr></argument>,
<argument><expr><name>sum2_l</name></expr></argument>, <argument><expr><name>sum2_r</name></expr></argument>, <argument><expr><name>sum3_l</name></expr></argument>, <argument><expr><name>sum3_r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_ST_SB4</name><argument_list>(<argument><expr><name>sum4_l</name></expr></argument>, <argument><expr><name>sum4_r</name></expr></argument>, <argument><expr><name>sum5_l</name></expr></argument>, <argument><expr><name>sum5_r</name></expr></argument>,
<argument><expr><name>sum6_l</name></expr></argument>, <argument><expr><name>sum6_r</name></expr></argument>, <argument><expr><name>sum7_l</name></expr></argument>, <argument><expr><name>sum7_r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_hv_bil_no_rnd_8x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>, <decl><type ref="prev"/><name>src8</name></decl>, <decl><type ref="prev"/><name>src9</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src10</name></decl>, <decl><type ref="prev"/><name>src11</name></decl>, <decl><type ref="prev"/><name>src12</name></decl>, <decl><type ref="prev"/><name>src13</name></decl>, <decl><type ref="prev"/><name>src14</name></decl>, <decl><type ref="prev"/><name>src15</name></decl>, <decl><type ref="prev"/><name>src16</name></decl>, <decl><type ref="prev"/><name>src17</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>src2_r</name></decl>, <decl><type ref="prev"/><name>src3_r</name></decl>, <decl><type ref="prev"/><name>src4_r</name></decl>, <decl><type ref="prev"/><name>src5_r</name></decl>, <decl><type ref="prev"/><name>src6_r</name></decl>, <decl><type ref="prev"/><name>src7_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>src8_r</name></decl>, <decl><type ref="prev"/><name>src0_l</name></decl>, <decl><type ref="prev"/><name>src1_l</name></decl>, <decl><type ref="prev"/><name>src2_l</name></decl>, <decl><type ref="prev"/><name>src3_l</name></decl>, <decl><type ref="prev"/><name>src4_l</name></decl>, <decl><type ref="prev"/><name>src5_l</name></decl>, <decl><type ref="prev"/><name>src6_l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>src7_l</name></decl>, <decl><type ref="prev"/><name>src8_l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>sum0_r</name></decl>, <decl><type ref="prev"/><name>sum1_r</name></decl>, <decl><type ref="prev"/><name>sum2_r</name></decl>, <decl><type ref="prev"/><name>sum3_r</name></decl>, <decl><type ref="prev"/><name>sum4_r</name></decl>, <decl><type ref="prev"/><name>sum5_r</name></decl>, <decl><type ref="prev"/><name>sum6_r</name></decl>, <decl><type ref="prev"/><name>sum7_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>sum0_l</name></decl>, <decl><type ref="prev"/><name>sum1_l</name></decl>, <decl><type ref="prev"/><name>sum2_l</name></decl>, <decl><type ref="prev"/><name>sum3_l</name></decl>, <decl><type ref="prev"/><name>sum4_l</name></decl>, <decl><type ref="prev"/><name>sum5_l</name></decl>, <decl><type ref="prev"/><name>sum6_l</name></decl>, <decl><type ref="prev"/><name>sum7_l</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>,
<argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src15</name></expr></argument>, <argument><expr><name>src16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src17</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src4_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src15</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src6_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src16</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>src17</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src8_r</name></expr></argument>, <argument><expr><name>src8_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>src8_r</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>src8_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src3_l</name></expr></argument>, <argument><expr><name>src4_l</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>, <argument><expr><name>src4_l</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src6_l</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>, <argument><expr><name>src8_l</name></expr></argument>, <argument><expr><name>src6_l</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>, <argument><expr><name>src8_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum0_r</name> <operator>=</operator> <name>src0_r</name> <operator>+</operator> <name>src1_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum1_r</name> <operator>=</operator> <name>src1_r</name> <operator>+</operator> <name>src2_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum2_r</name> <operator>=</operator> <name>src2_r</name> <operator>+</operator> <name>src3_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum3_r</name> <operator>=</operator> <name>src3_r</name> <operator>+</operator> <name>src4_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum4_r</name> <operator>=</operator> <name>src4_r</name> <operator>+</operator> <name>src5_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum5_r</name> <operator>=</operator> <name>src5_r</name> <operator>+</operator> <name>src6_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum6_r</name> <operator>=</operator> <name>src6_r</name> <operator>+</operator> <name>src7_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum7_r</name> <operator>=</operator> <name>src7_r</name> <operator>+</operator> <name>src8_r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum0_l</name> <operator>=</operator> <name>src0_l</name> <operator>+</operator> <name>src1_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum1_l</name> <operator>=</operator> <name>src1_l</name> <operator>+</operator> <name>src2_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum2_l</name> <operator>=</operator> <name>src2_l</name> <operator>+</operator> <name>src3_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum3_l</name> <operator>=</operator> <name>src3_l</name> <operator>+</operator> <name>src4_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum4_l</name> <operator>=</operator> <name>src4_l</name> <operator>+</operator> <name>src5_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum5_l</name> <operator>=</operator> <name>src5_l</name> <operator>+</operator> <name>src6_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum6_l</name> <operator>=</operator> <name>src6_l</name> <operator>+</operator> <name>src7_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sum7_l</name> <operator>=</operator> <name>src7_l</name> <operator>+</operator> <name>src8_l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum1_r</name></expr></argument>, <argument><expr><name>sum2_r</name></expr></argument>, <argument><expr><name>sum3_r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>sum4_r</name></expr></argument>, <argument><expr><name>sum5_r</name></expr></argument>, <argument><expr><name>sum6_r</name></expr></argument>, <argument><expr><name>sum7_r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>sum0_l</name></expr></argument>, <argument><expr><name>sum1_l</name></expr></argument>, <argument><expr><name>sum2_l</name></expr></argument>, <argument><expr><name>sum3_l</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>sum4_l</name></expr></argument>, <argument><expr><name>sum5_l</name></expr></argument>, <argument><expr><name>sum6_l</name></expr></argument>, <argument><expr><name>sum7_l</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_ST_SB4</name><argument_list>(<argument><expr><name>sum0_l</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum1_l</name></expr></argument>, <argument><expr><name>sum1_r</name></expr></argument>,
<argument><expr><name>sum2_l</name></expr></argument>, <argument><expr><name>sum2_r</name></expr></argument>, <argument><expr><name>sum3_l</name></expr></argument>, <argument><expr><name>sum3_r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_ST_SB4</name><argument_list>(<argument><expr><name>sum4_l</name></expr></argument>, <argument><expr><name>sum4_r</name></expr></argument>, <argument><expr><name>sum5_l</name></expr></argument>, <argument><expr><name>sum5_r</name></expr></argument>,
<argument><expr><name>sum6_l</name></expr></argument>, <argument><expr><name>sum6_r</name></expr></argument>, <argument><expr><name>sum7_l</name></expr></argument>, <argument><expr><name>sum7_r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_hv_bil_and_aver_dst_4w_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src0_sld1</name></decl>, <decl><type ref="prev"/><name>src1_sld1</name></decl>, <decl><type ref="prev"/><name>src2_sld1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>src2_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>add0</name></decl>, <decl><type ref="prev"/><name>add1</name></decl>, <decl><type ref="prev"/><name>add2</name></decl>, <decl><type ref="prev"/><name>sum0</name></decl>, <decl><type ref="prev"/><name>sum1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_SB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B3_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src0_sld1</name></expr></argument>,
<argument><expr><name>src1_sld1</name></expr></argument>, <argument><expr><name>src2_sld1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B3_UB</name><argument_list>(<argument><expr><name>src0_sld1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1_sld1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2_sld1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>,
<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>add0</name></expr></argument>, <argument><expr><name>add1</name></expr></argument>, <argument><expr><name>add2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>add0</name></expr></argument>, <argument><expr><name>add1</name></expr></argument>, <argument><expr><name>add1</name></expr></argument>, <argument><expr><name>add2</name></expr></argument>, <argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>sum1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H2_UH</name><argument_list>(<argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>sum1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>sum1</name></expr></argument>, <argument><expr><name>sum1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <name>src2</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_hv_bil_and_aver_dst_8w_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0_sld1</name></decl>, <decl><type ref="prev"/><name>src1_sld1</name></decl>, <decl><type ref="prev"/><name>src2_sld1</name></decl>, <decl><type ref="prev"/><name>src3_sld1</name></decl>, <decl><type ref="prev"/><name>src4_sld1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>src2_r</name></decl>, <decl><type ref="prev"/><name>src3_r</name></decl>, <decl><type ref="prev"/><name>src4_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>add0</name></decl>, <decl><type ref="prev"/><name>add1</name></decl>, <decl><type ref="prev"/><name>add2</name></decl>, <decl><type ref="prev"/><name>add3</name></decl>, <decl><type ref="prev"/><name>add4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>sum0</name></decl>, <decl><type ref="prev"/><name>sum1</name></decl>, <decl><type ref="prev"/><name>sum2</name></decl>, <decl><type ref="prev"/><name>sum3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_SB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B3_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src0_sld1</name></expr></argument>,
<argument><expr><name>src1_sld1</name></expr></argument>, <argument><expr><name>src2_sld1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_SB</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src3_sld1</name></expr></argument>, <argument><expr><name>src4_sld1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B3_UB</name><argument_list>(<argument><expr><name>src0_sld1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1_sld1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2_sld1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>,
<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B2_UB</name><argument_list>(<argument><expr><name>src3_sld1</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4_sld1</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>add0</name></expr></argument>, <argument><expr><name>add1</name></expr></argument>, <argument><expr><name>add2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB2_UH</name><argument_list>(<argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>add3</name></expr></argument>, <argument><expr><name>add4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>add0</name></expr></argument>, <argument><expr><name>add1</name></expr></argument>, <argument><expr><name>add1</name></expr></argument>, <argument><expr><name>add2</name></expr></argument>, <argument><expr><name>add2</name></expr></argument>, <argument><expr><name>add3</name></expr></argument>, <argument><expr><name>add3</name></expr></argument>, <argument><expr><name>add4</name></expr></argument>,
<argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>sum1</name></expr></argument>, <argument><expr><name>sum2</name></expr></argument>, <argument><expr><name>sum3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>sum1</name></expr></argument>, <argument><expr><name>sum2</name></expr></argument>, <argument><expr><name>sum3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_AVG_ST8x4_UB</name><argument_list>(<argument><expr><name>sum0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>sum1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>,
<argument><expr><name>sum2</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>sum3</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <name>src4</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>common_hv_bil_and_aver_dst_16w_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>, <decl><type ref="prev"/><name>src8</name></decl>, <decl><type ref="prev"/><name>src9</name></decl>, <decl><type ref="prev"/><name>src10</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src11</name></decl>, <decl><type ref="prev"/><name>src12</name></decl>, <decl><type ref="prev"/><name>src13</name></decl>, <decl><type ref="prev"/><name>src14</name></decl>, <decl><type ref="prev"/><name>src15</name></decl>, <decl><type ref="prev"/><name>src16</name></decl>, <decl><type ref="prev"/><name>src17</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>src2_r</name></decl>, <decl><type ref="prev"/><name>src3_r</name></decl>, <decl><type ref="prev"/><name>src4_r</name></decl>, <decl><type ref="prev"/><name>src5_r</name></decl>, <decl><type ref="prev"/><name>src6_r</name></decl>, <decl><type ref="prev"/><name>src7_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src8_r</name></decl>, <decl><type ref="prev"/><name>src0_l</name></decl>, <decl><type ref="prev"/><name>src1_l</name></decl>, <decl><type ref="prev"/><name>src2_l</name></decl>, <decl><type ref="prev"/><name>src3_l</name></decl>, <decl><type ref="prev"/><name>src4_l</name></decl>, <decl><type ref="prev"/><name>src5_l</name></decl>, <decl><type ref="prev"/><name>src6_l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src7_l</name></decl>, <decl><type ref="prev"/><name>src8_l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>, <decl><type ref="prev"/><name>dst4</name></decl>, <decl><type ref="prev"/><name>dst5</name></decl>, <decl><type ref="prev"/><name>dst6</name></decl>, <decl><type ref="prev"/><name>dst7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>sum0_r</name></decl>, <decl><type ref="prev"/><name>sum1_r</name></decl>, <decl><type ref="prev"/><name>sum2_r</name></decl>, <decl><type ref="prev"/><name>sum3_r</name></decl>, <decl><type ref="prev"/><name>sum4_r</name></decl>, <decl><type ref="prev"/><name>sum5_r</name></decl>, <decl><type ref="prev"/><name>sum6_r</name></decl>, <decl><type ref="prev"/><name>sum7_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>sum0_l</name></decl>, <decl><type ref="prev"/><name>sum1_l</name></decl>, <decl><type ref="prev"/><name>sum2_l</name></decl>, <decl><type ref="prev"/><name>sum3_l</name></decl>, <decl><type ref="prev"/><name>sum4_l</name></decl>, <decl><type ref="prev"/><name>sum5_l</name></decl>, <decl><type ref="prev"/><name>sum6_l</name></decl>, <decl><type ref="prev"/><name>sum7_l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>add0</name></decl>, <decl><type ref="prev"/><name>add1</name></decl>, <decl><type ref="prev"/><name>add2</name></decl>, <decl><type ref="prev"/><name>add3</name></decl>, <decl><type ref="prev"/><name>add4</name></decl>, <decl><type ref="prev"/><name>add5</name></decl>, <decl><type ref="prev"/><name>add6</name></decl>, <decl><type ref="prev"/><name>add7</name></decl>, <decl><type ref="prev"/><name>add8</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>,
<argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src15</name></expr></argument>, <argument><expr><name>src16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src17</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_UB</name><argument_list>(<argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UB</name><argument_list>(<argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UB</name><argument_list>(<argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UB</name><argument_list>(<argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src3_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UB</name><argument_list>(<argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src4_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UB</name><argument_list>(<argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UB</name><argument_list>(<argument><expr><name>src15</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src6_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UB</name><argument_list>(<argument><expr><name>src16</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UB</name><argument_list>(<argument><expr><name>src17</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src8_r</name></expr></argument>, <argument><expr><name>src8_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>, <argument><expr><name>add0</name></expr></argument>, <argument><expr><name>add1</name></expr></argument>, <argument><expr><name>add2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src3_r</name></expr></argument>, <argument><expr><name>src4_r</name></expr></argument>, <argument><expr><name>src5_r</name></expr></argument>, <argument><expr><name>add3</name></expr></argument>, <argument><expr><name>add4</name></expr></argument>, <argument><expr><name>add5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src6_r</name></expr></argument>, <argument><expr><name>src7_r</name></expr></argument>, <argument><expr><name>src8_r</name></expr></argument>, <argument><expr><name>add6</name></expr></argument>, <argument><expr><name>add7</name></expr></argument>, <argument><expr><name>add8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>add0</name></expr></argument>, <argument><expr><name>add1</name></expr></argument>, <argument><expr><name>add1</name></expr></argument>, <argument><expr><name>add2</name></expr></argument>, <argument><expr><name>add2</name></expr></argument>, <argument><expr><name>add3</name></expr></argument>, <argument><expr><name>add3</name></expr></argument>, <argument><expr><name>add4</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum1_r</name></expr></argument>,
<argument><expr><name>sum2_r</name></expr></argument>, <argument><expr><name>sum3_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>add4</name></expr></argument>, <argument><expr><name>add5</name></expr></argument>, <argument><expr><name>add5</name></expr></argument>, <argument><expr><name>add6</name></expr></argument>, <argument><expr><name>add6</name></expr></argument>, <argument><expr><name>add7</name></expr></argument>, <argument><expr><name>add7</name></expr></argument>, <argument><expr><name>add8</name></expr></argument>, <argument><expr><name>sum4_r</name></expr></argument>, <argument><expr><name>sum5_r</name></expr></argument>,
<argument><expr><name>sum6_r</name></expr></argument>, <argument><expr><name>sum7_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>, <argument><expr><name>src2_l</name></expr></argument>, <argument><expr><name>add0</name></expr></argument>, <argument><expr><name>add1</name></expr></argument>, <argument><expr><name>add2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src3_l</name></expr></argument>, <argument><expr><name>src4_l</name></expr></argument>, <argument><expr><name>src5_l</name></expr></argument>, <argument><expr><name>add3</name></expr></argument>, <argument><expr><name>add4</name></expr></argument>, <argument><expr><name>add5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB3_UH</name><argument_list>(<argument><expr><name>src6_l</name></expr></argument>, <argument><expr><name>src7_l</name></expr></argument>, <argument><expr><name>src8_l</name></expr></argument>, <argument><expr><name>add6</name></expr></argument>, <argument><expr><name>add7</name></expr></argument>, <argument><expr><name>add8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>add0</name></expr></argument>, <argument><expr><name>add1</name></expr></argument>, <argument><expr><name>add1</name></expr></argument>, <argument><expr><name>add2</name></expr></argument>, <argument><expr><name>add2</name></expr></argument>, <argument><expr><name>add3</name></expr></argument>, <argument><expr><name>add3</name></expr></argument>, <argument><expr><name>add4</name></expr></argument>, <argument><expr><name>sum0_l</name></expr></argument>, <argument><expr><name>sum1_l</name></expr></argument>,
<argument><expr><name>sum2_l</name></expr></argument>, <argument><expr><name>sum3_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>add4</name></expr></argument>, <argument><expr><name>add5</name></expr></argument>, <argument><expr><name>add5</name></expr></argument>, <argument><expr><name>add6</name></expr></argument>, <argument><expr><name>add6</name></expr></argument>, <argument><expr><name>add7</name></expr></argument>, <argument><expr><name>add7</name></expr></argument>, <argument><expr><name>add8</name></expr></argument>, <argument><expr><name>sum4_l</name></expr></argument>, <argument><expr><name>sum5_l</name></expr></argument>,
<argument><expr><name>sum6_l</name></expr></argument>, <argument><expr><name>sum7_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>sum1_r</name></expr></argument>, <argument><expr><name>sum2_r</name></expr></argument>, <argument><expr><name>sum3_r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>sum4_r</name></expr></argument>, <argument><expr><name>sum5_r</name></expr></argument>, <argument><expr><name>sum6_r</name></expr></argument>, <argument><expr><name>sum7_r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>sum0_l</name></expr></argument>, <argument><expr><name>sum1_l</name></expr></argument>, <argument><expr><name>sum2_l</name></expr></argument>, <argument><expr><name>sum3_l</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>sum4_l</name></expr></argument>, <argument><expr><name>sum5_l</name></expr></argument>, <argument><expr><name>sum6_l</name></expr></argument>, <argument><expr><name>sum7_l</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_AVG_ST_UB</name><argument_list>(<argument><expr><name>sum0_l</name></expr></argument>, <argument><expr><name>sum0_r</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_AVG_ST_UB</name><argument_list>(<argument><expr><name>sum1_l</name></expr></argument>, <argument><expr><name>sum1_r</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_AVG_ST_UB</name><argument_list>(<argument><expr><name>sum2_l</name></expr></argument>, <argument><expr><name>sum2_r</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_AVG_ST_UB</name><argument_list>(<argument><expr><name>sum3_l</name></expr></argument>, <argument><expr><name>sum3_r</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_AVG_ST_UB</name><argument_list>(<argument><expr><name>sum4_l</name></expr></argument>, <argument><expr><name>sum4_r</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_AVG_ST_UB</name><argument_list>(<argument><expr><name>sum5_l</name></expr></argument>, <argument><expr><name>sum5_r</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_AVG_ST_UB</name><argument_list>(<argument><expr><name>sum6_l</name></expr></argument>, <argument><expr><name>sum6_r</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_AVG_ST_UB</name><argument_list>(<argument><expr><name>sum7_l</name></expr></argument>, <argument><expr><name>sum7_r</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_width8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>, <decl><type ref="prev"/><name>out3</name></decl>, <decl><type ref="prev"/><name>out4</name></decl>, <decl><type ref="prev"/><name>out5</name></decl>, <decl><type ref="prev"/><name>out6</name></decl>, <decl><type ref="prev"/><name>out7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>height</name> <operator>%</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>/</operator> <literal type="number">12</literal><operator>)</operator></expr>;</init> <condition><expr><name>cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>,
<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out4</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out5</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out6</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out7</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>out4</name></expr></argument>, <argument><expr><name>out5</name></expr></argument>, <argument><expr><name>out6</name></expr></argument>, <argument><expr><name>out7</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>height</name> <operator>%</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <name>height</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>,
<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out4</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out5</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out6</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out7</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>out4</name></expr></argument>, <argument><expr><name>out5</name></expr></argument>, <argument><expr><name>out6</name></expr></argument>, <argument><expr><name>out7</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>height</name> <operator>%</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr>;</init> <condition><expr><name>cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>height</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_16multx8mult_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>cnt</name></decl>, <decl><type ref="prev"/><name>loop_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <operator>(</operator><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</init> <condition><expr><name>cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>src_tmp</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_tmp</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src_tmp</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>,
<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_tmp</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>,
<argument><expr><name>dst_tmp</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_tmp</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_width16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>height</name> <operator>%</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>/</operator> <literal type="number">12</literal><operator>)</operator></expr>;</init> <condition><expr><name>cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>,
<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB4</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>height</name> <operator>%</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>copy_16multx8mult_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>height</name> <operator>%</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB4</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_width4_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>, <decl><type ref="prev"/><name>out3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <operator>(</operator><name>height</name> <operator>%</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr>;</init> <condition><expr><name>cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_UB4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>,
<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <operator>(</operator><name>height</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_width8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>, <decl><type ref="prev"/><name>out3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr>;</init> <condition><expr><name>cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_UB4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>,
<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_width16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>, <decl><type ref="prev"/><name>dst4</name></decl>, <decl><type ref="prev"/><name>dst5</name></decl>, <decl><type ref="prev"/><name>dst6</name></decl>, <decl><type ref="prev"/><name>dst7</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>;</init> <condition><expr><name>cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_UB4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>,
<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB4_UB</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>,
<argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>copy_width16_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels16_x2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>common_hz_bil_16w_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels16_y2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>common_vt_bil_16w_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels16_xy2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>common_hv_bil_16w_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>copy_width8_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels8_x2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>common_hz_bil_8w_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels8_y2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>common_vt_bil_8w_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels8_xy2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>common_hv_bil_8w_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels4_x2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>common_hz_bil_4w_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels4_y2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>common_vt_bil_4w_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels4_xy2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>common_hv_bil_4w_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_no_rnd_pixels16_x2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>common_hz_bil_no_rnd_16x16_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>common_hz_bil_no_rnd_8x16_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_no_rnd_pixels16_y2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>common_vt_bil_no_rnd_16x16_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>common_vt_bil_no_rnd_8x16_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_no_rnd_pixels16_xy2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>common_hv_bil_no_rnd_16x16_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>common_hv_bil_no_rnd_8x16_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_no_rnd_pixels8_x2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>common_hz_bil_no_rnd_8x8_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>common_hz_bil_no_rnd_4x8_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_no_rnd_pixels8_y2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>common_vt_bil_no_rnd_8x8_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>common_vt_bil_no_rnd_4x8_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_no_rnd_pixels8_xy2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>common_hv_bil_no_rnd_8x8_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>common_hv_bil_no_rnd_4x8_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avg_width16_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels16_x2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>common_hz_bil_and_aver_dst_16w_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels16_y2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>common_vt_bil_and_aver_dst_16w_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels16_xy2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>common_hv_bil_and_aver_dst_16w_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avg_width8_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels8_x2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>common_hz_bil_and_aver_dst_8w_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels8_y2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>common_vt_bil_and_aver_dst_8w_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels8_xy2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>common_hv_bil_and_aver_dst_8w_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avg_width4_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels4_x2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>common_hz_bil_and_aver_dst_4w_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels4_y2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>common_vt_bil_and_aver_dst_4w_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_pixels4_xy2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>common_hv_bil_and_aver_dst_4w_msa</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
