<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mips\h264chroma_mmi.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264chroma_mips.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"constants.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/mmiutils.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>ff_put_h264_chroma_mc8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>A</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>C</name></decl>, <decl><type ref="prev"/><name>D</name></decl>, <decl><type ref="prev"/><name>E</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>||</operator> <name>y</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier> (
"1: \n\t"
MMI_ULDC1(%[ftmp0], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
MMI_ULDC1(%[ftmp1], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
MMI_ULDC1(%[ftmp2], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
MMI_ULDC1(%[ftmp3], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[stride] \n\t"

"addi %[h], %[h], -0x04 \n\t"

MMI_SDC1(%[ftmp0], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
MMI_SDC1(%[ftmp1], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
MMI_SDC1(%[ftmp2], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
MMI_SDC1(%[ftmp3], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
"bnez %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),
[h]"+&amp;r"(h)
: [stride]"r"((mips_reg)stride)
: "memory"
);</asm>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>&amp;&amp;</operator> <name>y</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>D</name> <operator>=</operator> <name>x</name> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>B</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name>C</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <literal type="number">64</literal> <operator>-</operator> <name>D</name> <operator>-</operator> <name>B</name> <operator>-</operator> <name>C</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"dli %[tmp0], 0x06 \n\t"
"pshufh %[A], %[A], %[ftmp0] \n\t"
"pshufh %[B], %[B], %[ftmp0] \n\t"
"mtc1 %[tmp0], %[ftmp9] \n\t"
"pshufh %[C], %[C], %[ftmp0] \n\t"
"pshufh %[D], %[D], %[ftmp0] \n\t"

"1: \n\t"
MMI_ULDC1(%[ftmp1], %[src], 0x00)
MMI_ULDC1(%[ftmp2], %[src], 0x01)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
MMI_ULDC1(%[ftmp3], %[src], 0x00)
MMI_ULDC1(%[ftmp4], %[src], 0x01)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
MMI_ULDC1(%[ftmp10], %[src], 0x00)
MMI_ULDC1(%[ftmp11], %[src], 0x01)
"addi %[h], %[h], -0x02 \n\t"

"punpcklbh %[ftmp5], %[ftmp1], %[ftmp0] \n\t"
"punpckhbh %[ftmp6], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp7], %[ftmp2], %[ftmp0] \n\t"
"punpckhbh %[ftmp8], %[ftmp2], %[ftmp0] \n\t"
"pmullh %[ftmp5], %[ftmp5], %[A] \n\t"
"pmullh %[ftmp7], %[ftmp7], %[B] \n\t"
"paddh %[ftmp1], %[ftmp5], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[A] \n\t"
"pmullh %[ftmp8], %[ftmp8], %[B] \n\t"
"paddh %[ftmp2], %[ftmp6], %[ftmp8] \n\t"
"punpcklbh %[ftmp5], %[ftmp3], %[ftmp0] \n\t"
"punpckhbh %[ftmp6], %[ftmp3], %[ftmp0] \n\t"
"punpcklbh %[ftmp7], %[ftmp4], %[ftmp0] \n\t"
"punpckhbh %[ftmp8], %[ftmp4], %[ftmp0] \n\t"
"pmullh %[ftmp5], %[ftmp5], %[C] \n\t"
"pmullh %[ftmp7], %[ftmp7], %[D] \n\t"
"paddh %[ftmp5], %[ftmp5], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[C] \n\t"
"pmullh %[ftmp8], %[ftmp8], %[D] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ftmp5] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ftmp6] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ff_pw_32] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ff_pw_32] \n\t"
"psrlh %[ftmp1], %[ftmp1], %[ftmp9] \n\t"
"psrlh %[ftmp2], %[ftmp2], %[ftmp9] \n\t"
"packushb %[ftmp1], %[ftmp1], %[ftmp2] \n\t"

"punpcklbh %[ftmp5], %[ftmp3], %[ftmp0] \n\t"
"punpckhbh %[ftmp6], %[ftmp3], %[ftmp0] \n\t"
"punpcklbh %[ftmp7], %[ftmp4], %[ftmp0] \n\t"
"punpckhbh %[ftmp8], %[ftmp4], %[ftmp0] \n\t"
"pmullh %[ftmp5], %[ftmp5], %[A] \n\t"
"pmullh %[ftmp7], %[ftmp7], %[B] \n\t"
"paddh %[ftmp3], %[ftmp5], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[A] \n\t"
"pmullh %[ftmp8], %[ftmp8], %[B] \n\t"
"paddh %[ftmp4], %[ftmp6], %[ftmp8] \n\t"
"punpcklbh %[ftmp5], %[ftmp10], %[ftmp0] \n\t"
"punpckhbh %[ftmp6], %[ftmp10], %[ftmp0] \n\t"
"punpcklbh %[ftmp7], %[ftmp11], %[ftmp0] \n\t"
"punpckhbh %[ftmp8], %[ftmp11], %[ftmp0] \n\t"
"pmullh %[ftmp5], %[ftmp5], %[C] \n\t"
"pmullh %[ftmp7], %[ftmp7], %[D] \n\t"
"paddh %[ftmp5], %[ftmp5], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[C] \n\t"
"pmullh %[ftmp8], %[ftmp8], %[D] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp5] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ftmp6] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ff_pw_32] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ff_pw_32] \n\t"
"psrlh %[ftmp3], %[ftmp3], %[ftmp9] \n\t"
"psrlh %[ftmp4], %[ftmp4], %[ftmp9] \n\t"
"packushb %[ftmp3], %[ftmp3], %[ftmp4] \n\t"

MMI_SDC1(%[ftmp1], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
MMI_SDC1(%[ftmp3], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
"bnez %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[ftmp10]"=&amp;f"(ftmp[10]), [ftmp11]"=&amp;f"(ftmp[11]),
[tmp0]"=&amp;r"(tmp[0]),
[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),
[h]"+&amp;r"(h)
: [stride]"r"((mips_reg)stride),[ff_pw_32]"f"(ff_pw_32),
[A]"f"(A), [B]"f"(B),
[C]"f"(C), [D]"f"(D)
: "memory"
);</asm>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>E</name> <operator>=</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <literal type="number">64</literal> <operator>-</operator> <name>E</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"dli %[tmp0], 0x06 \n\t"
"pshufh %[A], %[A], %[ftmp0] \n\t"
"pshufh %[E], %[E], %[ftmp0] \n\t"
"mtc1 %[tmp0], %[ftmp7] \n\t"

"1: \n\t"
MMI_ULDC1(%[ftmp1], %[src], 0x00)
MMI_ULDC1(%[ftmp2], %[src], 0x01)
"addi %[h], %[h], -0x01 \n\t"
PTR_ADDU "%[src], %[src], %[stride] \n\t"

"punpcklbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t"
"punpckhbh %[ftmp4], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp5], %[ftmp2], %[ftmp0] \n\t"
"punpckhbh %[ftmp6], %[ftmp2], %[ftmp0] \n\t"
"pmullh %[ftmp3], %[ftmp3], %[A] \n\t"
"pmullh %[ftmp5], %[ftmp5], %[E] \n\t"
"paddh %[ftmp1], %[ftmp3], %[ftmp5] \n\t"
"pmullh %[ftmp4], %[ftmp4], %[A] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[E] \n\t"
"paddh %[ftmp2], %[ftmp4], %[ftmp6] \n\t"

"paddh %[ftmp1], %[ftmp1], %[ff_pw_32] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ff_pw_32] \n\t"
"psrlh %[ftmp1], %[ftmp1], %[ftmp7] \n\t"
"psrlh %[ftmp2], %[ftmp2], %[ftmp7] \n\t"
"packushb %[ftmp1], %[ftmp1], %[ftmp2] \n\t"
MMI_SDC1(%[ftmp1], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
"bnez %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[tmp0]"=&amp;r"(tmp[0]),
[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),
[h]"+&amp;r"(h)
: [stride]"r"((mips_reg)stride),
[ff_pw_32]"f"(ff_pw_32),
[A]"f"(A), [E]"f"(E)
: "memory"
);</asm>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>E</name> <operator>=</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <literal type="number">64</literal> <operator>-</operator> <name>E</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"dli %[tmp0], 0x06 \n\t"
"pshufh %[A], %[A], %[ftmp0] \n\t"
"pshufh %[E], %[E], %[ftmp0] \n\t"
"mtc1 %[tmp0], %[ftmp7] \n\t"

"1: \n\t"
MMI_ULDC1(%[ftmp1], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
MMI_ULDC1(%[ftmp2], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
MMI_ULDC1(%[ftmp8], %[src], 0x00)
"addi %[h], %[h], -0x02 \n\t"

"punpcklbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t"
"punpckhbh %[ftmp4], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp5], %[ftmp2], %[ftmp0] \n\t"
"punpckhbh %[ftmp6], %[ftmp2], %[ftmp0] \n\t"
"pmullh %[ftmp3], %[ftmp3], %[A] \n\t"
"pmullh %[ftmp5], %[ftmp5], %[E] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp5] \n\t"
"pmullh %[ftmp4], %[ftmp4], %[A] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[E] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ftmp6] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ff_pw_32] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ff_pw_32] \n\t"
"psrlh %[ftmp3], %[ftmp3], %[ftmp7] \n\t"
"psrlh %[ftmp4], %[ftmp4], %[ftmp7] \n\t"
"packushb %[ftmp1], %[ftmp3], %[ftmp4] \n\t"

"punpcklbh %[ftmp3], %[ftmp2], %[ftmp0] \n\t"
"punpckhbh %[ftmp4], %[ftmp2], %[ftmp0] \n\t"
"punpcklbh %[ftmp5], %[ftmp8], %[ftmp0] \n\t"
"punpckhbh %[ftmp6], %[ftmp8], %[ftmp0] \n\t"
"pmullh %[ftmp3], %[ftmp3], %[A] \n\t"
"pmullh %[ftmp5], %[ftmp5], %[E] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp5] \n\t"
"pmullh %[ftmp4], %[ftmp4], %[A] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[E] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ftmp6] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ff_pw_32] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ff_pw_32] \n\t"
"psrlh %[ftmp3], %[ftmp3], %[ftmp7] \n\t"
"psrlh %[ftmp4], %[ftmp4], %[ftmp7] \n\t"
"packushb %[ftmp2], %[ftmp3], %[ftmp4] \n\t"

MMI_SDC1(%[ftmp1], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
MMI_SDC1(%[ftmp2], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
"bnez %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [tmp0]"=&amp;r"(tmp[0]),
[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),
[h]"+&amp;r"(h)
: [stride]"r"((mips_reg)stride),
[ff_pw_32]"f"(ff_pw_32),
[A]"f"(A), [E]"f"(E)
: "memory"
);</asm>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_chroma_mc8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>A</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>C</name></decl>, <decl><type ref="prev"/><name>D</name></decl>, <decl><type ref="prev"/><name>E</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>||</operator> <name>y</name><operator>)</operator></expr>)</condition><block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier> (
"1: \n\t"
MMI_ULDC1(%[ftmp0], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
MMI_ULDC1(%[ftmp1], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
MMI_LDC1(%[ftmp2], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
MMI_LDC1(%[ftmp3], %[dst], 0x00)
PTR_SUBU "%[dst], %[dst], %[stride] \n\t"
"pavgb %[ftmp0], %[ftmp0], %[ftmp2] \n\t"
"pavgb %[ftmp1], %[ftmp1], %[ftmp3] \n\t"
MMI_SDC1(%[ftmp0], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
MMI_SDC1(%[ftmp1], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
"addi %[h], %[h], -0x02 \n\t"
"bnez %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),
[h]"+&amp;r"(h)
: [stride]"r"((mips_reg)stride)
: "memory"
);</asm>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>&amp;&amp;</operator> <name>y</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>D</name> <operator>=</operator> <name>x</name> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>B</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name>C</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <literal type="number">64</literal> <operator>-</operator> <name>D</name> <operator>-</operator> <name>B</name> <operator>-</operator> <name>C</name></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier> (
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"dli %[tmp0], 0x06 \n\t"
"pshufh %[A], %[A], %[ftmp0] \n\t"
"pshufh %[B], %[B], %[ftmp0] \n\t"
"mtc1 %[tmp0], %[ftmp9] \n\t"
"pshufh %[C], %[C], %[ftmp0] \n\t"
"pshufh %[D], %[D], %[ftmp0] \n\t"

"1: \n\t"
MMI_ULDC1(%[ftmp1], %[src], 0x00)
MMI_ULDC1(%[ftmp2], %[src], 0x01)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
MMI_ULDC1(%[ftmp3], %[src], 0x00)
MMI_ULDC1(%[ftmp4], %[src], 0x01)
"addi %[h], %[h], -0x01 \n\t"

"punpcklbh %[ftmp5], %[ftmp1], %[ftmp0] \n\t"
"punpckhbh %[ftmp6], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp7], %[ftmp2], %[ftmp0] \n\t"
"punpckhbh %[ftmp8], %[ftmp2], %[ftmp0] \n\t"
"pmullh %[ftmp5], %[ftmp5], %[A] \n\t"
"pmullh %[ftmp7], %[ftmp7], %[B] \n\t"
"paddh %[ftmp1], %[ftmp5], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[A] \n\t"
"pmullh %[ftmp8], %[ftmp8], %[B] \n\t"
"paddh %[ftmp2], %[ftmp6], %[ftmp8] \n\t"

"punpcklbh %[ftmp5], %[ftmp3], %[ftmp0] \n\t"
"punpckhbh %[ftmp6], %[ftmp3], %[ftmp0] \n\t"
"punpcklbh %[ftmp7], %[ftmp4], %[ftmp0] \n\t"
"punpckhbh %[ftmp8], %[ftmp4], %[ftmp0] \n\t"
"pmullh %[ftmp5], %[ftmp5], %[C] \n\t"
"pmullh %[ftmp7], %[ftmp7], %[D] \n\t"
"paddh %[ftmp3], %[ftmp5], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[C] \n\t"
"pmullh %[ftmp8], %[ftmp8], %[D] \n\t"
"paddh %[ftmp4], %[ftmp6], %[ftmp8] \n\t"

"paddh %[ftmp1], %[ftmp1], %[ftmp3] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ftmp4] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ff_pw_32] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ff_pw_32] \n\t"
"psrlh %[ftmp1], %[ftmp1], %[ftmp9] \n\t"
"psrlh %[ftmp2], %[ftmp2], %[ftmp9] \n\t"
"packushb %[ftmp1], %[ftmp1], %[ftmp2] \n\t"
MMI_LDC1(%[ftmp2], %[dst], 0x00)
"pavgb %[ftmp1], %[ftmp1], %[ftmp2] \n\t"
MMI_SDC1(%[ftmp1], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
"bnez %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[tmp0]"=&amp;r"(tmp[0]),
[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),
[h]"+&amp;r"(h)
: [stride]"r"((mips_reg)stride),[ff_pw_32]"f"(ff_pw_32),
[A]"f"(A), [B]"f"(B),
[C]"f"(C), [D]"f"(D)
: "memory"
);</asm>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>E</name> <operator>=</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <literal type="number">64</literal> <operator>-</operator> <name>E</name></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier> (
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"dli %[tmp0], 0x06 \n\t"
"pshufh %[A], %[A], %[ftmp0] \n\t"
"pshufh %[E], %[E], %[ftmp0] \n\t"
"mtc1 %[tmp0], %[ftmp7] \n\t"

"1: \n\t"
MMI_ULDC1(%[ftmp1], %[src], 0x00)
MMI_ULDC1(%[ftmp2], %[src], 0x01)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
"addi %[h], %[h], -0x01 \n\t"

"punpcklbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t"
"punpckhbh %[ftmp4], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp5], %[ftmp2], %[ftmp0] \n\t"
"punpckhbh %[ftmp6], %[ftmp2], %[ftmp0] \n\t"
"pmullh %[ftmp3], %[ftmp3], %[A] \n\t"
"pmullh %[ftmp5], %[ftmp5], %[E] \n\t"
"paddh %[ftmp1], %[ftmp3], %[ftmp5] \n\t"
"pmullh %[ftmp4], %[ftmp4], %[A] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[E] \n\t"
"paddh %[ftmp2], %[ftmp4], %[ftmp6] \n\t"

"paddh %[ftmp1], %[ftmp1], %[ff_pw_32] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ff_pw_32] \n\t"
"psrlh %[ftmp1], %[ftmp1], %[ftmp7] \n\t"
"psrlh %[ftmp2], %[ftmp2], %[ftmp7] \n\t"
"packushb %[ftmp1], %[ftmp1], %[ftmp2] \n\t"
MMI_LDC1(%[ftmp2], %[dst], 0x00)
"pavgb %[ftmp1], %[ftmp1], %[ftmp2] \n\t"
MMI_SDC1(%[ftmp1], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
"bnez %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[tmp0]"=&amp;r"(tmp[0]),
[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),
[h]"+&amp;r"(h)
: [stride]"r"((mips_reg)stride),
[ff_pw_32]"f"(ff_pw_32),
[A]"f"(A), [E]"f"(E)
: "memory"
);</asm>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>E</name> <operator>=</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <literal type="number">64</literal> <operator>-</operator> <name>E</name></expr>;</expr_stmt>
<asm>__asm__ <specifier>volatile</specifier> (
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"dli %[tmp0], 0x06 \n\t"
"pshufh %[A], %[A], %[ftmp0] \n\t"
"pshufh %[E], %[E], %[ftmp0] \n\t"
"mtc1 %[tmp0], %[ftmp7] \n\t"

"1: \n\t"
MMI_ULDC1(%[ftmp1], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
MMI_ULDC1(%[ftmp2], %[src], 0x00)
"addi %[h], %[h], -0x01 \n\t"

"punpcklbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t"
"punpckhbh %[ftmp4], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp5], %[ftmp2], %[ftmp0] \n\t"
"punpckhbh %[ftmp6], %[ftmp2], %[ftmp0] \n\t"
"pmullh %[ftmp3], %[ftmp3], %[A] \n\t"
"pmullh %[ftmp5], %[ftmp5], %[E] \n\t"
"paddh %[ftmp1], %[ftmp3], %[ftmp5] \n\t"
"pmullh %[ftmp4], %[ftmp4], %[A] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[E] \n\t"
"paddh %[ftmp2], %[ftmp4], %[ftmp6] \n\t"

"paddh %[ftmp1], %[ftmp1], %[ff_pw_32] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ff_pw_32] \n\t"
"psrlh %[ftmp1], %[ftmp1], %[ftmp7] \n\t"
"psrlh %[ftmp2], %[ftmp2], %[ftmp7] \n\t"
"packushb %[ftmp1], %[ftmp1], %[ftmp2] \n\t"
MMI_LDC1(%[ftmp2], %[dst], 0x00)
"pavgb %[ftmp1], %[ftmp1], %[ftmp2] \n\t"
MMI_SDC1(%[ftmp1], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
"bnez %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[tmp0]"=&amp;r"(tmp[0]),
[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),
[h]"+&amp;r"(h)
: [stride]"r"((mips_reg)stride),
[ff_pw_32]"f"(ff_pw_32),
[A]"f"(A), [E]"f"(E)
: "memory"
);</asm>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_chroma_mc4_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>A</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>B</name> <init>= <expr><name>x</name> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>C</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>D</name> <init>= <expr><name>x</name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>E</name> <init>= <expr><name>B</name> <operator>+</operator> <name>C</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mips_reg</name></type> <name><name>addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>D</name></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier> (
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"dli %[tmp0], 0x06 \n\t"
"pshufh %[A], %[A], %[ftmp0] \n\t"
"pshufh %[B], %[B], %[ftmp0] \n\t"
"mtc1 %[tmp0], %[ftmp7] \n\t"
"pshufh %[C], %[C], %[ftmp0] \n\t"
"pshufh %[D], %[D], %[ftmp0] \n\t"

"1: \n\t"
MMI_ULWC1(%[ftmp1], %[src], 0x00)
MMI_ULWC1(%[ftmp2], %[src], 0x01)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
MMI_ULWC1(%[ftmp3], %[src], 0x00)
MMI_ULWC1(%[ftmp4], %[src], 0x01)

"punpcklbh %[ftmp5], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp6], %[ftmp2], %[ftmp0] \n\t"
"pmullh %[ftmp5], %[ftmp5], %[A] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[B] \n\t"
"paddh %[ftmp1], %[ftmp5], %[ftmp6] \n\t"
"punpcklbh %[ftmp5], %[ftmp3], %[ftmp0] \n\t"
"punpcklbh %[ftmp6], %[ftmp4], %[ftmp0] \n\t"
"pmullh %[ftmp5], %[ftmp5], %[C] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[D] \n\t"
"paddh %[ftmp2], %[ftmp5], %[ftmp6] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ftmp2] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ff_pw_32] \n\t"
"psrlh %[ftmp1], %[ftmp1], %[ftmp7] \n\t"
"packushb %[ftmp1], %[ftmp1], %[ftmp0] \n\t"

"addi %[h], %[h], -0x01 \n\t"
MMI_SWC1(%[ftmp1], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
"bnez %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[tmp0]"=&amp;r"(tmp[0]),
RESTRICT_ASM_LOW32
[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),
[h]"+&amp;r"(h)
: [stride]"r"((mips_reg)stride),[ff_pw_32]"f"(ff_pw_32),
[A]"f"(A), [B]"f"(B),
[C]"f"(C), [D]"f"(D)
: "memory"
);</asm>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>E</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><name>C</name></expr> ?</condition><then> <expr><name>stride</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<asm>__asm__ <specifier>volatile</specifier> (
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"dli %[tmp0], 0x06 \n\t"
"pshufh %[A], %[A], %[ftmp0] \n\t"
"pshufh %[E], %[E], %[ftmp0] \n\t"
"mtc1 %[tmp0], %[ftmp5] \n\t"

"1: \n\t"
MMI_ULWC1(%[ftmp1], %[src], 0x00)
PTR_ADDU "%[addr0], %[src], %[step] \n\t"
MMI_ULWC1(%[ftmp2], %[addr0], 0x00)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
"addi %[h], %[h], -0x01 \n\t"
"punpcklbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp4], %[ftmp2], %[ftmp0] \n\t"
"pmullh %[ftmp3], %[ftmp3], %[A] \n\t"
"pmullh %[ftmp4], %[ftmp4], %[E] \n\t"
"paddh %[ftmp1], %[ftmp3], %[ftmp4] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ff_pw_32] \n\t"
"psrlh %[ftmp1], %[ftmp1], %[ftmp5] \n\t"
"packushb %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
MMI_SWC1(%[ftmp1], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
"bnez %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[tmp0]"=&amp;r"(tmp[0]),
RESTRICT_ASM_LOW32
[addr0]"=&amp;r"(addr[0]),
[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),
[h]"+&amp;r"(h)
: [stride]"r"((mips_reg)stride),[step]"r"((mips_reg)step),
[ff_pw_32]"f"(ff_pw_32),
[A]"f"(A), [E]"f"(E)
: "memory"
);</asm>
</block_content>}</block></if> <else>else <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier> (
"1: \n\t"
MMI_ULWC1(%[ftmp0], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
MMI_ULWC1(%[ftmp1], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
"addi %[h], %[h], -0x02 \n\t"
MMI_SWC1(%[ftmp0], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
MMI_SWC1(%[ftmp1], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
"bnez %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),
RESTRICT_ASM_LOW32
[h]"+&amp;r"(h)
: [stride]"r"((mips_reg)stride)
: "memory"
);</asm>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_chroma_mc4_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>A</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>B</name> <init>= <expr><name>x</name> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>C</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>D</name> <init>= <expr><name>x</name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>E</name> <init>= <expr><name>B</name> <operator>+</operator> <name>C</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mips_reg</name></type> <name><name>addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>D</name></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier> (
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"dli %[tmp0], 0x06 \n\t"
"pshufh %[A], %[A], %[ftmp0] \n\t"
"pshufh %[B], %[B], %[ftmp0] \n\t"
"mtc1 %[tmp0], %[ftmp7] \n\t"
"pshufh %[C], %[C], %[ftmp0] \n\t"
"pshufh %[D], %[D], %[ftmp0] \n\t"

"1: \n\t"
MMI_ULWC1(%[ftmp1], %[src], 0x00)
MMI_ULWC1(%[ftmp2], %[src], 0x01)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
MMI_ULWC1(%[ftmp3], %[src], 0x00)
MMI_ULWC1(%[ftmp4], %[src], 0x01)

"punpcklbh %[ftmp5], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp6], %[ftmp2], %[ftmp0] \n\t"
"pmullh %[ftmp5], %[ftmp5], %[A] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[B] \n\t"
"paddh %[ftmp1], %[ftmp5], %[ftmp6] \n\t"
"punpcklbh %[ftmp5], %[ftmp3], %[ftmp0] \n\t"
"punpcklbh %[ftmp6], %[ftmp4], %[ftmp0] \n\t"
"pmullh %[ftmp5], %[ftmp5], %[C] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[D] \n\t"
"paddh %[ftmp2], %[ftmp5], %[ftmp6] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ftmp2] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ff_pw_32] \n\t"
"psrlh %[ftmp1], %[ftmp1], %[ftmp7] \n\t"
"packushb %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
MMI_LWC1(%[ftmp2], %[dst], 0x00)
"pavgb %[ftmp1], %[ftmp1], %[ftmp2] \n\t"

"addi %[h], %[h], -0x01 \n\t"
MMI_SWC1(%[ftmp1], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
"bnez %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[tmp0]"=&amp;r"(tmp[0]),
RESTRICT_ASM_LOW32
[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),
[h]"+&amp;r"(h)
: [stride]"r"((mips_reg)stride),[ff_pw_32]"f"(ff_pw_32),
[A]"f"(A), [B]"f"(B),
[C]"f"(C), [D]"f"(D)
: "memory"
);</asm>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>E</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><name>C</name></expr> ?</condition><then> <expr><name>stride</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<asm>__asm__ <specifier>volatile</specifier> (
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"dli %[tmp0], 0x06 \n\t"
"pshufh %[A], %[A], %[ftmp0] \n\t"
"pshufh %[E], %[E], %[ftmp0] \n\t"
"mtc1 %[tmp0], %[ftmp5] \n\t"

"1: \n\t"
MMI_ULWC1(%[ftmp1], %[src], 0x00)
PTR_ADDU "%[addr0], %[src], %[step] \n\t"
MMI_ULWC1(%[ftmp2], %[addr0], 0x00)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
"addi %[h], %[h], -0x01 \n\t"
"punpcklbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp4], %[ftmp2], %[ftmp0] \n\t"
"pmullh %[ftmp3], %[ftmp3], %[A] \n\t"
"pmullh %[ftmp4], %[ftmp4], %[E] \n\t"
"paddh %[ftmp1], %[ftmp3], %[ftmp4] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ff_pw_32] \n\t"
"psrlh %[ftmp1], %[ftmp1], %[ftmp5] \n\t"
"packushb %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
MMI_LWC1(%[ftmp2], %[dst], 0x00)
"pavgb %[ftmp1], %[ftmp1], %[ftmp2] \n\t"
MMI_SWC1(%[ftmp1], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
"bnez %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[tmp0]"=&amp;r"(tmp[0]),
RESTRICT_ASM_LOW32
[addr0]"=&amp;r"(addr[0]),
[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),
[h]"+&amp;r"(h)
: [stride]"r"((mips_reg)stride),[step]"r"((mips_reg)step),
[ff_pw_32]"f"(ff_pw_32),
[A]"f"(A), [E]"f"(E)
: "memory"
);</asm>
</block_content>}</block></if> <else>else <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier> (
"1: \n\t"
MMI_ULWC1(%[ftmp0], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
MMI_ULWC1(%[ftmp1], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
"addi %[h], %[h], -0x02 \n\t"
MMI_LWC1(%[ftmp2], %[dst], 0x00)
"pavgb %[ftmp0], %[ftmp0], %[ftmp2] \n\t"
MMI_SWC1(%[ftmp0], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
MMI_LWC1(%[ftmp3], %[dst], 0x00)
"pavgb %[ftmp1], %[ftmp1], %[ftmp3] \n\t"
MMI_SWC1(%[ftmp1], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
"bnez %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),
RESTRICT_ASM_LOW32
[h]"+&amp;r"(h)
: [stride]"r"((mips_reg)stride)
: "memory"
);</asm>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
