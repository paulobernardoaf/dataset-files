<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mips\vp9_idct_msa.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/vp9dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/generic_macros_msa.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9dsp_mips.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP9_DCT_CONST_BITS</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND_POWER_OF_TWO</name><parameter_list>(<parameter><type><name>value</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((value) + (1 &lt;&lt; ((n) - 1))) &gt;&gt; (n))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_1_64</name> <init>= <expr><literal type="number">16364</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_2_64</name> <init>= <expr><literal type="number">16305</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_3_64</name> <init>= <expr><literal type="number">16207</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_4_64</name> <init>= <expr><literal type="number">16069</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_5_64</name> <init>= <expr><literal type="number">15893</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_6_64</name> <init>= <expr><literal type="number">15679</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_7_64</name> <init>= <expr><literal type="number">15426</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_8_64</name> <init>= <expr><literal type="number">15137</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_9_64</name> <init>= <expr><literal type="number">14811</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_10_64</name> <init>= <expr><literal type="number">14449</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_11_64</name> <init>= <expr><literal type="number">14053</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_12_64</name> <init>= <expr><literal type="number">13623</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_13_64</name> <init>= <expr><literal type="number">13160</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_14_64</name> <init>= <expr><literal type="number">12665</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_15_64</name> <init>= <expr><literal type="number">12140</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_16_64</name> <init>= <expr><literal type="number">11585</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_17_64</name> <init>= <expr><literal type="number">11003</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_18_64</name> <init>= <expr><literal type="number">10394</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_19_64</name> <init>= <expr><literal type="number">9760</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_20_64</name> <init>= <expr><literal type="number">9102</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_21_64</name> <init>= <expr><literal type="number">8423</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_22_64</name> <init>= <expr><literal type="number">7723</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_23_64</name> <init>= <expr><literal type="number">7005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_24_64</name> <init>= <expr><literal type="number">6270</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_25_64</name> <init>= <expr><literal type="number">5520</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_26_64</name> <init>= <expr><literal type="number">4756</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_27_64</name> <init>= <expr><literal type="number">3981</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_28_64</name> <init>= <expr><literal type="number">3196</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_29_64</name> <init>= <expr><literal type="number">2404</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_30_64</name> <init>= <expr><literal type="number">1606</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>cospi_31_64</name> <init>= <expr><literal type="number">804</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>sinpi_1_9</name> <init>= <expr><literal type="number">5283</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>sinpi_2_9</name> <init>= <expr><literal type="number">9929</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>sinpi_3_9</name> <init>= <expr><literal type="number">13377</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name>sinpi_4_9</name> <init>= <expr><literal type="number">15212</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP9_DOTP_CONST_PAIR</name><parameter_list>(<parameter><type><name>reg0</name></type></parameter>, <parameter><type><name>reg1</name></type></parameter>, <parameter><type><name>cnst0</name></type></parameter>, <parameter><type><name>cnst1</name></type></parameter>, <parameter><type><name>out0</name></type></parameter>, <parameter><type><name>out1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v8i16 k0_m = __msa_fill_h(cnst0); v4i32 s0_m, s1_m, s2_m, s3_m; s0_m = (v4i32) __msa_fill_h(cnst1); k0_m = __msa_ilvev_h((v8i16) s0_m, k0_m); ILVRL_H2_SW((-reg1), reg0, s1_m, s0_m); ILVRL_H2_SW(reg0, reg1, s3_m, s2_m); DOTP_SH2_SW(s1_m, s0_m, k0_m, k0_m, s1_m, s0_m); SRARI_W2_SW(s1_m, s0_m, VP9_DCT_CONST_BITS); out0 = __msa_pckev_h((v8i16) s0_m, (v8i16) s1_m); DOTP_SH2_SW(s3_m, s2_m, k0_m, k0_m, s1_m, s0_m); SRARI_W2_SW(s1_m, s0_m, VP9_DCT_CONST_BITS); out1 = __msa_pckev_h((v8i16) s0_m, (v8i16) s1_m); }</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP9_DOT_ADD_SUB_SRARI_PCK</name><parameter_list>(<parameter><type><name>in0</name></type></parameter>, <parameter><type><name>in1</name></type></parameter>, <parameter><type><name>in2</name></type></parameter>, <parameter><type><name>in3</name></type></parameter>, <parameter><type><name>in4</name></type></parameter>, <parameter><type><name>in5</name></type></parameter>, <parameter><type><name>in6</name></type></parameter>, <parameter><type><name>in7</name></type></parameter>, <parameter><type><name>dst0</name></type></parameter>, <parameter><type><name>dst1</name></type></parameter>, <parameter><type><name>dst2</name></type></parameter>, <parameter><type><name>dst3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v4i32 tp0_m, tp1_m, tp2_m, tp3_m, tp4_m; v4i32 tp5_m, tp6_m, tp7_m, tp8_m, tp9_m; DOTP_SH4_SW(in0, in1, in0, in1, in4, in4, in5, in5, tp0_m, tp2_m, tp3_m, tp4_m); DOTP_SH4_SW(in2, in3, in2, in3, in6, in6, in7, in7, tp5_m, tp6_m, tp7_m, tp8_m); BUTTERFLY_4(tp0_m, tp3_m, tp7_m, tp5_m, tp1_m, tp9_m, tp7_m, tp5_m); BUTTERFLY_4(tp2_m, tp4_m, tp8_m, tp6_m, tp3_m, tp0_m, tp4_m, tp2_m); SRARI_W4_SW(tp1_m, tp9_m, tp7_m, tp5_m, VP9_DCT_CONST_BITS); SRARI_W4_SW(tp3_m, tp0_m, tp4_m, tp2_m, VP9_DCT_CONST_BITS); PCKEV_H4_SH(tp1_m, tp3_m, tp9_m, tp0_m, tp7_m, tp4_m, tp5_m, tp2_m, dst0, dst1, dst2, dst3); }</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP9_DOT_SHIFT_RIGHT_PCK_H</name><parameter_list>(<parameter><type><name>in0</name></type></parameter>, <parameter><type><name>in1</name></type></parameter>, <parameter><type><name>in2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( { v8i16 dst_m; v4i32 tp0_m, tp1_m; DOTP_SH2_SW(in0, in1, in2, in2, tp1_m, tp0_m); SRARI_W2_SW(tp1_m, tp0_m, VP9_DCT_CONST_BITS); dst_m = __msa_pckev_h((v8i16) tp1_m, (v8i16) tp0_m); dst_m; } )</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP9_ADST8</name><parameter_list>(<parameter><type><name>in0</name></type></parameter>, <parameter><type><name>in1</name></type></parameter>, <parameter><type><name>in2</name></type></parameter>, <parameter><type><name>in3</name></type></parameter>, <parameter><type><name>in4</name></type></parameter>, <parameter><type><name>in5</name></type></parameter>, <parameter><type><name>in6</name></type></parameter>, <parameter><type><name>in7</name></type></parameter>, <parameter><type><name>out0</name></type></parameter>, <parameter><type><name>out1</name></type></parameter>, <parameter><type><name>out2</name></type></parameter>, <parameter><type><name>out3</name></type></parameter>, <parameter><type><name>out4</name></type></parameter>, <parameter><type><name>out5</name></type></parameter>, <parameter><type><name>out6</name></type></parameter>, <parameter><type><name>out7</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v8i16 cnst0_m, cnst1_m, cnst2_m, cnst3_m, cnst4_m; v8i16 vec0_m, vec1_m, vec2_m, vec3_m, s0_m, s1_m; v8i16 coeff0_m = { cospi_2_64, cospi_6_64, cospi_10_64, cospi_14_64, cospi_18_64, cospi_22_64, cospi_26_64, cospi_30_64 }; v8i16 coeff1_m = { cospi_8_64, -cospi_8_64, cospi_16_64, -cospi_16_64, cospi_24_64, -cospi_24_64, 0, 0 }; SPLATI_H2_SH(coeff0_m, 0, 7, cnst0_m, cnst1_m); cnst2_m = -cnst0_m; ILVEV_H2_SH(cnst0_m, cnst1_m, cnst1_m, cnst2_m, cnst0_m, cnst1_m); SPLATI_H2_SH(coeff0_m, 4, 3, cnst2_m, cnst3_m); cnst4_m = -cnst2_m; ILVEV_H2_SH(cnst2_m, cnst3_m, cnst3_m, cnst4_m, cnst2_m, cnst3_m); ILVRL_H2_SH(in0, in7, vec1_m, vec0_m); ILVRL_H2_SH(in4, in3, vec3_m, vec2_m); VP9_DOT_ADD_SUB_SRARI_PCK(vec0_m, vec1_m, vec2_m, vec3_m, cnst0_m, cnst1_m, cnst2_m, cnst3_m, in7, in0, in4, in3); SPLATI_H2_SH(coeff0_m, 2, 5, cnst0_m, cnst1_m); cnst2_m = -cnst0_m; ILVEV_H2_SH(cnst0_m, cnst1_m, cnst1_m, cnst2_m, cnst0_m, cnst1_m); SPLATI_H2_SH(coeff0_m, 6, 1, cnst2_m, cnst3_m); cnst4_m = -cnst2_m; ILVEV_H2_SH(cnst2_m, cnst3_m, cnst3_m, cnst4_m, cnst2_m, cnst3_m); ILVRL_H2_SH(in2, in5, vec1_m, vec0_m); ILVRL_H2_SH(in6, in1, vec3_m, vec2_m); VP9_DOT_ADD_SUB_SRARI_PCK(vec0_m, vec1_m, vec2_m, vec3_m, cnst0_m, cnst1_m, cnst2_m, cnst3_m, in5, in2, in6, in1); BUTTERFLY_4(in7, in0, in2, in5, s1_m, s0_m, in2, in5); out7 = -s0_m; out0 = s1_m; SPLATI_H4_SH(coeff1_m, 0, 4, 1, 5, cnst0_m, cnst1_m, cnst2_m, cnst3_m); ILVEV_H2_SH(cnst3_m, cnst0_m, cnst1_m, cnst2_m, cnst3_m, cnst2_m); cnst0_m = __msa_ilvev_h(cnst1_m, cnst0_m); cnst1_m = cnst0_m; ILVRL_H2_SH(in4, in3, vec1_m, vec0_m); ILVRL_H2_SH(in6, in1, vec3_m, vec2_m); VP9_DOT_ADD_SUB_SRARI_PCK(vec0_m, vec1_m, vec2_m, vec3_m, cnst0_m, cnst2_m, cnst3_m, cnst1_m, out1, out6, s0_m, s1_m); SPLATI_H2_SH(coeff1_m, 2, 3, cnst0_m, cnst1_m); cnst1_m = __msa_ilvev_h(cnst1_m, cnst0_m); ILVRL_H2_SH(in2, in5, vec1_m, vec0_m); ILVRL_H2_SH(s0_m, s1_m, vec3_m, vec2_m); out3 = VP9_DOT_SHIFT_RIGHT_PCK_H(vec0_m, vec1_m, cnst0_m); out4 = VP9_DOT_SHIFT_RIGHT_PCK_H(vec0_m, vec1_m, cnst1_m); out2 = VP9_DOT_SHIFT_RIGHT_PCK_H(vec2_m, vec3_m, cnst0_m); out5 = VP9_DOT_SHIFT_RIGHT_PCK_H(vec2_m, vec3_m, cnst1_m); out1 = -out1; out3 = -out3; out5 = -out5; }</cpp:value></cpp:define>



































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP9_MADD_SHORT</name><parameter_list>(<parameter><type><name>m0</name></type></parameter>, <parameter><type><name>m1</name></type></parameter>, <parameter><type><name>c0</name></type></parameter>, <parameter><type><name>c1</name></type></parameter>, <parameter><type><name>res0</name></type></parameter>, <parameter><type><name>res1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v4i32 madd0_m, madd1_m, madd2_m, madd3_m; v8i16 madd_s0_m, madd_s1_m; ILVRL_H2_SH(m1, m0, madd_s0_m, madd_s1_m); DOTP_SH4_SW(madd_s0_m, madd_s1_m, madd_s0_m, madd_s1_m, c0, c0, c1, c1, madd0_m, madd1_m, madd2_m, madd3_m); SRARI_W4_SW(madd0_m, madd1_m, madd2_m, madd3_m, VP9_DCT_CONST_BITS); PCKEV_H2_SH(madd1_m, madd0_m, madd3_m, madd2_m, res0, res1); }</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP9_MADD_BF</name><parameter_list>(<parameter><type><name>inp0</name></type></parameter>, <parameter><type><name>inp1</name></type></parameter>, <parameter><type><name>inp2</name></type></parameter>, <parameter><type><name>inp3</name></type></parameter>, <parameter><type><name>cst0</name></type></parameter>, <parameter><type><name>cst1</name></type></parameter>, <parameter><type><name>cst2</name></type></parameter>, <parameter><type><name>cst3</name></type></parameter>, <parameter><type><name>out0</name></type></parameter>, <parameter><type><name>out1</name></type></parameter>, <parameter><type><name>out2</name></type></parameter>, <parameter><type><name>out3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v8i16 madd_s0_m, madd_s1_m, madd_s2_m, madd_s3_m; v4i32 tmp0_m, tmp1_m, tmp2_m, tmp3_m, m4_m, m5_m; ILVRL_H2_SH(inp1, inp0, madd_s0_m, madd_s1_m); ILVRL_H2_SH(inp3, inp2, madd_s2_m, madd_s3_m); DOTP_SH4_SW(madd_s0_m, madd_s1_m, madd_s2_m, madd_s3_m, cst0, cst0, cst2, cst2, tmp0_m, tmp1_m, tmp2_m, tmp3_m); BUTTERFLY_4(tmp0_m, tmp1_m, tmp3_m, tmp2_m, m4_m, m5_m, tmp3_m, tmp2_m); SRARI_W4_SW(m4_m, m5_m, tmp2_m, tmp3_m, VP9_DCT_CONST_BITS); PCKEV_H2_SH(m5_m, m4_m, tmp3_m, tmp2_m, out0, out1); DOTP_SH4_SW(madd_s0_m, madd_s1_m, madd_s2_m, madd_s3_m, cst1, cst1, cst3, cst3, tmp0_m, tmp1_m, tmp2_m, tmp3_m); BUTTERFLY_4(tmp0_m, tmp1_m, tmp3_m, tmp2_m, m4_m, m5_m, tmp3_m, tmp2_m); SRARI_W4_SW(m4_m, m5_m, tmp2_m, tmp3_m, VP9_DCT_CONST_BITS); PCKEV_H2_SH(m5_m, m4_m, tmp3_m, tmp2_m, out2, out3); }</cpp:value></cpp:define>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP9_SET_COSPI_PAIR</name><parameter_list>(<parameter><type><name>c0_h</name></type></parameter>, <parameter><type><name>c1_h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( { v8i16 out0_m, r0_m, r1_m; r0_m = __msa_fill_h(c0_h); r1_m = __msa_fill_h(c1_h); out0_m = __msa_ilvev_h(r1_m, r0_m); out0_m; } )</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP9_ADDBLK_ST8x4_UB</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>dst_stride</name></type></parameter>, <parameter><type><name>in0</name></type></parameter>, <parameter><type><name>in1</name></type></parameter>, <parameter><type><name>in2</name></type></parameter>, <parameter><type><name>in3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ uint8_t *dst_m = (uint8_t *) (dst); v16u8 dst0_m, dst1_m, dst2_m, dst3_m; v16i8 tmp0_m, tmp1_m; v16i8 zero_m = { 0 }; v8i16 res0_m, res1_m, res2_m, res3_m; LD_UB4(dst_m, dst_stride, dst0_m, dst1_m, dst2_m, dst3_m); ILVR_B4_SH(zero_m, dst0_m, zero_m, dst1_m, zero_m, dst2_m, zero_m, dst3_m, res0_m, res1_m, res2_m, res3_m); ADD4(res0_m, in0, res1_m, in1, res2_m, in2, res3_m, in3, res0_m, res1_m, res2_m, res3_m); CLIP_SH4_0_255(res0_m, res1_m, res2_m, res3_m); PCKEV_B2_SB(res1_m, res0_m, res3_m, res2_m, tmp0_m, tmp1_m); ST_D4(tmp0_m, tmp1_m, 0, 1, 0, 1, dst_m, dst_stride); }</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP9_IDCT4x4</name><parameter_list>(<parameter><type><name>in0</name></type></parameter>, <parameter><type><name>in1</name></type></parameter>, <parameter><type><name>in2</name></type></parameter>, <parameter><type><name>in3</name></type></parameter>, <parameter><type><name>out0</name></type></parameter>, <parameter><type><name>out1</name></type></parameter>, <parameter><type><name>out2</name></type></parameter>, <parameter><type><name>out3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v8i16 c0_m, c1_m, c2_m, c3_m; v8i16 step0_m, step1_m; v4i32 tmp0_m, tmp1_m, tmp2_m, tmp3_m; v16i8 zeros = { 0 }; c0_m = VP9_SET_COSPI_PAIR(cospi_16_64, cospi_16_64); c1_m = VP9_SET_COSPI_PAIR(cospi_16_64, -cospi_16_64); step0_m = __msa_ilvr_h(in2, in0); DOTP_SH2_SW(step0_m, step0_m, c0_m, c1_m, tmp0_m, tmp1_m); c2_m = VP9_SET_COSPI_PAIR(cospi_24_64, -cospi_8_64); c3_m = VP9_SET_COSPI_PAIR(cospi_8_64, cospi_24_64); step1_m = __msa_ilvr_h(in3, in1); DOTP_SH2_SW(step1_m, step1_m, c2_m, c3_m, tmp2_m, tmp3_m); SRARI_W4_SW(tmp0_m, tmp1_m, tmp2_m, tmp3_m, VP9_DCT_CONST_BITS); PCKEV_H2_SW(tmp1_m, tmp0_m, tmp3_m, tmp2_m, tmp0_m, tmp2_m); SLDI_B2_SW(zeros, tmp0_m, zeros, tmp2_m, 8, tmp1_m, tmp3_m); BUTTERFLY_4((v8i16) tmp0_m, (v8i16) tmp1_m, (v8i16) tmp2_m, (v8i16) tmp3_m, out0, out1, out2, out3); }</cpp:value></cpp:define>
























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP9_IADST4x4</name><parameter_list>(<parameter><type><name>in0</name></type></parameter>, <parameter><type><name>in1</name></type></parameter>, <parameter><type><name>in2</name></type></parameter>, <parameter><type><name>in3</name></type></parameter>, <parameter><type><name>out0</name></type></parameter>, <parameter><type><name>out1</name></type></parameter>, <parameter><type><name>out2</name></type></parameter>, <parameter><type><name>out3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v8i16 res0_m, res1_m, c0_m, c1_m; v8i16 k1_m, k2_m, k3_m, k4_m; v8i16 zero_m = { 0 }; v4i32 tmp0_m, tmp1_m, tmp2_m, tmp3_m; v4i32 int0_m, int1_m, int2_m, int3_m; v8i16 mask_m = { sinpi_1_9, sinpi_2_9, sinpi_3_9, sinpi_4_9, -sinpi_1_9, -sinpi_2_9, -sinpi_3_9, -sinpi_4_9 }; SPLATI_H4_SH(mask_m, 3, 0, 1, 2, c0_m, c1_m, k1_m, k2_m); ILVEV_H2_SH(c0_m, c1_m, k1_m, k2_m, c0_m, c1_m); ILVR_H2_SH(in0, in2, in1, in3, res0_m, res1_m); DOTP_SH2_SW(res0_m, res1_m, c0_m, c1_m, tmp2_m, tmp1_m); int0_m = tmp2_m + tmp1_m; SPLATI_H2_SH(mask_m, 4, 7, k4_m, k3_m); ILVEV_H2_SH(k4_m, k1_m, k3_m, k2_m, c0_m, c1_m); DOTP_SH2_SW(res0_m, res1_m, c0_m, c1_m, tmp0_m, tmp1_m); int1_m = tmp0_m + tmp1_m; c0_m = __msa_splati_h(mask_m, 6); ILVL_H2_SH(k2_m, c0_m, zero_m, k2_m, c0_m, c1_m); ILVR_H2_SH(in0, in2, in1, in3, res0_m, res1_m); DOTP_SH2_SW(res0_m, res1_m, c0_m, c1_m, tmp0_m, tmp1_m); int2_m = tmp0_m + tmp1_m; c0_m = __msa_splati_h(mask_m, 6); c0_m = __msa_ilvev_h(c0_m, k1_m); res0_m = __msa_ilvr_h((in1), (in3)); tmp0_m = __msa_dotp_s_w(res0_m, c0_m); int3_m = tmp2_m + tmp0_m; res0_m = __msa_ilvr_h((in2), (in3)); c1_m = __msa_ilvev_h(k4_m, k3_m); tmp2_m = __msa_dotp_s_w(res0_m, c1_m); res1_m = __msa_ilvr_h((in0), (in2)); c1_m = __msa_ilvev_h(k1_m, zero_m); tmp3_m = __msa_dotp_s_w(res1_m, c1_m); int3_m += tmp2_m; int3_m += tmp3_m; SRARI_W4_SW(int0_m, int1_m, int2_m, int3_m, VP9_DCT_CONST_BITS); PCKEV_H2_SH(int0_m, int0_m, int1_m, int1_m, out0, out1); PCKEV_H2_SH(int2_m, int2_m, int3_m, int3_m, out2, out3); }</cpp:value></cpp:define>


















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPOSE4X8_SH_SH</name><parameter_list>(<parameter><type><name>in0</name></type></parameter>, <parameter><type><name>in1</name></type></parameter>, <parameter><type><name>in2</name></type></parameter>, <parameter><type><name>in3</name></type></parameter>, <parameter><type><name>in4</name></type></parameter>, <parameter><type><name>in5</name></type></parameter>, <parameter><type><name>in6</name></type></parameter>, <parameter><type><name>in7</name></type></parameter>, <parameter><type><name>out0</name></type></parameter>, <parameter><type><name>out1</name></type></parameter>, <parameter><type><name>out2</name></type></parameter>, <parameter><type><name>out3</name></type></parameter>, <parameter><type><name>out4</name></type></parameter>, <parameter><type><name>out5</name></type></parameter>, <parameter><type><name>out6</name></type></parameter>, <parameter><type><name>out7</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v8i16 tmp0_m, tmp1_m, tmp2_m, tmp3_m; v8i16 tmp0_n, tmp1_n, tmp2_n, tmp3_n; v8i16 zero_m = { 0 }; ILVR_H4_SH(in1, in0, in3, in2, in5, in4, in7, in6, tmp0_n, tmp1_n, tmp2_n, tmp3_n); ILVRL_W2_SH(tmp1_n, tmp0_n, tmp0_m, tmp2_m); ILVRL_W2_SH(tmp3_n, tmp2_n, tmp1_m, tmp3_m); out0 = (v8i16) __msa_ilvr_d((v2i64) tmp1_m, (v2i64) tmp0_m); out1 = (v8i16) __msa_ilvl_d((v2i64) tmp1_m, (v2i64) tmp0_m); out2 = (v8i16) __msa_ilvr_d((v2i64) tmp3_m, (v2i64) tmp2_m); out3 = (v8i16) __msa_ilvl_d((v2i64) tmp3_m, (v2i64) tmp2_m); out4 = zero_m; out5 = zero_m; out6 = zero_m; out7 = zero_m; }</cpp:value></cpp:define>






















<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_idct4x4_1_add_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>vec</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ROUND_POWER_OF_TWO</name><argument_list>(<argument><expr><operator>(</operator><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>cospi_16_64</name><operator>)</operator></expr></argument>, <argument><expr><name>VP9_DCT_CONST_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ROUND_POWER_OF_TWO</name><argument_list>(<argument><expr><operator>(</operator><name>out</name> <operator>*</operator> <name>cospi_16_64</name><operator>)</operator></expr></argument>, <argument><expr><name>VP9_DCT_CONST_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ROUND_POWER_OF_TWO</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADDBLK_ST4x4_UB</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_idct4x4_colcol_addblk_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v8i16</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>in0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in2</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvl_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in0</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in3</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvl_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in2</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_IDCT4x4</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE4x4_SH_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_IDCT4x4</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADDBLK_ST4x4_UB</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_iadst4x4_colcol_addblk_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v8i16</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>in0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in2</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvl_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in0</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in3</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvl_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in2</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_IADST4x4</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE4x4_SH_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_IADST4x4</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADDBLK_ST4x4_UB</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_iadst_idct_4x4_add_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>eob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v8i16</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>in0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in2</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvl_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in0</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in3</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvl_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in2</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_IADST4x4</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE4x4_SH_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_IDCT4x4</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADDBLK_ST4x4_UB</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_idct_iadst_4x4_add_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>eob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v8i16</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>in0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in2</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvl_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in0</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in3</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvl_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in2</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_IDCT4x4</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE4x4_SH_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_IADST4x4</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADDBLK_ST4x4_UB</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP9_SET_CONST_PAIR</name><parameter_list>(<parameter><type><name>mask_h</name></type></parameter>, <parameter><type><name>idx1_h</name></type></parameter>, <parameter><type><name>idx2_h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( { v8i16 c0_m, c1_m; SPLATI_H2_SH(mask_h, idx1_h, idx2_h, c0_m, c1_m); c0_m = __msa_ilvev_h(c1_m, c0_m); c0_m; } )</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP9_MADD</name><parameter_list>(<parameter><type><name>inp0</name></type></parameter>, <parameter><type><name>inp1</name></type></parameter>, <parameter><type><name>inp2</name></type></parameter>, <parameter><type><name>inp3</name></type></parameter>, <parameter><type><name>cst0</name></type></parameter>, <parameter><type><name>cst1</name></type></parameter>, <parameter><type><name>cst2</name></type></parameter>, <parameter><type><name>cst3</name></type></parameter>, <parameter><type><name>out0</name></type></parameter>, <parameter><type><name>out1</name></type></parameter>, <parameter><type><name>out2</name></type></parameter>, <parameter><type><name>out3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v8i16 madd_s0_m, madd_s1_m, madd_s2_m, madd_s3_m; v4i32 tmp0_m, tmp1_m, tmp2_m, tmp3_m; ILVRL_H2_SH(inp1, inp0, madd_s1_m, madd_s0_m); ILVRL_H2_SH(inp3, inp2, madd_s3_m, madd_s2_m); DOTP_SH4_SW(madd_s1_m, madd_s0_m, madd_s1_m, madd_s0_m, cst0, cst0, cst1, cst1, tmp0_m, tmp1_m, tmp2_m, tmp3_m); SRARI_W4_SW(tmp0_m, tmp1_m, tmp2_m, tmp3_m, VP9_DCT_CONST_BITS); PCKEV_H2_SH(tmp1_m, tmp0_m, tmp3_m, tmp2_m, out0, out1); DOTP_SH4_SW(madd_s3_m, madd_s2_m, madd_s3_m, madd_s2_m, cst2, cst2, cst3, cst3, tmp0_m, tmp1_m, tmp2_m, tmp3_m); SRARI_W4_SW(tmp0_m, tmp1_m, tmp2_m, tmp3_m, VP9_DCT_CONST_BITS); PCKEV_H2_SH(tmp1_m, tmp0_m, tmp3_m, tmp2_m, out2, out3); }</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP9_IDCT8x8_1D</name><parameter_list>(<parameter><type><name>in0</name></type></parameter>, <parameter><type><name>in1</name></type></parameter>, <parameter><type><name>in2</name></type></parameter>, <parameter><type><name>in3</name></type></parameter>, <parameter><type><name>in4</name></type></parameter>, <parameter><type><name>in5</name></type></parameter>, <parameter><type><name>in6</name></type></parameter>, <parameter><type><name>in7</name></type></parameter>, <parameter><type><name>out0</name></type></parameter>, <parameter><type><name>out1</name></type></parameter>, <parameter><type><name>out2</name></type></parameter>, <parameter><type><name>out3</name></type></parameter>, <parameter><type><name>out4</name></type></parameter>, <parameter><type><name>out5</name></type></parameter>, <parameter><type><name>out6</name></type></parameter>, <parameter><type><name>out7</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v8i16 tp0_m, tp1_m, tp2_m, tp3_m, tp4_m, tp5_m, tp6_m, tp7_m; v8i16 k0_m, k1_m, k2_m, k3_m, res0_m, res1_m, res2_m, res3_m; v4i32 tmp0_m, tmp1_m, tmp2_m, tmp3_m; v8i16 mask_m = { cospi_28_64, cospi_4_64, cospi_20_64, cospi_12_64, cospi_16_64, -cospi_4_64, -cospi_20_64, -cospi_16_64 }; k0_m = VP9_SET_CONST_PAIR(mask_m, 0, 5); k1_m = VP9_SET_CONST_PAIR(mask_m, 1, 0); k2_m = VP9_SET_CONST_PAIR(mask_m, 6, 3); k3_m = VP9_SET_CONST_PAIR(mask_m, 3, 2); VP9_MADD(in1, in7, in3, in5, k0_m, k1_m, k2_m, k3_m, in1, in7, in3, in5); SUB2(in1, in3, in7, in5, res0_m, res1_m); k0_m = VP9_SET_CONST_PAIR(mask_m, 4, 7); k1_m = __msa_splati_h(mask_m, 4); ILVRL_H2_SH(res0_m, res1_m, res2_m, res3_m); DOTP_SH4_SW(res2_m, res3_m, res2_m, res3_m, k0_m, k0_m, k1_m, k1_m, tmp0_m, tmp1_m, tmp2_m, tmp3_m); SRARI_W4_SW(tmp0_m, tmp1_m, tmp2_m, tmp3_m, VP9_DCT_CONST_BITS); tp4_m = in1 + in3; PCKEV_H2_SH(tmp1_m, tmp0_m, tmp3_m, tmp2_m, tp5_m, tp6_m); tp7_m = in7 + in5; k2_m = VP9_SET_COSPI_PAIR(cospi_24_64, -cospi_8_64); k3_m = VP9_SET_COSPI_PAIR(cospi_8_64, cospi_24_64); VP9_MADD(in0, in4, in2, in6, k1_m, k0_m, k2_m, k3_m, in0, in4, in2, in6); BUTTERFLY_4(in0, in4, in2, in6, tp0_m, tp1_m, tp2_m, tp3_m); BUTTERFLY_8(tp0_m, tp1_m, tp2_m, tp3_m, tp4_m, tp5_m, tp6_m, tp7_m, out0, out1, out2, out3, out4, out5, out6, out7); }</cpp:value></cpp:define>

































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP9_IADST8x8_1D</name><parameter_list>(<parameter><type><name>in0</name></type></parameter>, <parameter><type><name>in1</name></type></parameter>, <parameter><type><name>in2</name></type></parameter>, <parameter><type><name>in3</name></type></parameter>, <parameter><type><name>in4</name></type></parameter>, <parameter><type><name>in5</name></type></parameter>, <parameter><type><name>in6</name></type></parameter>, <parameter><type><name>in7</name></type></parameter>, <parameter><type><name>out0</name></type></parameter>, <parameter><type><name>out1</name></type></parameter>, <parameter><type><name>out2</name></type></parameter>, <parameter><type><name>out3</name></type></parameter>, <parameter><type><name>out4</name></type></parameter>, <parameter><type><name>out5</name></type></parameter>, <parameter><type><name>out6</name></type></parameter>, <parameter><type><name>out7</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v4i32 r0_m, r1_m, r2_m, r3_m, r4_m, r5_m, r6_m, r7_m; v4i32 m0_m, m1_m, m2_m, m3_m, t0_m, t1_m; v8i16 res0_m, res1_m, res2_m, res3_m, k0_m, k1_m, in_s0, in_s1; v8i16 mask1_m = { cospi_2_64, cospi_30_64, -cospi_2_64, cospi_10_64, cospi_22_64, -cospi_10_64, cospi_18_64, cospi_14_64 }; v8i16 mask2_m = { cospi_14_64, -cospi_18_64, cospi_26_64, cospi_6_64, -cospi_26_64, cospi_8_64, cospi_24_64, -cospi_8_64 }; v8i16 mask3_m = { -cospi_24_64, cospi_8_64, cospi_16_64, -cospi_16_64, 0, 0, 0, 0 }; k0_m = VP9_SET_CONST_PAIR(mask1_m, 0, 1); k1_m = VP9_SET_CONST_PAIR(mask1_m, 1, 2); ILVRL_H2_SH(in1, in0, in_s1, in_s0); DOTP_SH4_SW(in_s1, in_s0, in_s1, in_s0, k0_m, k0_m, k1_m, k1_m, r0_m, r1_m, r2_m, r3_m); k0_m = VP9_SET_CONST_PAIR(mask1_m, 6, 7); k1_m = VP9_SET_CONST_PAIR(mask2_m, 0, 1); ILVRL_H2_SH(in5, in4, in_s1, in_s0); DOTP_SH4_SW(in_s1, in_s0, in_s1, in_s0, k0_m, k0_m, k1_m, k1_m, r4_m, r5_m, r6_m, r7_m); ADD4(r0_m, r4_m, r1_m, r5_m, r2_m, r6_m, r3_m, r7_m, m0_m, m1_m, m2_m, m3_m); SRARI_W4_SW(m0_m, m1_m, m2_m, m3_m, VP9_DCT_CONST_BITS); PCKEV_H2_SH(m1_m, m0_m, m3_m, m2_m, res0_m, res1_m); SUB4(r0_m, r4_m, r1_m, r5_m, r2_m, r6_m, r3_m, r7_m, m0_m, m1_m, m2_m, m3_m); SRARI_W4_SW(m0_m, m1_m, m2_m, m3_m, VP9_DCT_CONST_BITS); PCKEV_H2_SW(m1_m, m0_m, m3_m, m2_m, t0_m, t1_m); k0_m = VP9_SET_CONST_PAIR(mask1_m, 3, 4); k1_m = VP9_SET_CONST_PAIR(mask1_m, 4, 5); ILVRL_H2_SH(in3, in2, in_s1, in_s0); DOTP_SH4_SW(in_s1, in_s0, in_s1, in_s0, k0_m, k0_m, k1_m, k1_m, r0_m, r1_m, r2_m, r3_m); k0_m = VP9_SET_CONST_PAIR(mask2_m, 2, 3); k1_m = VP9_SET_CONST_PAIR(mask2_m, 3, 4); ILVRL_H2_SH(in7, in6, in_s1, in_s0); DOTP_SH4_SW(in_s1, in_s0, in_s1, in_s0, k0_m, k0_m, k1_m, k1_m, r4_m, r5_m, r6_m, r7_m); ADD4(r0_m, r4_m, r1_m, r5_m, r2_m, r6_m, r3_m, r7_m, m0_m, m1_m, m2_m, m3_m); SRARI_W4_SW(m0_m, m1_m, m2_m, m3_m, VP9_DCT_CONST_BITS); PCKEV_H2_SH(m1_m, m0_m, m3_m, m2_m, res2_m, res3_m); SUB4(r0_m, r4_m, r1_m, r5_m, r2_m, r6_m, r3_m, r7_m, m0_m, m1_m, m2_m, m3_m); SRARI_W4_SW(m0_m, m1_m, m2_m, m3_m, VP9_DCT_CONST_BITS); PCKEV_H2_SW(m1_m, m0_m, m3_m, m2_m, r2_m, r3_m); ILVRL_H2_SW(r3_m, r2_m, m2_m, m3_m); BUTTERFLY_4(res0_m, res1_m, res3_m, res2_m, out0, in7, in4, in3); k0_m = VP9_SET_CONST_PAIR(mask2_m, 5, 6); k1_m = VP9_SET_CONST_PAIR(mask2_m, 6, 7); ILVRL_H2_SH(t1_m, t0_m, in_s1, in_s0); DOTP_SH4_SW(in_s1, in_s0, in_s1, in_s0, k0_m, k0_m, k1_m, k1_m, r0_m, r1_m, r2_m, r3_m); k1_m = VP9_SET_CONST_PAIR(mask3_m, 0, 1); DOTP_SH4_SW(m2_m, m3_m, m2_m, m3_m, k0_m, k0_m, k1_m, k1_m, r4_m, r5_m, r6_m, r7_m); ADD4(r0_m, r6_m, r1_m, r7_m, r2_m, r4_m, r3_m, r5_m, m0_m, m1_m, m2_m, m3_m); SRARI_W4_SW(m0_m, m1_m, m2_m, m3_m, VP9_DCT_CONST_BITS); PCKEV_H2_SH(m1_m, m0_m, m3_m, m2_m, in1, out6); SUB4(r0_m, r6_m, r1_m, r7_m, r2_m, r4_m, r3_m, r5_m, m0_m, m1_m, m2_m, m3_m); SRARI_W4_SW(m0_m, m1_m, m2_m, m3_m, VP9_DCT_CONST_BITS); PCKEV_H2_SH(m1_m, m0_m, m3_m, m2_m, in2, in5); k0_m = VP9_SET_CONST_PAIR(mask3_m, 2, 2); k1_m = VP9_SET_CONST_PAIR(mask3_m, 2, 3); ILVRL_H2_SH(in4, in3, in_s1, in_s0); DOTP_SH4_SW(in_s1, in_s0, in_s1, in_s0, k0_m, k0_m, k1_m, k1_m, m0_m, m1_m, m2_m, m3_m); SRARI_W4_SW(m0_m, m1_m, m2_m, m3_m, VP9_DCT_CONST_BITS); PCKEV_H2_SH(m1_m, m0_m, m3_m, m2_m, in3, out4); ILVRL_H2_SW(in5, in2, m2_m, m3_m); DOTP_SH4_SW(m2_m, m3_m, m2_m, m3_m, k0_m, k0_m, k1_m, k1_m, m0_m, m1_m, m2_m, m3_m); SRARI_W4_SW(m0_m, m1_m, m2_m, m3_m, VP9_DCT_CONST_BITS); PCKEV_H2_SH(m1_m, m0_m, m3_m, m2_m, out2, in5); out1 = -in1; out3 = -in3; out5 = -in5; out7 = -in7; }</cpp:value></cpp:define>





















































































<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_idct8x8_1_add_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>vec</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ROUND_POWER_OF_TWO</name><argument_list>(<argument><expr><operator>(</operator><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>cospi_16_64</name><operator>)</operator></expr></argument>, <argument><expr><name>VP9_DCT_CONST_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ROUND_POWER_OF_TWO</name><argument_list>(<argument><expr><operator>(</operator><name>out</name> <operator>*</operator> <name>cospi_16_64</name><operator>)</operator></expr></argument>, <argument><expr><name>VP9_DCT_CONST_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ROUND_POWER_OF_TWO</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_ADDBLK_ST8x4_UB</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_ADDBLK_ST8x4_UB</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_idct8x8_12_colcol_addblk_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v8i16</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>, <decl><type ref="prev"/><name>in4</name></decl>, <decl><type ref="prev"/><name>in5</name></decl>, <decl><type ref="prev"/><name>in6</name></decl>, <decl><type ref="prev"/><name>in7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>s0</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>s3</name></decl>, <decl><type ref="prev"/><name>s4</name></decl>, <decl><type ref="prev"/><name>s5</name></decl>, <decl><type ref="prev"/><name>s6</name></decl>, <decl><type ref="prev"/><name>s7</name></decl>, <decl><type ref="prev"/><name>k0</name></decl>, <decl><type ref="prev"/><name>k1</name></decl>, <decl><type ref="prev"/><name>k2</name></decl>, <decl><type ref="prev"/><name>k3</name></decl>, <decl><type ref="prev"/><name>m0</name></decl>, <decl><type ref="prev"/><name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>m3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4i32</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_D2_SH</name><argument_list>(<argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_D2_SH</name><argument_list>(<argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ILVL_H2_SH</name><argument_list>(<argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k0</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_28_64</name></expr></argument>, <argument><expr><operator>-</operator><name>cospi_4_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_4_64</name></expr></argument>, <argument><expr><name>cospi_28_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k2</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><operator>-</operator><name>cospi_20_64</name></expr></argument>, <argument><expr><name>cospi_12_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k3</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_12_64</name></expr></argument>, <argument><expr><name>cospi_20_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_SH4_SW</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_W4_SW</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>VP9_DCT_CONST_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_H2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_H2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s4</name></expr></argument>, <argument><expr><name>s7</name></expr></argument>, <argument><expr><name>s6</name></expr></argument>, <argument><expr><name>s5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ILVR_H2_SH</name><argument_list>(<argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k0</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><operator>-</operator><name>cospi_16_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k2</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_24_64</name></expr></argument>, <argument><expr><operator>-</operator><name>cospi_8_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k3</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_8_64</name></expr></argument>, <argument><expr><name>cospi_24_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_SH4_SW</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_W4_SW</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>VP9_DCT_CONST_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_H2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_H2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>__msa_ilvr_h</name><argument_list>(<argument><expr><name>s6</name></expr></argument>, <argument><expr><name>s5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><operator>-</operator><name>cospi_16_64</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_SH2_SW</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_W2_SW</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>VP9_DCT_CONST_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_H2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>BUTTERFLY_8</name><argument_list>(<argument><expr><name>m0</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>s4</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>s7</name></expr></argument>,
<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRANSPOSE4X8_SH_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>,
<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_IDCT8x8_1D</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>,
<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>VP9_ADDBLK_ST8x4_UB</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_ADDBLK_ST8x4_UB</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_idct8x8_colcol_addblk_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v8i16</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>, <decl><type ref="prev"/><name>in4</name></decl>, <decl><type ref="prev"/><name>in5</name></decl>, <decl><type ref="prev"/><name>in6</name></decl>, <decl><type ref="prev"/><name>in7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_IDCT8x8_1D</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>,
<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>,
<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_IDCT8x8_1D</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>,
<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_ADDBLK_ST8x4_UB</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_ADDBLK_ST8x4_UB</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_iadst8x8_colcol_addblk_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v8i16</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>, <decl><type ref="prev"/><name>in4</name></decl>, <decl><type ref="prev"/><name>in5</name></decl>, <decl><type ref="prev"/><name>in6</name></decl>, <decl><type ref="prev"/><name>in7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>, <decl><type ref="prev"/><name>res4</name></decl>, <decl><type ref="prev"/><name>res5</name></decl>, <decl><type ref="prev"/><name>res6</name></decl>, <decl><type ref="prev"/><name>res7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>, <decl><type ref="prev"/><name>dst4</name></decl>, <decl><type ref="prev"/><name>dst5</name></decl>, <decl><type ref="prev"/><name>dst6</name></decl>, <decl><type ref="prev"/><name>dst7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>, <decl><type ref="prev"/><name>out3</name></decl>, <decl><type ref="prev"/><name>out4</name></decl>, <decl><type ref="prev"/><name>out5</name></decl>, <decl><type ref="prev"/><name>out6</name></decl>, <decl><type ref="prev"/><name>out7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>cnst0</name></decl>, <decl><type ref="prev"/><name>cnst1</name></decl>, <decl><type ref="prev"/><name>cnst2</name></decl>, <decl><type ref="prev"/><name>cnst3</name></decl>, <decl><type ref="prev"/><name>cnst4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>temp0</name></decl>, <decl><type ref="prev"/><name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>, <decl><type ref="prev"/><name>temp3</name></decl>, <decl><type ref="prev"/><name>s0</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>VP9_ADST8</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>,
<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>,
<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst0</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>cospi_2_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cnst1</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>cospi_30_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cnst2</name> <operator>=</operator> <operator>-</operator><name>cnst0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVEV_H2_SH</name><argument_list>(<argument><expr><name>cnst0</name></expr></argument>, <argument><expr><name>cnst1</name></expr></argument>, <argument><expr><name>cnst1</name></expr></argument>, <argument><expr><name>cnst2</name></expr></argument>, <argument><expr><name>cnst0</name></expr></argument>, <argument><expr><name>cnst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cnst2</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>cospi_18_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cnst3</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>cospi_14_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cnst4</name> <operator>=</operator> <operator>-</operator><name>cnst2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVEV_H2_SH</name><argument_list>(<argument><expr><name>cnst2</name></expr></argument>, <argument><expr><name>cnst3</name></expr></argument>, <argument><expr><name>cnst3</name></expr></argument>, <argument><expr><name>cnst4</name></expr></argument>, <argument><expr><name>cnst2</name></expr></argument>, <argument><expr><name>cnst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_H2_SH</name><argument_list>(<argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOT_ADD_SUB_SRARI_PCK</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>cnst0</name></expr></argument>, <argument><expr><name>cnst1</name></expr></argument>, <argument><expr><name>cnst2</name></expr></argument>,
<argument><expr><name>cnst3</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst0</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>cospi_10_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cnst1</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>cospi_22_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cnst2</name> <operator>=</operator> <operator>-</operator><name>cnst0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVEV_H2_SH</name><argument_list>(<argument><expr><name>cnst0</name></expr></argument>, <argument><expr><name>cnst1</name></expr></argument>, <argument><expr><name>cnst1</name></expr></argument>, <argument><expr><name>cnst2</name></expr></argument>, <argument><expr><name>cnst0</name></expr></argument>, <argument><expr><name>cnst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cnst2</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>cospi_26_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cnst3</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>cospi_6_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cnst4</name> <operator>=</operator> <operator>-</operator><name>cnst2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVEV_H2_SH</name><argument_list>(<argument><expr><name>cnst2</name></expr></argument>, <argument><expr><name>cnst3</name></expr></argument>, <argument><expr><name>cnst3</name></expr></argument>, <argument><expr><name>cnst4</name></expr></argument>, <argument><expr><name>cnst2</name></expr></argument>, <argument><expr><name>cnst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_SH</name><argument_list>(<argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_H2_SH</name><argument_list>(<argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOT_ADD_SUB_SRARI_PCK</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>cnst0</name></expr></argument>, <argument><expr><name>cnst1</name></expr></argument>, <argument><expr><name>cnst2</name></expr></argument>,
<argument><expr><name>cnst3</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out7</name> <operator>=</operator> <operator>-</operator><name>s0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out0</name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H2_SH</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out7</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst7</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>+=</operator> <name>out0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res7</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>dst7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res7</name> <operator>+=</operator> <name>out7</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res7</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res7</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst1</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>cospi_24_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cnst0</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>cospi_8_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cnst3</name> <operator>=</operator> <operator>-</operator><name>cnst1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cnst2</name> <operator>=</operator> <operator>-</operator><name>cnst0</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVEV_H2_SH</name><argument_list>(<argument><expr><name>cnst3</name></expr></argument>, <argument><expr><name>cnst0</name></expr></argument>, <argument><expr><name>cnst1</name></expr></argument>, <argument><expr><name>cnst2</name></expr></argument>, <argument><expr><name>cnst3</name></expr></argument>, <argument><expr><name>cnst2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cnst0</name> <operator>=</operator> <call><name>__msa_ilvev_h</name><argument_list>(<argument><expr><name>cnst1</name></expr></argument>, <argument><expr><name>cnst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cnst1</name> <operator>=</operator> <name>cnst0</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_SH</name><argument_list>(<argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_H2_SH</name><argument_list>(<argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOT_ADD_SUB_SRARI_PCK</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>cnst0</name></expr></argument>, <argument><expr><name>cnst2</name></expr></argument>, <argument><expr><name>cnst3</name></expr></argument>,
<argument><expr><name>cnst1</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out6</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <operator>-</operator><name>out1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H2_SH</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out6</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst1</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst6</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>out6</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH2_0_255</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_SH</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnst0</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>cospi_16_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cnst1</name> <operator>=</operator> <operator>-</operator><name>cnst0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cnst1</name> <operator>=</operator> <call><name>__msa_ilvev_h</name><argument_list>(<argument><expr><name>cnst1</name></expr></argument>, <argument><expr><name>cnst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_H2_SH</name><argument_list>(<argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_H2_SH</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>VP9_DOT_SHIFT_RIGHT_PCK_H</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>cnst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out4</name> <operator>=</operator> <call><name>VP9_DOT_SHIFT_RIGHT_PCK_H</name><argument_list>(<argument><expr><name>temp0</name></expr></argument>, <argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>cnst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out3</name> <operator>=</operator> <operator>-</operator><name>out3</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H2_SH</name><argument_list>(<argument><expr><name>out3</name></expr></argument>, <argument><expr><name>out4</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst3</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst4</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>res3</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>out4</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH2_0_255</name><argument_list>(<argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_SH</name><argument_list>(<argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>VP9_DOT_SHIFT_RIGHT_PCK_H</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>cnst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out5</name> <operator>=</operator> <call><name>VP9_DOT_SHIFT_RIGHT_PCK_H</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>, <argument><expr><name>temp3</name></expr></argument>, <argument><expr><name>cnst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out5</name> <operator>=</operator> <operator>-</operator><name>out5</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H2_SH</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out5</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst2</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst5</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>res2</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>out5</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH2_0_255</name><argument_list>(<argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_SH</name><argument_list>(<argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_iadst_idct_8x8_add_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>eob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v8i16</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>, <decl><type ref="prev"/><name>in4</name></decl>, <decl><type ref="prev"/><name>in5</name></decl>, <decl><type ref="prev"/><name>in6</name></decl>, <decl><type ref="prev"/><name>in7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_IADST8x8_1D</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>,
<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>,
<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_IDCT8x8_1D</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>,
<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_ADDBLK_ST8x4_UB</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_ADDBLK_ST8x4_UB</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_idct_iadst_8x8_add_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>eob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v8i16</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>, <decl><type ref="prev"/><name>in4</name></decl>, <decl><type ref="prev"/><name>in5</name></decl>, <decl><type ref="prev"/><name>in6</name></decl>, <decl><type ref="prev"/><name>in7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>VP9_IDCT8x8_1D</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>,
<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>,
<argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_IADST8x8_1D</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>,
<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_ADDBLK_ST8x4_UB</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_ADDBLK_ST8x4_UB</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP9_IADST8x16_1D</name><parameter_list>(<parameter><type><name>r0</name></type></parameter>, <parameter><type><name>r1</name></type></parameter>, <parameter><type><name>r2</name></type></parameter>, <parameter><type><name>r3</name></type></parameter>, <parameter><type><name>r4</name></type></parameter>, <parameter><type><name>r5</name></type></parameter>, <parameter><type><name>r6</name></type></parameter>, <parameter><type><name>r7</name></type></parameter>, <parameter><type><name>r8</name></type></parameter>, <parameter><type><name>r9</name></type></parameter>, <parameter><type><name>r10</name></type></parameter>, <parameter><type><name>r11</name></type></parameter>, <parameter><type><name>r12</name></type></parameter>, <parameter><type><name>r13</name></type></parameter>, <parameter><type><name>r14</name></type></parameter>, <parameter><type><name>r15</name></type></parameter>, <parameter><type><name>out0</name></type></parameter>, <parameter><type><name>out1</name></type></parameter>, <parameter><type><name>out2</name></type></parameter>, <parameter><type><name>out3</name></type></parameter>, <parameter><type><name>out4</name></type></parameter>, <parameter><type><name>out5</name></type></parameter>, <parameter><type><name>out6</name></type></parameter>, <parameter><type><name>out7</name></type></parameter>, <parameter><type><name>out8</name></type></parameter>, <parameter><type><name>out9</name></type></parameter>, <parameter><type><name>out10</name></type></parameter>, <parameter><type><name>out11</name></type></parameter>, <parameter><type><name>out12</name></type></parameter>, <parameter><type><name>out13</name></type></parameter>, <parameter><type><name>out14</name></type></parameter>, <parameter><type><name>out15</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v8i16 g0_m, g1_m, g2_m, g3_m, g4_m, g5_m, g6_m, g7_m; v8i16 g8_m, g9_m, g10_m, g11_m, g12_m, g13_m, g14_m, g15_m; v8i16 h0_m, h1_m, h2_m, h3_m, h4_m, h5_m, h6_m, h7_m; v8i16 h8_m, h9_m, h10_m, h11_m; v8i16 k0_m, k1_m, k2_m, k3_m; k0_m = VP9_SET_COSPI_PAIR(cospi_1_64, cospi_31_64); k1_m = VP9_SET_COSPI_PAIR(cospi_31_64, -cospi_1_64); k2_m = VP9_SET_COSPI_PAIR(cospi_17_64, cospi_15_64); k3_m = VP9_SET_COSPI_PAIR(cospi_15_64, -cospi_17_64); VP9_MADD_BF(r15, r0, r7, r8, k0_m, k1_m, k2_m, k3_m, g0_m, g1_m, g2_m, g3_m); k0_m = VP9_SET_COSPI_PAIR(cospi_5_64, cospi_27_64); k1_m = VP9_SET_COSPI_PAIR(cospi_27_64, -cospi_5_64); k2_m = VP9_SET_COSPI_PAIR(cospi_21_64, cospi_11_64); k3_m = VP9_SET_COSPI_PAIR(cospi_11_64, -cospi_21_64); VP9_MADD_BF(r13, r2, r5, r10, k0_m, k1_m, k2_m, k3_m, g4_m, g5_m, g6_m, g7_m); k0_m = VP9_SET_COSPI_PAIR(cospi_9_64, cospi_23_64); k1_m = VP9_SET_COSPI_PAIR(cospi_23_64, -cospi_9_64); k2_m = VP9_SET_COSPI_PAIR(cospi_25_64, cospi_7_64); k3_m = VP9_SET_COSPI_PAIR(cospi_7_64, -cospi_25_64); VP9_MADD_BF(r11, r4, r3, r12, k0_m, k1_m, k2_m, k3_m, g8_m, g9_m, g10_m, g11_m); k0_m = VP9_SET_COSPI_PAIR(cospi_13_64, cospi_19_64); k1_m = VP9_SET_COSPI_PAIR(cospi_19_64, -cospi_13_64); k2_m = VP9_SET_COSPI_PAIR(cospi_29_64, cospi_3_64); k3_m = VP9_SET_COSPI_PAIR(cospi_3_64, -cospi_29_64); VP9_MADD_BF(r9, r6, r1, r14, k0_m, k1_m, k2_m, k3_m, g12_m, g13_m, g14_m, g15_m); k0_m = VP9_SET_COSPI_PAIR(cospi_4_64, cospi_28_64); k1_m = VP9_SET_COSPI_PAIR(cospi_28_64, -cospi_4_64); k2_m = VP9_SET_COSPI_PAIR(-cospi_28_64, cospi_4_64); VP9_MADD_BF(g1_m, g3_m, g9_m, g11_m, k0_m, k1_m, k2_m, k0_m, h0_m, h1_m, h2_m, h3_m); k0_m = VP9_SET_COSPI_PAIR(cospi_12_64, cospi_20_64); k1_m = VP9_SET_COSPI_PAIR(-cospi_20_64, cospi_12_64); k2_m = VP9_SET_COSPI_PAIR(cospi_20_64, -cospi_12_64); VP9_MADD_BF(g7_m, g5_m, g15_m, g13_m, k0_m, k1_m, k2_m, k0_m, h4_m, h5_m, h6_m, h7_m); BUTTERFLY_4(h0_m, h2_m, h6_m, h4_m, out8, out9, out11, out10); BUTTERFLY_8(g0_m, g2_m, g4_m, g6_m, g14_m, g12_m, g10_m, g8_m, h8_m, h9_m, h10_m, h11_m, h6_m, h4_m, h2_m, h0_m); BUTTERFLY_4(h8_m, h9_m, h11_m, h10_m, out0, out1, h11_m, h10_m); k0_m = VP9_SET_COSPI_PAIR(cospi_8_64, cospi_24_64); k1_m = VP9_SET_COSPI_PAIR(cospi_24_64, -cospi_8_64); k2_m = VP9_SET_COSPI_PAIR(-cospi_24_64, cospi_8_64); VP9_MADD_BF(h0_m, h2_m, h4_m, h6_m, k0_m, k1_m, k2_m, k0_m, out4, out6, out5, out7); VP9_MADD_BF(h1_m, h3_m, h5_m, h7_m, k0_m, k1_m, k2_m, k0_m, out12, out14, out13, out15); k0_m = VP9_SET_COSPI_PAIR(cospi_16_64, cospi_16_64); k1_m = VP9_SET_COSPI_PAIR(-cospi_16_64, -cospi_16_64); k2_m = VP9_SET_COSPI_PAIR(cospi_16_64, -cospi_16_64); k3_m = VP9_SET_COSPI_PAIR(-cospi_16_64, cospi_16_64); VP9_MADD_SHORT(h10_m, h11_m, k1_m, k2_m, out2, out3); VP9_MADD_SHORT(out6, out7, k0_m, k3_m, out6, out7); VP9_MADD_SHORT(out10, out11, k0_m, k3_m, out10, out11); VP9_MADD_SHORT(out14, out15, k1_m, k2_m, out14, out15); }</cpp:value></cpp:define>









































































<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_idct16_1d_columns_addblk_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v8i16</name></type> <name>loc0</name></decl>, <decl><type ref="prev"/><name>loc1</name></decl>, <decl><type ref="prev"/><name>loc2</name></decl>, <decl><type ref="prev"/><name>loc3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>reg0</name></decl>, <decl><type ref="prev"/><name>reg2</name></decl>, <decl><type ref="prev"/><name>reg4</name></decl>, <decl><type ref="prev"/><name>reg6</name></decl>, <decl><type ref="prev"/><name>reg8</name></decl>, <decl><type ref="prev"/><name>reg10</name></decl>, <decl><type ref="prev"/><name>reg12</name></decl>, <decl><type ref="prev"/><name>reg14</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>reg3</name></decl>, <decl><type ref="prev"/><name>reg13</name></decl>, <decl><type ref="prev"/><name>reg11</name></decl>, <decl><type ref="prev"/><name>reg5</name></decl>, <decl><type ref="prev"/><name>reg7</name></decl>, <decl><type ref="prev"/><name>reg9</name></decl>, <decl><type ref="prev"/><name>reg1</name></decl>, <decl><type ref="prev"/><name>reg15</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>, <decl><type ref="prev"/><name>tmp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>LD_SH16</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,
<argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>,
<argument><expr><name>reg8</name></expr></argument>, <argument><expr><name>reg9</name></expr></argument>, <argument><expr><name>reg10</name></expr></argument>, <argument><expr><name>reg11</name></expr></argument>, <argument><expr><name>reg12</name></expr></argument>, <argument><expr><name>reg13</name></expr></argument>, <argument><expr><name>reg14</name></expr></argument>, <argument><expr><name>reg15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg14</name></expr></argument>, <argument><expr><name>cospi_28_64</name></expr></argument>, <argument><expr><name>cospi_4_64</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg14</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg10</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>cospi_12_64</name></expr></argument>, <argument><expr><name>cospi_20_64</name></expr></argument>, <argument><expr><name>reg10</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg14</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg10</name></expr></argument>, <argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>reg14</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg14</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg8</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg12</name></expr></argument>, <argument><expr><name>cospi_24_64</name></expr></argument>, <argument><expr><name>cospi_8_64</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>reg8</name></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg12</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg10</name></expr></argument>, <argument><expr><name>reg14</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reg0</name> <operator>=</operator> <name>reg2</name> <operator>-</operator> <name>loc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg2</name> <operator>=</operator> <name>reg2</name> <operator>+</operator> <name>loc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg12</name> <operator>=</operator> <name>reg14</name> <operator>-</operator> <name>loc0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg14</name> <operator>=</operator> <name>reg14</name> <operator>+</operator> <name>loc0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg4</name> <operator>=</operator> <name>reg6</name> <operator>-</operator> <name>loc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg6</name> <operator>=</operator> <name>reg6</name> <operator>+</operator> <name>loc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg8</name> <operator>=</operator> <name>reg10</name> <operator>-</operator> <name>loc2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg10</name> <operator>=</operator> <name>reg10</name> <operator>+</operator> <name>loc2</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg15</name></expr></argument>, <argument><expr><name>cospi_30_64</name></expr></argument>, <argument><expr><name>cospi_2_64</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg9</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>cospi_14_64</name></expr></argument>, <argument><expr><name>cospi_18_64</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reg9</name> <operator>=</operator> <name>reg1</name> <operator>-</operator> <name>loc2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg1</name> <operator>=</operator> <name>reg1</name> <operator>+</operator> <name>loc2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg7</name> <operator>=</operator> <name>reg15</name> <operator>-</operator> <name>loc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg15</name> <operator>=</operator> <name>reg15</name> <operator>+</operator> <name>loc3</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg11</name></expr></argument>, <argument><expr><name>cospi_22_64</name></expr></argument>, <argument><expr><name>cospi_10_64</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg13</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>cospi_6_64</name></expr></argument>, <argument><expr><name>cospi_26_64</name></expr></argument>, <argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>reg11</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg13</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg11</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>loc1</name> <operator>=</operator> <name>reg15</name> <operator>+</operator> <name>reg3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg3</name> <operator>=</operator> <name>reg15</name> <operator>-</operator> <name>reg3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>loc2</name> <operator>=</operator> <name>reg2</name> <operator>+</operator> <name>loc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg15</name> <operator>=</operator> <name>reg2</name> <operator>-</operator> <name>loc1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>loc1</name> <operator>=</operator> <name>reg1</name> <operator>+</operator> <name>reg13</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg13</name> <operator>=</operator> <name>reg1</name> <operator>-</operator> <name>reg13</name></expr>;</expr_stmt>
<expr_stmt><expr><name>loc0</name> <operator>=</operator> <name>reg0</name> <operator>+</operator> <name>loc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>loc1</name> <operator>=</operator> <name>reg0</name> <operator>-</operator> <name>loc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <name>loc0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <name>loc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg0</name> <operator>=</operator> <name>loc2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>reg9</name></expr></argument>, <argument><expr><name>cospi_24_64</name></expr></argument>, <argument><expr><name>cospi_8_64</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>reg9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><name>reg5</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><operator>-</operator><name>reg11</name><operator>)</operator></expr></argument>, <argument><expr><name>cospi_8_64</name></expr></argument>, <argument><expr><name>cospi_24_64</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>,
<argument><expr><name>reg11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>loc0</name> <operator>=</operator> <name>reg9</name> <operator>+</operator> <name>reg5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg5</name> <operator>=</operator> <name>reg9</name> <operator>-</operator> <name>reg5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg2</name> <operator>=</operator> <name>reg6</name> <operator>+</operator> <name>loc0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg1</name> <operator>=</operator> <name>reg6</name> <operator>-</operator> <name>loc0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>loc0</name> <operator>=</operator> <name>reg7</name> <operator>+</operator> <name>reg11</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg11</name> <operator>=</operator> <name>reg7</name> <operator>-</operator> <name>reg11</name></expr>;</expr_stmt>
<expr_stmt><expr><name>loc1</name> <operator>=</operator> <name>reg4</name> <operator>+</operator> <name>loc0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>loc2</name> <operator>=</operator> <name>reg4</name> <operator>-</operator> <name>loc0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <name>loc1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg11</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>reg8</name></expr></argument>, <argument><expr><name>reg10</name></expr></argument>, <argument><expr><name>reg11</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg9</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reg10</name> <operator>=</operator> <name>loc0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg11</name> <operator>=</operator> <name>loc1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg13</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>reg12</name></expr></argument>, <argument><expr><name>reg14</name></expr></argument>, <argument><expr><name>reg13</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg8</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg13</name> <operator>=</operator> <name>loc2</name></expr>;</expr_stmt>


<expr_stmt><expr><name>reg12</name> <operator>=</operator> <name>tmp5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg14</name> <operator>=</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg3</name> <operator>=</operator> <name>tmp7</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_ADDBLK_ST8x4_UB</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>reg8</name></expr></argument>, <argument><expr><name>reg10</name></expr></argument>, <argument><expr><name>reg12</name></expr></argument>, <argument><expr><name>reg14</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_ADDBLK_ST8x4_UB</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>reg8</name></expr></argument>, <argument><expr><name>reg10</name></expr></argument>, <argument><expr><name>reg12</name></expr></argument>, <argument><expr><name>reg14</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg13</name></expr></argument>, <argument><expr><name>reg11</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_ADDBLK_ST8x4_UB</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg13</name></expr></argument>, <argument><expr><name>reg11</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>reg9</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg15</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_ADDBLK_ST8x4_UB</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>reg9</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_idct16_1d_columns_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v8i16</name></type> <name>loc0</name></decl>, <decl><type ref="prev"/><name>loc1</name></decl>, <decl><type ref="prev"/><name>loc2</name></decl>, <decl><type ref="prev"/><name>loc3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>reg0</name></decl>, <decl><type ref="prev"/><name>reg2</name></decl>, <decl><type ref="prev"/><name>reg4</name></decl>, <decl><type ref="prev"/><name>reg6</name></decl>, <decl><type ref="prev"/><name>reg8</name></decl>, <decl><type ref="prev"/><name>reg10</name></decl>, <decl><type ref="prev"/><name>reg12</name></decl>, <decl><type ref="prev"/><name>reg14</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>reg3</name></decl>, <decl><type ref="prev"/><name>reg13</name></decl>, <decl><type ref="prev"/><name>reg11</name></decl>, <decl><type ref="prev"/><name>reg5</name></decl>, <decl><type ref="prev"/><name>reg7</name></decl>, <decl><type ref="prev"/><name>reg9</name></decl>, <decl><type ref="prev"/><name>reg1</name></decl>, <decl><type ref="prev"/><name>reg15</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>, <decl><type ref="prev"/><name>tmp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>LD_SH16</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,
<argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>,
<argument><expr><name>reg8</name></expr></argument>, <argument><expr><name>reg9</name></expr></argument>, <argument><expr><name>reg10</name></expr></argument>, <argument><expr><name>reg11</name></expr></argument>, <argument><expr><name>reg12</name></expr></argument>, <argument><expr><name>reg13</name></expr></argument>, <argument><expr><name>reg14</name></expr></argument>, <argument><expr><name>reg15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg14</name></expr></argument>, <argument><expr><name>cospi_28_64</name></expr></argument>, <argument><expr><name>cospi_4_64</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg14</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg10</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>cospi_12_64</name></expr></argument>, <argument><expr><name>cospi_20_64</name></expr></argument>, <argument><expr><name>reg10</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg14</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg10</name></expr></argument>, <argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>reg14</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg14</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg8</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg12</name></expr></argument>, <argument><expr><name>cospi_24_64</name></expr></argument>, <argument><expr><name>cospi_8_64</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>reg8</name></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg12</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg10</name></expr></argument>, <argument><expr><name>reg14</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reg0</name> <operator>=</operator> <name>reg2</name> <operator>-</operator> <name>loc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg2</name> <operator>=</operator> <name>reg2</name> <operator>+</operator> <name>loc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg12</name> <operator>=</operator> <name>reg14</name> <operator>-</operator> <name>loc0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg14</name> <operator>=</operator> <name>reg14</name> <operator>+</operator> <name>loc0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg4</name> <operator>=</operator> <name>reg6</name> <operator>-</operator> <name>loc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg6</name> <operator>=</operator> <name>reg6</name> <operator>+</operator> <name>loc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg8</name> <operator>=</operator> <name>reg10</name> <operator>-</operator> <name>loc2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg10</name> <operator>=</operator> <name>reg10</name> <operator>+</operator> <name>loc2</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg15</name></expr></argument>, <argument><expr><name>cospi_30_64</name></expr></argument>, <argument><expr><name>cospi_2_64</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg9</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>cospi_14_64</name></expr></argument>, <argument><expr><name>cospi_18_64</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reg9</name> <operator>=</operator> <name>reg1</name> <operator>-</operator> <name>loc2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg1</name> <operator>=</operator> <name>reg1</name> <operator>+</operator> <name>loc2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg7</name> <operator>=</operator> <name>reg15</name> <operator>-</operator> <name>loc3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg15</name> <operator>=</operator> <name>reg15</name> <operator>+</operator> <name>loc3</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg11</name></expr></argument>, <argument><expr><name>cospi_22_64</name></expr></argument>, <argument><expr><name>cospi_10_64</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg13</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>cospi_6_64</name></expr></argument>, <argument><expr><name>cospi_26_64</name></expr></argument>, <argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>reg11</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg13</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg11</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>loc1</name> <operator>=</operator> <name>reg15</name> <operator>+</operator> <name>reg3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg3</name> <operator>=</operator> <name>reg15</name> <operator>-</operator> <name>reg3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>loc2</name> <operator>=</operator> <name>reg2</name> <operator>+</operator> <name>loc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg15</name> <operator>=</operator> <name>reg2</name> <operator>-</operator> <name>loc1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>loc1</name> <operator>=</operator> <name>reg1</name> <operator>+</operator> <name>reg13</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg13</name> <operator>=</operator> <name>reg1</name> <operator>-</operator> <name>reg13</name></expr>;</expr_stmt>
<expr_stmt><expr><name>loc0</name> <operator>=</operator> <name>reg0</name> <operator>+</operator> <name>loc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>loc1</name> <operator>=</operator> <name>reg0</name> <operator>-</operator> <name>loc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <name>loc0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <name>loc1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg0</name> <operator>=</operator> <name>loc2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>reg9</name></expr></argument>, <argument><expr><name>cospi_24_64</name></expr></argument>, <argument><expr><name>cospi_8_64</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>reg9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><name>reg5</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><operator>-</operator><name>reg11</name><operator>)</operator></expr></argument>, <argument><expr><name>cospi_8_64</name></expr></argument>, <argument><expr><name>cospi_24_64</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>,
<argument><expr><name>reg11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>loc0</name> <operator>=</operator> <name>reg9</name> <operator>+</operator> <name>reg5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg5</name> <operator>=</operator> <name>reg9</name> <operator>-</operator> <name>reg5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg2</name> <operator>=</operator> <name>reg6</name> <operator>+</operator> <name>loc0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg1</name> <operator>=</operator> <name>reg6</name> <operator>-</operator> <name>loc0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>loc0</name> <operator>=</operator> <name>reg7</name> <operator>+</operator> <name>reg11</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg11</name> <operator>=</operator> <name>reg7</name> <operator>-</operator> <name>reg11</name></expr>;</expr_stmt>
<expr_stmt><expr><name>loc1</name> <operator>=</operator> <name>reg4</name> <operator>+</operator> <name>loc0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>loc2</name> <operator>=</operator> <name>reg4</name> <operator>-</operator> <name>loc0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <name>loc1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg11</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>reg8</name></expr></argument>, <argument><expr><name>reg10</name></expr></argument>, <argument><expr><name>reg11</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg9</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reg10</name> <operator>=</operator> <name>loc0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg11</name> <operator>=</operator> <name>loc1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg13</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>reg12</name></expr></argument>, <argument><expr><name>reg14</name></expr></argument>, <argument><expr><name>reg13</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg8</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg13</name> <operator>=</operator> <name>loc2</name></expr>;</expr_stmt>


<expr_stmt><expr><name>reg12</name> <operator>=</operator> <name>tmp5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg14</name> <operator>=</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg3</name> <operator>=</operator> <name>tmp7</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg8</name></expr></argument>, <argument><expr><name>reg10</name></expr></argument>, <argument><expr><name>reg12</name></expr></argument>, <argument><expr><name>reg14</name></expr></argument>,
<argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg8</name></expr></argument>, <argument><expr><name>reg10</name></expr></argument>, <argument><expr><name>reg12</name></expr></argument>, <argument><expr><name>reg14</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH4</name><argument_list>(<argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH4</name><argument_list>(<argument><expr><name>reg8</name></expr></argument>, <argument><expr><name>reg10</name></expr></argument>, <argument><expr><name>reg12</name></expr></argument>, <argument><expr><name>reg14</name></expr></argument>, <argument><expr><operator>(</operator><name>output</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg13</name></expr></argument>, <argument><expr><name>reg11</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>reg9</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg15</name></expr></argument>,
<argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg13</name></expr></argument>, <argument><expr><name>reg11</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>reg9</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH4</name><argument_list>(<argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg13</name></expr></argument>, <argument><expr><name>reg11</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><operator>(</operator><name>output</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH4</name><argument_list>(<argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>reg9</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg15</name></expr></argument>, <argument><expr><operator>(</operator><name>output</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_idct16x16_1_add_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>vec</name></decl>, <decl><type ref="prev"/><name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>, <decl><type ref="prev"/><name>res4</name></decl>, <decl><type ref="prev"/><name>res5</name></decl>, <decl><type ref="prev"/><name>res6</name></decl>, <decl><type ref="prev"/><name>res7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>, <decl><type ref="prev"/><name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ROUND_POWER_OF_TWO</name><argument_list>(<argument><expr><operator>(</operator><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>cospi_16_64</name><operator>)</operator></expr></argument>, <argument><expr><name>VP9_DCT_CONST_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ROUND_POWER_OF_TWO</name><argument_list>(<argument><expr><operator>(</operator><name>out</name> <operator>*</operator> <name>cospi_16_64</name><operator>)</operator></expr></argument>, <argument><expr><name>VP9_DCT_CONST_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ROUND_POWER_OF_TWO</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>vec</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>,
<argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>,
<argument><expr><name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH8_0_255</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B4_UB</name><argument_list>(<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>,
<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB4</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_idct16x16_10_colcol_addblk_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <name><name>out_arr</name><index>[<expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></type> <name>ALLOC_ALIGNED</name><argument_list>(<argument><expr><name>ALIGNMENT</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>out_arr</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>vp9_idct16_1d_columns_msa</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">12</literal></expr>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier> (
"sw $zero, 0(%[out]) \n\t"
"sw $zero, 4(%[out]) \n\t"
"sw $zero, 8(%[out]) \n\t"
"sw $zero, 12(%[out]) \n\t"
"sw $zero, 16(%[out]) \n\t"
"sw $zero, 20(%[out]) \n\t"
"sw $zero, 24(%[out]) \n\t"
"sw $zero, 28(%[out]) \n\t"

:
: [out] "r" (out)
);</asm>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>out_arr</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vp9_idct16_1d_columns_addblk_msa</name><argument_list>(<argument><expr><operator>(</operator><name>out</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr></argument>,
<argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_idct16x16_colcol_addblk_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <name><name>out_arr</name><index>[<expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></type> <name>ALLOC_ALIGNED</name><argument_list>(<argument><expr><name>ALIGNMENT</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>out_arr</name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vp9_idct16_1d_columns_msa</name><argument_list>(<argument><expr><operator>(</operator><name>input</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>out</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vp9_idct16_1d_columns_addblk_msa</name><argument_list>(<argument><expr><operator>(</operator><name>out</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr></argument>,
<argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_iadst16_1d_columns_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v8i16</name></type> <name>r0</name></decl>, <decl><type ref="prev"/><name>r1</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>, <decl><type ref="prev"/><name>r3</name></decl>, <decl><type ref="prev"/><name>r4</name></decl>, <decl><type ref="prev"/><name>r5</name></decl>, <decl><type ref="prev"/><name>r6</name></decl>, <decl><type ref="prev"/><name>r7</name></decl>, <decl><type ref="prev"/><name>r8</name></decl>, <decl><type ref="prev"/><name>r9</name></decl>, <decl><type ref="prev"/><name>r10</name></decl>, <decl><type ref="prev"/><name>r11</name></decl>, <decl><type ref="prev"/><name>r12</name></decl>, <decl><type ref="prev"/><name>r13</name></decl>, <decl><type ref="prev"/><name>r14</name></decl>, <decl><type ref="prev"/><name>r15</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>l0</name></decl>, <decl><type ref="prev"/><name>l1</name></decl>, <decl><type ref="prev"/><name>l2</name></decl>, <decl><type ref="prev"/><name>l3</name></decl>, <decl><type ref="prev"/><name>l4</name></decl>, <decl><type ref="prev"/><name>l5</name></decl>, <decl><type ref="prev"/><name>l6</name></decl>, <decl><type ref="prev"/><name>l7</name></decl>, <decl><type ref="prev"/><name>l8</name></decl>, <decl><type ref="prev"/><name>l9</name></decl>, <decl><type ref="prev"/><name>l10</name></decl>, <decl><type ref="prev"/><name>l11</name></decl>, <decl><type ref="prev"/><name>l12</name></decl>, <decl><type ref="prev"/><name>l13</name></decl>, <decl><type ref="prev"/><name>l14</name></decl>, <decl><type ref="prev"/><name>l15</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>LD_SH16</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,
<argument><expr><name>l0</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name>l3</name></expr></argument>, <argument><expr><name>l4</name></expr></argument>, <argument><expr><name>l5</name></expr></argument>, <argument><expr><name>l6</name></expr></argument>, <argument><expr><name>l7</name></expr></argument>,
<argument><expr><name>l8</name></expr></argument>, <argument><expr><name>l9</name></expr></argument>, <argument><expr><name>l10</name></expr></argument>, <argument><expr><name>l11</name></expr></argument>, <argument><expr><name>l12</name></expr></argument>, <argument><expr><name>l13</name></expr></argument>, <argument><expr><name>l14</name></expr></argument>, <argument><expr><name>l15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>VP9_IADST8x16_1D</name><argument_list>(<argument><expr><name>l0</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name>l3</name></expr></argument>, <argument><expr><name>l4</name></expr></argument>, <argument><expr><name>l5</name></expr></argument>, <argument><expr><name>l6</name></expr></argument>, <argument><expr><name>l7</name></expr></argument>,
<argument><expr><name>l8</name></expr></argument>, <argument><expr><name>l9</name></expr></argument>, <argument><expr><name>l10</name></expr></argument>, <argument><expr><name>l11</name></expr></argument>, <argument><expr><name>l12</name></expr></argument>, <argument><expr><name>l13</name></expr></argument>, <argument><expr><name>l14</name></expr></argument>, <argument><expr><name>l15</name></expr></argument>,
<argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r3</name></expr></argument>, <argument><expr><name>r4</name></expr></argument>, <argument><expr><name>r5</name></expr></argument>, <argument><expr><name>r6</name></expr></argument>, <argument><expr><name>r7</name></expr></argument>,
<argument><expr><name>r8</name></expr></argument>, <argument><expr><name>r9</name></expr></argument>, <argument><expr><name>r10</name></expr></argument>, <argument><expr><name>r11</name></expr></argument>, <argument><expr><name>r12</name></expr></argument>, <argument><expr><name>r13</name></expr></argument>, <argument><expr><name>r14</name></expr></argument>, <argument><expr><name>r15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l1</name> <operator>=</operator> <operator>-</operator><name>r8</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l3</name> <operator>=</operator> <operator>-</operator><name>r4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l13</name> <operator>=</operator> <operator>-</operator><name>r13</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l15</name> <operator>=</operator> <operator>-</operator><name>r1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>r0</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>r12</name></expr></argument>, <argument><expr><name>l3</name></expr></argument>, <argument><expr><name>r6</name></expr></argument>, <argument><expr><name>r14</name></expr></argument>, <argument><expr><name>r10</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>,
<argument><expr><name>l0</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name>l3</name></expr></argument>, <argument><expr><name>l4</name></expr></argument>, <argument><expr><name>l5</name></expr></argument>, <argument><expr><name>l6</name></expr></argument>, <argument><expr><name>l7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>l0</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name>l3</name></expr></argument>, <argument><expr><name>l4</name></expr></argument>, <argument><expr><name>l5</name></expr></argument>, <argument><expr><name>l6</name></expr></argument>, <argument><expr><name>l7</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>r3</name></expr></argument>, <argument><expr><name>r11</name></expr></argument>, <argument><expr><name>r15</name></expr></argument>, <argument><expr><name>r7</name></expr></argument>, <argument><expr><name>r5</name></expr></argument>, <argument><expr><name>l13</name></expr></argument>, <argument><expr><name>r9</name></expr></argument>, <argument><expr><name>l15</name></expr></argument>,
<argument><expr><name>l8</name></expr></argument>, <argument><expr><name>l9</name></expr></argument>, <argument><expr><name>l10</name></expr></argument>, <argument><expr><name>l11</name></expr></argument>, <argument><expr><name>l12</name></expr></argument>, <argument><expr><name>l13</name></expr></argument>, <argument><expr><name>l14</name></expr></argument>, <argument><expr><name>l15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>l8</name></expr></argument>, <argument><expr><name>l9</name></expr></argument>, <argument><expr><name>l10</name></expr></argument>, <argument><expr><name>l11</name></expr></argument>, <argument><expr><name>l12</name></expr></argument>, <argument><expr><name>l13</name></expr></argument>, <argument><expr><name>l14</name></expr></argument>, <argument><expr><name>l15</name></expr></argument>, <argument><expr><operator>(</operator><name>output</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_iadst16_1d_columns_addblk_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v8i16</name></type> <name>v0</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>, <decl><type ref="prev"/><name>v4</name></decl>, <decl><type ref="prev"/><name>v6</name></decl>, <decl><type ref="prev"/><name>k0</name></decl>, <decl><type ref="prev"/><name>k1</name></decl>, <decl><type ref="prev"/><name>k2</name></decl>, <decl><type ref="prev"/><name>k3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>r0</name></decl>, <decl><type ref="prev"/><name>r1</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>, <decl><type ref="prev"/><name>r3</name></decl>, <decl><type ref="prev"/><name>r4</name></decl>, <decl><type ref="prev"/><name>r5</name></decl>, <decl><type ref="prev"/><name>r6</name></decl>, <decl><type ref="prev"/><name>r7</name></decl>, <decl><type ref="prev"/><name>r8</name></decl>, <decl><type ref="prev"/><name>r9</name></decl>, <decl><type ref="prev"/><name>r10</name></decl>, <decl><type ref="prev"/><name>r11</name></decl>, <decl><type ref="prev"/><name>r12</name></decl>, <decl><type ref="prev"/><name>r13</name></decl>, <decl><type ref="prev"/><name>r14</name></decl>, <decl><type ref="prev"/><name>r15</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>, <decl><type ref="prev"/><name>out3</name></decl>, <decl><type ref="prev"/><name>out4</name></decl>, <decl><type ref="prev"/><name>out5</name></decl>, <decl><type ref="prev"/><name>out6</name></decl>, <decl><type ref="prev"/><name>out7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>out8</name></decl>, <decl><type ref="prev"/><name>out9</name></decl>, <decl><type ref="prev"/><name>out10</name></decl>, <decl><type ref="prev"/><name>out11</name></decl>, <decl><type ref="prev"/><name>out12</name></decl>, <decl><type ref="prev"/><name>out13</name></decl>, <decl><type ref="prev"/><name>out14</name></decl>, <decl><type ref="prev"/><name>out15</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>g0</name></decl>, <decl><type ref="prev"/><name>g1</name></decl>, <decl><type ref="prev"/><name>g2</name></decl>, <decl><type ref="prev"/><name>g3</name></decl>, <decl><type ref="prev"/><name>g4</name></decl>, <decl><type ref="prev"/><name>g5</name></decl>, <decl><type ref="prev"/><name>g6</name></decl>, <decl><type ref="prev"/><name>g7</name></decl>, <decl><type ref="prev"/><name>g8</name></decl>, <decl><type ref="prev"/><name>g9</name></decl>, <decl><type ref="prev"/><name>g10</name></decl>, <decl><type ref="prev"/><name>g11</name></decl>, <decl><type ref="prev"/><name>g12</name></decl>, <decl><type ref="prev"/><name>g13</name></decl>, <decl><type ref="prev"/><name>g14</name></decl>, <decl><type ref="prev"/><name>g15</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>h0</name></decl>, <decl><type ref="prev"/><name>h1</name></decl>, <decl><type ref="prev"/><name>h2</name></decl>, <decl><type ref="prev"/><name>h3</name></decl>, <decl><type ref="prev"/><name>h4</name></decl>, <decl><type ref="prev"/><name>h5</name></decl>, <decl><type ref="prev"/><name>h6</name></decl>, <decl><type ref="prev"/><name>h7</name></decl>, <decl><type ref="prev"/><name>h8</name></decl>, <decl><type ref="prev"/><name>h9</name></decl>, <decl><type ref="prev"/><name>h10</name></decl>, <decl><type ref="prev"/><name>h11</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>, <decl><type ref="prev"/><name>res4</name></decl>, <decl><type ref="prev"/><name>res5</name></decl>, <decl><type ref="prev"/><name>res6</name></decl>, <decl><type ref="prev"/><name>res7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>res8</name></decl>, <decl><type ref="prev"/><name>res9</name></decl>, <decl><type ref="prev"/><name>res10</name></decl>, <decl><type ref="prev"/><name>res11</name></decl>, <decl><type ref="prev"/><name>res12</name></decl>, <decl><type ref="prev"/><name>res13</name></decl>, <decl><type ref="prev"/><name>res14</name></decl>, <decl><type ref="prev"/><name>res15</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>, <decl><type ref="prev"/><name>dst4</name></decl>, <decl><type ref="prev"/><name>dst5</name></decl>, <decl><type ref="prev"/><name>dst6</name></decl>, <decl><type ref="prev"/><name>dst7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst8</name></decl>, <decl><type ref="prev"/><name>dst9</name></decl>, <decl><type ref="prev"/><name>dst10</name></decl>, <decl><type ref="prev"/><name>dst11</name></decl>, <decl><type ref="prev"/><name>dst12</name></decl>, <decl><type ref="prev"/><name>dst13</name></decl>, <decl><type ref="prev"/><name>dst14</name></decl>, <decl><type ref="prev"/><name>dst15</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r3</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r4</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r7</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r8</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r11</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">11</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r12</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">12</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r15</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>k0</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_1_64</name></expr></argument>, <argument><expr><name>cospi_31_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_31_64</name></expr></argument>, <argument><expr><operator>-</operator><name>cospi_1_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k2</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_17_64</name></expr></argument>, <argument><expr><name>cospi_15_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k3</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_15_64</name></expr></argument>, <argument><expr><operator>-</operator><name>cospi_17_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_MADD_BF</name><argument_list>(<argument><expr><name>r15</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r7</name></expr></argument>, <argument><expr><name>r8</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>g0</name></expr></argument>, <argument><expr><name>g1</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>g3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k0</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_9_64</name></expr></argument>, <argument><expr><name>cospi_23_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_23_64</name></expr></argument>, <argument><expr><operator>-</operator><name>cospi_9_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k2</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_25_64</name></expr></argument>, <argument><expr><name>cospi_7_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k3</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_7_64</name></expr></argument>, <argument><expr><operator>-</operator><name>cospi_25_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_MADD_BF</name><argument_list>(<argument><expr><name>r11</name></expr></argument>, <argument><expr><name>r4</name></expr></argument>, <argument><expr><name>r3</name></expr></argument>, <argument><expr><name>r12</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>g8</name></expr></argument>, <argument><expr><name>g9</name></expr></argument>, <argument><expr><name>g10</name></expr></argument>, <argument><expr><name>g11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>g0</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>g10</name></expr></argument>, <argument><expr><name>g8</name></expr></argument>, <argument><expr><name>h8</name></expr></argument>, <argument><expr><name>h9</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k0</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_4_64</name></expr></argument>, <argument><expr><name>cospi_28_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_28_64</name></expr></argument>, <argument><expr><operator>-</operator><name>cospi_4_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k2</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><operator>-</operator><name>cospi_28_64</name></expr></argument>, <argument><expr><name>cospi_4_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_MADD_BF</name><argument_list>(<argument><expr><name>g1</name></expr></argument>, <argument><expr><name>g3</name></expr></argument>, <argument><expr><name>g9</name></expr></argument>, <argument><expr><name>g11</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>h0</name></expr></argument>, <argument><expr><name>h1</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>, <argument><expr><name>h3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r5</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r6</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r9</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r10</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r13</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">13</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r14</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>input</name> <operator>+</operator> <literal type="number">14</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k0</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_5_64</name></expr></argument>, <argument><expr><name>cospi_27_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_27_64</name></expr></argument>, <argument><expr><operator>-</operator><name>cospi_5_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k2</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_21_64</name></expr></argument>, <argument><expr><name>cospi_11_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k3</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_11_64</name></expr></argument>, <argument><expr><operator>-</operator><name>cospi_21_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_MADD_BF</name><argument_list>(<argument><expr><name>r13</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>r5</name></expr></argument>, <argument><expr><name>r10</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>g4</name></expr></argument>, <argument><expr><name>g5</name></expr></argument>, <argument><expr><name>g6</name></expr></argument>, <argument><expr><name>g7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k0</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_13_64</name></expr></argument>, <argument><expr><name>cospi_19_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_19_64</name></expr></argument>, <argument><expr><operator>-</operator><name>cospi_13_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k2</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_29_64</name></expr></argument>, <argument><expr><name>cospi_3_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k3</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_3_64</name></expr></argument>, <argument><expr><operator>-</operator><name>cospi_29_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_MADD_BF</name><argument_list>(<argument><expr><name>r9</name></expr></argument>, <argument><expr><name>r6</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r14</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>g12</name></expr></argument>, <argument><expr><name>g13</name></expr></argument>, <argument><expr><name>g14</name></expr></argument>, <argument><expr><name>g15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>g4</name></expr></argument>, <argument><expr><name>g6</name></expr></argument>, <argument><expr><name>g14</name></expr></argument>, <argument><expr><name>g12</name></expr></argument>, <argument><expr><name>h10</name></expr></argument>, <argument><expr><name>h11</name></expr></argument>, <argument><expr><name>v6</name></expr></argument>, <argument><expr><name>v4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>h8</name></expr></argument>, <argument><expr><name>h9</name></expr></argument>, <argument><expr><name>h11</name></expr></argument>, <argument><expr><name>h10</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>h11</name></expr></argument>, <argument><expr><name>h10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <operator>-</operator><name>out1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H2_SH</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst1</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH2_0_255</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_SH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k0</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_12_64</name></expr></argument>, <argument><expr><name>cospi_20_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><operator>-</operator><name>cospi_20_64</name></expr></argument>, <argument><expr><name>cospi_12_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k2</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_20_64</name></expr></argument>, <argument><expr><operator>-</operator><name>cospi_12_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_MADD_BF</name><argument_list>(<argument><expr><name>g7</name></expr></argument>, <argument><expr><name>g5</name></expr></argument>, <argument><expr><name>g15</name></expr></argument>, <argument><expr><name>g13</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>h4</name></expr></argument>, <argument><expr><name>h5</name></expr></argument>, <argument><expr><name>h6</name></expr></argument>, <argument><expr><name>h7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>h0</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>, <argument><expr><name>h6</name></expr></argument>, <argument><expr><name>h4</name></expr></argument>, <argument><expr><name>out8</name></expr></argument>, <argument><expr><name>out9</name></expr></argument>, <argument><expr><name>out11</name></expr></argument>, <argument><expr><name>out10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out8</name> <operator>=</operator> <operator>-</operator><name>out8</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H2_SH</name><argument_list>(<argument><expr><name>out8</name></expr></argument>, <argument><expr><name>out9</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst9</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">14</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst8</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst9</name></expr></argument>, <argument><expr><name>res8</name></expr></argument>, <argument><expr><name>res9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>res8</name></expr></argument>, <argument><expr><name>out8</name></expr></argument>, <argument><expr><name>res9</name></expr></argument>, <argument><expr><name>out9</name></expr></argument>, <argument><expr><name>res8</name></expr></argument>, <argument><expr><name>res9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH2_0_255</name><argument_list>(<argument><expr><name>res8</name></expr></argument>, <argument><expr><name>res9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_SH</name><argument_list>(<argument><expr><name>res8</name></expr></argument>, <argument><expr><name>res8</name></expr></argument>, <argument><expr><name>res9</name></expr></argument>, <argument><expr><name>res9</name></expr></argument>, <argument><expr><name>res8</name></expr></argument>, <argument><expr><name>res9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res9</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">14</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k0</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_8_64</name></expr></argument>, <argument><expr><name>cospi_24_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_24_64</name></expr></argument>, <argument><expr><operator>-</operator><name>cospi_8_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k2</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><operator>-</operator><name>cospi_24_64</name></expr></argument>, <argument><expr><name>cospi_8_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_MADD_BF</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>v4</name></expr></argument>, <argument><expr><name>v6</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>out4</name></expr></argument>, <argument><expr><name>out6</name></expr></argument>, <argument><expr><name>out5</name></expr></argument>, <argument><expr><name>out7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out4</name> <operator>=</operator> <operator>-</operator><name>out4</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H2_SH</name><argument_list>(<argument><expr><name>out4</name></expr></argument>, <argument><expr><name>out5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst4</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst5</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>out4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>out5</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH2_0_255</name><argument_list>(<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_SH</name><argument_list>(<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_MADD_BF</name><argument_list>(<argument><expr><name>h1</name></expr></argument>, <argument><expr><name>h3</name></expr></argument>, <argument><expr><name>h5</name></expr></argument>, <argument><expr><name>h7</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>out12</name></expr></argument>, <argument><expr><name>out14</name></expr></argument>, <argument><expr><name>out13</name></expr></argument>, <argument><expr><name>out15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out13</name> <operator>=</operator> <operator>-</operator><name>out13</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H2_SH</name><argument_list>(<argument><expr><name>out12</name></expr></argument>, <argument><expr><name>out13</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst12</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst13</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">13</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst12</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst13</name></expr></argument>, <argument><expr><name>res12</name></expr></argument>, <argument><expr><name>res13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>res12</name></expr></argument>, <argument><expr><name>out12</name></expr></argument>, <argument><expr><name>res13</name></expr></argument>, <argument><expr><name>out13</name></expr></argument>, <argument><expr><name>res12</name></expr></argument>, <argument><expr><name>res13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH2_0_255</name><argument_list>(<argument><expr><name>res12</name></expr></argument>, <argument><expr><name>res13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_SH</name><argument_list>(<argument><expr><name>res12</name></expr></argument>, <argument><expr><name>res12</name></expr></argument>, <argument><expr><name>res13</name></expr></argument>, <argument><expr><name>res13</name></expr></argument>, <argument><expr><name>res12</name></expr></argument>, <argument><expr><name>res13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res12</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res13</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">13</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k0</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k3</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><operator>-</operator><name>cospi_16_64</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_MADD_SHORT</name><argument_list>(<argument><expr><name>out6</name></expr></argument>, <argument><expr><name>out7</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>out6</name></expr></argument>, <argument><expr><name>out7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H2_SH</name><argument_list>(<argument><expr><name>out6</name></expr></argument>, <argument><expr><name>out7</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst6</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst7</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">11</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>res6</name></expr></argument>, <argument><expr><name>out6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><name>out7</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH2_0_255</name><argument_list>(<argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_SH</name><argument_list>(<argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">11</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_MADD_SHORT</name><argument_list>(<argument><expr><name>out10</name></expr></argument>, <argument><expr><name>out11</name></expr></argument>, <argument><expr><name>k0</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><name>out10</name></expr></argument>, <argument><expr><name>out11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H2_SH</name><argument_list>(<argument><expr><name>out10</name></expr></argument>, <argument><expr><name>out11</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst10</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst11</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst10</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst11</name></expr></argument>, <argument><expr><name>res10</name></expr></argument>, <argument><expr><name>res11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>res10</name></expr></argument>, <argument><expr><name>out10</name></expr></argument>, <argument><expr><name>res11</name></expr></argument>, <argument><expr><name>out11</name></expr></argument>, <argument><expr><name>res10</name></expr></argument>, <argument><expr><name>res11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH2_0_255</name><argument_list>(<argument><expr><name>res10</name></expr></argument>, <argument><expr><name>res11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_SH</name><argument_list>(<argument><expr><name>res10</name></expr></argument>, <argument><expr><name>res10</name></expr></argument>, <argument><expr><name>res11</name></expr></argument>, <argument><expr><name>res11</name></expr></argument>, <argument><expr><name>res10</name></expr></argument>, <argument><expr><name>res11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res10</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res11</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><operator>-</operator><name>cospi_16_64</name></expr></argument>, <argument><expr><operator>-</operator><name>cospi_16_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k2</name> <operator>=</operator> <call><name>VP9_SET_COSPI_PAIR</name><argument_list>(<argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><operator>-</operator><name>cospi_16_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_MADD_SHORT</name><argument_list>(<argument><expr><name>h10</name></expr></argument>, <argument><expr><name>h11</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H2_SH</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst2</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst3</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>res2</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH2_0_255</name><argument_list>(<argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_SH</name><argument_list>(<argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_MADD_SHORT</name><argument_list>(<argument><expr><name>out14</name></expr></argument>, <argument><expr><name>out15</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>out14</name></expr></argument>, <argument><expr><name>out15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H2_SH</name><argument_list>(<argument><expr><name>out14</name></expr></argument>, <argument><expr><name>out15</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst14</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst15</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst14</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst15</name></expr></argument>, <argument><expr><name>res14</name></expr></argument>, <argument><expr><name>res15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>res14</name></expr></argument>, <argument><expr><name>out14</name></expr></argument>, <argument><expr><name>res15</name></expr></argument>, <argument><expr><name>out15</name></expr></argument>, <argument><expr><name>res14</name></expr></argument>, <argument><expr><name>res15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH2_0_255</name><argument_list>(<argument><expr><name>res14</name></expr></argument>, <argument><expr><name>res15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_SH</name><argument_list>(<argument><expr><name>res14</name></expr></argument>, <argument><expr><name>res14</name></expr></argument>, <argument><expr><name>res15</name></expr></argument>, <argument><expr><name>res15</name></expr></argument>, <argument><expr><name>res14</name></expr></argument>, <argument><expr><name>res15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res14</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res15</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_iadst16x16_colcol_addblk_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <name><name>out_arr</name><index>[<expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></type> <name>ALLOC_ALIGNED</name><argument_list>(<argument><expr><name>ALIGNMENT</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>out_arr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vp9_iadst16_1d_columns_msa</name><argument_list>(<argument><expr><operator>(</operator><name>input</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>out</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vp9_iadst16_1d_columns_addblk_msa</name><argument_list>(<argument><expr><operator>(</operator><name>out</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr></argument>,
<argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_iadst_idct_16x16_add_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>eob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>out</name><index>[<expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out_ptr</name> <init>= <expr><operator>&amp;</operator><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vp9_iadst16_1d_columns_msa</name><argument_list>(<argument><expr><operator>(</operator><name>input</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>out_ptr</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vp9_idct16_1d_columns_addblk_msa</name><argument_list>(<argument><expr><operator>(</operator><name>out_ptr</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_idct_iadst_16x16_add_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>eob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>out</name><index>[<expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out_ptr</name> <init>= <expr><operator>&amp;</operator><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vp9_idct16_1d_columns_msa</name><argument_list>(<argument><expr><operator>(</operator><name>input</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>out_ptr</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vp9_iadst16_1d_columns_addblk_msa</name><argument_list>(<argument><expr><operator>(</operator><name>out_ptr</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_idct_butterfly_transpose_store</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp_buf</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp_eve_buf</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp_odd_buf</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v8i16</name></type> <name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>, <decl><type ref="prev"/><name>vec3</name></decl>, <decl><type ref="prev"/><name>loc0</name></decl>, <decl><type ref="prev"/><name>loc1</name></decl>, <decl><type ref="prev"/><name>loc2</name></decl>, <decl><type ref="prev"/><name>loc3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>m0</name></decl>, <decl><type ref="prev"/><name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>m3</name></decl>, <decl><type ref="prev"/><name>m4</name></decl>, <decl><type ref="prev"/><name>m5</name></decl>, <decl><type ref="prev"/><name>m6</name></decl>, <decl><type ref="prev"/><name>m7</name></decl>, <decl><type ref="prev"/><name>n0</name></decl>, <decl><type ref="prev"/><name>n1</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>, <decl><type ref="prev"/><name>n3</name></decl>, <decl><type ref="prev"/><name>n4</name></decl>, <decl><type ref="prev"/><name>n5</name></decl>, <decl><type ref="prev"/><name>n6</name></decl>, <decl><type ref="prev"/><name>n7</name></decl>;</decl_stmt>


<expr_stmt><expr><name>vec0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">14</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec3</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc1</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc2</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc3</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">12</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>m4</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><operator>(</operator><name>loc0</name> <operator>-</operator> <name>vec3</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>tmp_buf</name> <operator>+</operator> <literal type="number">31</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><operator>(</operator><name>loc1</name> <operator>-</operator> <name>vec2</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>tmp_buf</name> <operator>+</operator> <literal type="number">23</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><operator>(</operator><name>loc2</name> <operator>-</operator> <name>vec1</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>tmp_buf</name> <operator>+</operator> <literal type="number">27</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><operator>(</operator><name>loc3</name> <operator>-</operator> <name>vec0</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>tmp_buf</name> <operator>+</operator> <literal type="number">19</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>vec0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">13</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec3</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc1</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc2</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc3</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">14</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m5</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>m7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><operator>(</operator><name>loc0</name> <operator>-</operator> <name>vec3</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>tmp_buf</name> <operator>+</operator> <literal type="number">29</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><operator>(</operator><name>loc1</name> <operator>-</operator> <name>vec2</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>tmp_buf</name> <operator>+</operator> <literal type="number">21</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><operator>(</operator><name>loc2</name> <operator>-</operator> <name>vec1</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>tmp_buf</name> <operator>+</operator> <literal type="number">25</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><operator>(</operator><name>loc3</name> <operator>-</operator> <name>vec0</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>tmp_buf</name> <operator>+</operator> <literal type="number">17</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>vec0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">11</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">12</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec3</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc1</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc2</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc3</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">13</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>n0</name></expr></argument>, <argument><expr><name>n4</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>n6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><operator>(</operator><name>loc0</name> <operator>-</operator> <name>vec3</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>tmp_buf</name> <operator>+</operator> <literal type="number">30</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><operator>(</operator><name>loc1</name> <operator>-</operator> <name>vec2</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>tmp_buf</name> <operator>+</operator> <literal type="number">22</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><operator>(</operator><name>loc2</name> <operator>-</operator> <name>vec1</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>tmp_buf</name> <operator>+</operator> <literal type="number">26</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><operator>(</operator><name>loc3</name> <operator>-</operator> <name>vec0</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>tmp_buf</name> <operator>+</operator> <literal type="number">18</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>vec0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec3</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc1</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">11</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc2</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc3</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>n1</name></expr></argument>, <argument><expr><name>n5</name></expr></argument>, <argument><expr><name>n3</name></expr></argument>, <argument><expr><name>n7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><operator>(</operator><name>loc0</name> <operator>-</operator> <name>vec3</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>tmp_buf</name> <operator>+</operator> <literal type="number">28</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><operator>(</operator><name>loc1</name> <operator>-</operator> <name>vec2</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>tmp_buf</name> <operator>+</operator> <literal type="number">20</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><operator>(</operator><name>loc2</name> <operator>-</operator> <name>vec1</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>tmp_buf</name> <operator>+</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><operator>(</operator><name>loc3</name> <operator>-</operator> <name>vec0</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>tmp_buf</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>m0</name></expr></argument>, <argument><expr><name>n0</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><name>n1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>n3</name></expr></argument>,
<argument><expr><name>m0</name></expr></argument>, <argument><expr><name>n0</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><name>n1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>n3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH4</name><argument_list>(<argument><expr><name>m0</name></expr></argument>, <argument><expr><name>n0</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><name>n1</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH4</name><argument_list>(<argument><expr><name>m2</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>n3</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>m4</name></expr></argument>, <argument><expr><name>n4</name></expr></argument>, <argument><expr><name>m5</name></expr></argument>, <argument><expr><name>n5</name></expr></argument>, <argument><expr><name>m6</name></expr></argument>, <argument><expr><name>n6</name></expr></argument>, <argument><expr><name>m7</name></expr></argument>, <argument><expr><name>n7</name></expr></argument>,
<argument><expr><name>m4</name></expr></argument>, <argument><expr><name>n4</name></expr></argument>, <argument><expr><name>m5</name></expr></argument>, <argument><expr><name>n5</name></expr></argument>, <argument><expr><name>m6</name></expr></argument>, <argument><expr><name>n6</name></expr></argument>, <argument><expr><name>m7</name></expr></argument>, <argument><expr><name>n7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH4</name><argument_list>(<argument><expr><name>m4</name></expr></argument>, <argument><expr><name>n4</name></expr></argument>, <argument><expr><name>m5</name></expr></argument>, <argument><expr><name>n5</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH4</name><argument_list>(<argument><expr><name>m6</name></expr></argument>, <argument><expr><name>n6</name></expr></argument>, <argument><expr><name>m7</name></expr></argument>, <argument><expr><name>n7</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><operator>(</operator><name>tmp_buf</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>n0</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><name>n1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>n3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><operator>(</operator><name>tmp_buf</name> <operator>+</operator> <literal type="number">12</literal> <operator>*</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>m4</name></expr></argument>, <argument><expr><name>n4</name></expr></argument>, <argument><expr><name>m5</name></expr></argument>, <argument><expr><name>n5</name></expr></argument>, <argument><expr><name>m6</name></expr></argument>, <argument><expr><name>n6</name></expr></argument>, <argument><expr><name>m7</name></expr></argument>, <argument><expr><name>n7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>m0</name></expr></argument>, <argument><expr><name>n0</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><name>n1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>n3</name></expr></argument>,
<argument><expr><name>m0</name></expr></argument>, <argument><expr><name>n0</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><name>n1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>n3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH4</name><argument_list>(<argument><expr><name>m0</name></expr></argument>, <argument><expr><name>n0</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><name>n1</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH4</name><argument_list>(<argument><expr><name>m2</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>n3</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>m4</name></expr></argument>, <argument><expr><name>n4</name></expr></argument>, <argument><expr><name>m5</name></expr></argument>, <argument><expr><name>n5</name></expr></argument>, <argument><expr><name>m6</name></expr></argument>, <argument><expr><name>n6</name></expr></argument>, <argument><expr><name>m7</name></expr></argument>, <argument><expr><name>n7</name></expr></argument>,
<argument><expr><name>m4</name></expr></argument>, <argument><expr><name>n4</name></expr></argument>, <argument><expr><name>m5</name></expr></argument>, <argument><expr><name>n5</name></expr></argument>, <argument><expr><name>m6</name></expr></argument>, <argument><expr><name>n6</name></expr></argument>, <argument><expr><name>m7</name></expr></argument>, <argument><expr><name>n7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH4</name><argument_list>(<argument><expr><name>m4</name></expr></argument>, <argument><expr><name>n4</name></expr></argument>, <argument><expr><name>m5</name></expr></argument>, <argument><expr><name>n5</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">24</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH4</name><argument_list>(<argument><expr><name>m6</name></expr></argument>, <argument><expr><name>n6</name></expr></argument>, <argument><expr><name>m7</name></expr></argument>, <argument><expr><name>n7</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">24</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_idct8x32_column_even_process_store</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp_buf</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp_eve_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v8i16</name></type> <name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>, <decl><type ref="prev"/><name>vec3</name></decl>, <decl><type ref="prev"/><name>loc0</name></decl>, <decl><type ref="prev"/><name>loc1</name></decl>, <decl><type ref="prev"/><name>loc2</name></decl>, <decl><type ref="prev"/><name>loc3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>reg0</name></decl>, <decl><type ref="prev"/><name>reg1</name></decl>, <decl><type ref="prev"/><name>reg2</name></decl>, <decl><type ref="prev"/><name>reg3</name></decl>, <decl><type ref="prev"/><name>reg4</name></decl>, <decl><type ref="prev"/><name>reg5</name></decl>, <decl><type ref="prev"/><name>reg6</name></decl>, <decl><type ref="prev"/><name>reg7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>stp0</name></decl>, <decl><type ref="prev"/><name>stp1</name></decl>, <decl><type ref="prev"/><name>stp2</name></decl>, <decl><type ref="prev"/><name>stp3</name></decl>, <decl><type ref="prev"/><name>stp4</name></decl>, <decl><type ref="prev"/><name>stp5</name></decl>, <decl><type ref="prev"/><name>stp6</name></decl>, <decl><type ref="prev"/><name>stp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">4</literal> <operator>*</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">4</literal> <operator>*</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_buf</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>cospi_28_64</name></expr></argument>, <argument><expr><name>cospi_4_64</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>cospi_12_64</name></expr></argument>, <argument><expr><name>cospi_20_64</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>loc1</name> <operator>=</operator> <name>vec3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>loc0</name> <operator>=</operator> <name>vec1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>cospi_24_64</name></expr></argument>, <argument><expr><name>cospi_8_64</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>stp3</name></expr></argument>, <argument><expr><name>stp0</name></expr></argument>, <argument><expr><name>stp7</name></expr></argument>, <argument><expr><name>stp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>stp2</name></expr></argument>, <argument><expr><name>stp1</name></expr></argument>, <argument><expr><name>stp6</name></expr></argument>, <argument><expr><name>stp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">4</literal> <operator>*</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">4</literal> <operator>*</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>cospi_30_64</name></expr></argument>, <argument><expr><name>cospi_2_64</name></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>cospi_14_64</name></expr></argument>, <argument><expr><name>cospi_18_64</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>cospi_22_64</name></expr></argument>, <argument><expr><name>cospi_10_64</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>cospi_6_64</name></expr></argument>, <argument><expr><name>cospi_26_64</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec0</name> <operator>=</operator> <name>reg0</name> <operator>+</operator> <name>reg4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg0</name> <operator>=</operator> <name>reg0</name> <operator>-</operator> <name>reg4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg4</name> <operator>=</operator> <name>reg6</name> <operator>+</operator> <name>reg2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg6</name> <operator>=</operator> <name>reg6</name> <operator>-</operator> <name>reg2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg2</name> <operator>=</operator> <name>reg1</name> <operator>+</operator> <name>reg5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg1</name> <operator>=</operator> <name>reg1</name> <operator>-</operator> <name>reg5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg5</name> <operator>=</operator> <name>reg7</name> <operator>+</operator> <name>reg3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg7</name> <operator>=</operator> <name>reg7</name> <operator>-</operator> <name>reg3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg3</name> <operator>=</operator> <name>vec0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vec1</name> <operator>=</operator> <name>reg2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg2</name> <operator>=</operator> <name>reg3</name> <operator>+</operator> <name>reg4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg3</name> <operator>=</operator> <name>reg3</name> <operator>-</operator> <name>reg4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg4</name> <operator>=</operator> <name>reg5</name> <operator>-</operator> <name>vec1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg5</name> <operator>=</operator> <name>reg5</name> <operator>+</operator> <name>vec1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>cospi_24_64</name></expr></argument>, <argument><expr><name>cospi_8_64</name></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><name>reg6</name><operator>)</operator></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>cospi_24_64</name></expr></argument>, <argument><expr><name>cospi_8_64</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec0</name> <operator>=</operator> <name>reg0</name> <operator>-</operator> <name>reg6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg0</name> <operator>=</operator> <name>reg0</name> <operator>+</operator> <name>reg6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <name>reg7</name> <operator>-</operator> <name>reg1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg7</name> <operator>=</operator> <name>reg7</name> <operator>+</operator> <name>reg1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>stp0</name></expr></argument>, <argument><expr><name>stp1</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>loc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><name>tmp_eve_buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>loc0</name></expr></argument>, <argument><expr><operator>(</operator><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">14</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>stp2</name></expr></argument>, <argument><expr><name>stp3</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>loc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><operator>(</operator><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>loc0</name></expr></argument>, <argument><expr><operator>(</operator><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">12</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>stp4</name></expr></argument>, <argument><expr><name>stp5</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>loc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><operator>(</operator><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>loc0</name></expr></argument>, <argument><expr><operator>(</operator><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>stp6</name></expr></argument>, <argument><expr><name>stp7</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>loc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><operator>(</operator><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>loc0</name></expr></argument>, <argument><expr><operator>(</operator><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_idct8x32_column_odd_process_store</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp_buf</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp_odd_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v8i16</name></type> <name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>, <decl><type ref="prev"/><name>vec3</name></decl>, <decl><type ref="prev"/><name>loc0</name></decl>, <decl><type ref="prev"/><name>loc1</name></decl>, <decl><type ref="prev"/><name>loc2</name></decl>, <decl><type ref="prev"/><name>loc3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>reg0</name></decl>, <decl><type ref="prev"/><name>reg1</name></decl>, <decl><type ref="prev"/><name>reg2</name></decl>, <decl><type ref="prev"/><name>reg3</name></decl>, <decl><type ref="prev"/><name>reg4</name></decl>, <decl><type ref="prev"/><name>reg5</name></decl>, <decl><type ref="prev"/><name>reg6</name></decl>, <decl><type ref="prev"/><name>reg7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>reg0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg1</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg2</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg3</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg4</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">17</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg5</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">23</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg6</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">25</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg7</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">31</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">17</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">23</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">25</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">31</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>cospi_31_64</name></expr></argument>, <argument><expr><name>cospi_1_64</name></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>cospi_15_64</name></expr></argument>, <argument><expr><name>cospi_17_64</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>cospi_23_64</name></expr></argument>, <argument><expr><name>cospi_9_64</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>cospi_7_64</name></expr></argument>, <argument><expr><name>cospi_25_64</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec0</name> <operator>=</operator> <name>reg0</name> <operator>+</operator> <name>reg3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg0</name> <operator>=</operator> <name>reg0</name> <operator>-</operator> <name>reg3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg3</name> <operator>=</operator> <name>reg7</name> <operator>+</operator> <name>reg4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg7</name> <operator>=</operator> <name>reg7</name> <operator>-</operator> <name>reg4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg4</name> <operator>=</operator> <name>reg1</name> <operator>+</operator> <name>reg2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg1</name> <operator>=</operator> <name>reg1</name> <operator>-</operator> <name>reg2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg2</name> <operator>=</operator> <name>reg6</name> <operator>+</operator> <name>reg5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg6</name> <operator>=</operator> <name>reg6</name> <operator>-</operator> <name>reg5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg5</name> <operator>=</operator> <name>vec0</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><operator>(</operator><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUB2</name><argument_list>(<argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>cospi_24_64</name></expr></argument>, <argument><expr><name>cospi_8_64</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>tmp_odd_buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>cospi_28_64</name></expr></argument>, <argument><expr><name>cospi_4_64</name></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><operator>-</operator><name>cospi_4_64</name></expr></argument>, <argument><expr><name>cospi_28_64</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><operator>(</operator><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>cospi_24_64</name></expr></argument>, <argument><expr><name>cospi_8_64</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><operator>(</operator><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>reg0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg1</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg2</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">11</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg3</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">13</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg4</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">19</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg5</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">21</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg6</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">27</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg7</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">29</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">11</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">13</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">19</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">21</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">27</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>tmp_buf</name> <operator>+</operator> <literal type="number">29</literal> <operator>*</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>cospi_27_64</name></expr></argument>, <argument><expr><name>cospi_5_64</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>cospi_11_64</name></expr></argument>, <argument><expr><name>cospi_21_64</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>cospi_19_64</name></expr></argument>, <argument><expr><name>cospi_13_64</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>cospi_3_64</name></expr></argument>, <argument><expr><name>cospi_29_64</name></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SUB4</name><argument_list>(<argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>,
<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>cospi_12_64</name></expr></argument>, <argument><expr><name>cospi_20_64</name></expr></argument>, <argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><operator>-</operator><name>cospi_20_64</name></expr></argument>, <argument><expr><name>cospi_12_64</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><operator>(</operator><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">12</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><operator>-</operator><name>cospi_8_64</name></expr></argument>, <argument><expr><name>cospi_24_64</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><operator>(</operator><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>,
<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><operator>(</operator><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">13</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><operator>-</operator><name>cospi_8_64</name></expr></argument>, <argument><expr><name>cospi_24_64</name></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><operator>(</operator><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>LD_SH4</name><argument_list>(<argument><expr><name>tmp_odd_buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_SH4</name><argument_list>(<argument><expr><operator>(</operator><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>,
<argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH4</name><argument_list>(<argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><name>tmp_odd_buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SUB2</name><argument_list>(<argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SUB2</name><argument_list>(<argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH4</name><argument_list>(<argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><operator>(</operator><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>LD_SH4</name><argument_list>(<argument><expr><operator>(</operator><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_SH4</name><argument_list>(<argument><expr><operator>(</operator><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">12</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>,
<argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH4</name><argument_list>(<argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><operator>(</operator><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SUB2</name><argument_list>(<argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg4</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg7</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SUB2</name><argument_list>(<argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg5</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg6</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_DOTP_CONST_PAIR</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>cospi_16_64</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH4</name><argument_list>(<argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><operator>(</operator><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">12</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_idct8x32_column_butterfly_addblk</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp_eve_buf</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp_odd_buf</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v8i16</name></type> <name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>, <decl><type ref="prev"/><name>vec3</name></decl>, <decl><type ref="prev"/><name>loc0</name></decl>, <decl><type ref="prev"/><name>loc1</name></decl>, <decl><type ref="prev"/><name>loc2</name></decl>, <decl><type ref="prev"/><name>loc3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>m0</name></decl>, <decl><type ref="prev"/><name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>m3</name></decl>, <decl><type ref="prev"/><name>m4</name></decl>, <decl><type ref="prev"/><name>m5</name></decl>, <decl><type ref="prev"/><name>m6</name></decl>, <decl><type ref="prev"/><name>m7</name></decl>, <decl><type ref="prev"/><name>n0</name></decl>, <decl><type ref="prev"/><name>n1</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>, <decl><type ref="prev"/><name>n3</name></decl>, <decl><type ref="prev"/><name>n4</name></decl>, <decl><type ref="prev"/><name>n5</name></decl>, <decl><type ref="prev"/><name>n6</name></decl>, <decl><type ref="prev"/><name>n7</name></decl>;</decl_stmt>


<expr_stmt><expr><name>vec0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">14</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec3</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc1</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc2</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc3</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">12</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>m4</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>m0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m4</name></expr></argument>, <argument><expr><name>m6</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_ADDBLK_ST8x4_UB</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr></argument>, <argument><expr><name>m0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m4</name></expr></argument>, <argument><expr><name>m6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SUB4</name><argument_list>(<argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>m6</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m4</name></expr></argument>, <argument><expr><name>m0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>m0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m4</name></expr></argument>, <argument><expr><name>m6</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_ADDBLK_ST8x4_UB</name><argument_list>(<argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">19</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr></argument>,
<argument><expr><name>m0</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>m4</name></expr></argument>, <argument><expr><name>m6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>vec0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">13</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec3</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc1</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc2</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc3</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">14</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m5</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>m7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>m5</name></expr></argument>, <argument><expr><name>m7</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_ADDBLK_ST8x4_UB</name><argument_list>(<argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr></argument>,
<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>m5</name></expr></argument>, <argument><expr><name>m7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SUB4</name><argument_list>(<argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>m7</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>m5</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>m5</name></expr></argument>, <argument><expr><name>m7</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_ADDBLK_ST8x4_UB</name><argument_list>(<argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">17</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr></argument>,
<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>, <argument><expr><name>m5</name></expr></argument>, <argument><expr><name>m7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>vec0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">11</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">12</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec3</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc1</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc2</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc3</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">13</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>n0</name></expr></argument>, <argument><expr><name>n4</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>n6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>n0</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>n4</name></expr></argument>, <argument><expr><name>n6</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_ADDBLK_ST8x4_UB</name><argument_list>(<argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr></argument>,
<argument><expr><name>n0</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>n4</name></expr></argument>, <argument><expr><name>n6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SUB4</name><argument_list>(<argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>n6</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>n4</name></expr></argument>, <argument><expr><name>n0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>n0</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>n4</name></expr></argument>, <argument><expr><name>n6</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_ADDBLK_ST8x4_UB</name><argument_list>(<argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">18</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr></argument>,
<argument><expr><name>n0</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>n4</name></expr></argument>, <argument><expr><name>n6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>vec0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec3</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_odd_buf</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc0</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc1</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">11</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc2</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loc3</name> <operator>=</operator> <call><name>LD_SH</name><argument_list>(<argument><expr><name>tmp_eve_buf</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>n1</name></expr></argument>, <argument><expr><name>n5</name></expr></argument>, <argument><expr><name>n3</name></expr></argument>, <argument><expr><name>n7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>n1</name></expr></argument>, <argument><expr><name>n3</name></expr></argument>, <argument><expr><name>n5</name></expr></argument>, <argument><expr><name>n7</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_ADDBLK_ST8x4_UB</name><argument_list>(<argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr></argument>,
<argument><expr><name>n1</name></expr></argument>, <argument><expr><name>n3</name></expr></argument>, <argument><expr><name>n5</name></expr></argument>, <argument><expr><name>n7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SUB4</name><argument_list>(<argument><expr><name>loc0</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>loc1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>loc2</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>loc3</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>n7</name></expr></argument>, <argument><expr><name>n3</name></expr></argument>, <argument><expr><name>n5</name></expr></argument>, <argument><expr><name>n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>n1</name></expr></argument>, <argument><expr><name>n3</name></expr></argument>, <argument><expr><name>n5</name></expr></argument>, <argument><expr><name>n7</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VP9_ADDBLK_ST8x4_UB</name><argument_list>(<argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr></argument>,
<argument><expr><name>n1</name></expr></argument>, <argument><expr><name>n3</name></expr></argument>, <argument><expr><name>n5</name></expr></argument>, <argument><expr><name>n7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_idct8x32_1d_columns_addblk_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <name><name>tmp_odd_buf</name><index>[<expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></type> <name>ALLOC_ALIGNED</name><argument_list>(<argument><expr><name>ALIGNMENT</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <name><name>tmp_eve_buf</name><index>[<expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></type> <name>ALLOC_ALIGNED</name><argument_list>(<argument><expr><name>ALIGNMENT</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vp9_idct8x32_column_even_process_store</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp_eve_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vp9_idct8x32_column_odd_process_store</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp_odd_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vp9_idct8x32_column_butterfly_addblk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp_eve_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp_odd_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_idct8x32_1d_columns_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <name><name>tmp_odd_buf</name><index>[<expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></type> <name>ALLOC_ALIGNED</name><argument_list>(<argument><expr><name>ALIGNMENT</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <name><name>tmp_eve_buf</name><index>[<expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></type> <name>ALLOC_ALIGNED</name><argument_list>(<argument><expr><name>ALIGNMENT</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vp9_idct8x32_column_even_process_store</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp_eve_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vp9_idct8x32_column_odd_process_store</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp_odd_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vp9_idct_butterfly_transpose_store</name><argument_list>(<argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp_eve_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>tmp_odd_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_idct32x32_1_add_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>, <decl><type ref="prev"/><name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>, <decl><type ref="prev"/><name>res4</name></decl>, <decl><type ref="prev"/><name>res5</name></decl>, <decl><type ref="prev"/><name>res6</name></decl>, <decl><type ref="prev"/><name>res7</name></decl>, <decl><type ref="prev"/><name>vec</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ROUND_POWER_OF_TWO</name><argument_list>(<argument><expr><operator>(</operator><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>cospi_16_64</name><operator>)</operator></expr></argument>, <argument><expr><name>VP9_DCT_CONST_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ROUND_POWER_OF_TWO</name><argument_list>(<argument><expr><operator>(</operator><name>out</name> <operator>*</operator> <name>cospi_16_64</name><operator>)</operator></expr></argument>, <argument><expr><name>VP9_DCT_CONST_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>ROUND_POWER_OF_TWO</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>vec</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>dst_stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>,
<argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>,
<argument><expr><name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH8_0_255</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B4_UB</name><argument_list>(<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>,
<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_idct32x32_34_colcol_addblk_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <name><name>out_arr</name><index>[<expr><literal type="number">32</literal> <operator>*</operator> <literal type="number">32</literal></expr>]</index></name></type> <name>ALLOC_ALIGNED</name><argument_list>(<argument><expr><name>ALIGNMENT</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out_ptr</name> <init>= <expr><name>out_arr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <name><name>tmp_buf</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">32</literal></expr>]</index></name></type> <name>ALLOC_ALIGNED</name><argument_list>(<argument><expr><name>ALIGNMENT</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">32</literal></expr>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier> (
"sw $zero, (%[out_ptr]) \n\t"
"sw $zero, 4(%[out_ptr]) \n\t"
"sw $zero, 8(%[out_ptr]) \n\t"
"sw $zero, 12(%[out_ptr]) \n\t"
"sw $zero, 16(%[out_ptr]) \n\t"
"sw $zero, 20(%[out_ptr]) \n\t"
"sw $zero, 24(%[out_ptr]) \n\t"
"sw $zero, 28(%[out_ptr]) \n\t"
"sw $zero, 32(%[out_ptr]) \n\t"
"sw $zero, 36(%[out_ptr]) \n\t"
"sw $zero, 40(%[out_ptr]) \n\t"
"sw $zero, 44(%[out_ptr]) \n\t"
"sw $zero, 48(%[out_ptr]) \n\t"
"sw $zero, 52(%[out_ptr]) \n\t"
"sw $zero, 56(%[out_ptr]) \n\t"
"sw $zero, 60(%[out_ptr]) \n\t"

:
: [out_ptr] "r" (out_ptr)
);</asm>

<expr_stmt><expr><name>out_ptr</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>out_ptr</name> <operator>=</operator> <name>out_arr</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>vp9_idct8x32_1d_columns_msa</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>out_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vp9_idct8x32_1d_columns_addblk_msa</name><argument_list>(<argument><expr><operator>(</operator><name>out_ptr</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_idct32x32_colcol_addblk_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <name><name>out_arr</name><index>[<expr><literal type="number">32</literal> <operator>*</operator> <literal type="number">32</literal></expr>]</index></name></type> <name>ALLOC_ALIGNED</name><argument_list>(<argument><expr><name>ALIGNMENT</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out_ptr</name> <init>= <expr><name>out_arr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <name><name>tmp_buf</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">32</literal></expr>]</index></name></type> <name>ALLOC_ALIGNED</name><argument_list>(<argument><expr><name>ALIGNMENT</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vp9_idct8x32_1d_columns_msa</name><argument_list>(<argument><expr><operator>(</operator><name>input</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>out_ptr</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>tmp_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vp9_idct8x32_1d_columns_addblk_msa</name><argument_list>(<argument><expr><operator>(</operator><name>out_ptr</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_idct_idct_4x4_add_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>eob</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vp9_idct4x4_colcol_addblk_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>vp9_idct4x4_1_add_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_idct_idct_8x8_add_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>eob</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vp9_idct8x8_1_add_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>eob</name> <operator>&lt;=</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vp9_idct8x8_12_colcol_addblk_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>vp9_idct8x8_colcol_addblk_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_idct_idct_16x16_add_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>eob</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vp9_idct16x16_1_add_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>eob</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vp9_idct16x16_10_colcol_addblk_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>vp9_idct16x16_colcol_addblk_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_idct_idct_32x32_add_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>eob</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vp9_idct32x32_1_add_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>eob</name> <operator>&lt;=</operator> <literal type="number">34</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vp9_idct32x32_34_colcol_addblk_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>vp9_idct32x32_colcol_addblk_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_iadst_iadst_4x4_add_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vp9_iadst4x4_colcol_addblk_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_iadst_iadst_8x8_add_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vp9_iadst8x8_colcol_addblk_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_iadst_iadst_16x16_add_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vp9_iadst16x16_colcol_addblk_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_idct_iadst_4x4_add_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vp9_idct_iadst_4x4_add_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>eob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_idct_iadst_8x8_add_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vp9_idct_iadst_8x8_add_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>eob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_idct_iadst_16x16_add_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vp9_idct_iadst_16x16_add_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>eob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_iadst_idct_4x4_add_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vp9_iadst_idct_4x4_add_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>eob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_iadst_idct_8x8_add_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vp9_iadst_idct_8x8_add_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>eob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_iadst_idct_16x16_add_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vp9_iadst_idct_16x16_add_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>eob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
