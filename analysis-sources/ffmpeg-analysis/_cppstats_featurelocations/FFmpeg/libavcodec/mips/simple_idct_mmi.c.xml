<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mips\simple_idct_mmi.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp_mips.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"constants.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/asmdefs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/mmiutils.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W1</name></cpp:macro> <cpp:value>22725</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W2</name></cpp:macro> <cpp:value>21407</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W3</name></cpp:macro> <cpp:value>19266</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W4</name></cpp:macro> <cpp:value>16383</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W5</name></cpp:macro> <cpp:value>12873</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W6</name></cpp:macro> <cpp:value>8867</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W7</name></cpp:macro> <cpp:value>4520</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROW_SHIFT</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COL_SHIFT</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_SHIFT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>int16_t</name></expr></argument>, <argument><expr><name>W_arr</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">46</literal></expr>]</index> <operator>=</operator> <block>{
<expr><name>W4</name></expr>, <expr><name>W2</name></expr>, <expr><name>W4</name></expr>, <expr><name>W6</name></expr>,
<expr><name>W1</name></expr>, <expr><name>W3</name></expr>, <expr><name>W5</name></expr>, <expr><name>W7</name></expr>,
<expr><name>W4</name></expr>, <expr><name>W6</name></expr>, <expr><operator>-</operator><name>W4</name></expr>, <expr><operator>-</operator><name>W2</name></expr>,
<expr><name>W3</name></expr>, <expr><operator>-</operator><name>W7</name></expr>, <expr><operator>-</operator><name>W1</name></expr>, <expr><operator>-</operator><name>W5</name></expr>,
<expr><name>W4</name></expr>, <expr><operator>-</operator><name>W6</name></expr>, <expr><operator>-</operator><name>W4</name></expr>, <expr><name>W2</name></expr>,
<expr><name>W5</name></expr>, <expr><operator>-</operator><name>W1</name></expr>, <expr><name>W7</name></expr>, <expr><name>W3</name></expr>,
<expr><name>W4</name></expr>, <expr><operator>-</operator><name>W2</name></expr>, <expr><name>W4</name></expr>, <expr><operator>-</operator><name>W6</name></expr>,
<expr><name>W7</name></expr>, <expr><operator>-</operator><name>W5</name></expr>, <expr><name>W3</name></expr>, <expr><operator>-</operator><name>W1</name></expr>,
<expr><literal type="number">1024</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1024</literal></expr>, <expr><literal type="number">0</literal></expr>, 
<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, 
<expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr> 
}</block></expr>;</expr_stmt>

<function><type><name>void</name></type> <name>ff_simple_idct_8_mmi</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BACKUP_REG</name>
<name>__asm__</name></type> volatile <argument_list>(

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT_ROW_COND_DC</name><parameter_list>(<parameter><type><name>src1</name></type></parameter>, <parameter><type><name>src2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"dmfc1 $11, "#src1" \n\t" "dmfc1 $12, "#src2" \n\t" "and $11, $11, $9 \n\t" "or $10, $11, $12 \n\t" "beqz $10, 1f \n\t" "punpcklhw $f30, "#src1", "#src2" \n\t" "punpckhhw $f31, "#src1", "#src2" \n\t" "punpcklhw "#src1", $f30, $f31 \n\t" "punpckhhw "#src2", $f30, $f31 \n\t" "pmaddhw $f30, "#src1", $f18 \n\t" "pmaddhw $f31, "#src2", $f19 \n\t" "paddw $f28, $f30, $f31 \n\t" "psubw $f29, $f30, $f31 \n\t" "punpcklwd $f30, $f28, $f29 \n\t" "punpckhwd $f31, $f28, $f29 \n\t" "paddw $f26, $f30, $f31 \n\t" "paddw $f26, $f26, $f16 \n\t" "psraw $f26, $f26, $f17 \n\t" "pmaddhw $f30, "#src1", $f20 \n\t" "pmaddhw $f31, "#src2", $f21 \n\t" "paddw $f28, $f30, $f31 \n\t" "psubw $f29, $f30, $f31 \n\t" "punpcklwd $f30, $f28, $f29 \n\t" "punpckhwd $f31, $f28, $f29 \n\t" "paddw $f27, $f30, $f31 \n\t" "paddw $f27, $f27, $f16 \n\t" "psraw $f27, $f27, $f17 \n\t" "pmaddhw $f30, "#src1", $f22 \n\t" "pmaddhw $f31, "#src2", $f23 \n\t" "paddw $f28, $f30, $f31 \n\t" "psubw $f29, $f30, $f31 \n\t" "punpcklwd $f30, $f28, $f29 \n\t" "punpckhwd $f31, $f28, $f29 \n\t" "paddw $f28, $f30, $f31 \n\t" "paddw $f28, $f28, $f16 \n\t" "psraw $f28, $f28, $f17 \n\t" "pmaddhw $f30, "#src1", $f24 \n\t" "pmaddhw $f31, "#src2", $f25 \n\t" "paddw "#src1", $f30, $f31 \n\t" "psubw "#src2", $f30, $f31 \n\t" "punpcklwd $f30, "#src1", "#src2" \n\t" "punpckhwd $f31, "#src1", "#src2" \n\t" "paddw $f29, $f30, $f31 \n\t" "paddw $f29, $f29, $f16 \n\t" "psraw $f29, $f29, $f17 \n\t" "punpcklhw "#src1", $f26, $f27 \n\t" "punpckhhw $f30, $f27, $f26 \n\t" "punpcklhw $f31, $f28, $f29 \n\t" "punpckhhw "#src2", $f29, $f28 \n\t" "punpcklwd "#src1", "#src1", $f31 \n\t" "punpcklwd "#src2", "#src2", $f30 \n\t" "j 2f \n\t" "1: \n\t" "li $10, 3 \n\t" "dmtc1 $10, $f30 \n\t" "psllh $f28, "#src1", $f30 \n\t" "dmtc1 $9, $f31 \n\t" "punpcklhw $f29, $f28, $f28 \n\t" "and $f29, $f29, $f31 \n\t" "paddw $f28, $f28, $f29 \n\t" "punpcklwd "#src1", $f28, $f28 \n\t" "punpcklwd "#src2", $f28, $f28 \n\t" "2: \n\t"</cpp:value></cpp:define> 


















































































<argument><expr><literal type="string">"gslqc1 $f19, $f18, 0x00(%[w_arr]) \n\t"</literal>
<literal type="string">"gslqc1 $f21, $f20, 0x10(%[w_arr]) \n\t"</literal>
<literal type="string">"gslqc1 $f23, $f22, 0x20(%[w_arr]) \n\t"</literal>
<literal type="string">"gslqc1 $f25, $f24, 0x30(%[w_arr]) \n\t"</literal>
<literal type="string">"gslqc1 $f17, $f16, 0x40(%[w_arr]) \n\t"</literal>

<literal type="string">"gslqc1 $f1, $f0, 0x00(%[block]) \n\t"</literal>
<literal type="string">"gslqc1 $f3, $f2, 0x10(%[block]) \n\t"</literal>
<literal type="string">"gslqc1 $f5, $f4, 0x20(%[block]) \n\t"</literal>
<literal type="string">"gslqc1 $f7, $f6, 0x30(%[block]) \n\t"</literal>
<literal type="string">"gslqc1 $f9, $f8, 0x40(%[block]) \n\t"</literal>
<literal type="string">"gslqc1 $f11, $f10, 0x50(%[block]) \n\t"</literal>
<literal type="string">"gslqc1 $f13, $f12, 0x60(%[block]) \n\t"</literal>
<literal type="string">"gslqc1 $f15, $f14, 0x70(%[block]) \n\t"</literal>


<literal type="string">"dmfc1 $9, $f17 \n\t"</literal>
<literal type="string">"li $10, 11 \n\t"</literal>
<literal type="string">"mtc1 $10, $f17 \n\t"</literal>
<macro><name>IDCT_ROW_COND_DC</name><argument_list>(<argument>$f0</argument>,<argument>$f1</argument>)</argument_list></macro>
<macro><name>IDCT_ROW_COND_DC</name><argument_list>(<argument>$f2</argument>,<argument>$f3</argument>)</argument_list></macro>
<macro><name>IDCT_ROW_COND_DC</name><argument_list>(<argument>$f4</argument>,<argument>$f5</argument>)</argument_list></macro>
<macro><name>IDCT_ROW_COND_DC</name><argument_list>(<argument>$f6</argument>,<argument>$f7</argument>)</argument_list></macro>
<macro><name>IDCT_ROW_COND_DC</name><argument_list>(<argument>$f8</argument>,<argument>$f9</argument>)</argument_list></macro>
<macro><name>IDCT_ROW_COND_DC</name><argument_list>(<argument>$f10</argument>,<argument>$f11</argument>)</argument_list></macro>
<macro><name>IDCT_ROW_COND_DC</name><argument_list>(<argument>$f12</argument>,<argument>$f13</argument>)</argument_list></macro>
<call><name>IDCT_ROW_COND_DC</name><argument_list>(<argument><expr><name>$f14</name></expr></argument>,<argument><expr><name>$f15</name></expr></argument>)</argument_list></call>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT_COL_CASE1</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>out1</name></type></parameter>, <parameter><type><name>out2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"pmaddhw $f26, "#src", $f18 \n\t" "pmaddhw $f27, "#src", $f20 \n\t" "pmaddhw $f28, "#src", $f22 \n\t" "pmaddhw $f29, "#src", $f24 \n\t" "punpcklwd $f30, $f26, $f26 \n\t" "punpckhwd $f31, $f26, $f26 \n\t" "paddw $f26, $f30, $f31 \n\t" "punpcklwd $f30, $f27, $f27 \n\t" "punpckhwd $f31, $f27, $f27 \n\t" "paddw $f27, $f30, $f31 \n\t" "punpcklwd $f30, $f28, $f28 \n\t" "punpckhwd $f31, $f28, $f28 \n\t" "paddw $f28, $f30, $f31 \n\t" "punpcklwd $f30, $f29, $f29 \n\t" "punpckhwd $f31, $f29, $f29 \n\t" "paddw $f29, $f30, $f31 \n\t" "punpcklhw $f30, $f26, $f27 \n\t" "punpcklhw $f31, $f28, $f29 \n\t" "punpckhwd "#out1", $f30, $f31 \n\t" "psrah "#out1", "#out1", $f16 \n\t" "punpcklhw $f30, $f27, $f26 \n\t" "punpcklhw $f31, $f29, $f28 \n\t" "punpckhwd "#out2", $f31, $f30 \n\t" "psrah "#out2", "#out2", $f16 \n\t"</cpp:value></cpp:define>

































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT_COL_CASE2</name><parameter_list>(<parameter><type><name>src1</name></type></parameter>, <parameter><type><name>src2</name></type></parameter>, <parameter><type><name>out1</name></type></parameter>, <parameter><type><name>out2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"pmaddhw $f28, "#src1", $f18 \n\t" "pmaddhw $f29, "#src2", $f19 \n\t" "paddw $f30, $f28, $f29 \n\t" "psubw $f31, $f28, $f29 \n\t" "punpcklwd $f28, $f30, $f31 \n\t" "punpckhwd $f29, $f30, $f31 \n\t" "pmaddhw $f30, "#src1", $f20 \n\t" "pmaddhw $f31, "#src2", $f21 \n\t" "paddw $f26, $f28, $f29 \n\t" "paddw $f28, $f30, $f31 \n\t" "psubw $f29, $f30, $f31 \n\t" "punpcklwd $f30, $f28, $f29 \n\t" "punpckhwd $f31, $f28, $f29 \n\t" "pmaddhw $f28, "#src1", $f22 \n\t" "pmaddhw $f29, "#src2", $f23 \n\t" "paddw $f27, $f30, $f31 \n\t" "paddw $f30, $f28, $f29 \n\t" "psubw $f31, $f28, $f29 \n\t" "punpcklwd $f28, $f30, $f31 \n\t" "punpckhwd $f29, $f30, $f31 \n\t" "pmaddhw $f30, "#src1", $f24 \n\t" "pmaddhw $f31, "#src2", $f25 \n\t" "paddw $f28, $f28, $f29 \n\t" "paddw "#out1", $f30, $f31 \n\t" "psubw "#out2", $f30, $f31 \n\t" "punpcklwd $f30, "#out1", "#out2" \n\t" "punpckhwd $f31, "#out1", "#out2" \n\t" "paddw $f29, $f30, $f31 \n\t" "punpcklhw "#out1", $f26, $f27 \n\t" "punpckhhw "#out2", $f27, $f26 \n\t" "punpcklhw $f30, $f28, $f29 \n\t" "punpckhhw $f31, $f29, $f28 \n\t" "punpckhwd "#out1", "#out1", $f30 \n\t" "punpckhwd "#out2", $f31, "#out2" \n\t" "psrah "#out1", "#out1", $f16 \n\t" "psrah "#out2", "#out2", $f16 \n\t"</cpp:value></cpp:define>
















































<literal type="string">"gsldlc1 $f17, 0x57(%[w_arr]) \n\t"</literal>
<literal type="string">"gsldrc1 $f17, 0x50(%[w_arr]) \n\t"</literal>
<literal type="string">"li $10, 4 \n\t"</literal>
<literal type="string">"dmtc1 $10, $f16 \n\t"</literal>
<literal type="string">"paddh $f0, $f0, $f17 \n\t"</literal>

<literal type="string">"punpcklhw $f26, $f0, $f4 \n\t"</literal>
<literal type="string">"punpckhhw $f27, $f0, $f4 \n\t"</literal>
<literal type="string">"punpcklhw $f28, $f8, $f12 \n\t"</literal>
<literal type="string">"punpckhhw $f29, $f8, $f12 \n\t"</literal>
<literal type="string">"punpcklwd $f0, $f26, $f28 \n\t"</literal>
<literal type="string">"punpckhwd $f4, $f26, $f28 \n\t"</literal>
<literal type="string">"punpcklwd $f8, $f27, $f29 \n\t"</literal>
<literal type="string">"punpckhwd $f12, $f27, $f29 \n\t"</literal>

<literal type="string">"or $f26, $f2, $f6 \n\t"</literal>
<literal type="string">"or $f26, $f26, $f10 \n\t"</literal>
<literal type="string">"or $f26, $f26, $f14 \n\t"</literal>
<literal type="string">"dmfc1 $10, $f26 \n\t"</literal>
<literal type="string">"bnez $10, 1f \n\t"</literal>


<macro><name>IDCT_COL_CASE1</name><argument_list>(<argument>$f0</argument>, <argument>$f0</argument>, <argument>$f2</argument>)</argument_list></macro>

<macro><name>IDCT_COL_CASE1</name><argument_list>(<argument>$f4</argument>, <argument>$f4</argument>, <argument>$f6</argument>)</argument_list></macro>

<macro><name>IDCT_COL_CASE1</name><argument_list>(<argument>$f8</argument>, <argument>$f8</argument>, <argument>$f10</argument>)</argument_list></macro>

<call><name>IDCT_COL_CASE1</name><argument_list>(<argument><expr><name>$f12</name></expr></argument>, <argument><expr><name>$f12</name></expr></argument>, <argument><expr><name>$f14</name></expr></argument>)</argument_list></call>
<literal type="string">"j 2f \n\t"</literal>

<literal type="string">"1: \n\t"</literal>


<literal type="string">"punpcklhw $f26, $f2, $f6 \n\t"</literal>
<literal type="string">"punpckhhw $f27, $f2, $f6 \n\t"</literal>
<literal type="string">"punpcklhw $f28, $f10, $f14 \n\t"</literal>
<literal type="string">"punpckhhw $f29, $f10, $f14 \n\t"</literal>
<literal type="string">"punpcklwd $f2, $f26, $f28 \n\t"</literal>
<literal type="string">"punpckhwd $f6, $f26, $f28 \n\t"</literal>
<literal type="string">"punpcklwd $f10, $f27, $f29 \n\t"</literal>
<literal type="string">"punpckhwd $f14, $f27, $f29 \n\t"</literal>


<macro><name>IDCT_COL_CASE2</name><argument_list>(<argument>$f0</argument>, <argument>$f2</argument>, <argument>$f0</argument>, <argument>$f2</argument>)</argument_list></macro>

<macro><name>IDCT_COL_CASE2</name><argument_list>(<argument>$f4</argument>, <argument>$f6</argument>, <argument>$f4</argument>, <argument>$f6</argument>)</argument_list></macro>

<macro><name>IDCT_COL_CASE2</name><argument_list>(<argument>$f8</argument>, <argument>$f10</argument>, <argument>$f8</argument>, <argument>$f10</argument>)</argument_list></macro>

<call><name>IDCT_COL_CASE2</name><argument_list>(<argument><expr><name>$f12</name></expr></argument>, <argument><expr><name>$f14</name></expr></argument>, <argument><expr><name>$f12</name></expr></argument>, <argument><expr><name>$f14</name></expr></argument>)</argument_list></call>

<literal type="string">"2: \n\t"</literal>

<literal type="string">"punpcklhw $f26, $f0, $f4 \n\t"</literal>
<literal type="string">"punpckhhw $f27, $f0, $f4 \n\t"</literal>
<literal type="string">"punpcklhw $f28, $f8, $f12 \n\t"</literal>
<literal type="string">"punpckhhw $f29, $f8, $f12 \n\t"</literal>
<literal type="string">"punpcklwd $f0, $f26, $f28 \n\t"</literal>
<literal type="string">"punpckhwd $f4, $f26, $f28 \n\t"</literal>
<literal type="string">"punpcklwd $f8, $f27, $f29 \n\t"</literal>
<literal type="string">"punpckhwd $f12, $f27, $f29 \n\t"</literal>

<literal type="string">"punpcklhw $f26, $f2, $f6 \n\t"</literal>
<literal type="string">"punpckhhw $f27, $f2, $f6 \n\t"</literal>
<literal type="string">"punpcklhw $f28, $f10, $f14 \n\t"</literal>
<literal type="string">"punpckhhw $f29, $f10, $f14 \n\t"</literal>
<literal type="string">"punpcklwd $f2, $f26, $f28 \n\t"</literal>
<literal type="string">"punpckhwd $f6, $f26, $f28 \n\t"</literal>
<literal type="string">"punpcklwd $f10, $f27, $f29 \n\t"</literal>
<literal type="string">"punpckhwd $f14, $f27, $f29 \n\t"</literal>



<literal type="string">"paddh $f1, $f1, $f17 \n\t"</literal>

<literal type="string">"punpcklhw $f26, $f1, $f5 \n\t"</literal>
<literal type="string">"punpckhhw $f27, $f1, $f5 \n\t"</literal>
<literal type="string">"punpcklhw $f28, $f9, $f13 \n\t"</literal>
<literal type="string">"punpckhhw $f29, $f9, $f13 \n\t"</literal>
<literal type="string">"punpcklwd $f1, $f26, $f28 \n\t"</literal>
<literal type="string">"punpckhwd $f5, $f26, $f28 \n\t"</literal>
<literal type="string">"punpcklwd $f9, $f27, $f29 \n\t"</literal>
<literal type="string">"punpckhwd $f13, $f27, $f29 \n\t"</literal>

<literal type="string">"or $f26, $f3, $f7 \n\t"</literal>
<literal type="string">"or $f26, $f26, $f11 \n\t"</literal>
<literal type="string">"or $f26, $f26, $f15 \n\t"</literal>
<literal type="string">"dmfc1 $10, $f26 \n\t"</literal>
<literal type="string">"bnez $10, 1f \n\t"</literal>


<macro><name>IDCT_COL_CASE1</name><argument_list>(<argument>$f1</argument>, <argument>$f1</argument>, <argument>$f3</argument>)</argument_list></macro>

<macro><name>IDCT_COL_CASE1</name><argument_list>(<argument>$f5</argument>, <argument>$f5</argument>, <argument>$f7</argument>)</argument_list></macro>

<macro><name>IDCT_COL_CASE1</name><argument_list>(<argument>$f9</argument>, <argument>$f9</argument>, <argument>$f11</argument>)</argument_list></macro>

<call><name>IDCT_COL_CASE1</name><argument_list>(<argument><expr><name>$f13</name></expr></argument>, <argument><expr><name>$f13</name></expr></argument>, <argument><expr><name>$f15</name></expr></argument>)</argument_list></call>
<literal type="string">"j 2f \n\t"</literal>

<literal type="string">"1: \n\t"</literal>


<literal type="string">"punpcklhw $f26, $f3, $f7 \n\t"</literal>
<literal type="string">"punpckhhw $f27, $f3, $f7 \n\t"</literal>
<literal type="string">"punpcklhw $f28, $f11, $f15 \n\t"</literal>
<literal type="string">"punpckhhw $f29, $f11, $f15 \n\t"</literal>
<literal type="string">"punpcklwd $f3, $f26, $f28 \n\t"</literal>
<literal type="string">"punpckhwd $f7, $f26, $f28 \n\t"</literal>
<literal type="string">"punpcklwd $f11, $f27, $f29 \n\t"</literal>
<literal type="string">"punpckhwd $f15, $f27, $f29 \n\t"</literal>


<macro><name>IDCT_COL_CASE2</name><argument_list>(<argument>$f1</argument>, <argument>$f3</argument>, <argument>$f1</argument>, <argument>$f3</argument>)</argument_list></macro>

<macro><name>IDCT_COL_CASE2</name><argument_list>(<argument>$f5</argument>, <argument>$f7</argument>, <argument>$f5</argument>, <argument>$f7</argument>)</argument_list></macro>

<macro><name>IDCT_COL_CASE2</name><argument_list>(<argument>$f9</argument>, <argument>$f11</argument>, <argument>$f9</argument>, <argument>$f11</argument>)</argument_list></macro>

<call><name>IDCT_COL_CASE2</name><argument_list>(<argument><expr><name>$f13</name></expr></argument>, <argument><expr><name>$f15</name></expr></argument>, <argument><expr><name>$f13</name></expr></argument>, <argument><expr><name>$f15</name></expr></argument>)</argument_list></call>

<literal type="string">"2: \n\t"</literal>

<literal type="string">"punpcklhw $f26, $f1, $f5 \n\t"</literal>
<literal type="string">"punpckhhw $f27, $f1, $f5 \n\t"</literal>
<literal type="string">"punpcklhw $f28, $f9, $f13 \n\t"</literal>
<literal type="string">"punpckhhw $f29, $f9, $f13 \n\t"</literal>
<literal type="string">"punpcklwd $f1, $f26, $f28 \n\t"</literal>
<literal type="string">"punpckhwd $f5, $f26, $f28 \n\t"</literal>
<literal type="string">"punpcklwd $f9, $f27, $f29 \n\t"</literal>
<literal type="string">"punpckhwd $f13, $f27, $f29 \n\t"</literal>

<literal type="string">"punpcklhw $f26, $f3, $f7 \n\t"</literal>
<literal type="string">"punpckhhw $f27, $f3, $f7 \n\t"</literal>
<literal type="string">"punpcklhw $f28, $f11, $f15 \n\t"</literal>
<literal type="string">"punpckhhw $f29, $f11, $f15 \n\t"</literal>
<literal type="string">"punpcklwd $f3, $f26, $f28 \n\t"</literal>
<literal type="string">"punpckhwd $f7, $f26, $f28 \n\t"</literal>
<literal type="string">"punpcklwd $f11, $f27, $f29 \n\t"</literal>
<literal type="string">"punpckhwd $f15, $f27, $f29 \n\t"</literal>

<literal type="string">"gssqc1 $f1, $f0, 0x00(%[block]) \n\t"</literal>
<literal type="string">"gssqc1 $f5, $f4, 0x10(%[block]) \n\t"</literal>
<literal type="string">"gssqc1 $f9, $f8, 0x20(%[block]) \n\t"</literal>
<literal type="string">"gssqc1 $f13, $f12, 0x30(%[block]) \n\t"</literal>
<literal type="string">"gssqc1 $f3, $f2, 0x40(%[block]) \n\t"</literal>
<literal type="string">"gssqc1 $f7, $f6, 0x50(%[block]) \n\t"</literal>
<literal type="string">"gssqc1 $f11, $f10, 0x60(%[block]) \n\t"</literal>
<literal type="string">"gssqc1 $f15, $f14, 0x70(%[block]) \n\t"</literal>

<operator>:</operator> <index>[<expr><name>block</name></expr>]</index><literal type="string">"+&amp;r"</literal><operator>(</operator><name>block</name><operator>)</operator>
<operator>:</operator> <index>[<expr><name>w_arr</name></expr>]</index><literal type="string">"r"</literal><operator>(</operator><name>W_arr</name><operator>)</operator>
<operator>:</operator> <literal type="string">"memory"</literal></expr></argument>
)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>RECOVER_REG</name></expr></expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_simple_idct_put_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_simple_idct_8_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels_clamped_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ff_simple_idct_add_8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_simple_idct_8_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_add_pixels_clamped_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
