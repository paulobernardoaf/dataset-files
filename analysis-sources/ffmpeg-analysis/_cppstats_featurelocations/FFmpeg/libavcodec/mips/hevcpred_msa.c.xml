<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mips\hevcpred_msa.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/hevcdec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/generic_macros_msa.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevcpred_mips.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>intra_pred_angle_up</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">26</literal></expr>, <expr><operator>-</operator><literal type="number">21</literal></expr>, <expr><operator>-</operator><literal type="number">17</literal></expr>, <expr><operator>-</operator><literal type="number">13</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">32</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>intra_pred_angle_low</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">32</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">13</literal></expr>, <expr><operator>-</operator><literal type="number">17</literal></expr>, <expr><operator>-</operator><literal type="number">21</literal></expr>, <expr><operator>-</operator><literal type="number">26</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEVC_PRED_PLANAR_16x2</name><parameter_list>(<parameter><type><name>src0_r</name></type></parameter>, <parameter><type><name>src0_l</name></type></parameter>, <parameter><type><name>tmp0</name></type></parameter>, <parameter><type><name>tmp1</name></type></parameter>, <parameter><type><name>vec0</name></type></parameter>, <parameter><type><name>vec1</name></type></parameter>, <parameter><type><name>mul_val_h0</name></type></parameter>, <parameter><type><name>mul_val_h1</name></type></parameter>, <parameter><type><name>mul_val_h2</name></type></parameter>, <parameter><type><name>mul_val_h3</name></type></parameter>, <parameter><type><name>res0</name></type></parameter>, <parameter><type><name>res1</name></type></parameter>, <parameter><type><name>mul_val_b0</name></type></parameter>, <parameter><type><name>mul_val_b1</name></type></parameter>, <parameter><type><name>round</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v8i16 res0_m, res1_m, res2_m, res3_m; MUL4(mul_val_h0, vec0, mul_val_h2, vec0, mul_val_h0, vec1, mul_val_h2, vec1, res0_m, res1_m, res2_m, res3_m); res0_m += mul_val_h1 * tmp0; res1_m += mul_val_h3 * tmp0; res2_m += mul_val_h1 * tmp0; res3_m += mul_val_h3 * tmp0; res0_m += mul_val_b0 * src0_r; res1_m += mul_val_b0 * src0_l; res2_m += (mul_val_b0 - 1) * src0_r; res3_m += (mul_val_b0 - 1) * src0_l; res0_m += mul_val_b1 * tmp1; res1_m += mul_val_b1 * tmp1; res2_m += (mul_val_b1 + 1) * tmp1; res3_m += (mul_val_b1 + 1) * tmp1; SRARI_H4_SH(res0_m, res1_m, res2_m, res3_m, round); PCKEV_B2_SH(res1_m, res0_m, res3_m, res2_m, res0, res1); }</cpp:value></cpp:define>



























<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_intra_pred_vert_4x4_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>src_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src_data</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW4</name><argument_list>(<argument><expr><name>src_data</name></expr></argument>, <argument><expr><name>src_data</name></expr></argument>, <argument><expr><name>src_data</name></expr></argument>, <argument><expr><name>src_data</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>src_data</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>src_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_insert_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>vec2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec0</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>src_left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>src_top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>vec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>-=</operator> <name>vec0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>+=</operator> <name>vec1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>vec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>stride</name> <operator>*</operator> <name>col</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <name><name>vec2</name><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_intra_pred_vert_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp_dst</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>val0</name></decl>, <decl><type ref="prev"/><name>val1</name></decl>, <decl><type ref="prev"/><name>val2</name></decl>, <decl><type ref="prev"/><name>val3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>src_data1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src_data1</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>row</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>src_data1</name></expr></argument>, <argument><expr><name>tmp_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>src_data1</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>src_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_insert_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src_data1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec0</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>src_left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>src_top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>vec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>-=</operator> <name>vec0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>+=</operator> <name>vec1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>vec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val0</name> <operator>=</operator> <name><name>vec2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>val1</name> <operator>=</operator> <name><name>vec2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>val2</name> <operator>=</operator> <name><name>vec2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>val3</name> <operator>=</operator> <name><name>vec2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>val0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>stride</name></expr>]</index></name> <operator>=</operator> <name>val1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name>val2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name>val3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val0</name> <operator>=</operator> <name><name>vec2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>val1</name> <operator>=</operator> <name><name>vec2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>val2</name> <operator>=</operator> <name><name>vec2</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>val3</name> <operator>=</operator> <name><name>vec2</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name>val0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name>val1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name>val2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name>val3</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_intra_pred_vert_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp_dst</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>, <decl><type ref="prev"/><name>vec3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>row</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>tmp_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec0</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>src_left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>src_top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUB2</name><argument_list>(<argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec2</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec3</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH2_0_255</name><argument_list>(<argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>vec3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>vec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>stride</name> <operator>*</operator> <name>col</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_intra_pred_horiz_4x4_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>val0</name></decl>, <decl><type ref="prev"/><name>val1</name></decl>, <decl><type ref="prev"/><name>val2</name></decl>, <decl><type ref="prev"/><name>val3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src_top_val</name></decl>, <decl><type ref="prev"/><name>src_left_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>val0</name> <operator>=</operator> <name><name>src_left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0x01010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val1</name> <operator>=</operator> <name><name>src_left</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0x01010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val2</name> <operator>=</operator> <name><name>src_left</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0x01010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val3</name> <operator>=</operator> <name><name>src_left</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0x01010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW4</name><argument_list>(<argument><expr><name>val0</name></expr></argument>, <argument><expr><name>val1</name></expr></argument>, <argument><expr><name>val2</name></expr></argument>, <argument><expr><name>val3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val0</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insert_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_top_val</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>src_top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_left_val</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>src_left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0_r</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0_r</name> <operator>-=</operator> <name>src_top_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0_r</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src0_r</name> <operator>+=</operator> <name>src_left_val</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val0</name> <operator>=</operator> <call><name>__msa_copy_s_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>val0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_intra_pred_horiz_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>val0</name></decl>, <decl><type ref="prev"/><name>val1</name></decl>, <decl><type ref="prev"/><name>val2</name></decl>, <decl><type ref="prev"/><name>val3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src_top_val</name></decl>, <decl><type ref="prev"/><name>src_left_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>val0</name> <operator>=</operator> <name><name>src_left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0x0101010101010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val1</name> <operator>=</operator> <name><name>src_left</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0x0101010101010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val2</name> <operator>=</operator> <name><name>src_left</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0x0101010101010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val3</name> <operator>=</operator> <name><name>src_left</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0x0101010101010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>val0</name></expr></argument>, <argument><expr><name>val1</name></expr></argument>, <argument><expr><name>val2</name></expr></argument>, <argument><expr><name>val3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val0</name> <operator>=</operator> <name><name>src_left</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0x0101010101010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val1</name> <operator>=</operator> <name><name>src_left</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0x0101010101010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val2</name> <operator>=</operator> <name><name>src_left</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0x0101010101010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val3</name> <operator>=</operator> <name><name>src_left</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0x0101010101010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>val0</name></expr></argument>, <argument><expr><name>val1</name></expr></argument>, <argument><expr><name>val2</name></expr></argument>, <argument><expr><name>val3</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val0</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insert_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_top_val</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>src_top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_left_val</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>src_left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0_r</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0_r</name> <operator>-=</operator> <name>src_top_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0_r</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src0_r</name> <operator>+=</operator> <name>src_left_val</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH_0_255</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val0</name> <operator>=</operator> <call><name>__msa_copy_s_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>val0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_intra_pred_horiz_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp_dst</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src0_l</name></decl>, <decl><type ref="prev"/><name>src_left_val</name></decl>, <decl><type ref="prev"/><name>src_top_val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src_left_val</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>src_left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>row</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <name><name>src_left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inp1</name> <operator>=</operator> <name><name>src_left</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <name><name>src_left</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inp3</name> <operator>=</operator> <name><name>src_left</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src_left</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src3</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SB4</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>tmp_dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_top_val</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>src_top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUB2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src_top_val</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>src_top_val</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0_r</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src0_l</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src_left_val</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>src_left_val</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH2_0_255</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_intra_pred_horiz_32x32_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <name><name>src_left</name><index>[<expr><name>row</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inp1</name> <operator>=</operator> <name><name>src_left</name><index>[<expr><name>row</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <name><name>src_left</name><index>[<expr><name>row</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inp3</name> <operator>=</operator> <name><name>src_left</name><index>[<expr><name>row</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src3</name> <operator>=</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SB2</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SB2</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SB2</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SB2</name><argument_list>(<argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_intra_pred_dc_4x4_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp_dst</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>addition</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>val0</name></decl>, <decl><type ref="prev"/><name>val1</name></decl>, <decl><type ref="prev"/><name>val2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>store</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>sum</name></decl>, <decl><type ref="prev"/><name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val0</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val1</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>src_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_W2_SB</name><argument_list>(<argument><expr><name>val0</name></expr></argument>, <argument><expr><name>val1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_hadd_u_w</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_hadd_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v4u32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><operator>(</operator><name>v4u32</name><operator>)</operator> <name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>store</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>addition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>SW4</name><argument_list>(<argument>val0</argument>, <argument>val0</argument>, <argument>val0</argument>, <argument>val0</argument>, <argument>dst</argument>, <argument>stride</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ILVR_B2_UH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>store</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec1</name> <operator>+=</operator> <name>vec0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec0</name> <operator>+=</operator> <name>vec0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>+=</operator> <name>vec0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vec1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>vec1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>store</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>vec1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val1</name> <operator>=</operator> <operator>(</operator><name><name>src_left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>addition</name> <operator>+</operator> <name><name>src_top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>store</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>val0</name></expr></argument>, <argument><expr><name>tmp_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val0</name> <operator>=</operator> <name><name>src_left</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>val1</name> <operator>=</operator> <name><name>src_left</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>val2</name> <operator>=</operator> <name><name>src_left</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>addition</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>val0</name></expr></argument>, <argument><expr><name>addition</name></expr></argument>, <argument><expr><name>val1</name></expr></argument>, <argument><expr><name>addition</name></expr></argument>, <argument><expr><name>val0</name></expr></argument>, <argument><expr><name>val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val2</name> <operator>+=</operator> <name>addition</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val0</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val1</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val2</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val0</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val1</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val2</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp_dst</name><index>[<expr><name>stride</name> <operator>*</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>val0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_dst</name><index>[<expr><name>stride</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>val1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_dst</name><index>[<expr><name>stride</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>val2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_intra_pred_dc_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp_dst</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>addition</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>val0</name></decl>, <decl><type ref="prev"/><name>val1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>store</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>sum</name></decl>, <decl><type ref="prev"/><name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>val0</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val1</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>src_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>val0</name></expr></argument>, <argument><expr><name>val1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_hadd_u_w</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_hadd_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v4u32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><operator>(</operator><name>v4u32</name><operator>)</operator> <name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_pckev_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_hadd_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v4u32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><operator>(</operator><name>v4u32</name><operator>)</operator> <name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>store</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>addition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val0</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>row</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>val0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ILVR_B2_UH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>store</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec1</name> <operator>+=</operator> <name>vec0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec0</name> <operator>+=</operator> <name>vec0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>+=</operator> <name>vec0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>vec1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>store</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>vec1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name><name>src_left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>addition</name> <operator>+</operator> <name><name>src_top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>store</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val0</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>val0</name></expr></argument>, <argument><expr><name>tmp_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val0</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>src_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>addition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec0</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>+=</operator> <name>vec0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>vec1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tmp_dst</name><index>[<expr><name>stride</name> <operator>*</operator> <name>col</name></expr>]</index></name> <operator>=</operator> <name><name>vec1</name><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_intra_pred_dc_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp_dst</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>addition</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src_above1</name></decl>, <decl><type ref="prev"/><name>store</name></decl>, <decl><type ref="prev"/><name>src_left1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>sum</name></decl>, <decl><type ref="prev"/><name>sum_above</name></decl>, <decl><type ref="prev"/><name>sum_left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src_above1</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_left1</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HADD_UB2_UH</name><argument_list>(<argument><expr><name>src_above1</name></expr></argument>, <argument><expr><name>src_left1</name></expr></argument>, <argument><expr><name>sum_above</name></expr></argument>, <argument><expr><name>sum_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <name>sum_above</name> <operator>+</operator> <name>sum_left</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_hadd_u_w</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_hadd_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v4u32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><operator>(</operator><name>v4u32</name><operator>)</operator> <name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_pckev_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_hadd_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v4u32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><operator>(</operator><name>v4u32</name><operator>)</operator> <name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>store</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>addition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>row</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src_above1</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec0</name> <operator>+=</operator> <name>vec0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H2_UH</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>store</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>vec2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name><name>src_left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>addition</name> <operator>+</operator> <name><name>src_top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>store</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>tmp_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVRL_B2_UH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src_left1</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>addition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec0</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H2_UH</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>store</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>vec2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tmp_dst</name><index>[<expr><name>stride</name> <operator>*</operator> <name>col</name></expr>]</index></name> <operator>=</operator> <name><name>store</name><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_intra_pred_dc_32x32_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src_above1</name></decl>, <decl><type ref="prev"/><name>src_above2</name></decl>, <decl><type ref="prev"/><name>store</name></decl>, <decl><type ref="prev"/><name>src_left1</name></decl>, <decl><type ref="prev"/><name>src_left2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>sum_above1</name></decl>, <decl><type ref="prev"/><name>sum_above2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>sum_left1</name></decl>, <decl><type ref="prev"/><name>sum_left2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>sum</name></decl>, <decl><type ref="prev"/><name>sum_above</name></decl>, <decl><type ref="prev"/><name>sum_left</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>src_above1</name></expr></argument>, <argument><expr><name>src_above2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src_left</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>src_left1</name></expr></argument>, <argument><expr><name>src_left2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB2_UH</name><argument_list>(<argument><expr><name>src_above1</name></expr></argument>, <argument><expr><name>src_above2</name></expr></argument>, <argument><expr><name>sum_above1</name></expr></argument>, <argument><expr><name>sum_above2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HADD_UB2_UH</name><argument_list>(<argument><expr><name>src_left1</name></expr></argument>, <argument><expr><name>src_left2</name></expr></argument>, <argument><expr><name>sum_left1</name></expr></argument>, <argument><expr><name>sum_left2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum_above</name> <operator>=</operator> <name>sum_above1</name> <operator>+</operator> <name>sum_above2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sum_left</name> <operator>=</operator> <name>sum_left1</name> <operator>+</operator> <name>sum_left2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <name>sum_above</name> <operator>+</operator> <name>sum_left</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_hadd_u_w</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_hadd_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v4u32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><operator>(</operator><name>v4u32</name><operator>)</operator> <name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_pckev_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_hadd_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v4u32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><operator>(</operator><name>v4u32</name><operator>)</operator> <name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>store</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>row</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>store</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>store</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_intra_pred_plane_4x4_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src_vec0</name></decl>, <decl><type ref="prev"/><name>src_vec1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>src_vec0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>mul_val1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>, <decl><type ref="prev"/><name>vec3</name></decl>, <decl><type ref="prev"/><name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>mul_val0</name> <init>= <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>src_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mul_val1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_pckod_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>mul_val0</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>mul_val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_vec0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insert_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_vec1</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insert_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src_vec0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src_vec1</name></expr></argument>, <argument><expr><name>src_vec0_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SPLATI_H4_SH</name><argument_list>(<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>src_top</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>src_left</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>+=</operator> <name>mul_val1</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>+=</operator> <name>mul_val1</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res2</name> <operator>+=</operator> <name>mul_val1</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res3</name> <operator>+=</operator> <name>mul_val1</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>+=</operator> <literal type="number">3</literal> <operator>*</operator> <name>src_vec0_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>src_vec0_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res2</name> <operator>+=</operator> <name>src_vec0_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>+=</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res2</name> <operator>+=</operator> <literal type="number">3</literal> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res3</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCKEV_D2_SH</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H2_SH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_vec0</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W4</name><argument_list>(<argument><expr><name>src_vec0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_intra_pred_plane_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src_vec0</name></decl>, <decl><type ref="prev"/><name>src_vec1</name></decl>, <decl><type ref="prev"/><name>src_vec2</name></decl>, <decl><type ref="prev"/><name>src_vec3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>src_vec0_r</name></decl>, <decl><type ref="prev"/><name>src_vec1_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>, <decl><type ref="prev"/><name>vec3</name></decl>, <decl><type ref="prev"/><name>vec4</name></decl>, <decl><type ref="prev"/><name>vec5</name></decl>, <decl><type ref="prev"/><name>vec6</name></decl>, <decl><type ref="prev"/><name>vec7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>, <decl><type ref="prev"/><name>res4</name></decl>, <decl><type ref="prev"/><name>res5</name></decl>, <decl><type ref="prev"/><name>res6</name></decl>, <decl><type ref="prev"/><name>res7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>mul_val1</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>mul_val0</name> <init>= <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>src_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_vec0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insert_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_vec1</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_insert_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src_vec0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src_vec1</name></expr></argument>, <argument><expr><name>src_vec0_r</name></expr></argument>, <argument><expr><name>src_vec1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SPLATI_H4_SH</name><argument_list>(<argument><expr><name>src_vec1_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SPLATI_H4_SH</name><argument_list>(<argument><expr><name>src_vec1_r</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>vec4</name></expr></argument>, <argument><expr><name>vec5</name></expr></argument>, <argument><expr><name>vec6</name></expr></argument>, <argument><expr><name>vec7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>src_top</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>src_left</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>vec4</name></expr></argument>, <argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>vec5</name></expr></argument>, <argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>vec6</name></expr></argument>, <argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>vec7</name></expr></argument>,
<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>mul_val1</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>+=</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>+=</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res2</name> <operator>+=</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res3</name> <operator>+=</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res4</name> <operator>+=</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res5</name> <operator>+=</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res6</name> <operator>+=</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res7</name> <operator>+=</operator> <name>tmp2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>+=</operator> <literal type="number">7</literal> <operator>*</operator> <name>src_vec0_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>+=</operator> <literal type="number">6</literal> <operator>*</operator> <name>src_vec0_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res2</name> <operator>+=</operator> <literal type="number">5</literal> <operator>*</operator> <name>src_vec0_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res3</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>src_vec0_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res4</name> <operator>+=</operator> <literal type="number">3</literal> <operator>*</operator> <name>src_vec0_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res5</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>src_vec0_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res6</name> <operator>+=</operator> <name>src_vec0_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>+=</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res2</name> <operator>+=</operator> <literal type="number">3</literal> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res3</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res4</name> <operator>+=</operator> <literal type="number">5</literal> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res5</name> <operator>+=</operator> <literal type="number">6</literal> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res6</name> <operator>+=</operator> <literal type="number">7</literal> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res7</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B4_SB</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>,
<argument><expr><name>src_vec0</name></expr></argument>, <argument><expr><name>src_vec1</name></expr></argument>, <argument><expr><name>src_vec2</name></expr></argument>, <argument><expr><name>src_vec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D8</name><argument_list>(<argument><expr><name>src_vec0</name></expr></argument>, <argument><expr><name>src_vec1</name></expr></argument>, <argument><expr><name>src_vec2</name></expr></argument>, <argument><expr><name>src_vec3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_intra_pred_plane_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>src0_l</name></decl>, <decl><type ref="prev"/><name>src1_l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>mul_val2</name></decl>, <decl><type ref="prev"/><name>mul_val3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>mul_val1</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>mul_val0</name> <init>= <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mul_val2</name> <operator>=</operator> <name>mul_val0</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mul_val3</name> <operator>=</operator> <name>mul_val1</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>src_top</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>src_left</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_l</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_l</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_l</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_l</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_intra_upper_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>src0_l</name></decl>, <decl><type ref="prev"/><name>src1_l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>mul_val2</name></decl>, <decl><type ref="prev"/><name>mul_val3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>mul_val1</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>mul_val0</name> <init>= <expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">24</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>src_top</name><index>[<expr><literal type="number">32</literal> <operator>-</operator> <name>offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>src_left</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>src_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mul_val1</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mul_val0</name> <operator>-=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mul_val2</name> <operator>=</operator> <name>mul_val0</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mul_val3</name> <operator>=</operator> <name>mul_val1</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_l</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_l</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_l</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_l</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_intra_lower_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>src0_r</name></decl>, <decl><type ref="prev"/><name>src1_r</name></decl>, <decl><type ref="prev"/><name>src0_l</name></decl>, <decl><type ref="prev"/><name>src1_l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>mul_val2</name></decl>, <decl><type ref="prev"/><name>mul_val3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>mul_val1</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>mul_val0</name> <init>= <expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">24</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>src_top</name><index>[<expr><literal type="number">32</literal> <operator>-</operator> <name>offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>src_left</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>src_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src1_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mul_val1</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mul_val0</name> <operator>-=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mul_val2</name> <operator>=</operator> <name>mul_val0</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mul_val3</name> <operator>=</operator> <name>mul_val1</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_l</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_l</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_l</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLATI_H2_SH</name><argument_list>(<argument><expr><name>src1_l</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HEVC_PRED_PLANAR_16x2</name><argument_list>(<argument><expr><name>src0_r</name></expr></argument>, <argument><expr><name>src0_l</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>,
<argument><expr><name>mul_val0</name></expr></argument>, <argument><expr><name>mul_val1</name></expr></argument>, <argument><expr><name>mul_val2</name></expr></argument>, <argument><expr><name>mul_val3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_intra_pred_plane_32x32_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>process_intra_upper_16x16_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>process_intra_upper_16x16_msa</name><argument_list>(<argument><expr><operator>(</operator><name>src_top</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_left</name></expr></argument>,
<argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">16</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>src_left</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>process_intra_lower_16x16_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>process_intra_lower_16x16_msa</name><argument_list>(<argument><expr><operator>(</operator><name>src_top</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_left</name></expr></argument>,
<argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_intra_pred_angular_upper_4width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>inv_angle</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">256</literal></expr>, <expr><operator>-</operator><literal type="number">315</literal></expr>, <expr><operator>-</operator><literal type="number">390</literal></expr>, <expr><operator>-</operator><literal type="number">482</literal></expr>, <expr><operator>-</operator><literal type="number">630</literal></expr>, <expr><operator>-</operator><literal type="number">910</literal></expr>, <expr><operator>-</operator><literal type="number">1638</literal></expr>, <expr><operator>-</operator><literal type="number">4096</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ref_array</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref_tmp</name> <init>= <expr><name>ref_array</name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>h_cnt</name></decl>, <decl><type ref="prev"/><name>idx0</name></decl>, <decl><type ref="prev"/><name>fact_val0</name></decl>, <decl><type ref="prev"/><name>idx1</name></decl>, <decl><type ref="prev"/><name>fact_val1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>idx2</name></decl>, <decl><type ref="prev"/><name>fact_val2</name></decl>, <decl><type ref="prev"/><name>idx3</name></decl>, <decl><type ref="prev"/><name>fact_val3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>angle</name></decl>, <decl><type ref="prev"/><name>angle_loop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>inv_angle_val</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tmp0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>top0</name></decl>, <decl><type ref="prev"/><name>top1</name></decl>, <decl><type ref="prev"/><name>top2</name></decl>, <decl><type ref="prev"/><name>top3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>dst_val0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>diff0</name></decl>, <decl><type ref="prev"/><name>diff1</name></decl>, <decl><type ref="prev"/><name>diff2</name></decl>, <decl><type ref="prev"/><name>diff3</name></decl>, <decl><type ref="prev"/><name>diff4</name></decl>, <decl><type ref="prev"/><name>diff5</name></decl>, <decl><type ref="prev"/><name>diff6</name></decl>, <decl><type ref="prev"/><name>diff7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>fact0</name></decl>, <decl><type ref="prev"/><name>fact1</name></decl>, <decl><type ref="prev"/><name>fact2</name></decl>, <decl><type ref="prev"/><name>fact3</name></decl>, <decl><type ref="prev"/><name>fact4</name></decl>, <decl><type ref="prev"/><name>fact5</name></decl>, <decl><type ref="prev"/><name>fact6</name></decl>, <decl><type ref="prev"/><name>fact7</name></decl>;</decl_stmt>

<expr_stmt><expr><name>angle</name> <operator>=</operator> <name><name>intra_pred_angle_up</name><index>[<expr><name>mode</name> <operator>-</operator> <literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inv_angle_val</name> <operator>=</operator> <name><name>inv_angle</name><index>[<expr><name>mode</name> <operator>-</operator> <literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>(</operator><name>angle</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>src_top</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>angle</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>last</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>inv_angle_val</name> <operator>=</operator> <name><name>inv_angle</name><index>[<expr><name>mode</name> <operator>-</operator> <literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>ref_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>h_cnt</name> <operator>=</operator> <name>last</name></expr>;</init> <condition><expr><name>h_cnt</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>h_cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>h_cnt</name> <operator>*</operator> <name>inv_angle_val</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref_tmp</name><index>[<expr><name>h_cnt</name></expr>]</index></name> <operator>=</operator> <name><name>src_left</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>ref_tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idx0</name> <operator>=</operator> <name>angle_loop</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val0</name> <operator>=</operator> <name>angle_loop</name> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx1</name> <operator>=</operator> <name>angle_loop</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val1</name> <operator>=</operator> <name>angle_loop</name> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx2</name> <operator>=</operator> <name>angle_loop</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val2</name> <operator>=</operator> <name>angle_loop</name> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx3</name> <operator>=</operator> <name>angle_loop</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val3</name> <operator>=</operator> <name>angle_loop</name> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>top0</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx0</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top1</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top2</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top3</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx3</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fact0</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact1</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fact2</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact3</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fact4</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact5</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fact6</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact7</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_D2_SH</name><argument_list>(<argument><expr><name>fact2</name></expr></argument>, <argument><expr><name>fact0</name></expr></argument>, <argument><expr><name>fact6</name></expr></argument>, <argument><expr><name>fact4</name></expr></argument>, <argument><expr><name>fact0</name></expr></argument>, <argument><expr><name>fact2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_D2_SH</name><argument_list>(<argument><expr><name>fact3</name></expr></argument>, <argument><expr><name>fact1</name></expr></argument>, <argument><expr><name>fact7</name></expr></argument>, <argument><expr><name>fact5</name></expr></argument>, <argument><expr><name>fact1</name></expr></argument>, <argument><expr><name>fact3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B4_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>top0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>top1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>top2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>top3</name></expr></argument>,
<argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B4_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_D2_SH</name><argument_list>(<argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_D2_SH</name><argument_list>(<argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL2</name><argument_list>(<argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>fact0</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>fact2</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff1</name> <operator>+=</operator> <name>diff0</name> <operator>*</operator> <name>fact1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff3</name> <operator>+=</operator> <name>diff2</name> <operator>*</operator> <name>fact3</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H2_SH</name><argument_list>(<argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_val0</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W4</name><argument_list>(<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_intra_pred_angular_upper_8width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>inv_angle</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">256</literal></expr>, <expr><operator>-</operator><literal type="number">315</literal></expr>, <expr><operator>-</operator><literal type="number">390</literal></expr>, <expr><operator>-</operator><literal type="number">482</literal></expr>, <expr><operator>-</operator><literal type="number">630</literal></expr>, <expr><operator>-</operator><literal type="number">910</literal></expr>, <expr><operator>-</operator><literal type="number">1638</literal></expr>, <expr><operator>-</operator><literal type="number">4096</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ref_array</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref_tmp</name> <init>= <expr><name>ref_array</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left_tmp</name> <init>= <expr><name>src_left</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>last</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>h_cnt</name></decl>, <decl><type ref="prev"/><name>v_cnt</name></decl>, <decl><type ref="prev"/><name>idx0</name></decl>, <decl><type ref="prev"/><name>fact_val0</name></decl>, <decl><type ref="prev"/><name>idx1</name></decl>, <decl><type ref="prev"/><name>fact_val1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>idx2</name></decl>, <decl><type ref="prev"/><name>fact_val2</name></decl>, <decl><type ref="prev"/><name>idx3</name></decl>, <decl><type ref="prev"/><name>fact_val3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>angle</name></decl>, <decl><type ref="prev"/><name>angle_loop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>inv_angle_val</name></decl>, <decl><type ref="prev"/><name>inv_angle_val_loop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>top0</name></decl>, <decl><type ref="prev"/><name>top1</name></decl>, <decl><type ref="prev"/><name>top2</name></decl>, <decl><type ref="prev"/><name>top3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst_val0</name></decl>, <decl><type ref="prev"/><name>dst_val1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>fact0</name></decl>, <decl><type ref="prev"/><name>fact1</name></decl>, <decl><type ref="prev"/><name>fact2</name></decl>, <decl><type ref="prev"/><name>fact3</name></decl>, <decl><type ref="prev"/><name>fact4</name></decl>, <decl><type ref="prev"/><name>fact5</name></decl>, <decl><type ref="prev"/><name>fact6</name></decl>, <decl><type ref="prev"/><name>fact7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>diff0</name></decl>, <decl><type ref="prev"/><name>diff1</name></decl>, <decl><type ref="prev"/><name>diff2</name></decl>, <decl><type ref="prev"/><name>diff3</name></decl>, <decl><type ref="prev"/><name>diff4</name></decl>, <decl><type ref="prev"/><name>diff5</name></decl>, <decl><type ref="prev"/><name>diff6</name></decl>, <decl><type ref="prev"/><name>diff7</name></decl>;</decl_stmt>

<expr_stmt><expr><name>angle</name> <operator>=</operator> <name><name>intra_pred_angle_up</name><index>[<expr><name>mode</name> <operator>-</operator> <literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inv_angle_val</name> <operator>=</operator> <name><name>inv_angle</name><index>[<expr><name>mode</name> <operator>-</operator> <literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>(</operator><name>angle</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>src_top</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>inv_angle_val_loop</name> <operator>=</operator> <name>inv_angle_val</name> <operator>*</operator> <name>last</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>ref_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>ref_tmp</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>ref_tmp</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>h_cnt</name> <operator>=</operator> <name>last</name></expr>;</init> <condition><expr><name>h_cnt</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>h_cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>inv_angle_val_loop</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref_tmp</name><index>[<expr><name>h_cnt</name></expr>]</index></name> <operator>=</operator> <name><name>src_left_tmp</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inv_angle_val_loop</name> <operator>+=</operator> <name>inv_angle_val</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>ref_tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>v_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v_cnt</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>v_cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>idx0</name> <operator>=</operator> <operator>(</operator><name>angle_loop</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val0</name> <operator>=</operator> <operator>(</operator><name>angle_loop</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx1</name> <operator>=</operator> <operator>(</operator><name>angle_loop</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val1</name> <operator>=</operator> <operator>(</operator><name>angle_loop</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx2</name> <operator>=</operator> <operator>(</operator><name>angle_loop</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val2</name> <operator>=</operator> <operator>(</operator><name>angle_loop</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx3</name> <operator>=</operator> <operator>(</operator><name>angle_loop</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val3</name> <operator>=</operator> <operator>(</operator><name>angle_loop</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>top0</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx0</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top1</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top2</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top3</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx3</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fact0</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact1</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact2</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact3</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact4</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact5</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact6</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact7</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top0</name></expr></argument>, <argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top1</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top2</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top3</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B4_SH</name><argument_list>(<argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>fact0</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>fact2</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>fact4</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>fact6</name></expr></argument>,
<argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff1</name> <operator>+=</operator> <name>diff0</name> <operator>*</operator> <name>fact1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff3</name> <operator>+=</operator> <name>diff2</name> <operator>*</operator> <name>fact3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff5</name> <operator>+=</operator> <name>diff4</name> <operator>*</operator> <name>fact5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff7</name> <operator>+=</operator> <name>diff6</name> <operator>*</operator> <name>fact7</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst_val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_intra_pred_angular_upper_16width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>inv_angle</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">256</literal></expr>, <expr><operator>-</operator><literal type="number">315</literal></expr>, <expr><operator>-</operator><literal type="number">390</literal></expr>, <expr><operator>-</operator><literal type="number">482</literal></expr>, <expr><operator>-</operator><literal type="number">630</literal></expr>, <expr><operator>-</operator><literal type="number">910</literal></expr>, <expr><operator>-</operator><literal type="number">1638</literal></expr>, <expr><operator>-</operator><literal type="number">4096</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>h_cnt</name></decl>, <decl><type ref="prev"/><name>v_cnt</name></decl>, <decl><type ref="prev"/><name>idx0</name></decl>, <decl><type ref="prev"/><name>fact_val0</name></decl>, <decl><type ref="prev"/><name>idx1</name></decl>, <decl><type ref="prev"/><name>fact_val1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>idx2</name></decl>, <decl><type ref="prev"/><name>fact_val2</name></decl>, <decl><type ref="prev"/><name>idx3</name></decl>, <decl><type ref="prev"/><name>fact_val3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tmp0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>angle</name></decl>, <decl><type ref="prev"/><name>angle_loop</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>inv_angle_val</name></decl>, <decl><type ref="prev"/><name>inv_angle_val_loop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ref_array</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref_tmp</name> <init>= <expr><name>ref_array</name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left_tmp</name> <init>= <expr><name>src_left</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>top0</name></decl>, <decl><type ref="prev"/><name>top1</name></decl>, <decl><type ref="prev"/><name>top2</name></decl>, <decl><type ref="prev"/><name>top3</name></decl>, <decl><type ref="prev"/><name>top4</name></decl>, <decl><type ref="prev"/><name>top5</name></decl>, <decl><type ref="prev"/><name>top6</name></decl>, <decl><type ref="prev"/><name>top7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>fact0</name></decl>, <decl><type ref="prev"/><name>fact1</name></decl>, <decl><type ref="prev"/><name>fact2</name></decl>, <decl><type ref="prev"/><name>fact3</name></decl>, <decl><type ref="prev"/><name>fact4</name></decl>, <decl><type ref="prev"/><name>fact5</name></decl>, <decl><type ref="prev"/><name>fact6</name></decl>, <decl><type ref="prev"/><name>fact7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>diff0</name></decl>, <decl><type ref="prev"/><name>diff1</name></decl>, <decl><type ref="prev"/><name>diff2</name></decl>, <decl><type ref="prev"/><name>diff3</name></decl>, <decl><type ref="prev"/><name>diff4</name></decl>, <decl><type ref="prev"/><name>diff5</name></decl>, <decl><type ref="prev"/><name>diff6</name></decl>, <decl><type ref="prev"/><name>diff7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>diff8</name></decl>, <decl><type ref="prev"/><name>diff9</name></decl>, <decl><type ref="prev"/><name>diff10</name></decl>, <decl><type ref="prev"/><name>diff11</name></decl>, <decl><type ref="prev"/><name>diff12</name></decl>, <decl><type ref="prev"/><name>diff13</name></decl>, <decl><type ref="prev"/><name>diff14</name></decl>, <decl><type ref="prev"/><name>diff15</name></decl>;</decl_stmt>

<expr_stmt><expr><name>angle</name> <operator>=</operator> <name><name>intra_pred_angle_up</name><index>[<expr><name>mode</name> <operator>-</operator> <literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inv_angle_val</name> <operator>=</operator> <name><name>inv_angle</name><index>[<expr><name>mode</name> <operator>-</operator> <literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>angle</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>src_top</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>inv_angle_val_loop</name> <operator>=</operator> <name>inv_angle_val</name> <operator>*</operator> <name>last</name></expr>;</expr_stmt>

<expr_stmt><expr><name>top0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>top0</name></expr></argument>, <argument><expr><name>ref_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>ref_tmp</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>h_cnt</name> <operator>=</operator> <name>last</name></expr>;</init> <condition><expr><name>h_cnt</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>h_cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>inv_angle_val_loop</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref_tmp</name><index>[<expr><name>h_cnt</name></expr>]</index></name> <operator>=</operator> <name><name>src_left_tmp</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inv_angle_val_loop</name> <operator>+=</operator> <name>inv_angle_val</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>ref_tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>v_cnt</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>v_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>idx0</name> <operator>=</operator> <operator>(</operator><name>angle_loop</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val0</name> <operator>=</operator> <operator>(</operator><name>angle_loop</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx1</name> <operator>=</operator> <operator>(</operator><name>angle_loop</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val1</name> <operator>=</operator> <operator>(</operator><name>angle_loop</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx2</name> <operator>=</operator> <operator>(</operator><name>angle_loop</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val2</name> <operator>=</operator> <operator>(</operator><name>angle_loop</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx3</name> <operator>=</operator> <operator>(</operator><name>angle_loop</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val3</name> <operator>=</operator> <operator>(</operator><name>angle_loop</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx0</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>top0</name></expr></argument>, <argument><expr><name>top1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>top2</name></expr></argument>, <argument><expr><name>top3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>top4</name></expr></argument>, <argument><expr><name>top5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx3</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>top6</name></expr></argument>, <argument><expr><name>top7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fact0</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact1</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact2</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact3</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact4</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact5</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact6</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact7</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B4_UB</name><argument_list>(<argument><expr><name>top1</name></expr></argument>, <argument><expr><name>top0</name></expr></argument>, <argument><expr><name>top3</name></expr></argument>, <argument><expr><name>top2</name></expr></argument>, <argument><expr><name>top5</name></expr></argument>, <argument><expr><name>top4</name></expr></argument>, <argument><expr><name>top7</name></expr></argument>, <argument><expr><name>top6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>top1</name></expr></argument>, <argument><expr><name>top3</name></expr></argument>, <argument><expr><name>top5</name></expr></argument>, <argument><expr><name>top7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top0</name></expr></argument>, <argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top1</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top2</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top3</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top4</name></expr></argument>, <argument><expr><name>diff8</name></expr></argument>, <argument><expr><name>diff9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top5</name></expr></argument>, <argument><expr><name>diff10</name></expr></argument>, <argument><expr><name>diff11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top6</name></expr></argument>, <argument><expr><name>diff12</name></expr></argument>, <argument><expr><name>diff13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top7</name></expr></argument>, <argument><expr><name>diff14</name></expr></argument>, <argument><expr><name>diff15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>fact0</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>fact0</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>fact2</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>fact2</name></expr></argument>,
<argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>diff10</name></expr></argument>, <argument><expr><name>fact4</name></expr></argument>, <argument><expr><name>diff11</name></expr></argument>, <argument><expr><name>fact4</name></expr></argument>, <argument><expr><name>diff14</name></expr></argument>, <argument><expr><name>fact6</name></expr></argument>, <argument><expr><name>diff15</name></expr></argument>, <argument><expr><name>fact6</name></expr></argument>,
<argument><expr><name>diff10</name></expr></argument>, <argument><expr><name>diff11</name></expr></argument>, <argument><expr><name>diff14</name></expr></argument>, <argument><expr><name>diff15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff2</name> <operator>+=</operator> <name>diff0</name> <operator>*</operator> <name>fact1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff3</name> <operator>+=</operator> <name>diff1</name> <operator>*</operator> <name>fact1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff6</name> <operator>+=</operator> <name>diff4</name> <operator>*</operator> <name>fact3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff7</name> <operator>+=</operator> <name>diff5</name> <operator>*</operator> <name>fact3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff10</name> <operator>+=</operator> <name>diff8</name> <operator>*</operator> <name>fact5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff11</name> <operator>+=</operator> <name>diff9</name> <operator>*</operator> <name>fact5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff14</name> <operator>+=</operator> <name>diff12</name> <operator>*</operator> <name>fact7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff15</name> <operator>+=</operator> <name>diff13</name> <operator>*</operator> <name>fact7</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>diff10</name></expr></argument>, <argument><expr><name>diff11</name></expr></argument>, <argument><expr><name>diff14</name></expr></argument>, <argument><expr><name>diff15</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B4_SB</name><argument_list>(<argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff11</name></expr></argument>, <argument><expr><name>diff10</name></expr></argument>, <argument><expr><name>diff15</name></expr></argument>, <argument><expr><name>diff14</name></expr></argument>,
<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SB4</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_intra_pred_angular_upper_32width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>inv_angle</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">256</literal></expr>, <expr><operator>-</operator><literal type="number">315</literal></expr>, <expr><operator>-</operator><literal type="number">390</literal></expr>, <expr><operator>-</operator><literal type="number">482</literal></expr>, <expr><operator>-</operator><literal type="number">630</literal></expr>, <expr><operator>-</operator><literal type="number">910</literal></expr>, <expr><operator>-</operator><literal type="number">1638</literal></expr>, <expr><operator>-</operator><literal type="number">4096</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ref_array</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref_tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left_tmp</name> <init>= <expr><name>src_left</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>h_cnt</name></decl>, <decl><type ref="prev"/><name>v_cnt</name></decl>, <decl><type ref="prev"/><name>idx0</name></decl>, <decl><type ref="prev"/><name>fact_val0</name></decl>, <decl><type ref="prev"/><name>idx1</name></decl>, <decl><type ref="prev"/><name>fact_val1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>angle</name></decl>, <decl><type ref="prev"/><name>angle_loop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>inv_angle_val</name></decl>, <decl><type ref="prev"/><name>inv_angle_val_loop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>last</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>top0</name></decl>, <decl><type ref="prev"/><name>top1</name></decl>, <decl><type ref="prev"/><name>top2</name></decl>, <decl><type ref="prev"/><name>top3</name></decl>, <decl><type ref="prev"/><name>top4</name></decl>, <decl><type ref="prev"/><name>top5</name></decl>, <decl><type ref="prev"/><name>top6</name></decl>, <decl><type ref="prev"/><name>top7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>fact0</name></decl>, <decl><type ref="prev"/><name>fact1</name></decl>, <decl><type ref="prev"/><name>fact2</name></decl>, <decl><type ref="prev"/><name>fact3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>diff0</name></decl>, <decl><type ref="prev"/><name>diff1</name></decl>, <decl><type ref="prev"/><name>diff2</name></decl>, <decl><type ref="prev"/><name>diff3</name></decl>, <decl><type ref="prev"/><name>diff4</name></decl>, <decl><type ref="prev"/><name>diff5</name></decl>, <decl><type ref="prev"/><name>diff6</name></decl>, <decl><type ref="prev"/><name>diff7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>diff8</name></decl>, <decl><type ref="prev"/><name>diff9</name></decl>, <decl><type ref="prev"/><name>diff10</name></decl>, <decl><type ref="prev"/><name>diff11</name></decl>, <decl><type ref="prev"/><name>diff12</name></decl>, <decl><type ref="prev"/><name>diff13</name></decl>, <decl><type ref="prev"/><name>diff14</name></decl>, <decl><type ref="prev"/><name>diff15</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ref_tmp</name> <operator>=</operator> <name>ref_array</name> <operator>+</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>angle</name> <operator>=</operator> <name><name>intra_pred_angle_up</name><index>[<expr><name>mode</name> <operator>-</operator> <literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inv_angle_val</name> <operator>=</operator> <name><name>inv_angle</name><index>[<expr><name>mode</name> <operator>-</operator> <literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>angle</name></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>src_top</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>inv_angle_val_loop</name> <operator>=</operator> <name>inv_angle_val</name> <operator>*</operator> <name>last</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>top0</name></expr></argument>, <argument><expr><name>top1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <name><name>ref</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>ref</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name><name>ref</name><index>[<expr><literal type="number">34</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name><name>ref</name><index>[<expr><literal type="number">35</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>top0</name></expr></argument>, <argument><expr><name>top1</name></expr></argument>, <argument><expr><name>ref_tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref_tmp</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <name>tmp0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref_tmp</name><index>[<expr><literal type="number">33</literal></expr>]</index></name> <operator>=</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref_tmp</name><index>[<expr><literal type="number">34</literal></expr>]</index></name> <operator>=</operator> <name>tmp2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref_tmp</name><index>[<expr><literal type="number">35</literal></expr>]</index></name> <operator>=</operator> <name>tmp3</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>h_cnt</name> <operator>=</operator> <name>last</name></expr>;</init> <condition><expr><name>h_cnt</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>h_cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>inv_angle_val_loop</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref_tmp</name><index>[<expr><name>h_cnt</name></expr>]</index></name> <operator>=</operator> <name><name>src_left_tmp</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inv_angle_val_loop</name> <operator>+=</operator> <name>inv_angle_val</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>ref_tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>v_cnt</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>v_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>idx0</name> <operator>=</operator> <operator>(</operator><name>angle_loop</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val0</name> <operator>=</operator> <operator>(</operator><name>angle_loop</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx1</name> <operator>=</operator> <operator>(</operator><name>angle_loop</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val1</name> <operator>=</operator> <operator>(</operator><name>angle_loop</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>top0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx0</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top4</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top1</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx0</name> <operator>+</operator> <literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top5</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx1</name> <operator>+</operator> <literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top3</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx0</name> <operator>+</operator> <literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top7</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx1</name> <operator>+</operator> <literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fact0</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact1</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact2</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact3</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>top2</name> <operator>=</operator> <name>top1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>top6</name> <operator>=</operator> <name>top5</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B4_UB</name><argument_list>(<argument><expr><name>top1</name></expr></argument>, <argument><expr><name>top0</name></expr></argument>, <argument><expr><name>top3</name></expr></argument>, <argument><expr><name>top2</name></expr></argument>, <argument><expr><name>top5</name></expr></argument>, <argument><expr><name>top4</name></expr></argument>, <argument><expr><name>top7</name></expr></argument>, <argument><expr><name>top6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>top1</name></expr></argument>, <argument><expr><name>top3</name></expr></argument>, <argument><expr><name>top5</name></expr></argument>, <argument><expr><name>top7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top0</name></expr></argument>, <argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top1</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top2</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top3</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top4</name></expr></argument>, <argument><expr><name>diff8</name></expr></argument>, <argument><expr><name>diff9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top5</name></expr></argument>, <argument><expr><name>diff10</name></expr></argument>, <argument><expr><name>diff11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top6</name></expr></argument>, <argument><expr><name>diff12</name></expr></argument>, <argument><expr><name>diff13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top7</name></expr></argument>, <argument><expr><name>diff14</name></expr></argument>, <argument><expr><name>diff15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>fact0</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>fact0</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>fact0</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>fact0</name></expr></argument>,
<argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>diff10</name></expr></argument>, <argument><expr><name>fact2</name></expr></argument>, <argument><expr><name>diff11</name></expr></argument>, <argument><expr><name>fact2</name></expr></argument>, <argument><expr><name>diff14</name></expr></argument>, <argument><expr><name>fact2</name></expr></argument>, <argument><expr><name>diff15</name></expr></argument>, <argument><expr><name>fact2</name></expr></argument>,
<argument><expr><name>diff10</name></expr></argument>, <argument><expr><name>diff11</name></expr></argument>, <argument><expr><name>diff14</name></expr></argument>, <argument><expr><name>diff15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff2</name> <operator>+=</operator> <name>diff0</name> <operator>*</operator> <name>fact1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff3</name> <operator>+=</operator> <name>diff1</name> <operator>*</operator> <name>fact1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff6</name> <operator>+=</operator> <name>diff4</name> <operator>*</operator> <name>fact1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff7</name> <operator>+=</operator> <name>diff5</name> <operator>*</operator> <name>fact1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff10</name> <operator>+=</operator> <name>diff8</name> <operator>*</operator> <name>fact3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff11</name> <operator>+=</operator> <name>diff9</name> <operator>*</operator> <name>fact3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff14</name> <operator>+=</operator> <name>diff12</name> <operator>*</operator> <name>fact3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff15</name> <operator>+=</operator> <name>diff13</name> <operator>*</operator> <name>fact3</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>diff10</name></expr></argument>, <argument><expr><name>diff11</name></expr></argument>, <argument><expr><name>diff14</name></expr></argument>, <argument><expr><name>diff15</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B4_SB</name><argument_list>(<argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff11</name></expr></argument>, <argument><expr><name>diff10</name></expr></argument>, <argument><expr><name>diff15</name></expr></argument>, <argument><expr><name>diff14</name></expr></argument>,
<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_SB2</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SB2</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_intra_pred_angular_lower_4width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>inv_angle</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">4096</literal></expr>, <expr><operator>-</operator><literal type="number">1638</literal></expr>, <expr><operator>-</operator><literal type="number">910</literal></expr>, <expr><operator>-</operator><literal type="number">630</literal></expr>, <expr><operator>-</operator><literal type="number">482</literal></expr>, <expr><operator>-</operator><literal type="number">390</literal></expr>, <expr><operator>-</operator><literal type="number">315</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ref_array</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref_tmp</name> <init>= <expr><name>ref_array</name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>last</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>h_cnt</name></decl>, <decl><type ref="prev"/><name>idx0</name></decl>, <decl><type ref="prev"/><name>fact_val0</name></decl>, <decl><type ref="prev"/><name>idx1</name></decl>, <decl><type ref="prev"/><name>fact_val1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>idx2</name></decl>, <decl><type ref="prev"/><name>fact_val2</name></decl>, <decl><type ref="prev"/><name>idx3</name></decl>, <decl><type ref="prev"/><name>fact_val3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>angle</name></decl>, <decl><type ref="prev"/><name>angle_loop</name></decl>, <decl><type ref="prev"/><name>inv_angle_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tmp0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>dst_val0</name></decl>, <decl><type ref="prev"/><name>dst_val1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>top0</name></decl>, <decl><type ref="prev"/><name>top1</name></decl>, <decl><type ref="prev"/><name>top2</name></decl>, <decl><type ref="prev"/><name>top3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>diff0</name></decl>, <decl><type ref="prev"/><name>diff1</name></decl>, <decl><type ref="prev"/><name>diff2</name></decl>, <decl><type ref="prev"/><name>diff3</name></decl>, <decl><type ref="prev"/><name>diff4</name></decl>, <decl><type ref="prev"/><name>diff5</name></decl>, <decl><type ref="prev"/><name>diff6</name></decl>, <decl><type ref="prev"/><name>diff7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>fact0</name></decl>, <decl><type ref="prev"/><name>fact1</name></decl>, <decl><type ref="prev"/><name>fact2</name></decl>, <decl><type ref="prev"/><name>fact3</name></decl>, <decl><type ref="prev"/><name>fact4</name></decl>, <decl><type ref="prev"/><name>fact5</name></decl>, <decl><type ref="prev"/><name>fact6</name></decl>, <decl><type ref="prev"/><name>fact7</name></decl>;</decl_stmt>

<expr_stmt><expr><name>angle</name> <operator>=</operator> <name><name>intra_pred_angle_low</name><index>[<expr><name>mode</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>angle</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>src_left</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>inv_angle_val</name> <operator>=</operator> <name><name>inv_angle</name><index>[<expr><name>mode</name> <operator>-</operator> <literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>ref_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>h_cnt</name> <operator>=</operator> <name>last</name></expr>;</init> <condition><expr><name>h_cnt</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>h_cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>h_cnt</name> <operator>*</operator> <name>inv_angle_val</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref_tmp</name><index>[<expr><name>h_cnt</name></expr>]</index></name> <operator>=</operator> <name><name>src_top</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>ref_tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idx0</name> <operator>=</operator> <name>angle_loop</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val0</name> <operator>=</operator> <name>angle_loop</name> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx1</name> <operator>=</operator> <name>angle_loop</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val1</name> <operator>=</operator> <name>angle_loop</name> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx2</name> <operator>=</operator> <name>angle_loop</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val2</name> <operator>=</operator> <name>angle_loop</name> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx3</name> <operator>=</operator> <name>angle_loop</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val3</name> <operator>=</operator> <name>angle_loop</name> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>top0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx0</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top1</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top2</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top3</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx3</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fact0</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact1</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact2</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact3</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact4</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact5</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact6</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact7</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_D2_SH</name><argument_list>(<argument><expr><name>fact2</name></expr></argument>, <argument><expr><name>fact0</name></expr></argument>, <argument><expr><name>fact6</name></expr></argument>, <argument><expr><name>fact4</name></expr></argument>, <argument><expr><name>fact0</name></expr></argument>, <argument><expr><name>fact2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_D2_SH</name><argument_list>(<argument><expr><name>fact3</name></expr></argument>, <argument><expr><name>fact1</name></expr></argument>, <argument><expr><name>fact7</name></expr></argument>, <argument><expr><name>fact5</name></expr></argument>, <argument><expr><name>fact1</name></expr></argument>, <argument><expr><name>fact3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B4_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>top0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>top1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>top2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>top3</name></expr></argument>,
<argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B4_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_D2_SH</name><argument_list>(<argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_D2_SH</name><argument_list>(<argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL2</name><argument_list>(<argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>fact0</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>fact2</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff1</name> <operator>+=</operator> <name>diff0</name> <operator>*</operator> <name>fact1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff3</name> <operator>+=</operator> <name>diff2</name> <operator>*</operator> <name>fact3</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H2_SH</name><argument_list>(<argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_SB</name><argument_list>(<argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst_val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff0</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst_val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>diff1</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_pckod_b</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst_val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff2</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_pckev_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>diff1</name></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>diff0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_val0</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_val1</name> <operator>=</operator> <call><name>__msa_pckod_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff2</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>diff2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W2</name><argument_list>(<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W2</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_intra_pred_angular_lower_8width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>inv_angle</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">4096</literal></expr>, <expr><operator>-</operator><literal type="number">1638</literal></expr>, <expr><operator>-</operator><literal type="number">910</literal></expr>, <expr><operator>-</operator><literal type="number">630</literal></expr>, <expr><operator>-</operator><literal type="number">482</literal></expr>, <expr><operator>-</operator><literal type="number">390</literal></expr>, <expr><operator>-</operator><literal type="number">315</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ref_array</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref_tmp</name> <init>= <expr><name>ref_array</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top_tmp</name> <init>= <expr><name>src_top</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_org</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>last</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>h_cnt</name></decl>, <decl><type ref="prev"/><name>v_cnt</name></decl>, <decl><type ref="prev"/><name>idx0</name></decl>, <decl><type ref="prev"/><name>fact_val0</name></decl>, <decl><type ref="prev"/><name>idx1</name></decl>, <decl><type ref="prev"/><name>fact_val1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>idx2</name></decl>, <decl><type ref="prev"/><name>fact_val2</name></decl>, <decl><type ref="prev"/><name>idx3</name></decl>, <decl><type ref="prev"/><name>fact_val3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>angle</name></decl>, <decl><type ref="prev"/><name>angle_loop</name></decl>, <decl><type ref="prev"/><name>inv_angle_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>top0</name></decl>, <decl><type ref="prev"/><name>top1</name></decl>, <decl><type ref="prev"/><name>top2</name></decl>, <decl><type ref="prev"/><name>top3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>dst_val0</name></decl>, <decl><type ref="prev"/><name>dst_val1</name></decl>, <decl><type ref="prev"/><name>dst_val2</name></decl>, <decl><type ref="prev"/><name>dst_val3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>diff0</name></decl>, <decl><type ref="prev"/><name>diff1</name></decl>, <decl><type ref="prev"/><name>diff2</name></decl>, <decl><type ref="prev"/><name>diff3</name></decl>, <decl><type ref="prev"/><name>diff4</name></decl>, <decl><type ref="prev"/><name>diff5</name></decl>, <decl><type ref="prev"/><name>diff6</name></decl>, <decl><type ref="prev"/><name>diff7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>fact0</name></decl>, <decl><type ref="prev"/><name>fact1</name></decl>, <decl><type ref="prev"/><name>fact2</name></decl>, <decl><type ref="prev"/><name>fact3</name></decl>, <decl><type ref="prev"/><name>fact4</name></decl>, <decl><type ref="prev"/><name>fact5</name></decl>, <decl><type ref="prev"/><name>fact6</name></decl>, <decl><type ref="prev"/><name>fact7</name></decl>;</decl_stmt>

<expr_stmt><expr><name>angle</name> <operator>=</operator> <name><name>intra_pred_angle_low</name><index>[<expr><name>mode</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>(</operator><name>angle</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>src_left</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>inv_angle_val</name> <operator>=</operator> <name><name>inv_angle</name><index>[<expr><name>mode</name> <operator>-</operator> <literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>ref_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>ref_tmp</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>ref_tmp</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>h_cnt</name> <operator>=</operator> <name>last</name></expr>;</init> <condition><expr><name>h_cnt</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>h_cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>h_cnt</name> <operator>*</operator> <name>inv_angle_val</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref_tmp</name><index>[<expr><name>h_cnt</name></expr>]</index></name> <operator>=</operator> <name><name>src_top_tmp</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>ref_tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>v_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v_cnt</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>v_cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst_org</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx0</name> <operator>=</operator> <name>angle_loop</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val0</name> <operator>=</operator> <name>angle_loop</name> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx1</name> <operator>=</operator> <name>angle_loop</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val1</name> <operator>=</operator> <name>angle_loop</name> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx2</name> <operator>=</operator> <name>angle_loop</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val2</name> <operator>=</operator> <name>angle_loop</name> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx3</name> <operator>=</operator> <name>angle_loop</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val3</name> <operator>=</operator> <name>angle_loop</name> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>top0</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx0</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top1</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top2</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top3</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx3</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fact0</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact1</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact2</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact3</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact4</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact5</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact6</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact7</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top0</name></expr></argument>, <argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top1</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top2</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top3</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B4_SH</name><argument_list>(<argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>fact0</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>fact2</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>fact4</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>fact6</name></expr></argument>,
<argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff1</name> <operator>+=</operator> <name>diff0</name> <operator>*</operator> <name>fact1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff3</name> <operator>+=</operator> <name>diff2</name> <operator>*</operator> <name>fact3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff5</name> <operator>+=</operator> <name>diff4</name> <operator>*</operator> <name>fact5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff7</name> <operator>+=</operator> <name>diff6</name> <operator>*</operator> <name>fact7</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B4_SB</name><argument_list>(<argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>,
<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst_val2</name></expr></argument>, <argument><expr><name>dst_val3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst_val3</name></expr></argument>, <argument><expr><name>dst_val2</name></expr></argument>, <argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_H2_SH</name><argument_list>(<argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W8</name><argument_list>(<argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst_org</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_intra_pred_angular_lower_16width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>inv_angle</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">4096</literal></expr>, <expr><operator>-</operator><literal type="number">1638</literal></expr>, <expr><operator>-</operator><literal type="number">910</literal></expr>, <expr><operator>-</operator><literal type="number">630</literal></expr>, <expr><operator>-</operator><literal type="number">482</literal></expr>, <expr><operator>-</operator><literal type="number">390</literal></expr>, <expr><operator>-</operator><literal type="number">315</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>h_cnt</name></decl>, <decl><type ref="prev"/><name>v_cnt</name></decl>, <decl><type ref="prev"/><name>idx0</name></decl>, <decl><type ref="prev"/><name>fact_val0</name></decl>, <decl><type ref="prev"/><name>idx1</name></decl>, <decl><type ref="prev"/><name>fact_val1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>idx2</name></decl>, <decl><type ref="prev"/><name>fact_val2</name></decl>, <decl><type ref="prev"/><name>idx3</name></decl>, <decl><type ref="prev"/><name>fact_val3</name></decl>, <decl><type ref="prev"/><name>tmp0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>top0</name></decl>, <decl><type ref="prev"/><name>top1</name></decl>, <decl><type ref="prev"/><name>dst_val0</name></decl>, <decl><type ref="prev"/><name>top2</name></decl>, <decl><type ref="prev"/><name>top3</name></decl>, <decl><type ref="prev"/><name>dst_val1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>top4</name></decl>, <decl><type ref="prev"/><name>top5</name></decl>, <decl><type ref="prev"/><name>dst_val2</name></decl>, <decl><type ref="prev"/><name>top6</name></decl>, <decl><type ref="prev"/><name>top7</name></decl>, <decl><type ref="prev"/><name>dst_val3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>fact0</name></decl>, <decl><type ref="prev"/><name>fact1</name></decl>, <decl><type ref="prev"/><name>fact2</name></decl>, <decl><type ref="prev"/><name>fact3</name></decl>, <decl><type ref="prev"/><name>fact4</name></decl>, <decl><type ref="prev"/><name>fact5</name></decl>, <decl><type ref="prev"/><name>fact6</name></decl>, <decl><type ref="prev"/><name>fact7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>diff0</name></decl>, <decl><type ref="prev"/><name>diff1</name></decl>, <decl><type ref="prev"/><name>diff2</name></decl>, <decl><type ref="prev"/><name>diff3</name></decl>, <decl><type ref="prev"/><name>diff4</name></decl>, <decl><type ref="prev"/><name>diff5</name></decl>, <decl><type ref="prev"/><name>diff6</name></decl>, <decl><type ref="prev"/><name>diff7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>diff8</name></decl>, <decl><type ref="prev"/><name>diff9</name></decl>, <decl><type ref="prev"/><name>diff10</name></decl>, <decl><type ref="prev"/><name>diff11</name></decl>, <decl><type ref="prev"/><name>diff12</name></decl>, <decl><type ref="prev"/><name>diff13</name></decl>, <decl><type ref="prev"/><name>diff14</name></decl>, <decl><type ref="prev"/><name>diff15</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>angle</name></decl>, <decl><type ref="prev"/><name>angle_loop</name></decl>, <decl><type ref="prev"/><name>inv_angle_val</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ref_array</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref_tmp</name> <init>= <expr><name>ref_array</name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src_top_tmp</name> <init>= <expr><name>src_top</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_org</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>last</name></decl>;</decl_stmt>

<expr_stmt><expr><name>angle</name> <operator>=</operator> <name><name>intra_pred_angle_low</name><index>[<expr><name>mode</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>(</operator><name>angle</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>src_left</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>inv_angle_val</name> <operator>=</operator> <name><name>inv_angle</name><index>[<expr><name>mode</name> <operator>-</operator> <literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>top0</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SB</name><argument_list>(<argument><expr><name>top0</name></expr></argument>, <argument><expr><name>ref_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>ref_tmp</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>h_cnt</name> <operator>=</operator> <name>last</name></expr>;</init> <condition><expr><name>h_cnt</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>h_cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>h_cnt</name> <operator>*</operator> <name>inv_angle_val</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref_tmp</name><index>[<expr><name>h_cnt</name></expr>]</index></name> <operator>=</operator> <name><name>src_top_tmp</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>ref_tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>v_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v_cnt</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>v_cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst_org</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx0</name> <operator>=</operator> <name>angle_loop</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val0</name> <operator>=</operator> <name>angle_loop</name> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx1</name> <operator>=</operator> <name>angle_loop</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val1</name> <operator>=</operator> <name>angle_loop</name> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx2</name> <operator>=</operator> <name>angle_loop</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val2</name> <operator>=</operator> <name>angle_loop</name> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx3</name> <operator>=</operator> <name>angle_loop</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val3</name> <operator>=</operator> <name>angle_loop</name> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SB2</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx0</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>top0</name></expr></argument>, <argument><expr><name>top1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_SB2</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>top2</name></expr></argument>, <argument><expr><name>top3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_SB2</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>top4</name></expr></argument>, <argument><expr><name>top5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_SB2</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx3</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>top6</name></expr></argument>, <argument><expr><name>top7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fact0</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact1</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact2</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact3</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact4</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact5</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact6</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact7</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B4_SB</name><argument_list>(<argument><expr><name>top1</name></expr></argument>, <argument><expr><name>top0</name></expr></argument>, <argument><expr><name>top3</name></expr></argument>, <argument><expr><name>top2</name></expr></argument>, <argument><expr><name>top5</name></expr></argument>, <argument><expr><name>top4</name></expr></argument>, <argument><expr><name>top7</name></expr></argument>, <argument><expr><name>top6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>top1</name></expr></argument>, <argument><expr><name>top3</name></expr></argument>, <argument><expr><name>top5</name></expr></argument>, <argument><expr><name>top7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top0</name></expr></argument>, <argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top1</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top2</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top3</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top4</name></expr></argument>, <argument><expr><name>diff8</name></expr></argument>, <argument><expr><name>diff9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top5</name></expr></argument>, <argument><expr><name>diff10</name></expr></argument>, <argument><expr><name>diff11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top6</name></expr></argument>, <argument><expr><name>diff12</name></expr></argument>, <argument><expr><name>diff13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top7</name></expr></argument>, <argument><expr><name>diff14</name></expr></argument>, <argument><expr><name>diff15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>fact0</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>fact0</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>fact2</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>fact2</name></expr></argument>,
<argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>diff10</name></expr></argument>, <argument><expr><name>fact4</name></expr></argument>, <argument><expr><name>diff11</name></expr></argument>, <argument><expr><name>fact4</name></expr></argument>, <argument><expr><name>diff14</name></expr></argument>, <argument><expr><name>fact6</name></expr></argument>, <argument><expr><name>diff15</name></expr></argument>, <argument><expr><name>fact6</name></expr></argument>,
<argument><expr><name>diff10</name></expr></argument>, <argument><expr><name>diff11</name></expr></argument>, <argument><expr><name>diff14</name></expr></argument>, <argument><expr><name>diff15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff2</name> <operator>+=</operator> <name>diff0</name> <operator>*</operator> <name>fact1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff3</name> <operator>+=</operator> <name>diff1</name> <operator>*</operator> <name>fact1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff6</name> <operator>+=</operator> <name>diff4</name> <operator>*</operator> <name>fact3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff7</name> <operator>+=</operator> <name>diff5</name> <operator>*</operator> <name>fact3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff10</name> <operator>+=</operator> <name>diff8</name> <operator>*</operator> <name>fact5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff11</name> <operator>+=</operator> <name>diff9</name> <operator>*</operator> <name>fact5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff14</name> <operator>+=</operator> <name>diff12</name> <operator>*</operator> <name>fact7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff15</name> <operator>+=</operator> <name>diff13</name> <operator>*</operator> <name>fact7</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>diff10</name></expr></argument>, <argument><expr><name>diff11</name></expr></argument>, <argument><expr><name>diff14</name></expr></argument>, <argument><expr><name>diff15</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B4_SB</name><argument_list>(<argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff11</name></expr></argument>, <argument><expr><name>diff10</name></expr></argument>, <argument><expr><name>diff15</name></expr></argument>, <argument><expr><name>diff14</name></expr></argument>,
<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst_val2</name></expr></argument>, <argument><expr><name>dst_val3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst_val3</name></expr></argument>, <argument><expr><name>dst_val2</name></expr></argument>, <argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVL_B2_SH</name><argument_list>(<argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst_val3</name></expr></argument>, <argument><expr><name>dst_val2</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_H2_SH</name><argument_list>(<argument><expr><name>diff1</name></expr></argument>, <argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_H2_SH</name><argument_list>(<argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W8</name><argument_list>(<argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst_org</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_org</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W8</name><argument_list>(<argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst_org</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_intra_pred_angular_lower_32width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>inv_angle</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">4096</literal></expr>, <expr><operator>-</operator><literal type="number">1638</literal></expr>, <expr><operator>-</operator><literal type="number">910</literal></expr>, <expr><operator>-</operator><literal type="number">630</literal></expr>, <expr><operator>-</operator><literal type="number">482</literal></expr>, <expr><operator>-</operator><literal type="number">390</literal></expr>, <expr><operator>-</operator><literal type="number">315</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>h_cnt</name></decl>, <decl><type ref="prev"/><name>v_cnt</name></decl>, <decl><type ref="prev"/><name>idx0</name></decl>, <decl><type ref="prev"/><name>fact_val0</name></decl>, <decl><type ref="prev"/><name>idx1</name></decl>, <decl><type ref="prev"/><name>fact_val1</name></decl>, <decl><type ref="prev"/><name>tmp0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>top0</name></decl>, <decl><type ref="prev"/><name>top1</name></decl>, <decl><type ref="prev"/><name>dst_val0</name></decl>, <decl><type ref="prev"/><name>top2</name></decl>, <decl><type ref="prev"/><name>top3</name></decl>, <decl><type ref="prev"/><name>dst_val1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>top4</name></decl>, <decl><type ref="prev"/><name>top5</name></decl>, <decl><type ref="prev"/><name>dst_val2</name></decl>, <decl><type ref="prev"/><name>top6</name></decl>, <decl><type ref="prev"/><name>top7</name></decl>, <decl><type ref="prev"/><name>dst_val3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>fact0</name></decl>, <decl><type ref="prev"/><name>fact1</name></decl>, <decl><type ref="prev"/><name>fact2</name></decl>, <decl><type ref="prev"/><name>fact3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>diff0</name></decl>, <decl><type ref="prev"/><name>diff1</name></decl>, <decl><type ref="prev"/><name>diff2</name></decl>, <decl><type ref="prev"/><name>diff3</name></decl>, <decl><type ref="prev"/><name>diff4</name></decl>, <decl><type ref="prev"/><name>diff5</name></decl>, <decl><type ref="prev"/><name>diff6</name></decl>, <decl><type ref="prev"/><name>diff7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>diff8</name></decl>, <decl><type ref="prev"/><name>diff9</name></decl>, <decl><type ref="prev"/><name>diff10</name></decl>, <decl><type ref="prev"/><name>diff11</name></decl>, <decl><type ref="prev"/><name>diff12</name></decl>, <decl><type ref="prev"/><name>diff13</name></decl>, <decl><type ref="prev"/><name>diff14</name></decl>, <decl><type ref="prev"/><name>diff15</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>angle</name></decl>, <decl><type ref="prev"/><name>angle_loop</name></decl>, <decl><type ref="prev"/><name>inv_angle_val</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ref_array</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref_tmp</name> <init>= <expr><name>ref_array</name> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src_top_tmp</name> <init>= <expr><name>src_top</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_org</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>last</name></decl>;</decl_stmt>

<expr_stmt><expr><name>angle</name> <operator>=</operator> <name><name>intra_pred_angle_low</name><index>[<expr><name>mode</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>angle</name></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>src_left</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>inv_angle_val</name> <operator>=</operator> <name><name>inv_angle</name><index>[<expr><name>mode</name> <operator>-</operator> <literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SB2</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>top0</name></expr></argument>, <argument><expr><name>top1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SB2</name><argument_list>(<argument><expr><name>top0</name></expr></argument>, <argument><expr><name>top1</name></expr></argument>, <argument><expr><name>ref_tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>ref_tmp</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>h_cnt</name> <operator>=</operator> <name>last</name></expr>;</init> <condition><expr><name>h_cnt</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>h_cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>h_cnt</name> <operator>*</operator> <name>inv_angle_val</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ref_tmp</name><index>[<expr><name>h_cnt</name></expr>]</index></name> <operator>=</operator> <name><name>src_top_tmp</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>ref_tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>v_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v_cnt</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>v_cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dst_org</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx0</name> <operator>=</operator> <name>angle_loop</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val0</name> <operator>=</operator> <name>angle_loop</name> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx1</name> <operator>=</operator> <name>angle_loop</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fact_val1</name> <operator>=</operator> <name>angle_loop</name> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>angle_loop</name> <operator>+=</operator> <name>angle</name></expr>;</expr_stmt>

<expr_stmt><expr><name>top0</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx0</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top4</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top1</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx0</name> <operator>+</operator> <literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top5</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx1</name> <operator>+</operator> <literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top3</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx0</name> <operator>+</operator> <literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top7</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><name>ref</name> <operator>+</operator> <name>idx1</name> <operator>+</operator> <literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fact0</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact1</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact2</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>fact_val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fact3</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <name>fact_val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>top2</name> <operator>=</operator> <name>top1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>top6</name> <operator>=</operator> <name>top5</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B4_SB</name><argument_list>(<argument><expr><name>top1</name></expr></argument>, <argument><expr><name>top0</name></expr></argument>, <argument><expr><name>top3</name></expr></argument>, <argument><expr><name>top2</name></expr></argument>, <argument><expr><name>top5</name></expr></argument>, <argument><expr><name>top4</name></expr></argument>, <argument><expr><name>top7</name></expr></argument>, <argument><expr><name>top6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>top1</name></expr></argument>, <argument><expr><name>top3</name></expr></argument>, <argument><expr><name>top5</name></expr></argument>, <argument><expr><name>top7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top0</name></expr></argument>, <argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top1</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top2</name></expr></argument>, <argument><expr><name>diff4</name></expr></argument>, <argument><expr><name>diff5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top3</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top4</name></expr></argument>, <argument><expr><name>diff8</name></expr></argument>, <argument><expr><name>diff9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top5</name></expr></argument>, <argument><expr><name>diff10</name></expr></argument>, <argument><expr><name>diff11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top6</name></expr></argument>, <argument><expr><name>diff12</name></expr></argument>, <argument><expr><name>diff13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>top7</name></expr></argument>, <argument><expr><name>diff14</name></expr></argument>, <argument><expr><name>diff15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>fact0</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>fact0</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>fact0</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>fact0</name></expr></argument>,
<argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>diff10</name></expr></argument>, <argument><expr><name>fact2</name></expr></argument>, <argument><expr><name>diff11</name></expr></argument>, <argument><expr><name>fact2</name></expr></argument>, <argument><expr><name>diff14</name></expr></argument>, <argument><expr><name>fact2</name></expr></argument>, <argument><expr><name>diff15</name></expr></argument>, <argument><expr><name>fact2</name></expr></argument>,
<argument><expr><name>diff10</name></expr></argument>, <argument><expr><name>diff11</name></expr></argument>, <argument><expr><name>diff14</name></expr></argument>, <argument><expr><name>diff15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff2</name> <operator>+=</operator> <name>diff0</name> <operator>*</operator> <name>fact1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff3</name> <operator>+=</operator> <name>diff1</name> <operator>*</operator> <name>fact1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff6</name> <operator>+=</operator> <name>diff4</name> <operator>*</operator> <name>fact1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff7</name> <operator>+=</operator> <name>diff5</name> <operator>*</operator> <name>fact1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff10</name> <operator>+=</operator> <name>diff8</name> <operator>*</operator> <name>fact3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff11</name> <operator>+=</operator> <name>diff9</name> <operator>*</operator> <name>fact3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff14</name> <operator>+=</operator> <name>diff12</name> <operator>*</operator> <name>fact3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff15</name> <operator>+=</operator> <name>diff13</name> <operator>*</operator> <name>fact3</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>diff10</name></expr></argument>, <argument><expr><name>diff11</name></expr></argument>, <argument><expr><name>diff14</name></expr></argument>, <argument><expr><name>diff15</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B4_SB</name><argument_list>(<argument><expr><name>diff3</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff7</name></expr></argument>, <argument><expr><name>diff6</name></expr></argument>, <argument><expr><name>diff11</name></expr></argument>, <argument><expr><name>diff10</name></expr></argument>, <argument><expr><name>diff15</name></expr></argument>, <argument><expr><name>diff14</name></expr></argument>,
<argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>dst_val2</name></expr></argument>, <argument><expr><name>dst_val3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_SH</name><argument_list>(<argument><expr><name>dst_val2</name></expr></argument>, <argument><expr><name>dst_val0</name></expr></argument>, <argument><expr><name>diff0</name></expr></argument>, <argument><expr><name>diff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVRL_B2_SH</name><argument_list>(<argument><expr><name>dst_val3</name></expr></argument>, <argument><expr><name>dst_val1</name></expr></argument>, <argument><expr><name>diff2</name></expr></argument>, <argument><expr><name>diff3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>ST_H8</name><argument_list>(<argument>diff0</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">7</literal></argument>, <argument>dst_org</argument>, <argument>stride</argument>)</argument_list></macro>
<expr_stmt><expr><name>dst_org</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<macro><name>ST_H8</name><argument_list>(<argument>diff1</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">7</literal></argument>, <argument>dst_org</argument>, <argument>stride</argument>)</argument_list></macro>
<expr_stmt><expr><name>dst_org</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<macro><name>ST_H8</name><argument_list>(<argument>diff2</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">7</literal></argument>, <argument>dst_org</argument>, <argument>stride</argument>)</argument_list></macro>
<expr_stmt><expr><name>dst_org</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<macro><name>ST_H8</name><argument_list>(<argument>diff3</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">7</literal></argument>, <argument>dst_org</argument>, <argument>stride</argument>)</argument_list></macro>
<expr_stmt><expr><name>dst_org</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intra_predict_vert_32x32_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src1</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">32</literal></expr>;</init> <condition><expr><name>row</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_intra_pred_planar_0_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hevc_intra_pred_plane_4x4_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_intra_pred_planar_1_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hevc_intra_pred_plane_8x8_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_intra_pred_planar_2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hevc_intra_pred_plane_16x16_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_intra_pred_planar_3_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hevc_intra_pred_plane_32x32_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_intra_pred_dc_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>log2</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>hevc_intra_pred_dc_4x4_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>hevc_intra_pred_dc_8x8_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><call><name>hevc_intra_pred_dc_16x16_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><call><name>hevc_intra_pred_dc_32x32_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_pred_intra_pred_angular_0_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hevc_intra_pred_horiz_4x4_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">26</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hevc_intra_pred_vert_4x4_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>&gt;=</operator> <literal type="number">18</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hevc_intra_pred_angular_upper_4width_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>hevc_intra_pred_angular_lower_4width_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_pred_intra_pred_angular_1_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hevc_intra_pred_horiz_8x8_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">26</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hevc_intra_pred_vert_8x8_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>&gt;=</operator> <literal type="number">18</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hevc_intra_pred_angular_upper_8width_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>hevc_intra_pred_angular_lower_8width_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_pred_intra_pred_angular_2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hevc_intra_pred_horiz_16x16_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">26</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hevc_intra_pred_vert_16x16_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>&gt;=</operator> <literal type="number">18</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hevc_intra_pred_angular_upper_16width_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>hevc_intra_pred_angular_lower_16width_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_pred_intra_pred_angular_3_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hevc_intra_pred_horiz_32x32_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">26</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>intra_predict_vert_32x32_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>&gt;=</operator> <literal type="number">18</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>hevc_intra_pred_angular_upper_32width_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>hevc_intra_pred_angular_lower_32width_msa</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_left</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_intra_pred_8_16x16_msa</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>vec0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HEVCLocalContext</name> <modifier>*</modifier></type><name>lc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hshift</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>hshift</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vshift</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>vshift</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size_in_luma_h</name> <init>= <expr><literal type="number">16</literal> <operator>&lt;&lt;</operator> <name>hshift</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size_in_tbs_h</name> <init>= <expr><name>size_in_luma_h</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size_in_luma_v</name> <init>= <expr><literal type="number">16</literal> <operator>&lt;&lt;</operator> <name>vshift</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size_in_tbs_v</name> <init>= <expr><name>size_in_luma_v</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>x0</name> <operator>&gt;&gt;</operator> <name>hshift</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>y0</name> <operator>&gt;&gt;</operator> <name>vshift</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_tb</name> <init>= <expr><operator>(</operator><name>x0</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_tb</name> <init>= <expr><operator>(</operator><name>y0</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_tb_addr</name> <init>=
<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>min_tb_addr_zs</name><index>[<expr><operator>(</operator><name>y_tb</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x_tb</name><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>stride</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_pu_width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>IntraPredMode</name></name></type> <name>mode</name> <init>= <expr><ternary><condition><expr><name>c_idx</name></expr> ?</condition><then> <expr><name><name>lc</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>intra_pred_mode_c</name></name></expr> </then><else>:
<expr><name><name>lc</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>intra_pred_mode</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>left_array</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>filtered_left_array</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>top_array</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>filtered_top_array</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><name>left_array</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><name>top_array</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>filtered_left</name> <init>= <expr><name>filtered_left_array</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>filtered_top</name> <init>= <expr><name>filtered_top_array</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cand_bottom_left</name> <init>= <expr><name><name>lc</name><operator>-&gt;</operator><name>na</name><operator>.</operator><name>cand_bottom_left</name></name>
<operator>&amp;&amp;</operator> <name>cur_tb_addr</name> <operator>&gt;</operator>
<name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>min_tb_addr_zs</name><index>[<expr><operator>(</operator><operator>(</operator><name>y_tb</name> <operator>+</operator> <name>size_in_tbs_v</name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name><operator>)</operator> <operator>*</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x_tb</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cand_left</name> <init>= <expr><name><name>lc</name><operator>-&gt;</operator><name>na</name><operator>.</operator><name>cand_left</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cand_up_left</name> <init>= <expr><name><name>lc</name><operator>-&gt;</operator><name>na</name><operator>.</operator><name>cand_up_left</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cand_up</name> <init>= <expr><name><name>lc</name><operator>-&gt;</operator><name>na</name><operator>.</operator><name>cand_up</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cand_up_right</name> <init>= <expr><name><name>lc</name><operator>-&gt;</operator><name>na</name><operator>.</operator><name>cand_up_right</name></name>
<operator>&amp;&amp;</operator> <name>cur_tb_addr</name> <operator>&gt;</operator>
<name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>min_tb_addr_zs</name><index>[<expr><operator>(</operator><name>y_tb</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>x_tb</name> <operator>+</operator> <name>size_in_tbs_h</name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bottom_left_size</name> <init>=
<expr><operator>(</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>y0</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>size_in_luma_v</name><operator>)</operator> <operator>&gt;</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>y0</name> <operator>+</operator>
<literal type="number">2</literal> <operator>*</operator> <name>size_in_luma_v</name><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>-</operator>
<operator>(</operator><name>y0</name> <operator>+</operator> <name>size_in_luma_v</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>vshift</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_right_size</name> <init>=
<expr><operator>(</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>x0</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>size_in_luma_h</name><operator>)</operator> <operator>&gt;</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>x0</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>size_in_luma_h</name><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>-</operator>
<operator>(</operator><name>x0</name> <operator>+</operator> <name>size_in_luma_h</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>hshift</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>constrained_intra_pred_flag</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size_in_luma_pu_v</name> <init>= <expr><operator>(</operator><operator>(</operator><name>size_in_luma_v</name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size_in_luma_pu_h</name> <init>= <expr><operator>(</operator><operator>(</operator><name>size_in_luma_h</name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>on_pu_edge_x</name> <init>= <expr><operator>!</operator><operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>on_pu_edge_y</name> <init>= <expr><operator>!</operator><operator>(</operator><name>y0</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size_in_luma_pu_h</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size_in_luma_pu_h</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cand_bottom_left</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>on_pu_edge_x</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x_left_pu</name> <init>= <expr><operator>(</operator><operator>(</operator><name>x0</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_bottom_pu</name> <init>=
<expr><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator> <name>size_in_luma_v</name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>=
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>size_in_luma_pu_v</name><operator>)</operator> <operator>&gt;</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_height</name></name> <operator>-</operator>
<name>y_bottom_pu</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_height</name></name> <operator>-</operator>
<name>y_bottom_pu</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>size_in_luma_pu_v</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cand_bottom_left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>cand_bottom_left</name> <operator>|=</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><name>x_left_pu</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>y_bottom_pu</name> <operator>+</operator>
<name>i</name><operator>)</operator> <operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cand_left</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>on_pu_edge_x</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x_left_pu</name> <init>= <expr><operator>(</operator><operator>(</operator><name>x0</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_left_pu</name> <init>= <expr><operator>(</operator><operator>(</operator><name>y0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>=
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>size_in_luma_pu_v</name><operator>)</operator> <operator>&gt;</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_height</name></name> <operator>-</operator>
<name>y_left_pu</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_height</name></name> <operator>-</operator>
<name>y_left_pu</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>size_in_luma_pu_v</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cand_left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>cand_left</name> <operator>|=</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><name>x_left_pu</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>y_left_pu</name> <operator>+</operator>
<name>i</name><operator>)</operator> <operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cand_up_left</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x_left_pu</name> <init>= <expr><operator>(</operator><operator>(</operator><name>x0</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_top_pu</name> <init>= <expr><operator>(</operator><operator>(</operator><name>y0</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cand_up_left</name> <operator>=</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><name>x_left_pu</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>y_top_pu</name><operator>)</operator> <operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cand_up</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>on_pu_edge_y</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x_top_pu</name> <init>= <expr><operator>(</operator><operator>(</operator><name>x0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_top_pu</name> <init>= <expr><operator>(</operator><operator>(</operator><name>y0</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>=
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>size_in_luma_pu_h</name><operator>)</operator> <operator>&gt;</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_width</name></name> <operator>-</operator>
<name>x_top_pu</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_width</name></name> <operator>-</operator>
<name>x_top_pu</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>size_in_luma_pu_h</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cand_up</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>cand_up</name> <operator>|=</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><name>x_top_pu</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>y_top_pu</name><operator>)</operator> <operator>*</operator>
<name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator> <name>PF_INTRA</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cand_up_right</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>on_pu_edge_y</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y_top_pu</name> <init>= <expr><operator>(</operator><operator>(</operator><name>y0</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_right_pu</name> <init>=
<expr><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator> <name>size_in_luma_h</name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>=
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>size_in_luma_pu_h</name><operator>)</operator> <operator>&gt;</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_width</name></name> <operator>-</operator>
<name>x_right_pu</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_width</name></name> <operator>-</operator>
<name>x_right_pu</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>size_in_luma_pu_h</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cand_up_right</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>cand_up_right</name> <operator>|=</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><name>x_right_pu</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>y_top_pu</name><operator>)</operator> <operator>*</operator>
<name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator> <name>PF_INTRA</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB4</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB4</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cand_up_left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>stride</name> <operator>*</operator> <operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cand_up</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cand_up_right</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <name>stride</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><operator>(</operator><name>top</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pix</name> <init>=
<expr><operator>(</operator><operator>(</operator><name><name>src</name><index>[<expr><operator>(</operator><literal type="number">16</literal> <operator>+</operator> <name>top_right_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>stride</name> <operator>*</operator> <operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name><operator>)</operator> <operator>*</operator>
<literal type="number">0x01010101U</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>top_right_size</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator>union <name>unaligned_32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>top</name> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <name>top_right_size</name> <operator>+</operator>
<name>i</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>l</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>pix</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cand_left</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>stride</name> <operator>*</operator> <operator>(</operator><name>i</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cand_bottom_left</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>+</operator> <name>bottom_left_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>stride</name> <operator>*</operator> <operator>(</operator><name>i</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pix</name> <init>=
<expr><operator>(</operator><operator>(</operator><name><name>src</name><index>[<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>stride</name> <operator>*</operator> <operator>(</operator><literal type="number">16</literal> <operator>+</operator> <name>bottom_left_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name><operator>)</operator> <operator>*</operator>
<literal type="number">0x01010101U</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>bottom_left_size</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator>union <name>unaligned_32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>left</name> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <name>bottom_left_size</name> <operator>+</operator>
<name>i</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>l</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>pix</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>constrained_intra_pred_flag</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cand_bottom_left</name> <operator>||</operator> <name>cand_left</name> <operator>||</operator> <name>cand_up_left</name> <operator>||</operator> <name>cand_up</name>
<operator>||</operator> <name>cand_up_right</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size_max_x</name> <init>=
<expr><ternary><condition><expr><name>x0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <literal type="number">16</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator> <operator>&lt;</operator>
<name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">16</literal></expr> </then><else>: <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>x0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>hshift</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size_max_y</name> <init>=
<expr><ternary><condition><expr><name>y0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <literal type="number">16</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>vshift</name><operator>)</operator> <operator>&lt;</operator>
<name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">16</literal></expr> </then><else>: <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>y0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>vshift</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">16</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>cand_bottom_left</name></expr> ?</condition><then> <expr><name>bottom_left_size</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_up_right</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size_max_x</name> <operator>=</operator> <ternary><condition><expr><name>x0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">16</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name></expr> ?</condition><then>
<expr><literal type="number">16</literal></expr> </then><else>: <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>x0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>hshift</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_bottom_left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size_max_y</name> <operator>=</operator> <ternary><condition><expr><name>y0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">16</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>vshift</name><operator>)</operator> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name></expr> ?</condition><then>
<expr><literal type="number">16</literal></expr> </then><else>: <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>y0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>vshift</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cand_bottom_left</name> <operator>||</operator> <name>cand_left</name> <operator>||</operator> <name>cand_up_left</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>j</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal>
<operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>j</name><operator>)</operator> <operator>&lt;&lt;</operator>
<name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>j</name><operator>)</operator>
<operator>&lt;&lt;</operator>
<name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator> <name>PF_INTRA</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>size_max_x</name>
<operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>j</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator>
<name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator>
<name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <operator>(</operator><name>j</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>i</name> <operator>-</operator>
<literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator>
<name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator>
<name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>top</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>size_max_x</name>
<operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>j</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator>
<operator>&lt;&lt;</operator>
<name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>x0</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <operator>(</operator><name>j</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>i</name> <operator>-</operator>
<literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator>
<name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator>
<operator>&lt;&lt;</operator> <name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator>
<name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator>
<name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>top</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <operator>(</operator><name>j</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>j</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>i</name> <operator>-</operator>
<literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator>
<name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator>
<operator>&lt;&lt;</operator> <name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator>
<name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator>
<name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>top</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cand_bottom_left</name> <operator>||</operator> <name>cand_left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101U</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">0</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>size_max_y</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>i</name><operator>)</operator> <operator>&lt;&lt;</operator>
<name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator>union <name>unaligned_32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>left</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>l</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>a</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>left</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101U</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_bottom_left</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><operator>(</operator><name>left</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x0</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y0</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>left</name><index>[<expr><name>size_max_y</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101U</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>size_max_y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</init>
<condition><expr><name>i</name> <operator>&gt;</operator> <operator>(</operator><name>size_max_y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>size_max_y</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>-=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>i</name> <operator>-</operator>
<literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator>
<name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator>union <name>unaligned_32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>left</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>l</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>a</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>left</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101U</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator>
<operator>&lt;&lt;</operator>
<name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator> <name>PF_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x0</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pix</name> <init>= <expr><operator>(</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101U</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>size_max_y</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator>union <name>unaligned_32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>left</name> <operator>+</operator> <name>i</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>l</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>pix</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>left</name><index>[<expr><name>size_max_y</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101U</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>size_max_y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</init>
<condition><expr><name>i</name> <operator>&gt;</operator> <operator>(</operator><name>size_max_y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>size_max_y</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>-=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>i</name> <operator>-</operator>
<literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator>
<name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator>union <name>unaligned_32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>left</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>l</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>a</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>left</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101U</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y0</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101U</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">0</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>size_max_x</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>i</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator>
<operator>&lt;&lt;</operator>
<name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator>union <name>unaligned_32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>top</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>l</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>a</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>top</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101U</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_bottom_left</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cand_left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><operator>(</operator><name>left</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cand_up_left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cand_left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cand_up</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cand_up_left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cand_left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cand_up_right</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cand_up</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cand_up_left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cand_left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_up_left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_up</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_up_right</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><operator>(</operator><name>top</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>intra_smoothing_disabled_flag</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>c_idx</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>INTRA_DC</name> <operator>&amp;&amp;</operator> <literal type="number">16</literal> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>intra_hor_ver_dist_thresh</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_dist_vert_hor</name> <init>=
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">26U</literal><operator>)</operator><operator>)</operator> <operator>&gt;=</operator>
<literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">26U</literal><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>-</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">26U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>&gt;</operator>
<operator>(</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">10U</literal><operator>)</operator><operator>)</operator> <operator>&gt;=</operator>
<literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">10U</literal><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>-</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">10U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator><operator>)</operator></expr>
?</condition><then> <expr><operator>(</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">10U</literal><operator>)</operator><operator>)</operator> <operator>&gt;=</operator>
<literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">10U</literal><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>-</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">10U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator><operator>)</operator></expr>
</then><else>: <expr><operator>(</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">26U</literal><operator>)</operator><operator>)</operator> <operator>&gt;=</operator>
<literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">26U</literal><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>-</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">26U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>min_dist_vert_hor</name> <operator>&gt;</operator> <name><name>intra_hor_ver_dist_thresh</name><index>[<expr><literal type="number">4</literal> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>filtered_left</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">16</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">16</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filtered_top</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">16</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">16</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">16</literal> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>filtered_left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>left</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>
<name><name>left</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>filtered_top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name><name>filtered_left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<operator>(</operator><name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">16</literal> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>filtered_top</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>top</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>top</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>
<name><name>top</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>left</name> <operator>=</operator> <name>filtered_left</name></expr>;</expr_stmt>
<expr_stmt><expr><name>top</name> <operator>=</operator> <name>filtered_top</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>INTRA_PLANAR</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred_planar</name><index>[<expr><literal type="number">4</literal> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>src</name><operator>,</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>top</name><operator>,</operator>
<operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>left</name><operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>INTRA_DC</name></expr>:</case>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred_dc</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>src</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>top</name></expr></argument>,
<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>left</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred_angular</name><index>[<expr><literal type="number">4</literal> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>src</name><operator>,</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>top</name><operator>,</operator>
<operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>left</name><operator>,</operator> <name>stride</name><operator>,</operator> <name>c_idx</name><operator>,</operator> <name>mode</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_intra_pred_8_32x32_msa</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>, <decl><type ref="prev"/><name>tmp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>mul_val0</name> <init>= <expr><block>{ <expr><literal type="number">63</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">56</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>mul_val1</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HEVCLocalContext</name> <modifier>*</modifier></type><name>lc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hshift</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>hshift</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vshift</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>vshift</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size_in_luma_h</name> <init>= <expr><literal type="number">32</literal> <operator>&lt;&lt;</operator> <name>hshift</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size_in_tbs_h</name> <init>= <expr><name>size_in_luma_h</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size_in_luma_v</name> <init>= <expr><literal type="number">32</literal> <operator>&lt;&lt;</operator> <name>vshift</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size_in_tbs_v</name> <init>= <expr><name>size_in_luma_v</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>x0</name> <operator>&gt;&gt;</operator> <name>hshift</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>y0</name> <operator>&gt;&gt;</operator> <name>vshift</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_tb</name> <init>= <expr><operator>(</operator><name>x0</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_tb</name> <init>= <expr><operator>(</operator><name>y0</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_tb_addr</name> <init>=
<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>min_tb_addr_zs</name><index>[<expr><operator>(</operator><name>y_tb</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x_tb</name><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>stride</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_pu_width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>IntraPredMode</name></name></type> <name>mode</name> <init>= <expr><ternary><condition><expr><name>c_idx</name></expr> ?</condition><then> <expr><name><name>lc</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>intra_pred_mode_c</name></name></expr> </then><else>:
<expr><name><name>lc</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>intra_pred_mode</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>left_array</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>filtered_left_array</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>top_array</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>filtered_top_array</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><name>left_array</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><name>top_array</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>filtered_left</name> <init>= <expr><name>filtered_left_array</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>filtered_top</name> <init>= <expr><name>filtered_top_array</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cand_bottom_left</name> <init>= <expr><name><name>lc</name><operator>-&gt;</operator><name>na</name><operator>.</operator><name>cand_bottom_left</name></name>
<operator>&amp;&amp;</operator> <name>cur_tb_addr</name> <operator>&gt;</operator>
<name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>min_tb_addr_zs</name><index>[<expr><operator>(</operator><operator>(</operator><name>y_tb</name> <operator>+</operator> <name>size_in_tbs_v</name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name><operator>)</operator> <operator>*</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x_tb</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cand_left</name> <init>= <expr><name><name>lc</name><operator>-&gt;</operator><name>na</name><operator>.</operator><name>cand_left</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cand_up_left</name> <init>= <expr><name><name>lc</name><operator>-&gt;</operator><name>na</name><operator>.</operator><name>cand_up_left</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cand_up</name> <init>= <expr><name><name>lc</name><operator>-&gt;</operator><name>na</name><operator>.</operator><name>cand_up</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cand_up_right</name> <init>= <expr><name><name>lc</name><operator>-&gt;</operator><name>na</name><operator>.</operator><name>cand_up_right</name></name>
<operator>&amp;&amp;</operator> <name>cur_tb_addr</name> <operator>&gt;</operator>
<name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>min_tb_addr_zs</name><index>[<expr><operator>(</operator><name>y_tb</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>x_tb</name> <operator>+</operator> <name>size_in_tbs_h</name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bottom_left_size</name> <init>=
<expr><operator>(</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>y0</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>size_in_luma_v</name><operator>)</operator> <operator>&gt;</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>y0</name> <operator>+</operator>
<literal type="number">2</literal> <operator>*</operator> <name>size_in_luma_v</name><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>-</operator>
<operator>(</operator><name>y0</name> <operator>+</operator> <name>size_in_luma_v</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>vshift</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>top_right_size</name> <init>=
<expr><operator>(</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>x0</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>size_in_luma_h</name><operator>)</operator> <operator>&gt;</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>x0</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>size_in_luma_h</name><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>-</operator>
<operator>(</operator><name>x0</name> <operator>+</operator> <name>size_in_luma_h</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>hshift</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>constrained_intra_pred_flag</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size_in_luma_pu_v</name> <init>= <expr><operator>(</operator><operator>(</operator><name>size_in_luma_v</name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size_in_luma_pu_h</name> <init>= <expr><operator>(</operator><operator>(</operator><name>size_in_luma_h</name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>on_pu_edge_x</name> <init>= <expr><operator>!</operator><operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>on_pu_edge_y</name> <init>= <expr><operator>!</operator><operator>(</operator><name>y0</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size_in_luma_pu_h</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size_in_luma_pu_h</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cand_bottom_left</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>on_pu_edge_x</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x_left_pu</name> <init>= <expr><operator>(</operator><operator>(</operator><name>x0</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_bottom_pu</name> <init>=
<expr><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator> <name>size_in_luma_v</name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>=
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>size_in_luma_pu_v</name><operator>)</operator> <operator>&gt;</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_height</name></name> <operator>-</operator>
<name>y_bottom_pu</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_height</name></name> <operator>-</operator>
<name>y_bottom_pu</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>size_in_luma_pu_v</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cand_bottom_left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>cand_bottom_left</name> <operator>|=</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><name>x_left_pu</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>y_bottom_pu</name> <operator>+</operator>
<name>i</name><operator>)</operator> <operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cand_left</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>on_pu_edge_x</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x_left_pu</name> <init>= <expr><operator>(</operator><operator>(</operator><name>x0</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_left_pu</name> <init>= <expr><operator>(</operator><operator>(</operator><name>y0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>=
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>size_in_luma_pu_v</name><operator>)</operator> <operator>&gt;</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_height</name></name> <operator>-</operator>
<name>y_left_pu</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_height</name></name> <operator>-</operator>
<name>y_left_pu</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>size_in_luma_pu_v</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cand_left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>cand_left</name> <operator>|=</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><name>x_left_pu</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>y_left_pu</name> <operator>+</operator>
<name>i</name><operator>)</operator> <operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cand_up_left</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x_left_pu</name> <init>= <expr><operator>(</operator><operator>(</operator><name>x0</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_top_pu</name> <init>= <expr><operator>(</operator><operator>(</operator><name>y0</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cand_up_left</name> <operator>=</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><name>x_left_pu</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>y_top_pu</name><operator>)</operator> <operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cand_up</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>on_pu_edge_y</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x_top_pu</name> <init>= <expr><operator>(</operator><operator>(</operator><name>x0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_top_pu</name> <init>= <expr><operator>(</operator><operator>(</operator><name>y0</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>=
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>size_in_luma_pu_h</name><operator>)</operator> <operator>&gt;</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_width</name></name> <operator>-</operator>
<name>x_top_pu</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_width</name></name> <operator>-</operator>
<name>x_top_pu</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>size_in_luma_pu_h</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cand_up</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>cand_up</name> <operator>|=</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><name>x_top_pu</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>y_top_pu</name><operator>)</operator> <operator>*</operator>
<name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator> <name>PF_INTRA</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cand_up_right</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>on_pu_edge_y</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y_top_pu</name> <init>= <expr><operator>(</operator><operator>(</operator><name>y0</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_right_pu</name> <init>=
<expr><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator> <name>size_in_luma_h</name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>=
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>size_in_luma_pu_h</name><operator>)</operator> <operator>&gt;</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_width</name></name> <operator>-</operator>
<name>x_right_pu</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_width</name></name> <operator>-</operator>
<name>x_right_pu</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>size_in_luma_pu_h</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cand_up_right</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>cand_up_right</name> <operator>|=</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><name>x_right_pu</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>y_top_pu</name><operator>)</operator> <operator>*</operator>
<name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator> <name>PF_INTRA</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB4</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB4</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cand_up_left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>stride</name> <operator>*</operator> <operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cand_up</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cand_up_right</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <name>stride</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><operator>(</operator><name>top</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pix</name> <init>=
<expr><operator>(</operator><operator>(</operator><name><name>src</name><index>[<expr><operator>(</operator><literal type="number">32</literal> <operator>+</operator> <name>top_right_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>stride</name> <operator>*</operator> <operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name><operator>)</operator> <operator>*</operator>
<literal type="number">0x01010101U</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>top_right_size</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator>union <name>unaligned_32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>top</name> <operator>+</operator> <literal type="number">32</literal> <operator>+</operator> <name>top_right_size</name> <operator>+</operator>
<name>i</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>l</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>pix</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cand_left</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>stride</name> <operator>*</operator> <operator>(</operator><name>i</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cand_bottom_left</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">32</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal> <operator>+</operator> <name>bottom_left_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>stride</name> <operator>*</operator> <operator>(</operator><name>i</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pix</name> <init>=
<expr><operator>(</operator><operator>(</operator><name><name>src</name><index>[<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>stride</name> <operator>*</operator> <operator>(</operator><literal type="number">32</literal> <operator>+</operator> <name>bottom_left_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name><operator>)</operator> <operator>*</operator>
<literal type="number">0x01010101U</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>bottom_left_size</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator>union <name>unaligned_32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>left</name> <operator>+</operator> <literal type="number">32</literal> <operator>+</operator> <name>bottom_left_size</name> <operator>+</operator>
<name>i</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>l</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>pix</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>constrained_intra_pred_flag</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cand_bottom_left</name> <operator>||</operator> <name>cand_left</name> <operator>||</operator> <name>cand_up_left</name> <operator>||</operator> <name>cand_up</name>
<operator>||</operator> <name>cand_up_right</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>size_max_x</name> <init>=
<expr><ternary><condition><expr><name>x0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <literal type="number">32</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator> <operator>&lt;</operator>
<name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">32</literal></expr> </then><else>: <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>x0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>hshift</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size_max_y</name> <init>=
<expr><ternary><condition><expr><name>y0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <literal type="number">32</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>vshift</name><operator>)</operator> <operator>&lt;</operator>
<name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">32</literal></expr> </then><else>: <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>y0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>vshift</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">32</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>cand_bottom_left</name></expr> ?</condition><then> <expr><name>bottom_left_size</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_up_right</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size_max_x</name> <operator>=</operator> <ternary><condition><expr><name>x0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">32</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name></expr> ?</condition><then>
<expr><literal type="number">32</literal></expr> </then><else>: <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>x0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>hshift</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_bottom_left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size_max_y</name> <operator>=</operator> <ternary><condition><expr><name>y0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">32</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>vshift</name><operator>)</operator> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name></expr> ?</condition><then>
<expr><literal type="number">32</literal></expr> </then><else>: <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>y0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>vshift</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cand_bottom_left</name> <operator>||</operator> <name>cand_left</name> <operator>||</operator> <name>cand_up_left</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>j</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal>
<operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>j</name><operator>)</operator> <operator>&lt;&lt;</operator>
<name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>j</name><operator>)</operator>
<operator>&lt;&lt;</operator>
<name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator> <name>PF_INTRA</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>size_max_x</name>
<operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>j</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator>
<name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator>
<name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <operator>(</operator><name>j</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>i</name> <operator>-</operator>
<literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator>
<name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator>
<name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>top</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>size_max_x</name>
<operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>j</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator>
<operator>&lt;&lt;</operator>
<name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>x0</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <operator>(</operator><name>j</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>i</name> <operator>-</operator>
<literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator>
<name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator>
<operator>&lt;&lt;</operator> <name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator>
<name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator>
<name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>top</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <operator>(</operator><name>j</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>j</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>i</name> <operator>-</operator>
<literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator>
<name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator>
<operator>&lt;&lt;</operator> <name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator>
<name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator>
<name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>top</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cand_bottom_left</name> <operator>||</operator> <name>cand_left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101U</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">0</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>size_max_y</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>i</name><operator>)</operator> <operator>&lt;&lt;</operator>
<name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator>union <name>unaligned_32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>left</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>l</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>a</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>left</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101U</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_bottom_left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><literal type="number">31</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><operator>(</operator><name>left</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x0</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y0</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>left</name><index>[<expr><name>size_max_y</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101U</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>size_max_y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</init>
<condition><expr><name>i</name> <operator>&gt;</operator> <operator>(</operator><name>size_max_y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>size_max_y</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>-=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>i</name> <operator>-</operator>
<literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator>
<name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator>union <name>unaligned_32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>left</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>l</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>a</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>left</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101U</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator>
<operator>&lt;&lt;</operator>
<name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator> <name>PF_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x0</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pix</name> <init>= <expr><operator>(</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101U</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>size_max_y</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator>union <name>unaligned_32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>left</name> <operator>+</operator> <name>i</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>l</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>pix</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>left</name><index>[<expr><name>size_max_y</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101U</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>size_max_y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</init>
<condition><expr><name>i</name> <operator>&gt;</operator> <operator>(</operator><name>size_max_y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>size_max_y</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>-=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>i</name> <operator>-</operator>
<literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator>
<name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator>union <name>unaligned_32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>left</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>l</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>a</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>left</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101U</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y0</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101U</literal><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">0</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>size_max_x</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator>
<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>tab_mvf</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x0</name> <operator>+</operator>
<operator>(</operator><operator>(</operator><name>i</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>y0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator>
<operator>&lt;&lt;</operator>
<name>vshift</name><operator>)</operator><operator>)</operator>
<operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator>
<name>log2_min_pu_size</name></name><operator>)</operator><operator>)</operator>
<operator>*</operator> <name>min_pu_width</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>pred_flag</name> <operator>==</operator>
<name>PF_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator>union <name>unaligned_32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>top</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>l</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>a</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>top</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101U</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_bottom_left</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cand_left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><literal type="number">31</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><operator>(</operator><name>left</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cand_up_left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB4</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cand_left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cand_up</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB4</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cand_up_left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cand_left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cand_up_right</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB4</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cand_up</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cand_up_left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cand_left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB4</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB4</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_up_left</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_up</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_up_right</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">31</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><operator>(</operator><name>top</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>intra_smoothing_disabled_flag</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name>c_idx</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>INTRA_DC</name> <operator>&amp;&amp;</operator> <literal type="number">32</literal> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>intra_hor_ver_dist_thresh</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_dist_vert_hor</name> <init>=
<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">26U</literal><operator>)</operator><operator>)</operator> <operator>&gt;=</operator>
<literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">26U</literal><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>-</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">26U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>&gt;</operator>
<operator>(</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">10U</literal><operator>)</operator><operator>)</operator> <operator>&gt;=</operator>
<literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">10U</literal><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>-</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">10U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator><operator>)</operator></expr>
?</condition><then> <expr><operator>(</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">10U</literal><operator>)</operator><operator>)</operator> <operator>&gt;=</operator>
<literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">10U</literal><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>-</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">10U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator><operator>)</operator></expr>
</then><else>: <expr><operator>(</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">26U</literal><operator>)</operator><operator>)</operator> <operator>&gt;=</operator>
<literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">26U</literal><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>-</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">26U</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>min_dist_vert_hor</name> <operator>&gt;</operator> <name><name>intra_hor_ver_dist_thresh</name><index>[<expr><literal type="number">5</literal> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>threshold</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <literal type="number">5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>sps_strong_intra_smoothing_enable_flag</name></name>
<operator>&amp;&amp;</operator> <name>c_idx</name> <operator>==</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">63</literal></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>top</name><index>[<expr><literal type="number">31</literal></expr>]</index></name><operator>)</operator> <operator>&gt;=</operator>
<literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">63</literal></expr>]</index></name> <operator>-</operator>
<literal type="number">2</literal> <operator>*</operator> <name><name>top</name><index>[<expr><literal type="number">31</literal></expr>]</index></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>-</operator><operator>(</operator><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">63</literal></expr>]</index></name> <operator>-</operator>
<literal type="number">2</literal> <operator>*</operator> <name><name>top</name><index>[<expr><literal type="number">31</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>&lt;</operator> <name>threshold</name>
<operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">63</literal></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>left</name><index>[<expr><literal type="number">31</literal></expr>]</index></name><operator>)</operator> <operator>&gt;=</operator>
<literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">63</literal></expr>]</index></name> <operator>-</operator>
<literal type="number">2</literal> <operator>*</operator> <name><name>left</name><index>[<expr><literal type="number">31</literal></expr>]</index></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>-</operator><operator>(</operator><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">63</literal></expr>]</index></name> <operator>-</operator>
<literal type="number">2</literal> <operator>*</operator> <name><name>left</name><index>[<expr><literal type="number">31</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>&lt;</operator> <name>threshold</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>filtered_top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filtered_top</name><index>[<expr><literal type="number">63</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">63</literal></expr>]</index></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">63</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>filtered_top</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<operator>(</operator><operator>(</operator><literal type="number">63</literal> <operator>-</operator> <name>i</name><operator>)</operator> <operator>*</operator> <name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>top</name><index>[<expr><literal type="number">63</literal></expr>]</index></name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">63</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>mul_val0</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name>mul_val0</name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <name>mul_val0</name> <operator>-</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <name>mul_val1</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <name>mul_val1</name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <name>mul_val1</name> <operator>+</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <name>mul_val0</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <name>tmp2</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res2</name> <operator>=</operator> <name>tmp3</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res3</name> <operator>=</operator> <name>tmp4</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>+=</operator> <name>mul_val1</name> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>+=</operator> <name>tmp5</name> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res2</name> <operator>+=</operator> <name>tmp6</name> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res3</name> <operator>+=</operator> <name>tmp7</name> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res2</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><name>res2</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res3</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>filtered_top</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <name>mul_val0</name> <operator>-</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>mul_val0</name> <operator>-</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name>mul_val0</name> <operator>-</operator> <literal type="number">48</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <name>mul_val0</name> <operator>-</operator> <literal type="number">56</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res3</name> <operator>=</operator> <name>mul_val1</name> <operator>+</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <name>mul_val1</name> <operator>+</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <name>mul_val1</name> <operator>+</operator> <literal type="number">48</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <name>mul_val1</name> <operator>+</operator> <literal type="number">56</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <name>res0</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <name>tmp2</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res2</name> <operator>=</operator> <name>tmp3</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>+=</operator> <name>res3</name> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res3</name> <operator>=</operator> <name>tmp4</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>+=</operator> <name>tmp5</name> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res2</name> <operator>+=</operator> <name>tmp6</name> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res3</name> <operator>+=</operator> <name>tmp7</name> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res2</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><name>res2</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res3</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><operator>(</operator><name>filtered_top</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filtered_top</name><index>[<expr><literal type="number">63</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">63</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><literal type="number">63</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>mul_val0</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name>mul_val0</name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <name>mul_val0</name> <operator>-</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <name>mul_val1</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <name>mul_val1</name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <name>mul_val1</name> <operator>+</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <name>mul_val0</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <name>tmp2</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res2</name> <operator>=</operator> <name>tmp3</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res3</name> <operator>=</operator> <name>tmp4</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>+=</operator> <name>mul_val1</name> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>+=</operator> <name>tmp5</name> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res2</name> <operator>+=</operator> <name>tmp6</name> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res3</name> <operator>+=</operator> <name>tmp7</name> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res2</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><name>res2</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res3</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <name>mul_val0</name> <operator>-</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>mul_val0</name> <operator>-</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name>mul_val0</name> <operator>-</operator> <literal type="number">48</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <name>mul_val0</name> <operator>-</operator> <literal type="number">56</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res3</name> <operator>=</operator> <name>mul_val1</name> <operator>+</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <name>mul_val1</name> <operator>+</operator> <literal type="number">40</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <name>mul_val1</name> <operator>+</operator> <literal type="number">48</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <name>mul_val1</name> <operator>+</operator> <literal type="number">56</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <name>res0</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <name>tmp2</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res2</name> <operator>=</operator> <name>tmp3</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>+=</operator> <name>res3</name> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res3</name> <operator>=</operator> <name>tmp4</name> <operator>*</operator> <name>tmp0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>+=</operator> <name>tmp5</name> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res2</name> <operator>+=</operator> <name>tmp6</name> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res3</name> <operator>+=</operator> <name>tmp7</name> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res2</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><name>res2</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res3</name> <operator>=</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res3</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><operator>(</operator><name>left</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left</name><index>[<expr><literal type="number">63</literal></expr>]</index></name> <operator>=</operator> <name><name>tmp1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name>filtered_top</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>filtered_left</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">32</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">32</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filtered_top</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">32</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">32</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">32</literal> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>filtered_left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>left</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>
<name><name>left</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>filtered_top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name><name>filtered_left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<operator>(</operator><name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">32</literal> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>filtered_top</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>top</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>top</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>
<name><name>top</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>left</name> <operator>=</operator> <name>filtered_left</name></expr>;</expr_stmt>
<expr_stmt><expr><name>top</name> <operator>=</operator> <name>filtered_top</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>INTRA_PLANAR</name></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred_planar</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>src</name><operator>,</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>top</name><operator>,</operator>
<operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>left</name><operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>INTRA_DC</name></expr>:</case>
<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred_dc</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>src</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>top</name></expr></argument>,
<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>left</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred_angular</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>src</name><operator>,</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>top</name><operator>,</operator>
<operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>left</name><operator>,</operator> <name>stride</name><operator>,</operator> <name>c_idx</name><operator>,</operator> <name>mode</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
