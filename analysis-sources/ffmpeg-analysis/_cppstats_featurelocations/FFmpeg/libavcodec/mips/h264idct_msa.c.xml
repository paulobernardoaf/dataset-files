<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mips\h264idct_msa.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/generic_macros_msa.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dsp_mips.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/bit_depth_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVC_ITRANS_H</name><parameter_list>(<parameter><type><name>in0</name></type></parameter>, <parameter><type><name>in1</name></type></parameter>, <parameter><type><name>in2</name></type></parameter>, <parameter><type><name>in3</name></type></parameter>, <parameter><type><name>out0</name></type></parameter>, <parameter><type><name>out1</name></type></parameter>, <parameter><type><name>out2</name></type></parameter>, <parameter><type><name>out3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ v8i16 tmp0_m, tmp1_m, tmp2_m, tmp3_m; tmp0_m = in0 + in2; tmp1_m = in0 - in2; tmp2_m = in1 &gt;&gt; 1; tmp2_m = tmp2_m - in3; tmp3_m = in3 &gt;&gt; 1; tmp3_m = in1 + tmp3_m; BUTTERFLY_4(tmp0_m, tmp1_m, tmp2_m, tmp3_m, out0, out1, out2, out3); }</cpp:value></cpp:define>













<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_deq_idct_luma_dc_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>de_q_val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_DEST_STRIDE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int16_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>, <decl><type ref="prev"/><name>out3</name></decl>, <decl><type ref="prev"/><name>out4</name></decl>, <decl><type ref="prev"/><name>out5</name></decl>, <decl><type ref="prev"/><name>out6</name></decl>, <decl><type ref="prev"/><name>out7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>src1</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>, <decl><type ref="prev"/><name>vec3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>hres0</name></decl>, <decl><type ref="prev"/><name>hres1</name></decl>, <decl><type ref="prev"/><name>hres2</name></decl>, <decl><type ref="prev"/><name>hres3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>vres0</name></decl>, <decl><type ref="prev"/><name>vres1</name></decl>, <decl><type ref="prev"/><name>vres2</name></decl>, <decl><type ref="prev"/><name>vres3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4i32</name></type> <name>vres0_r</name></decl>, <decl><type ref="prev"/><name>vres1_r</name></decl>, <decl><type ref="prev"/><name>vres2_r</name></decl>, <decl><type ref="prev"/><name>vres3_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>v4i32</name></type> <name>de_q_vec</name> <init>= <expr><call><name>__msa_fill_w</name><argument_list>(<argument><expr><name>de_q_val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>v8i16</name></type> <name>src0</name> <init>= <expr><call><name>LD_SH</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>v8i16</name></type> <name>src2</name> <init>= <expr><call><name>LD_SH</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ILVL_D2_SH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRANSPOSE4x4_SH_SH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>hres0</name></expr></argument>, <argument><expr><name>hres3</name></expr></argument>, <argument><expr><name>hres2</name></expr></argument>, <argument><expr><name>hres1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRANSPOSE4x4_SH_SH</name><argument_list>(<argument><expr><name>hres0</name></expr></argument>, <argument><expr><name>hres1</name></expr></argument>, <argument><expr><name>hres2</name></expr></argument>, <argument><expr><name>hres3</name></expr></argument>, <argument><expr><name>hres0</name></expr></argument>, <argument><expr><name>hres1</name></expr></argument>, <argument><expr><name>hres2</name></expr></argument>, <argument><expr><name>hres3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>hres0</name></expr></argument>, <argument><expr><name>hres1</name></expr></argument>, <argument><expr><name>hres3</name></expr></argument>, <argument><expr><name>hres2</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vres0</name></expr></argument>, <argument><expr><name>vres1</name></expr></argument>, <argument><expr><name>vres2</name></expr></argument>, <argument><expr><name>vres3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_R_SH_SW</name><argument_list>(<argument><expr><name>vres0</name></expr></argument>, <argument><expr><name>vres0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_R_SH_SW</name><argument_list>(<argument><expr><name>vres1</name></expr></argument>, <argument><expr><name>vres1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_R_SH_SW</name><argument_list>(<argument><expr><name>vres2</name></expr></argument>, <argument><expr><name>vres2_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_R_SH_SW</name><argument_list>(<argument><expr><name>vres3</name></expr></argument>, <argument><expr><name>vres3_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vres0_r</name> <operator>*=</operator> <name>de_q_vec</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vres1_r</name> <operator>*=</operator> <name>de_q_vec</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vres2_r</name> <operator>*=</operator> <name>de_q_vec</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vres3_r</name> <operator>*=</operator> <name>de_q_vec</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_W4_SW</name><argument_list>(<argument><expr><name>vres0_r</name></expr></argument>, <argument><expr><name>vres1_r</name></expr></argument>, <argument><expr><name>vres2_r</name></expr></argument>, <argument><expr><name>vres3_r</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_H2_SH</name><argument_list>(<argument><expr><name>vres1_r</name></expr></argument>, <argument><expr><name>vres0_r</name></expr></argument>, <argument><expr><name>vres3_r</name></expr></argument>, <argument><expr><name>vres2_r</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out4</name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out5</name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out6</name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out7</name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <name>DC_DEST_STRIDE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>DC_DEST_STRIDE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>DC_DEST_STRIDE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out3</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <name>DC_DEST_STRIDE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out4</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>DC_DEST_STRIDE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out5</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>DC_DEST_STRIDE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out6</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <name>DC_DEST_STRIDE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out7</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">11</literal> <operator>*</operator> <name>DC_DEST_STRIDE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out4</name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out5</name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out6</name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out7</name> <operator>=</operator> <call><name>__msa_copy_s_h</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>DC_DEST_STRIDE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name>DC_DEST_STRIDE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">12</literal> <operator>*</operator> <name>DC_DEST_STRIDE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out3</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">14</literal> <operator>*</operator> <name>DC_DEST_STRIDE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out4</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>DC_DEST_STRIDE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out5</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name>DC_DEST_STRIDE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out6</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">13</literal> <operator>*</operator> <name>DC_DEST_STRIDE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out7</name></expr></argument>, <argument><expr><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name>DC_DEST_STRIDE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DC_DEST_STRIDE</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_idct8_addblk_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v8i16</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>, <decl><type ref="prev"/><name>vec3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>, <decl><type ref="prev"/><name>tmp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>, <decl><type ref="prev"/><name>res4</name></decl>, <decl><type ref="prev"/><name>res5</name></decl>, <decl><type ref="prev"/><name>res6</name></decl>, <decl><type ref="prev"/><name>res7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4i32</name></type> <name>tmp0_r</name></decl>, <decl><type ref="prev"/><name>tmp1_r</name></decl>, <decl><type ref="prev"/><name>tmp2_r</name></decl>, <decl><type ref="prev"/><name>tmp3_r</name></decl>, <decl><type ref="prev"/><name>tmp4_r</name></decl>, <decl><type ref="prev"/><name>tmp5_r</name></decl>, <decl><type ref="prev"/><name>tmp6_r</name></decl>, <decl><type ref="prev"/><name>tmp7_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4i32</name></type> <name>tmp0_l</name></decl>, <decl><type ref="prev"/><name>tmp1_l</name></decl>, <decl><type ref="prev"/><name>tmp2_l</name></decl>, <decl><type ref="prev"/><name>tmp3_l</name></decl>, <decl><type ref="prev"/><name>tmp4_l</name></decl>, <decl><type ref="prev"/><name>tmp5_l</name></decl>, <decl><type ref="prev"/><name>tmp6_l</name></decl>, <decl><type ref="prev"/><name>tmp7_l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4i32</name></type> <name>vec0_r</name></decl>, <decl><type ref="prev"/><name>vec1_r</name></decl>, <decl><type ref="prev"/><name>vec2_r</name></decl>, <decl><type ref="prev"/><name>vec3_r</name></decl>, <decl><type ref="prev"/><name>vec0_l</name></decl>, <decl><type ref="prev"/><name>vec1_l</name></decl>, <decl><type ref="prev"/><name>vec2_l</name></decl>, <decl><type ref="prev"/><name>vec3_l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4i32</name></type> <name>res0_r</name></decl>, <decl><type ref="prev"/><name>res1_r</name></decl>, <decl><type ref="prev"/><name>res2_r</name></decl>, <decl><type ref="prev"/><name>res3_r</name></decl>, <decl><type ref="prev"/><name>res4_r</name></decl>, <decl><type ref="prev"/><name>res5_r</name></decl>, <decl><type ref="prev"/><name>res6_r</name></decl>, <decl><type ref="prev"/><name>res7_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4i32</name></type> <name>res0_l</name></decl>, <decl><type ref="prev"/><name>res1_l</name></decl>, <decl><type ref="prev"/><name>res2_l</name></decl>, <decl><type ref="prev"/><name>res3_l</name></decl>, <decl><type ref="prev"/><name>res4_l</name></decl>, <decl><type ref="prev"/><name>res5_l</name></decl>, <decl><type ref="prev"/><name>res6_l</name></decl>, <decl><type ref="prev"/><name>res7_l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>, <decl><type ref="prev"/><name>dst4</name></decl>, <decl><type ref="prev"/><name>dst5</name></decl>, <decl><type ref="prev"/><name>dst6</name></decl>, <decl><type ref="prev"/><name>dst7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH8</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec0</name> <operator>=</operator> <name>src0</name> <operator>+</operator> <name>src4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <name>src0</name> <operator>-</operator> <name>src4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>=</operator> <name>src2</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>=</operator> <name>vec2</name> <operator>-</operator> <name>src6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec3</name> <operator>=</operator> <name>src6</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec3</name> <operator>=</operator> <name>src2</name> <operator>+</operator> <name>vec3</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec0</name> <operator>=</operator> <name>src7</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <name>src5</name> <operator>-</operator> <name>vec0</name> <operator>-</operator> <name>src3</name> <operator>-</operator> <name>src7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <name>src3</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <name>src1</name> <operator>-</operator> <name>vec1</name> <operator>+</operator> <name>src7</name> <operator>-</operator> <name>src3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>=</operator> <name>src5</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>=</operator> <name>vec2</name> <operator>-</operator> <name>src1</name> <operator>+</operator> <name>src7</name> <operator>+</operator> <name>src5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec3</name> <operator>=</operator> <name>src1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec3</name> <operator>=</operator> <name>vec3</name> <operator>+</operator> <name>src3</name> <operator>+</operator> <name>src5</name> <operator>+</operator> <name>src1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <name>vec3</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp4</name> <operator>+=</operator> <name>vec0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <name>vec2</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5</name> <operator>+=</operator> <name>vec1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <name>vec1</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp6</name> <operator>-=</operator> <name>vec2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <name>vec0</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <name>vec3</name> <operator>-</operator> <name>tmp7</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY_8</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRANSPOSE8x8_SH_SH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>tmp0_r</name></expr></argument>, <argument><expr><name>tmp0_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>tmp1_r</name></expr></argument>, <argument><expr><name>tmp1_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>res2</name></expr></argument>, <argument><expr><name>tmp2_r</name></expr></argument>, <argument><expr><name>tmp2_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>res3</name></expr></argument>, <argument><expr><name>tmp3_r</name></expr></argument>, <argument><expr><name>tmp3_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>tmp4_r</name></expr></argument>, <argument><expr><name>tmp4_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>res5</name></expr></argument>, <argument><expr><name>tmp5_r</name></expr></argument>, <argument><expr><name>tmp5_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>res6</name></expr></argument>, <argument><expr><name>tmp6_r</name></expr></argument>, <argument><expr><name>tmp6_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_SH_SW</name><argument_list>(<argument><expr><name>res7</name></expr></argument>, <argument><expr><name>tmp7_r</name></expr></argument>, <argument><expr><name>tmp7_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>tmp0_r</name></expr></argument>, <argument><expr><name>tmp0_l</name></expr></argument>, <argument><expr><name>tmp4_l</name></expr></argument>, <argument><expr><name>tmp4_r</name></expr></argument>, <argument><expr><name>vec0_r</name></expr></argument>, <argument><expr><name>vec0_l</name></expr></argument>, <argument><expr><name>vec1_l</name></expr></argument>, <argument><expr><name>vec1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec2_r</name> <operator>=</operator> <name>tmp2_r</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2_l</name> <operator>=</operator> <name>tmp2_l</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2_r</name> <operator>-=</operator> <name>tmp6_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2_l</name> <operator>-=</operator> <name>tmp6_l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec3_r</name> <operator>=</operator> <name>tmp6_r</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec3_l</name> <operator>=</operator> <name>tmp6_l</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec3_r</name> <operator>+=</operator> <name>tmp2_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec3_l</name> <operator>+=</operator> <name>tmp2_l</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>vec0_r</name></expr></argument>, <argument><expr><name>vec1_r</name></expr></argument>, <argument><expr><name>vec2_r</name></expr></argument>, <argument><expr><name>vec3_r</name></expr></argument>, <argument><expr><name>tmp0_r</name></expr></argument>, <argument><expr><name>tmp2_r</name></expr></argument>, <argument><expr><name>tmp4_r</name></expr></argument>, <argument><expr><name>tmp6_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>vec0_l</name></expr></argument>, <argument><expr><name>vec1_l</name></expr></argument>, <argument><expr><name>vec2_l</name></expr></argument>, <argument><expr><name>vec3_l</name></expr></argument>, <argument><expr><name>tmp0_l</name></expr></argument>, <argument><expr><name>tmp2_l</name></expr></argument>, <argument><expr><name>tmp4_l</name></expr></argument>, <argument><expr><name>tmp6_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec0_r</name> <operator>=</operator> <name>tmp7_r</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec0_l</name> <operator>=</operator> <name>tmp7_l</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec0_r</name> <operator>=</operator> <name>tmp5_r</name> <operator>-</operator> <name>vec0_r</name> <operator>-</operator> <name>tmp3_r</name> <operator>-</operator> <name>tmp7_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec0_l</name> <operator>=</operator> <name>tmp5_l</name> <operator>-</operator> <name>vec0_l</name> <operator>-</operator> <name>tmp3_l</name> <operator>-</operator> <name>tmp7_l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1_r</name> <operator>=</operator> <name>tmp3_r</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1_l</name> <operator>=</operator> <name>tmp3_l</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1_r</name> <operator>=</operator> <name>tmp1_r</name> <operator>-</operator> <name>vec1_r</name> <operator>+</operator> <name>tmp7_r</name> <operator>-</operator> <name>tmp3_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1_l</name> <operator>=</operator> <name>tmp1_l</name> <operator>-</operator> <name>vec1_l</name> <operator>+</operator> <name>tmp7_l</name> <operator>-</operator> <name>tmp3_l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2_r</name> <operator>=</operator> <name>tmp5_r</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2_l</name> <operator>=</operator> <name>tmp5_l</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2_r</name> <operator>=</operator> <name>vec2_r</name> <operator>-</operator> <name>tmp1_r</name> <operator>+</operator> <name>tmp7_r</name> <operator>+</operator> <name>tmp5_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2_l</name> <operator>=</operator> <name>vec2_l</name> <operator>-</operator> <name>tmp1_l</name> <operator>+</operator> <name>tmp7_l</name> <operator>+</operator> <name>tmp5_l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec3_r</name> <operator>=</operator> <name>tmp1_r</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec3_l</name> <operator>=</operator> <name>tmp1_l</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec3_r</name> <operator>=</operator> <name>vec3_r</name> <operator>+</operator> <name>tmp3_r</name> <operator>+</operator> <name>tmp5_r</name> <operator>+</operator> <name>tmp1_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec3_l</name> <operator>=</operator> <name>vec3_l</name> <operator>+</operator> <name>tmp3_l</name> <operator>+</operator> <name>tmp5_l</name> <operator>+</operator> <name>tmp1_l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1_r</name> <operator>=</operator> <name>vec3_r</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1_l</name> <operator>=</operator> <name>vec3_l</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1_r</name> <operator>+=</operator> <name>vec0_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1_l</name> <operator>+=</operator> <name>vec0_l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3_r</name> <operator>=</operator> <name>vec2_r</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3_l</name> <operator>=</operator> <name>vec2_l</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3_r</name> <operator>+=</operator> <name>vec1_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3_l</name> <operator>+=</operator> <name>vec1_l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5_r</name> <operator>=</operator> <name>vec1_r</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5_l</name> <operator>=</operator> <name>vec1_l</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5_r</name> <operator>-=</operator> <name>vec2_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5_l</name> <operator>-=</operator> <name>vec2_l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7_r</name> <operator>=</operator> <name>vec0_r</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7_l</name> <operator>=</operator> <name>vec0_l</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7_r</name> <operator>=</operator> <name>vec3_r</name> <operator>-</operator> <name>tmp7_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7_l</name> <operator>=</operator> <name>vec3_l</name> <operator>-</operator> <name>tmp7_l</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>tmp0_r</name></expr></argument>, <argument><expr><name>tmp0_l</name></expr></argument>, <argument><expr><name>tmp7_l</name></expr></argument>, <argument><expr><name>tmp7_r</name></expr></argument>, <argument><expr><name>res0_r</name></expr></argument>, <argument><expr><name>res0_l</name></expr></argument>, <argument><expr><name>res7_l</name></expr></argument>, <argument><expr><name>res7_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>tmp2_r</name></expr></argument>, <argument><expr><name>tmp2_l</name></expr></argument>, <argument><expr><name>tmp5_l</name></expr></argument>, <argument><expr><name>tmp5_r</name></expr></argument>, <argument><expr><name>res1_r</name></expr></argument>, <argument><expr><name>res1_l</name></expr></argument>, <argument><expr><name>res6_l</name></expr></argument>, <argument><expr><name>res6_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>tmp4_r</name></expr></argument>, <argument><expr><name>tmp4_l</name></expr></argument>, <argument><expr><name>tmp3_l</name></expr></argument>, <argument><expr><name>tmp3_r</name></expr></argument>, <argument><expr><name>res2_r</name></expr></argument>, <argument><expr><name>res2_l</name></expr></argument>, <argument><expr><name>res5_l</name></expr></argument>, <argument><expr><name>res5_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUTTERFLY_4</name><argument_list>(<argument><expr><name>tmp6_r</name></expr></argument>, <argument><expr><name>tmp6_l</name></expr></argument>, <argument><expr><name>tmp1_l</name></expr></argument>, <argument><expr><name>tmp1_r</name></expr></argument>, <argument><expr><name>res3_r</name></expr></argument>, <argument><expr><name>res3_l</name></expr></argument>, <argument><expr><name>res4_l</name></expr></argument>, <argument><expr><name>res4_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>res0_r</name></expr></argument>, <argument><expr><name>res0_l</name></expr></argument>, <argument><expr><name>res1_r</name></expr></argument>, <argument><expr><name>res1_l</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>res2_r</name></expr></argument>, <argument><expr><name>res2_l</name></expr></argument>, <argument><expr><name>res3_r</name></expr></argument>, <argument><expr><name>res3_l</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>res4_r</name></expr></argument>, <argument><expr><name>res4_l</name></expr></argument>, <argument><expr><name>res5_r</name></expr></argument>, <argument><expr><name>res5_l</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>res6_r</name></expr></argument>, <argument><expr><name>res6_l</name></expr></argument>, <argument><expr><name>res7_r</name></expr></argument>, <argument><expr><name>res7_l</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_H4_SH</name><argument_list>(<argument><expr><name>res0_l</name></expr></argument>, <argument><expr><name>res0_r</name></expr></argument>, <argument><expr><name>res1_l</name></expr></argument>, <argument><expr><name>res1_r</name></expr></argument>, <argument><expr><name>res2_l</name></expr></argument>, <argument><expr><name>res2_r</name></expr></argument>, <argument><expr><name>res3_l</name></expr></argument>, <argument><expr><name>res3_r</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_H4_SH</name><argument_list>(<argument><expr><name>res4_l</name></expr></argument>, <argument><expr><name>res4_r</name></expr></argument>, <argument><expr><name>res5_l</name></expr></argument>, <argument><expr><name>res5_r</name></expr></argument>, <argument><expr><name>res6_l</name></expr></argument>, <argument><expr><name>res6_r</name></expr></argument>, <argument><expr><name>res7_l</name></expr></argument>, <argument><expr><name>res7_r</name></expr></argument>,
<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_SB8</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B4_SH</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>,
<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B4_SH</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>,
<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>,
<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>,
<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH8_0_255</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B4_SB</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>,
<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ST_D8</name><argument_list>(<argument>dst0</argument>, <argument>dst1</argument>, <argument>dst2</argument>, <argument>dst3</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>dst</argument>, <argument>dst_stride</argument>)</argument_list></macro>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_idct8_dc_addblk_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>dc_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>, <decl><type ref="prev"/><name>dst4</name></decl>, <decl><type ref="prev"/><name>dst5</name></decl>, <decl><type ref="prev"/><name>dst6</name></decl>, <decl><type ref="prev"/><name>dst7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>dst0_r</name></decl>, <decl><type ref="prev"/><name>dst1_r</name></decl>, <decl><type ref="prev"/><name>dst2_r</name></decl>, <decl><type ref="prev"/><name>dst3_r</name></decl>, <decl><type ref="prev"/><name>dst4_r</name></decl>, <decl><type ref="prev"/><name>dst5_r</name></decl>, <decl><type ref="prev"/><name>dst6_r</name></decl>, <decl><type ref="prev"/><name>dst7_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>dc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>zeros</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dc_val</name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>dc_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SB8</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B4_SH</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>,
<argument><expr><name>dst0_r</name></expr></argument>, <argument><expr><name>dst1_r</name></expr></argument>, <argument><expr><name>dst2_r</name></expr></argument>, <argument><expr><name>dst3_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B4_SH</name><argument_list>(<argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>,
<argument><expr><name>dst4_r</name></expr></argument>, <argument><expr><name>dst5_r</name></expr></argument>, <argument><expr><name>dst6_r</name></expr></argument>, <argument><expr><name>dst7_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>dst0_r</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>, <argument><expr><name>dst1_r</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>, <argument><expr><name>dst2_r</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>, <argument><expr><name>dst3_r</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>,
<argument><expr><name>dst0_r</name></expr></argument>, <argument><expr><name>dst1_r</name></expr></argument>, <argument><expr><name>dst2_r</name></expr></argument>, <argument><expr><name>dst3_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD4</name><argument_list>(<argument><expr><name>dst4_r</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>, <argument><expr><name>dst5_r</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>, <argument><expr><name>dst6_r</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>, <argument><expr><name>dst7_r</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>,
<argument><expr><name>dst4_r</name></expr></argument>, <argument><expr><name>dst5_r</name></expr></argument>, <argument><expr><name>dst6_r</name></expr></argument>, <argument><expr><name>dst7_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH8_0_255</name><argument_list>(<argument><expr><name>dst0_r</name></expr></argument>, <argument><expr><name>dst1_r</name></expr></argument>, <argument><expr><name>dst2_r</name></expr></argument>, <argument><expr><name>dst3_r</name></expr></argument>,
<argument><expr><name>dst4_r</name></expr></argument>, <argument><expr><name>dst5_r</name></expr></argument>, <argument><expr><name>dst6_r</name></expr></argument>, <argument><expr><name>dst7_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B4_SB</name><argument_list>(<argument><expr><name>dst1_r</name></expr></argument>, <argument><expr><name>dst0_r</name></expr></argument>, <argument><expr><name>dst3_r</name></expr></argument>, <argument><expr><name>dst2_r</name></expr></argument>, <argument><expr><name>dst5_r</name></expr></argument>, <argument><expr><name>dst4_r</name></expr></argument>, <argument><expr><name>dst7_r</name></expr></argument>, <argument><expr><name>dst6_r</name></expr></argument>,
<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ST_D8</name><argument_list>(<argument>dst0</argument>, <argument>dst1</argument>, <argument>dst2</argument>, <argument>dst3</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>dst</argument>, <argument>dst_stride</argument>)</argument_list></macro>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_idct_add_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>src0_m</name></decl>, <decl><type ref="prev"/><name>src1_m</name></decl>, <decl><type ref="prev"/><name>src2_m</name></decl>, <decl><type ref="prev"/><name>src3_m</name></decl>, <decl><type ref="prev"/><name>out0_m</name></decl>, <decl><type ref="prev"/><name>out1_m</name></decl>, <decl><type ref="prev"/><name>out2_m</name></decl>, <decl><type ref="prev"/><name>out3_m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>dst0_m</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>dst1_m</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>hres0</name></decl>, <decl><type ref="prev"/><name>hres1</name></decl>, <decl><type ref="prev"/><name>hres2</name></decl>, <decl><type ref="prev"/><name>hres3</name></decl>, <decl><type ref="prev"/><name>vres0</name></decl>, <decl><type ref="prev"/><name>vres1</name></decl>, <decl><type ref="prev"/><name>vres2</name></decl>, <decl><type ref="prev"/><name>vres3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>inp0_m</name></decl>, <decl><type ref="prev"/><name>inp1_m</name></decl>, <decl><type ref="prev"/><name>res0_m</name></decl>, <decl><type ref="prev"/><name>res1_m</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>v8i16</name></type> <name>src0</name> <init>= <expr><call><name>LD_SH</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>v8i16</name></type> <name>src2</name> <init>= <expr><call><name>LD_SH</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>v8i16</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dst1</name> <init>= <expr><name>dst</name> <operator>+</operator> <name>dst_stride</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dst2</name> <init>= <expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dst3</name> <init>= <expr><name>dst</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>dst_stride</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ILVL_D2_SH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_SH2</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVC_ITRANS_H</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>hres0</name></expr></argument>, <argument><expr><name>hres1</name></expr></argument>, <argument><expr><name>hres2</name></expr></argument>, <argument><expr><name>hres3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TRANSPOSE4x4_SH_SH</name><argument_list>(<argument><expr><name>hres0</name></expr></argument>, <argument><expr><name>hres1</name></expr></argument>, <argument><expr><name>hres2</name></expr></argument>, <argument><expr><name>hres3</name></expr></argument>, <argument><expr><name>hres0</name></expr></argument>, <argument><expr><name>hres1</name></expr></argument>, <argument><expr><name>hres2</name></expr></argument>, <argument><expr><name>hres3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVC_ITRANS_H</name><argument_list>(<argument><expr><name>hres0</name></expr></argument>, <argument><expr><name>hres1</name></expr></argument>, <argument><expr><name>hres2</name></expr></argument>, <argument><expr><name>hres3</name></expr></argument>, <argument><expr><name>vres0</name></expr></argument>, <argument><expr><name>vres1</name></expr></argument>, <argument><expr><name>vres2</name></expr></argument>, <argument><expr><name>vres3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src0_m</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src1_m</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_SH</name><argument_list>(<argument><expr><name>vres0</name></expr></argument>, <argument><expr><name>vres1</name></expr></argument>, <argument><expr><name>vres2</name></expr></argument>, <argument><expr><name>vres3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src2_m</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>dst2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src3_m</name> <operator>=</operator> <call><name>LW</name><argument_list>(<argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_D2_SH</name><argument_list>(<argument><expr><name>vres1</name></expr></argument>, <argument><expr><name>vres0</name></expr></argument>, <argument><expr><name>vres3</name></expr></argument>, <argument><expr><name>vres2</name></expr></argument>, <argument><expr><name>inp0_m</name></expr></argument>, <argument><expr><name>inp1_m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_W2_SB</name><argument_list>(<argument><expr><name>src0_m</name></expr></argument>, <argument><expr><name>src1_m</name></expr></argument>, <argument><expr><name>dst0_m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_W2_SB</name><argument_list>(<argument><expr><name>src2_m</name></expr></argument>, <argument><expr><name>src3_m</name></expr></argument>, <argument><expr><name>dst1_m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B2_SH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst0_m</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>dst1_m</name></expr></argument>, <argument><expr><name>res0_m</name></expr></argument>, <argument><expr><name>res1_m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>res0_m</name></expr></argument>, <argument><expr><name>inp0_m</name></expr></argument>, <argument><expr><name>res1_m</name></expr></argument>, <argument><expr><name>inp1_m</name></expr></argument>, <argument><expr><name>res0_m</name></expr></argument>, <argument><expr><name>res1_m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH2_0_255</name><argument_list>(<argument><expr><name>res0_m</name></expr></argument>, <argument><expr><name>res1_m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_SB</name><argument_list>(<argument><expr><name>res0_m</name></expr></argument>, <argument><expr><name>res0_m</name></expr></argument>, <argument><expr><name>res1_m</name></expr></argument>, <argument><expr><name>res1_m</name></expr></argument>, <argument><expr><name>dst0_m</name></expr></argument>, <argument><expr><name>dst1_m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out0_m</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0_m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1_m</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst0_m</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out2_m</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst1_m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out3_m</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>dst1_m</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out0_m</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out1_m</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out2_m</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>out3_m</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_idct8_addblk_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avc_idct8_addblk_msa</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_idct4x4_addblk_dc_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>pred</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>pred_r</name></decl>, <decl><type ref="prev"/><name>pred_l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>src0</name> <init>= <expr><call><name>LW</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>src1</name> <init>= <expr><call><name>LW</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>src2</name> <init>= <expr><call><name>LW</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>src3</name> <init>= <expr><call><name>LW</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>dc</name> <init>= <expr><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>v8i16</name></type> <name>input_dc</name> <init>= <expr><call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNPCK_UB_SH</name><argument_list>(<argument><expr><name>pred</name></expr></argument>, <argument><expr><name>pred_r</name></expr></argument>, <argument><expr><name>pred_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>pred_r</name></expr></argument>, <argument><expr><name>input_dc</name></expr></argument>, <argument><expr><name>pred_l</name></expr></argument>, <argument><expr><name>input_dc</name></expr></argument>, <argument><expr><name>pred_r</name></expr></argument>, <argument><expr><name>pred_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH2_0_255</name><argument_list>(<argument><expr><name>pred_r</name></expr></argument>, <argument><expr><name>pred_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>pred_l</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>pred_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W4</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_idct8_dc_addblk_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avc_idct8_dc_addblk_msa</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_idct_add16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>blk_offset</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>nzc</name><index>[<expr><literal type="number">15</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>nnz</name> <init>= <expr><name><name>nzc</name><index>[<expr><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nnz</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nnz</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>dctcoef</name> <operator>*</operator><operator>)</operator> <name>block</name><operator>)</operator><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">16</literal></expr>]</index></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_h264_idct4x4_addblk_dc_msa</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name><name>blk_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>block</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_h264_idct_add_msa</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name><name>blk_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>block</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_idct8_add4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>blk_offset</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>nzc</name><index>[<expr><literal type="number">15</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>cnt</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>cnt</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>nnz</name> <init>= <expr><name><name>nzc</name><index>[<expr><name><name>scan8</name><index>[<expr><name>cnt</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nnz</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nnz</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>dctcoef</name> <operator>*</operator><operator>)</operator> <name>block</name><operator>)</operator><index>[<expr><name>cnt</name> <operator>*</operator> <literal type="number">16</literal></expr>]</index></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_h264_idct8_dc_addblk_msa</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name><name>blk_offset</name><index>[<expr><name>cnt</name></expr>]</index></name></expr></argument>,
<argument><expr><name>block</name> <operator>+</operator> <name>cnt</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_h264_idct8_addblk_msa</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name><name>blk_offset</name><index>[<expr><name>cnt</name></expr>]</index></name></expr></argument>,
<argument><expr><name>block</name> <operator>+</operator> <name>cnt</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_idct_add8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>blk_offset</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>nzc</name><index>[<expr><literal type="number">15</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>*</operator> <literal type="number">16</literal><operator>)</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>j</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>nzc</name><index>[<expr><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_h264_idct_add_msa</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>blk_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>block</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>dctcoef</name> <operator>*</operator><operator>)</operator> <name>block</name><operator>)</operator><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">16</literal></expr>]</index></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_h264_idct4x4_addblk_dc_msa</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>blk_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>block</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_idct_add8_422_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>blk_offset</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>nzc</name><index>[<expr><literal type="number">15</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>*</operator> <literal type="number">16</literal><operator>)</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>j</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>nzc</name><index>[<expr><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_h264_idct_add_msa</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>blk_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>block</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>dctcoef</name> <operator>*</operator><operator>)</operator> <name>block</name><operator>)</operator><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">16</literal></expr>]</index></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_h264_idct4x4_addblk_dc_msa</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>blk_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>block</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>j</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>nzc</name><index>[<expr><name><name>scan8</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_h264_idct_add_msa</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>blk_offset</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>block</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>dctcoef</name> <operator>*</operator><operator>)</operator> <name>block</name><operator>)</operator><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">16</literal></expr>]</index></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_h264_idct4x4_addblk_dc_msa</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>blk_offset</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>,
<argument><expr><name>block</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_idct_add16_intra_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>blk_offset</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>nzc</name><index>[<expr><literal type="number">15</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>nzc</name><index>[<expr><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_h264_idct_add_msa</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name><name>blk_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>block</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>dctcoef</name> <operator>*</operator><operator>)</operator> <name>block</name><operator>)</operator><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">16</literal></expr>]</index></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ff_h264_idct4x4_addblk_dc_msa</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name><name>blk_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>block</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_deq_idct_luma_dc_msa</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>de_qval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avc_deq_idct_luma_dc_msa</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>de_qval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
