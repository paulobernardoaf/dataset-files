<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mips\h264pred_msa.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/generic_macros_msa.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dsp_mips.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intra_predict_vert_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>out</name> <init>= <expr><call><name>LD</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intra_predict_vert_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>out</name> <init>= <expr><call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intra_predict_horiz_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>, <decl><type ref="prev"/><name>out3</name></decl>, <decl><type ref="prev"/><name>out4</name></decl>, <decl><type ref="prev"/><name>out5</name></decl>, <decl><type ref="prev"/><name>out6</name></decl>, <decl><type ref="prev"/><name>out7</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name> <operator>*</operator> <literal type="number">0x0101010101010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name> <operator>*</operator> <literal type="number">0x0101010101010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name> <operator>*</operator> <literal type="number">0x0101010101010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out3</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name> <operator>*</operator> <literal type="number">0x0101010101010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out4</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name> <operator>*</operator> <literal type="number">0x0101010101010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out5</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name> <operator>*</operator> <literal type="number">0x0101010101010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out6</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name> <operator>*</operator> <literal type="number">0x0101010101010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out7</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name> <operator>*</operator> <literal type="number">0x0101010101010101</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>out4</name></expr></argument>, <argument><expr><name>out5</name></expr></argument>, <argument><expr><name>out6</name></expr></argument>, <argument><expr><name>out7</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intra_predict_horiz_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src8</name></decl>, <decl><type ref="prev"/><name>src9</name></decl>, <decl><type ref="prev"/><name>src10</name></decl>, <decl><type ref="prev"/><name>src11</name></decl>, <decl><type ref="prev"/><name>src12</name></decl>, <decl><type ref="prev"/><name>src13</name></decl>, <decl><type ref="prev"/><name>src14</name></decl>, <decl><type ref="prev"/><name>src15</name></decl>;</decl_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inp1</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inp3</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inp1</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inp3</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src4</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src6</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <name><name>src</name><index>[ <expr><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inp1</name> <operator>=</operator> <name><name>src</name><index>[ <expr><literal type="number">9</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">10</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inp3</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">11</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src8</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src9</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src10</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src11</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">12</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inp1</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">13</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">14</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inp3</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">15</literal> <operator>*</operator> <name>src_stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src12</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src13</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src14</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src15</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src15</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTRA_PREDICT_VALDC_8X8_MSA</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void intra_predict_##val##dc_8x8_msa(uint8_t *dst, int32_t dst_stride) { v16i8 store = __msa_fill_b(val); uint64_t out = __msa_copy_u_d((v2i64) store, 0); SD4(out, out, out, out, dst, dst_stride); dst += (4 * dst_stride); SD4(out, out, out, out, dst, dst_stride); }</cpp:value></cpp:define>










<expr_stmt><expr><call><name>INTRA_PREDICT_VALDC_8X8_MSA</name><argument_list>(<argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INTRA_PREDICT_VALDC_8X8_MSA</name><argument_list>(<argument><expr><literal type="number">129</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTRA_PREDICT_VALDC_16X16_MSA</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void intra_predict_##val##dc_16x16_msa(uint8_t *dst, int32_t dst_stride) { v16u8 out = (v16u8) __msa_fill_b(val); ST_UB8(out, out, out, out, out, out, out, out, dst, dst_stride); dst += (8 * dst_stride); ST_UB8(out, out, out, out, out, out, out, out, dst, dst_stride); }</cpp:value></cpp:define>










<expr_stmt><expr><call><name>INTRA_PREDICT_VALDC_16X16_MSA</name><argument_list>(<argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INTRA_PREDICT_VALDC_16X16_MSA</name><argument_list>(<argument><expr><literal type="number">129</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intra_predict_plane_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>lpcnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>shf_mask</name> <init>= <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>short_multiplier</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4i32</name></type> <name>int_multiplier</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src_top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>vec9</name></decl>, <decl><type ref="prev"/><name>vec10</name></decl>, <decl><type ref="prev"/><name>vec11</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4i32</name></type> <name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>, <decl><type ref="prev"/><name>vec3</name></decl>, <decl><type ref="prev"/><name>vec4</name></decl>, <decl><type ref="prev"/><name>vec5</name></decl>, <decl><type ref="prev"/><name>vec6</name></decl>, <decl><type ref="prev"/><name>vec7</name></decl>, <decl><type ref="prev"/><name>vec8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v2i64</name></type> <name>sum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src_top</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <operator>(</operator><name>stride</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src_top</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_vshf_b</name><argument_list>(<argument><expr><name>shf_mask</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_top</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec9</name> <operator>=</operator> <call><name>__msa_hsub_u_h</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec9</name> <operator>*=</operator> <name>short_multiplier</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec8</name> <operator>=</operator> <call><name>__msa_hadd_s_w</name><argument_list>(<argument><expr><name>vec9</name></expr></argument>, <argument><expr><name>vec9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>__msa_hadd_s_d</name><argument_list>(<argument><expr><name>vec8</name></expr></argument>, <argument><expr><name>vec8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_copy_s_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res1</name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator>
<literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator>
<literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator>
<literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><operator>-</operator><name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>*=</operator> <literal type="number">17</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>*=</operator> <literal type="number">17</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <operator>(</operator><name>res0</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <operator>(</operator><name>res1</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res3</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>res0</name> <operator>+</operator> <name>res1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res2</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><operator>-</operator><name>stride</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>res2</name> <operator>-</operator> <name>res3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vec8</name> <operator>=</operator> <call><name>__msa_fill_w</name><argument_list>(<argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec4</name> <operator>=</operator> <call><name>__msa_fill_w</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>=</operator> <call><name>__msa_fill_w</name><argument_list>(<argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec5</name> <operator>=</operator> <name>vec8</name> <operator>*</operator> <name>int_multiplier</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec3</name> <operator>=</operator> <name>vec8</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>lpcnt</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>lpcnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <name>vec5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec0</name> <operator>+=</operator> <name>vec4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <name>vec0</name> <operator>+</operator> <name>vec3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec6</name> <operator>=</operator> <name>vec5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec4</name> <operator>+=</operator> <name>vec2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec6</name> <operator>+=</operator> <name>vec4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec7</name> <operator>=</operator> <name>vec6</name> <operator>+</operator> <name>vec3</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec6</name></expr></argument>, <argument><expr><name>vec7</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_H2_SH</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec7</name></expr></argument>, <argument><expr><name>vec6</name></expr></argument>, <argument><expr><name>vec10</name></expr></argument>, <argument><expr><name>vec11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH2_0_255</name><argument_list>(<argument><expr><name>vec10</name></expr></argument>, <argument><expr><name>vec11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_SH</name><argument_list>(<argument><expr><name>vec10</name></expr></argument>, <argument><expr><name>vec10</name></expr></argument>, <argument><expr><name>vec11</name></expr></argument>, <argument><expr><name>vec11</name></expr></argument>, <argument><expr><name>vec10</name></expr></argument>, <argument><expr><name>vec11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_s_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>vec10</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_s_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>vec11</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vec4</name> <operator>+=</operator> <name>vec2</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intra_predict_plane_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>lpcnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>load0</name></decl>, <decl><type ref="prev"/><name>load1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>shf_mask</name> <init>= <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>short_multiplier</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4i32</name></type> <name>int_multiplier</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src_top</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>store0</name></decl>, <decl><type ref="prev"/><name>store1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>vec9</name></decl>, <decl><type ref="prev"/><name>vec10</name></decl>, <decl><type ref="prev"/><name>vec11</name></decl>, <decl><type ref="prev"/><name>vec12</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4i32</name></type> <name>vec0</name></decl>, <decl><type ref="prev"/><name>vec1</name></decl>, <decl><type ref="prev"/><name>vec2</name></decl>, <decl><type ref="prev"/><name>vec3</name></decl>, <decl><type ref="prev"/><name>vec4</name></decl>, <decl><type ref="prev"/><name>vec5</name></decl>, <decl><type ref="prev"/><name>vec6</name></decl>, <decl><type ref="prev"/><name>vec7</name></decl>, <decl><type ref="prev"/><name>vec8</name></decl>, <decl><type ref="prev"/><name>res_add</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4i32</name></type> <name>reg0</name></decl>, <decl><type ref="prev"/><name>reg1</name></decl>, <decl><type ref="prev"/><name>reg2</name></decl>, <decl><type ref="prev"/><name>reg3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>load0</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <operator>(</operator><name>stride</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>load1</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <operator>(</operator><name>stride</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>load0</name></expr></argument>, <argument><expr><name>load1</name></expr></argument>, <argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_top</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_vshf_b</name><argument_list>(<argument><expr><name>shf_mask</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_top</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vec9</name> <operator>=</operator> <call><name>__msa_hsub_u_h</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec9</name> <operator>*=</operator> <name>short_multiplier</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec8</name> <operator>=</operator> <call><name>__msa_hadd_s_w</name><argument_list>(<argument><expr><name>vec9</name></expr></argument>, <argument><expr><name>vec9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_add</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_hadd_s_d</name><argument_list>(<argument><expr><name>vec8</name></expr></argument>, <argument><expr><name>vec8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_copy_s_w</name><argument_list>(<argument><expr><name>res_add</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>__msa_copy_s_w</name><argument_list>(<argument><expr><name>res_add</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res1</name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator>
<literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">9</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator>
<literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">10</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator>
<literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">11</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator>
<literal type="number">5</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">12</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator>
<literal type="number">6</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">13</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator>
<literal type="number">7</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">14</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator>
<literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">15</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>*=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>*=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <operator>(</operator><name>res0</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <operator>(</operator><name>res1</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res3</name> <operator>=</operator> <literal type="number">7</literal> <operator>*</operator> <operator>(</operator><name>res0</name> <operator>+</operator> <name>res1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res2</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">15</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><operator>-</operator><name>stride</name> <operator>+</operator> <literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res2</name> <operator>-=</operator> <name>res3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vec8</name> <operator>=</operator> <call><name>__msa_fill_w</name><argument_list>(<argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec4</name> <operator>=</operator> <call><name>__msa_fill_w</name><argument_list>(<argument><expr><name>res2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec5</name> <operator>=</operator> <call><name>__msa_fill_w</name><argument_list>(<argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec6</name> <operator>=</operator> <name>vec8</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>vec7</name> <operator>=</operator> <name>vec8</name> <operator>*</operator> <name>int_multiplier</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>lpcnt</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>lpcnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>vec0</name> <operator>=</operator> <name>vec7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg0</name> <operator>=</operator> <name>vec7</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec0</name> <operator>+=</operator> <name>vec4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec4</name> <operator>+=</operator> <name>vec5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg0</name> <operator>+=</operator> <name>vec4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec1</name> <operator>=</operator> <name>vec0</name> <operator>+</operator> <name>vec6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg1</name> <operator>=</operator> <name>reg0</name> <operator>+</operator> <name>vec6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec2</name> <operator>=</operator> <name>vec1</name> <operator>+</operator> <name>vec6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg2</name> <operator>=</operator> <name>reg1</name> <operator>+</operator> <name>vec6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec3</name> <operator>=</operator> <name>vec2</name> <operator>+</operator> <name>vec6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>reg3</name> <operator>=</operator> <name>reg2</name> <operator>+</operator> <name>vec6</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRA_4V</name><argument_list>(<argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_H2_SH</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>, <argument><expr><name>vec0</name></expr></argument>, <argument><expr><name>vec3</name></expr></argument>, <argument><expr><name>vec2</name></expr></argument>, <argument><expr><name>vec9</name></expr></argument>, <argument><expr><name>vec10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_H2_SH</name><argument_list>(<argument><expr><name>reg1</name></expr></argument>, <argument><expr><name>reg0</name></expr></argument>, <argument><expr><name>reg3</name></expr></argument>, <argument><expr><name>reg2</name></expr></argument>, <argument><expr><name>vec11</name></expr></argument>, <argument><expr><name>vec12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH2_0_255</name><argument_list>(<argument><expr><name>vec9</name></expr></argument>, <argument><expr><name>vec10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH2_0_255</name><argument_list>(<argument><expr><name>vec11</name></expr></argument>, <argument><expr><name>vec12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>vec10</name></expr></argument>, <argument><expr><name>vec9</name></expr></argument>, <argument><expr><name>vec12</name></expr></argument>, <argument><expr><name>vec11</name></expr></argument>, <argument><expr><name>store0</name></expr></argument>, <argument><expr><name>store1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>store0</name></expr></argument>, <argument><expr><name>store1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vec4</name> <operator>+=</operator> <name>vec5</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intra_predict_dc_4blk_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>, <decl><type ref="prev"/><name>out3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>store0</name></decl>, <decl><type ref="prev"/><name>store1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src_top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>add</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4u32</name></type> <name>sum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src_top</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_top</name></expr></argument>, <argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>__msa_hadd_u_w</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>src0</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src3</name> <operator>=</operator> <operator>(</operator><name>src1</name> <operator>+</operator> <name>src2</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <operator>(</operator><name>src1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>=</operator> <operator>(</operator><name>src2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out0</name> <operator>=</operator> <name>src0</name> <operator>*</operator> <literal type="number">0x01010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <name>src1</name> <operator>*</operator> <literal type="number">0x01010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>=</operator> <name>src2</name> <operator>*</operator> <literal type="number">0x01010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out3</name> <operator>=</operator> <name>src3</name> <operator>*</operator> <literal type="number">0x01010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>store0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>out1</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name>out0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>store1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>out3</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name>out2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>store0</name></expr></argument>, <argument><expr><name>store0</name></expr></argument>, <argument><expr><name>store0</name></expr></argument>, <argument><expr><name>store0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>store1</name></expr></argument>, <argument><expr><name>store1</name></expr></argument>, <argument><expr><name>store1</name></expr></argument>, <argument><expr><name>store1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intra_predict_hor_dc_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>src0</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <operator>(</operator><name>src1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out0</name> <operator>=</operator> <name>src0</name> <operator>*</operator> <literal type="number">0x0101010101010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <name>src1</name> <operator>*</operator> <literal type="number">0x0101010101010101</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intra_predict_vert_dc_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>out0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src_top</name></decl>, <decl><type ref="prev"/><name>res0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>add</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4u32</name></type> <name>sum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src_top</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>__msa_hadd_u_w</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v4u32</name><operator>)</operator> <call><name>__msa_srari_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_vshf_b</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intra_predict_mad_cow_dc_l0t_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>store0</name></decl>, <decl><type ref="prev"/><name>store1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src_top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>add</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4u32</name></type> <name>sum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src_top</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>__msa_hadd_u_w</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src2</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>=</operator> <operator>(</operator><name>src0</name> <operator>+</operator> <name>src2</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>src0</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <operator>(</operator><name>src1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out0</name> <operator>=</operator> <name>src0</name> <operator>*</operator> <literal type="number">0x01010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <name>src1</name> <operator>*</operator> <literal type="number">0x01010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>=</operator> <name>src2</name> <operator>*</operator> <literal type="number">0x01010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>store1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>out1</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>store0</name> <operator>=</operator> <name>store1</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>out2</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>store1</name> <operator>=</operator> <name>store1</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>out0</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>store0</name></expr></argument>, <argument><expr><name>store0</name></expr></argument>, <argument><expr><name>store0</name></expr></argument>, <argument><expr><name>store0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>store1</name></expr></argument>, <argument><expr><name>store1</name></expr></argument>, <argument><expr><name>store1</name></expr></argument>, <argument><expr><name>store1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intra_predict_mad_cow_dc_0lt_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>, <decl><type ref="prev"/><name>out3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>store0</name></decl>, <decl><type ref="prev"/><name>store1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src_top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>add</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4u32</name></type> <name>sum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src_top</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>, <argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>__msa_hadd_u_w</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src2</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>src0</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src3</name> <operator>=</operator> <operator>(</operator><name>src1</name> <operator>+</operator> <name>src2</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <operator>(</operator><name>src1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>=</operator> <operator>(</operator><name>src2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <name>src0</name> <operator>*</operator> <literal type="number">0x01010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <name>src1</name> <operator>*</operator> <literal type="number">0x01010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>=</operator> <name>src2</name> <operator>*</operator> <literal type="number">0x01010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out3</name> <operator>=</operator> <name>src3</name> <operator>*</operator> <literal type="number">0x01010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>store0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>out1</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name>out0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>store1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>out3</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name>out2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>store0</name></expr></argument>, <argument><expr><name>store0</name></expr></argument>, <argument><expr><name>store0</name></expr></argument>, <argument><expr><name>store0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>store1</name></expr></argument>, <argument><expr><name>store1</name></expr></argument>, <argument><expr><name>store1</name></expr></argument>, <argument><expr><name>store1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intra_predict_mad_cow_dc_l00_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>src0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>src0</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out0</name> <operator>=</operator> <name>src0</name> <operator>*</operator> <literal type="number">0x0101010101010101</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <literal type="number">0x8080808080808080</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intra_predict_mad_cow_dc_0l0_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>src0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">6</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>src0</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <literal type="number">0x8080808080808080</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <name>src0</name> <operator>*</operator> <literal type="number">0x0101010101010101</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_intra_predict_plane_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>intra_predict_plane_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_intra_predict_dc_4blk_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>intra_predict_dc_4blk_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_intra_predict_hor_dc_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>intra_predict_hor_dc_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_intra_predict_vert_dc_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>intra_predict_vert_dc_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_intra_predict_mad_cow_dc_l0t_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>intra_predict_mad_cow_dc_l0t_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_intra_predict_mad_cow_dc_0lt_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>intra_predict_mad_cow_dc_0lt_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_intra_predict_mad_cow_dc_l00_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>intra_predict_mad_cow_dc_l00_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_intra_predict_mad_cow_dc_0l0_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>intra_predict_mad_cow_dc_0l0_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_intra_predict_plane_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>intra_predict_plane_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_intra_pred_vert_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>intra_predict_vert_8x8_msa</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <name>stride</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_intra_pred_horiz_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>intra_predict_horiz_8x8_msa</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_intra_pred_dc_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name> <init>= <expr><name>src</name> <operator>-</operator> <name>stride</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name> <init>= <expr><name>src</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>addition</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src_above</name></decl>, <decl><type ref="prev"/><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>sum_above</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4u32</name></type> <name>sum_top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v2u64</name></type> <name>sum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src_above</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_above</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>src_above</name></expr></argument>, <argument><expr><name>src_above</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum_top</name> <operator>=</operator> <call><name>__msa_hadd_u_w</name><argument_list>(<argument><expr><name>sum_above</name></expr></argument>, <argument><expr><name>sum_above</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>__msa_hadd_u_d</name><argument_list>(<argument><expr><name>sum_top</name></expr></argument>, <argument><expr><name>sum_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum_top</name> <operator>=</operator> <operator>(</operator><name>v4u32</name><operator>)</operator> <call><name>__msa_pckev_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>__msa_hadd_u_d</name><argument_list>(<argument><expr><name>sum_top</name></expr></argument>, <argument><expr><name>sum_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>=</operator> <call><name>__msa_copy_u_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[ <expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[ <expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[ <expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[ <expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[ <expr><literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[ <expr><literal type="number">5</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[ <expr><literal type="number">6</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[ <expr><literal type="number">7</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[ <expr><literal type="number">8</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[ <expr><literal type="number">9</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[<expr><literal type="number">10</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[<expr><literal type="number">11</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[<expr><literal type="number">12</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[<expr><literal type="number">13</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[<expr><literal type="number">14</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[<expr><literal type="number">15</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>=</operator> <operator>(</operator><name>addition</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>addition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_intra_pred_vert_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>intra_predict_vert_16x16_msa</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <name>stride</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_intra_pred_horiz_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>intra_predict_horiz_16x16_msa</name><argument_list>(<argument><expr><name>src</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_intra_pred_dc_left_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_left</name> <init>= <expr><name>src</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>addition</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>out</name></decl>;</decl_stmt>

<expr_stmt><expr><name>addition</name> <operator>=</operator> <name><name>src_left</name><index>[ <expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[ <expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[ <expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[ <expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[ <expr><literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[ <expr><literal type="number">5</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[ <expr><literal type="number">6</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[ <expr><literal type="number">7</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[ <expr><literal type="number">8</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[ <expr><literal type="number">9</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[<expr><literal type="number">10</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[<expr><literal type="number">11</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[<expr><literal type="number">12</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[<expr><literal type="number">13</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[<expr><literal type="number">14</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>addition</name> <operator>+=</operator> <name><name>src_left</name><index>[<expr><literal type="number">15</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>addition</name> <operator>=</operator> <operator>(</operator><name>addition</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>addition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_intra_pred_dc_top_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_top</name> <init>= <expr><name>src</name> <operator>-</operator> <name>stride</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src_above</name></decl>, <decl><type ref="prev"/><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>sum_above</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4u32</name></type> <name>sum_top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v2u64</name></type> <name>sum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>src_above</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_above</name> <operator>=</operator> <call><name>__msa_hadd_u_h</name><argument_list>(<argument><expr><name>src_above</name></expr></argument>, <argument><expr><name>src_above</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum_top</name> <operator>=</operator> <call><name>__msa_hadd_u_w</name><argument_list>(<argument><expr><name>sum_above</name></expr></argument>, <argument><expr><name>sum_above</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>__msa_hadd_u_d</name><argument_list>(<argument><expr><name>sum_top</name></expr></argument>, <argument><expr><name>sum_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum_top</name> <operator>=</operator> <operator>(</operator><name>v4u32</name><operator>)</operator> <call><name>__msa_pckev_w</name><argument_list>(<argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><operator>(</operator><name>v4i32</name><operator>)</operator> <name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>__msa_hadd_u_d</name><argument_list>(<argument><expr><name>sum_top</name></expr></argument>, <argument><expr><name>sum_top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>v2u64</name><operator>)</operator> <call><name>__msa_srari_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>sum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_intra_pred_dc_128_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>store</name></decl>;</decl_stmt>

<expr_stmt><expr><name>store</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_intra_pred_dc_128_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>out</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_fill_b</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_pred8x8_127_dc_8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>intra_predict_127dc_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_pred8x8_129_dc_8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>intra_predict_129dc_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_pred16x16_127_dc_8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>intra_predict_127dc_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp8_pred16x16_129_dc_8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>intra_predict_129dc_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
