<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mips\vc1dsp_mmi.c">





















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/vc1dsp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"constants.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vc1dsp_mips.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hpeldsp_mips.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/mmiutils.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VC1_INV_TRANCS_8_TYPE1</name><parameter_list>(<parameter><type><name>o1</name></type></parameter>, <parameter><type><name>o2</name></type></parameter>, <parameter><type><name>r1</name></type></parameter>, <parameter><type><name>r2</name></type></parameter>, <parameter><type><name>r3</name></type></parameter>, <parameter><type><name>r4</name></type></parameter>, <parameter><type><name>c0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"li %[tmp0], "#r1" \n\t" "mtc1 %[tmp0], %[ftmp13] \n\t" "punpcklwd %[ftmp13], %[ftmp13], %[ftmp13] \n\t" "li %[tmp0], "#r2" \n\t" "mtc1 %[tmp0], %[ftmp14] \n\t" "punpcklwd %[ftmp14], %[ftmp14], %[ftmp14] \n\t" "pmaddhw %[ftmp1], %[ftmp5], %[ftmp13] \n\t" "pmaddhw %[ftmp2], %[ftmp7], %[ftmp14] \n\t" "paddw %[ftmp1], %[ftmp1], %[ftmp2] \n\t" "pmaddhw %[ftmp2], %[ftmp6], %[ftmp13] \n\t" "pmaddhw %[ftmp3], %[ftmp8], %[ftmp14] \n\t" "paddw %[ftmp2], %[ftmp2], %[ftmp3] \n\t" "li %[tmp0], "#r3" \n\t" "mtc1 %[tmp0], %[ftmp13] \n\t" "punpcklwd %[ftmp13], %[ftmp13], %[ftmp13] \n\t" "li %[tmp0], "#r4" \n\t" "mtc1 %[tmp0], %[ftmp14] \n\t" "punpcklwd %[ftmp14], %[ftmp14], %[ftmp14] \n\t" "pmaddhw %[ftmp3], %[ftmp9], %[ftmp13] \n\t" "pmaddhw %[ftmp4], %[ftmp11], %[ftmp14] \n\t" "paddw %[ftmp3], %[ftmp3], %[ftmp4] \n\t" "pmaddhw %[ftmp4], %[ftmp10], %[ftmp13] \n\t" "pmaddhw %[ftmp13], %[ftmp12], %[ftmp14] \n\t" "paddw %[ftmp4], %[ftmp4], %[ftmp13] \n\t" "paddw %[ftmp1], %[ftmp1], "#c0" \n\t" "paddw %[ftmp2], %[ftmp2], "#c0" \n\t" "paddw %[ftmp13], %[ftmp1], %[ftmp3] \n\t" "psubw %[ftmp14], %[ftmp1], %[ftmp3] \n\t" "paddw %[ftmp1], %[ftmp2], %[ftmp4] \n\t" "psubw %[ftmp3], %[ftmp2], %[ftmp4] \n\t" "psraw %[ftmp13], %[ftmp13], %[ftmp0] \n\t" "psraw %[ftmp1], %[ftmp1], %[ftmp0] \n\t" "psraw %[ftmp14], %[ftmp14], %[ftmp0] \n\t" "psraw %[ftmp3], %[ftmp3], %[ftmp0] \n\t" "punpcklhw %[ftmp2], %[ftmp13], %[ftmp1] \n\t" "punpckhhw %[ftmp4], %[ftmp13], %[ftmp1] \n\t" "punpcklhw "#o1", %[ftmp2], %[ftmp4] \n\t" "punpcklhw %[ftmp2], %[ftmp14], %[ftmp3] \n\t" "punpckhhw %[ftmp4], %[ftmp14], %[ftmp3] \n\t" "punpcklhw "#o2", %[ftmp2], %[ftmp4] \n\t"</cpp:value></cpp:define>











































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VC1_INV_TRANCS_8_TYPE2</name><parameter_list>(<parameter><type><name>o1</name></type></parameter>, <parameter><type><name>o2</name></type></parameter>, <parameter><type><name>r1</name></type></parameter>, <parameter><type><name>r2</name></type></parameter>, <parameter><type><name>r3</name></type></parameter>, <parameter><type><name>r4</name></type></parameter>, <parameter><type><name>c0</name></type></parameter>, <parameter><type><name>c1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"li %[tmp0], "#r1" \n\t" "mtc1 %[tmp0], %[ftmp13] \n\t" "punpcklwd %[ftmp13], %[ftmp13], %[ftmp13] \n\t" "li %[tmp0], "#r2" \n\t" "mtc1 %[tmp0], %[ftmp14] \n\t" "punpcklwd %[ftmp14], %[ftmp14], %[ftmp14] \n\t" "pmaddhw %[ftmp1], %[ftmp5], %[ftmp13] \n\t" "pmaddhw %[ftmp2], %[ftmp7], %[ftmp14] \n\t" "paddw %[ftmp1], %[ftmp1], %[ftmp2] \n\t" "pmaddhw %[ftmp2], %[ftmp6], %[ftmp13] \n\t" "pmaddhw %[ftmp3], %[ftmp8], %[ftmp14] \n\t" "paddw %[ftmp2], %[ftmp2], %[ftmp3] \n\t" "li %[tmp0], "#r3" \n\t" "mtc1 %[tmp0], %[ftmp13] \n\t" "punpcklwd %[ftmp13], %[ftmp13], %[ftmp13] \n\t" "li %[tmp0], "#r4" \n\t" "mtc1 %[tmp0], %[ftmp14] \n\t" "punpcklwd %[ftmp14], %[ftmp14], %[ftmp14] \n\t" "pmaddhw %[ftmp3], %[ftmp9], %[ftmp13] \n\t" "pmaddhw %[ftmp4], %[ftmp11], %[ftmp14] \n\t" "paddw %[ftmp3], %[ftmp3], %[ftmp4] \n\t" "pmaddhw %[ftmp4], %[ftmp10], %[ftmp13] \n\t" "pmaddhw %[ftmp13], %[ftmp12], %[ftmp14] \n\t" "paddw %[ftmp4], %[ftmp4], %[ftmp13] \n\t" "paddw %[ftmp13], %[ftmp1], %[ftmp3] \n\t" "psubw %[ftmp14], %[ftmp1], %[ftmp3] \n\t" "paddw %[ftmp14], %[ftmp14], "#c1" \n\t" "paddw %[ftmp1], %[ftmp2], %[ftmp4] \n\t" "psubw %[ftmp3], %[ftmp2], %[ftmp4] \n\t" "paddw %[ftmp3], %[ftmp3], "#c1" \n\t" "paddw %[ftmp13], %[ftmp13], "#c0" \n\t" "paddw %[ftmp14], %[ftmp14], "#c0" \n\t" "paddw %[ftmp1], %[ftmp1], "#c0" \n\t" "paddw %[ftmp3], %[ftmp3], "#c0" \n\t" "psraw %[ftmp13], %[ftmp13], %[ftmp0] \n\t" "psraw %[ftmp1], %[ftmp1], %[ftmp0] \n\t" "psraw %[ftmp14], %[ftmp14], %[ftmp0] \n\t" "psraw %[ftmp3], %[ftmp3], %[ftmp0] \n\t" "punpcklhw %[ftmp2], %[ftmp13], %[ftmp1] \n\t" "punpckhhw %[ftmp4], %[ftmp13], %[ftmp1] \n\t" "punpcklhw "#o1", %[ftmp2], %[ftmp4] \n\t" "punpcklhw %[ftmp2], %[ftmp14], %[ftmp3] \n\t" "punpckhhw %[ftmp4], %[ftmp14], %[ftmp3] \n\t" "punpcklhw "#o2", %[ftmp2], %[ftmp4] \n\t"</cpp:value></cpp:define>
















































<function><type><name>void</name></type> <name>ff_vc1_inv_trans_8x8_dc_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dc</name> <init>= <expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mips_reg</name></type> <name><name>addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>dc</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>dc</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"pshufh %[dc], %[dc], %[ftmp0] \n\t"
"li %[count], 0x02 \n\t"

"1: \n\t"
MMI_LDC1(%[ftmp1], %[dest], 0x00)
PTR_ADDU "%[addr0], %[dest], %[linesize] \n\t"
MMI_LDC1(%[ftmp2], %[addr0], 0x00)
PTR_ADDU "%[addr0], %[addr0], %[linesize] \n\t"
MMI_LDC1(%[ftmp3], %[addr0], 0x00)
PTR_ADDU "%[addr0], %[addr0], %[linesize] \n\t"
MMI_LDC1(%[ftmp4], %[addr0], 0x00)

"punpckhbh %[ftmp5], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"punpckhbh %[ftmp6], %[ftmp2], %[ftmp0] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp0] \n\t"
"punpckhbh %[ftmp7], %[ftmp3], %[ftmp0] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp0] \n\t"
"punpckhbh %[ftmp8], %[ftmp4], %[ftmp0] \n\t"
"punpcklbh %[ftmp4], %[ftmp4], %[ftmp0] \n\t"

"paddsh %[ftmp1], %[ftmp1], %[dc] \n\t"
"paddsh %[ftmp2], %[ftmp2], %[dc] \n\t"
"paddsh %[ftmp3], %[ftmp3], %[dc] \n\t"
"paddsh %[ftmp4], %[ftmp4], %[dc] \n\t"
"paddsh %[ftmp5], %[ftmp5], %[dc] \n\t"
"paddsh %[ftmp6], %[ftmp6], %[dc] \n\t"
"paddsh %[ftmp7], %[ftmp7], %[dc] \n\t"
"paddsh %[ftmp8], %[ftmp8], %[dc] \n\t"

"packushb %[ftmp1], %[ftmp1], %[ftmp5] \n\t"
"packushb %[ftmp2], %[ftmp2], %[ftmp6] \n\t"
"packushb %[ftmp3], %[ftmp3], %[ftmp7] \n\t"
"packushb %[ftmp4], %[ftmp4], %[ftmp8] \n\t"

MMI_SDC1(%[ftmp1], %[dest], 0x00)
PTR_ADDU "%[addr0], %[dest], %[linesize] \n\t"
MMI_SDC1(%[ftmp2], %[addr0], 0x00)
PTR_ADDU "%[addr0], %[addr0], %[linesize] \n\t"
MMI_SDC1(%[ftmp3], %[addr0], 0x00)
PTR_ADDU "%[addr0], %[addr0], %[linesize] \n\t"
MMI_SDC1(%[ftmp4], %[addr0], 0x00)

"addiu %[count], %[count], -0x01 \n\t"
PTR_ADDU "%[dest], %[addr0], %[linesize] \n\t"
"bnez %[count], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]),
[addr0]"=&amp;r"(addr[0]),
[count]"=&amp;r"(count), [dest]"+&amp;r"(dest)
: [linesize]"r"((mips_reg)linesize),
[dc]"f"(dc)
: "memory"
);</asm>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MIPS_SIM</name> <operator>!=</operator> <name>_ABIO32</name></expr></cpp:if>
<function><type><name>void</name></type> <name>ff_vc1_inv_trans_8x8_mmi</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_1_local</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0000000100000001ULL</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_4_local</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0000000400000004ULL</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_64_local</name></expr></argument>)</argument_list></call><operator>=</operator> <block>{<expr><literal type="number">0x0000004000000040ULL</literal></expr>}</block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">23</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"li %[tmp0], 0x03 \n\t"
"mtc1 %[tmp0], %[ftmp0] \n\t"


MMI_LDC1(%[ftmp1], %[block], 0x00)
MMI_LDC1(%[ftmp11], %[block], 0x10)
MMI_LDC1(%[ftmp2], %[block], 0x20)
MMI_LDC1(%[ftmp12], %[block], 0x30)
MMI_LDC1(%[ftmp3], %[block], 0x40)
MMI_LDC1(%[ftmp13], %[block], 0x50)
MMI_LDC1(%[ftmp4], %[block], 0x60)
MMI_LDC1(%[ftmp14], %[block], 0x70)
"punpcklhw %[ftmp5], %[ftmp1], %[ftmp2] \n\t"
"punpckhhw %[ftmp6], %[ftmp1], %[ftmp2] \n\t"
"punpcklhw %[ftmp7], %[ftmp3], %[ftmp4] \n\t"
"punpckhhw %[ftmp8], %[ftmp3], %[ftmp4] \n\t"

"punpcklhw %[ftmp9], %[ftmp11], %[ftmp12] \n\t"
"punpckhhw %[ftmp10], %[ftmp11], %[ftmp12] \n\t"
"punpcklhw %[ftmp11], %[ftmp13], %[ftmp14] \n\t"
"punpckhhw %[ftmp12], %[ftmp13], %[ftmp14] \n\t"


VC1_INV_TRANCS_8_TYPE1(%[ftmp15], %[ftmp22], 0x0010000c, 0x0006000c,
0x000f0010, 0x00040009, %[ff_pw_4])


VC1_INV_TRANCS_8_TYPE1(%[ftmp16], %[ftmp21], 0x0006000c, 0xfff0fff4,
0xfffc000f, 0xfff7fff0, %[ff_pw_4])


VC1_INV_TRANCS_8_TYPE1(%[ftmp17], %[ftmp20], 0xfffa000c, 0x0010fff4,
0xfff00009, 0x000f0004, %[ff_pw_4])


VC1_INV_TRANCS_8_TYPE1(%[ftmp18], %[ftmp19], 0xfff0000c, 0xfffa000c,
0xfff70004, 0xfff0000f, %[ff_pw_4])

TRANSPOSE_4H(%[ftmp15], %[ftmp16], %[ftmp17], %[ftmp18],
%[ftmp1], %[ftmp2], %[ftmp3], %[ftmp4])

TRANSPOSE_4H(%[ftmp19], %[ftmp20], %[ftmp21], %[ftmp22],
%[ftmp1], %[ftmp2], %[ftmp3], %[ftmp4])

MMI_SDC1(%[ftmp15], %[temp], 0x00)
MMI_SDC1(%[ftmp19], %[temp], 0x08)
MMI_SDC1(%[ftmp16], %[temp], 0x10)
MMI_SDC1(%[ftmp20], %[temp], 0x18)
MMI_SDC1(%[ftmp17], %[temp], 0x20)
MMI_SDC1(%[ftmp21], %[temp], 0x28)
MMI_SDC1(%[ftmp18], %[temp], 0x30)
MMI_SDC1(%[ftmp22], %[temp], 0x38)


MMI_LDC1(%[ftmp1], %[block], 0x08)
MMI_LDC1(%[ftmp11], %[block], 0x18)
MMI_LDC1(%[ftmp2], %[block], 0x28)
MMI_LDC1(%[ftmp12], %[block], 0x38)
MMI_LDC1(%[ftmp3], %[block], 0x48)
MMI_LDC1(%[ftmp13], %[block], 0x58)
MMI_LDC1(%[ftmp4], %[block], 0x68)
MMI_LDC1(%[ftmp14], %[block], 0x78)
"punpcklhw %[ftmp5], %[ftmp1], %[ftmp2] \n\t"
"punpckhhw %[ftmp6], %[ftmp1], %[ftmp2] \n\t"
"punpcklhw %[ftmp7], %[ftmp3], %[ftmp4] \n\t"
"punpckhhw %[ftmp8], %[ftmp3], %[ftmp4] \n\t"

"punpcklhw %[ftmp9], %[ftmp11], %[ftmp12] \n\t"
"punpckhhw %[ftmp10], %[ftmp11], %[ftmp12] \n\t"
"punpcklhw %[ftmp11], %[ftmp13], %[ftmp14] \n\t"
"punpckhhw %[ftmp12], %[ftmp13], %[ftmp14] \n\t"


VC1_INV_TRANCS_8_TYPE1(%[ftmp15], %[ftmp22], 0x0010000c, 0x0006000c,
0x000f0010, 0x00040009, %[ff_pw_4])


VC1_INV_TRANCS_8_TYPE1(%[ftmp16], %[ftmp21], 0x0006000c, 0xfff0fff4,
0xfffc000f, 0xfff7fff0, %[ff_pw_4])


VC1_INV_TRANCS_8_TYPE1(%[ftmp17], %[ftmp20], 0xfffa000c, 0x0010fff4,
0xfff00009, 0x000f0004, %[ff_pw_4])


VC1_INV_TRANCS_8_TYPE1(%[ftmp18], %[ftmp19], 0xfff0000c, 0xfffa000c,
0xfff70004, 0xfff0000f, %[ff_pw_4])

TRANSPOSE_4H(%[ftmp15], %[ftmp16], %[ftmp17], %[ftmp18],
%[ftmp1], %[ftmp2], %[ftmp3], %[ftmp4])

TRANSPOSE_4H(%[ftmp19], %[ftmp20], %[ftmp21], %[ftmp22],
%[ftmp1], %[ftmp2], %[ftmp3], %[ftmp4])

MMI_SDC1(%[ftmp19], %[temp], 0x48)
MMI_SDC1(%[ftmp20], %[temp], 0x58)
MMI_SDC1(%[ftmp21], %[temp], 0x68)
MMI_SDC1(%[ftmp22], %[temp], 0x78)



"li %[tmp0], 0x07 \n\t"
"mtc1 %[tmp0], %[ftmp0] \n\t"


MMI_LDC1(%[ftmp1], %[temp], 0x00)
MMI_LDC1(%[ftmp11], %[temp], 0x10)
MMI_LDC1(%[ftmp2], %[temp], 0x20)
MMI_LDC1(%[ftmp12], %[temp], 0x30)
"punpcklhw %[ftmp5], %[ftmp1], %[ftmp2] \n\t"
"punpckhhw %[ftmp6], %[ftmp1], %[ftmp2] \n\t"
"punpcklhw %[ftmp7], %[ftmp15], %[ftmp17] \n\t"
"punpckhhw %[ftmp8], %[ftmp15], %[ftmp17] \n\t"

"punpcklhw %[ftmp9], %[ftmp11], %[ftmp12] \n\t"
"punpckhhw %[ftmp10], %[ftmp11], %[ftmp12] \n\t"
"punpcklhw %[ftmp11], %[ftmp16], %[ftmp18] \n\t"
"punpckhhw %[ftmp12], %[ftmp16], %[ftmp18] \n\t"


VC1_INV_TRANCS_8_TYPE2(%[ftmp15], %[ftmp22], 0x0010000c, 0x0006000c,
0x000f0010, 0x00040009, %[ff_pw_64], %[ff_pw_1])


VC1_INV_TRANCS_8_TYPE2(%[ftmp16], %[ftmp21], 0x0006000c, 0xfff0fff4,
0xfffc000f, 0xfff7fff0, %[ff_pw_64], %[ff_pw_1])


VC1_INV_TRANCS_8_TYPE2(%[ftmp17], %[ftmp20], 0xfffa000c, 0x0010fff4,
0xfff00009, 0x000f0004, %[ff_pw_64], %[ff_pw_1])


VC1_INV_TRANCS_8_TYPE2(%[ftmp18], %[ftmp19], 0xfff0000c, 0xfffa000c,
0xfff70004, 0xfff0000f, %[ff_pw_64], %[ff_pw_1])

MMI_SDC1(%[ftmp15], %[block], 0x00)
MMI_SDC1(%[ftmp16], %[block], 0x10)
MMI_SDC1(%[ftmp17], %[block], 0x20)
MMI_SDC1(%[ftmp18], %[block], 0x30)
MMI_SDC1(%[ftmp19], %[block], 0x40)
MMI_SDC1(%[ftmp20], %[block], 0x50)
MMI_SDC1(%[ftmp21], %[block], 0x60)
MMI_SDC1(%[ftmp22], %[block], 0x70)


MMI_LDC1(%[ftmp1], %[temp], 0x08)
MMI_LDC1(%[ftmp11], %[temp], 0x18)
MMI_LDC1(%[ftmp2], %[temp], 0x28)
MMI_LDC1(%[ftmp12], %[temp], 0x38)
MMI_LDC1(%[ftmp3], %[temp], 0x48)
MMI_LDC1(%[ftmp13], %[temp], 0x58)
MMI_LDC1(%[ftmp4], %[temp], 0x68)
MMI_LDC1(%[ftmp14], %[temp], 0x78)
"punpcklhw %[ftmp5], %[ftmp1], %[ftmp2] \n\t"
"punpckhhw %[ftmp6], %[ftmp1], %[ftmp2] \n\t"
"punpcklhw %[ftmp7], %[ftmp3], %[ftmp4] \n\t"
"punpckhhw %[ftmp8], %[ftmp3], %[ftmp4] \n\t"

"punpcklhw %[ftmp9], %[ftmp11], %[ftmp12] \n\t"
"punpckhhw %[ftmp10], %[ftmp11], %[ftmp12] \n\t"
"punpcklhw %[ftmp11], %[ftmp13], %[ftmp14] \n\t"
"punpckhhw %[ftmp12], %[ftmp13], %[ftmp14] \n\t"


VC1_INV_TRANCS_8_TYPE2(%[ftmp15], %[ftmp22], 0x0010000c, 0x0006000c,
0x000f0010, 0x00040009, %[ff_pw_64], %[ff_pw_1])


VC1_INV_TRANCS_8_TYPE2(%[ftmp16], %[ftmp21], 0x0006000c, 0xfff0fff4,
0xfffc000f, 0xfff7fff0, %[ff_pw_64], %[ff_pw_1])


VC1_INV_TRANCS_8_TYPE2(%[ftmp17], %[ftmp20], 0xfffa000c, 0x0010fff4,
0xfff00009, 0x000f0004, %[ff_pw_64], %[ff_pw_1])


VC1_INV_TRANCS_8_TYPE2(%[ftmp18], %[ftmp19], 0xfff0000c, 0xfffa000c,
0xfff70004, 0xfff0000f, %[ff_pw_64], %[ff_pw_1])

MMI_SDC1(%[ftmp15], %[block], 0x08)
MMI_SDC1(%[ftmp16], %[block], 0x18)
MMI_SDC1(%[ftmp17], %[block], 0x28)
MMI_SDC1(%[ftmp18], %[block], 0x38)
MMI_SDC1(%[ftmp19], %[block], 0x48)
MMI_SDC1(%[ftmp20], %[block], 0x58)
MMI_SDC1(%[ftmp21], %[block], 0x68)
MMI_SDC1(%[ftmp22], %[block], 0x78)

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[ftmp10]"=&amp;f"(ftmp[10]), [ftmp11]"=&amp;f"(ftmp[11]),
[ftmp12]"=&amp;f"(ftmp[12]), [ftmp13]"=&amp;f"(ftmp[13]),
[ftmp14]"=&amp;f"(ftmp[14]), [ftmp15]"=&amp;f"(ftmp[15]),
[ftmp16]"=&amp;f"(ftmp[16]), [ftmp17]"=&amp;f"(ftmp[17]),
[ftmp18]"=&amp;f"(ftmp[18]), [ftmp19]"=&amp;f"(ftmp[19]),
[ftmp20]"=&amp;f"(ftmp[20]), [ftmp21]"=&amp;f"(ftmp[21]),
[ftmp22]"=&amp;f"(ftmp[22]),
[tmp0]"=&amp;r"(tmp[0])
: [ff_pw_1]"f"(ff_pw_1_local), [ff_pw_64]"f"(ff_pw_64_local),
[ff_pw_4]"f"(ff_pw_4_local), [block]"r"(block),
[temp]"r"(temp)
: "memory"
);</asm>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>void</name></type> <name>ff_vc1_inv_trans_8x4_dc_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dc</name> <init>= <expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>(</operator> <literal type="number">3</literal> <operator>*</operator> <name>dc</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>(</operator><literal type="number">17</literal> <operator>*</operator> <name>dc</name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"pshufh %[dc], %[dc], %[ftmp0] \n\t"

MMI_LDC1(%[ftmp1], %[dest0], 0x00)
MMI_LDC1(%[ftmp2], %[dest1], 0x00)
MMI_LDC1(%[ftmp3], %[dest2], 0x00)
MMI_LDC1(%[ftmp4], %[dest3], 0x00)

"punpckhbh %[ftmp5], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"punpckhbh %[ftmp6], %[ftmp2], %[ftmp0] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp0] \n\t"
"punpckhbh %[ftmp7], %[ftmp3], %[ftmp0] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp0] \n\t"
"punpckhbh %[ftmp8], %[ftmp4], %[ftmp0] \n\t"
"punpcklbh %[ftmp4], %[ftmp4], %[ftmp0] \n\t"

"paddsh %[ftmp1], %[ftmp1], %[dc] \n\t"
"paddsh %[ftmp2], %[ftmp2], %[dc] \n\t"
"paddsh %[ftmp3], %[ftmp3], %[dc] \n\t"
"paddsh %[ftmp4], %[ftmp4], %[dc] \n\t"
"paddsh %[ftmp5], %[ftmp5], %[dc] \n\t"
"paddsh %[ftmp6], %[ftmp6], %[dc] \n\t"
"paddsh %[ftmp7], %[ftmp7], %[dc] \n\t"
"paddsh %[ftmp8], %[ftmp8], %[dc] \n\t"

"packushb %[ftmp1], %[ftmp1], %[ftmp5] \n\t"
"packushb %[ftmp2], %[ftmp2], %[ftmp6] \n\t"
"packushb %[ftmp3], %[ftmp3], %[ftmp7] \n\t"
"packushb %[ftmp4], %[ftmp4], %[ftmp8] \n\t"

MMI_SDC1(%[ftmp1], %[dest0], 0x00)
MMI_SDC1(%[ftmp2], %[dest1], 0x00)
MMI_SDC1(%[ftmp3], %[dest2], 0x00)
MMI_SDC1(%[ftmp4], %[dest3], 0x00)
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8])
: [dest0]"r"(dest+0*linesize), [dest1]"r"(dest+1*linesize),
[dest2]"r"(dest+2*linesize), [dest3]"r"(dest+3*linesize),
[dc]"f"(dc)
: "memory"
);</asm>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MIPS_SIM</name> <operator>!=</operator> <name>_ABIO32</name></expr></cpp:if>
<function><type><name>void</name></type> <name>ff_vc1_inv_trans_8x4_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>block</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>block</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>count</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_4_local</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0000000400000004ULL</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_64_local</name></expr></argument>)</argument_list></call><operator>=</operator> <block>{<expr><literal type="number">0x0000004000000040ULL</literal></expr>}</block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>coeff</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>,
<expr><literal type="number">12</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">12</literal></expr>, <expr><operator>-</operator><literal type="number">16</literal></expr>, <expr><operator>-</operator><literal type="number">16</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal></expr>,
<expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><operator>-</operator><literal type="number">16</literal></expr>, <expr><operator>-</operator><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">15</literal></expr>,
<expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">16</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><operator>-</operator><literal type="number">16</literal></expr>,
<expr><literal type="number">12</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">16</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><operator>-</operator><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><literal type="number">16</literal></expr>,
<expr><literal type="number">12</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><operator>-</operator><literal type="number">12</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><operator>-</operator><literal type="number">15</literal></expr>,
<expr><literal type="number">12</literal></expr>, <expr><operator>-</operator><literal type="number">15</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><operator>-</operator><literal type="number">16</literal></expr>, <expr><literal type="number">9</literal></expr>,
<expr><literal type="number">12</literal></expr>, <expr><operator>-</operator><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><operator>-</operator><literal type="number">15</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<asm>__asm__ <specifier>volatile</specifier> (
"li %[tmp0], 0x03 \n\t"
"mtc1 %[tmp0], %[ftmp0] \n\t"

"1: \n\t"
MMI_LDC1(%[ftmp1], %[src], 0x00)
MMI_LDC1(%[ftmp2], %[src], 0x08)


MMI_LDC1(%[ftmp3], %[coeff], 0x00)
MMI_LDC1(%[ftmp4], %[coeff], 0x08)
MMI_LDC1(%[ftmp5], %[coeff], 0x10)
MMI_LDC1(%[ftmp6], %[coeff], 0x18)
"pmaddhw %[ftmp7], %[ftmp1], %[ftmp3] \n\t"
"pmaddhw %[ftmp8], %[ftmp2], %[ftmp4] \n\t"
"paddw %[ftmp9], %[ftmp7], %[ftmp8] \n\t"
"pmaddhw %[ftmp7], %[ftmp1], %[ftmp5] \n\t"
"pmaddhw %[ftmp8], %[ftmp2], %[ftmp6] \n\t"
"paddw %[ftmp10], %[ftmp7], %[ftmp8] \n\t"
"punpcklwd %[ftmp7], %[ftmp9], %[ftmp10] \n\t"
"punpckhwd %[ftmp8], %[ftmp9], %[ftmp10] \n\t"
"paddw %[ftmp11], %[ftmp7], %[ftmp8] \n\t"
"paddw %[ftmp11], %[ftmp11], %[ff_pw_4] \n\t"


MMI_LDC1(%[ftmp3], %[coeff], 0x20)
MMI_LDC1(%[ftmp4], %[coeff], 0x28)
MMI_LDC1(%[ftmp5], %[coeff], 0x30)
MMI_LDC1(%[ftmp6], %[coeff], 0x38)
"pmaddhw %[ftmp7], %[ftmp1], %[ftmp3] \n\t"
"pmaddhw %[ftmp8], %[ftmp2], %[ftmp4] \n\t"
"paddw %[ftmp9], %[ftmp7], %[ftmp8] \n\t"
"pmaddhw %[ftmp7], %[ftmp1], %[ftmp5] \n\t"
"pmaddhw %[ftmp8], %[ftmp2], %[ftmp6] \n\t"
"paddw %[ftmp10], %[ftmp7], %[ftmp8] \n\t"
"punpcklwd %[ftmp7], %[ftmp9], %[ftmp10] \n\t"
"punpckhwd %[ftmp8], %[ftmp9], %[ftmp10] \n\t"
"paddw %[ftmp12], %[ftmp7], %[ftmp8] \n\t"
"paddw %[ftmp12], %[ftmp12], %[ff_pw_4] \n\t"


MMI_LDC1(%[ftmp3], %[coeff], 0x40)
MMI_LDC1(%[ftmp4], %[coeff], 0x48)
MMI_LDC1(%[ftmp5], %[coeff], 0x50)
MMI_LDC1(%[ftmp6], %[coeff], 0x58)
"pmaddhw %[ftmp7], %[ftmp1], %[ftmp3] \n\t"
"pmaddhw %[ftmp8], %[ftmp2], %[ftmp4] \n\t"
"paddw %[ftmp9], %[ftmp7], %[ftmp8] \n\t"
"pmaddhw %[ftmp7], %[ftmp1], %[ftmp5] \n\t"
"pmaddhw %[ftmp8], %[ftmp2], %[ftmp6] \n\t"
"paddw %[ftmp10], %[ftmp7], %[ftmp8] \n\t"
"punpcklwd %[ftmp7], %[ftmp9], %[ftmp10] \n\t"
"punpckhwd %[ftmp8], %[ftmp9], %[ftmp10] \n\t"
"paddw %[ftmp13], %[ftmp7], %[ftmp8] \n\t"
"paddw %[ftmp13], %[ftmp13], %[ff_pw_4] \n\t"


MMI_LDC1(%[ftmp3], %[coeff], 0x60)
MMI_LDC1(%[ftmp4], %[coeff], 0x68)
MMI_LDC1(%[ftmp5], %[coeff], 0x70)
MMI_LDC1(%[ftmp6], %[coeff], 0x78)
"pmaddhw %[ftmp7], %[ftmp1], %[ftmp3] \n\t"
"pmaddhw %[ftmp8], %[ftmp2], %[ftmp4] \n\t"
"paddw %[ftmp9], %[ftmp7], %[ftmp8] \n\t"
"pmaddhw %[ftmp7], %[ftmp1], %[ftmp5] \n\t"
"pmaddhw %[ftmp8], %[ftmp2], %[ftmp6] \n\t"
"paddw %[ftmp10], %[ftmp7], %[ftmp8] \n\t"
"punpcklwd %[ftmp7], %[ftmp9], %[ftmp10] \n\t"
"punpckhwd %[ftmp8], %[ftmp9], %[ftmp10] \n\t"
"paddw %[ftmp14], %[ftmp7], %[ftmp8] \n\t"
"paddw %[ftmp14], %[ftmp14], %[ff_pw_4] \n\t"


"psraw %[ftmp11], %[ftmp11], %[ftmp0] \n\t"
"psraw %[ftmp12], %[ftmp12], %[ftmp0] \n\t"
"psraw %[ftmp13], %[ftmp13], %[ftmp0] \n\t"
"psraw %[ftmp14], %[ftmp14], %[ftmp0] \n\t"
"punpcklhw %[ftmp7], %[ftmp11], %[ftmp12] \n\t"
"punpckhhw %[ftmp8], %[ftmp11], %[ftmp12] \n\t"
"punpcklhw %[ftmp9], %[ftmp7], %[ftmp8] \n\t"
"punpcklhw %[ftmp7], %[ftmp13], %[ftmp14] \n\t"
"punpckhhw %[ftmp8], %[ftmp13], %[ftmp14] \n\t"
"punpcklhw %[ftmp10], %[ftmp7], %[ftmp8] \n\t"
MMI_SDC1(%[ftmp9], %[dst], 0x00)
MMI_SDC1(%[ftmp10], %[dst], 0x08)

PTR_ADDIU "%[src], %[src], 0x10 \n\t"
PTR_ADDIU "%[dst], %[dst], 0x10 \n\t"
"addiu %[count], %[count], -0x01 \n\t"
"bnez %[count], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[ftmp10]"=&amp;f"(ftmp[10]), [ftmp11]"=&amp;f"(ftmp[11]),
[ftmp12]"=&amp;f"(ftmp[12]), [ftmp13]"=&amp;f"(ftmp[13]),
[ftmp14]"=&amp;f"(ftmp[14]), [tmp0]"=&amp;r"(tmp[0]),
[src]"+&amp;r"(src), [dst]"+&amp;r"(dst), [count]"+&amp;r"(count)
: [ff_pw_4]"f"(ff_pw_4_local), [coeff]"r"(coeff)
: "memory"
);</asm>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>


<asm>__asm__ <specifier>volatile</specifier> (
"li %[tmp0], 0x44 \n\t"
"mtc1 %[tmp0], %[ftmp15] \n\t"


"li %[tmp0], 0x07 \n\t"
"mtc1 %[tmp0], %[ftmp0] \n\t"
MMI_LDC1(%[ftmp1], %[src], 0x00)
MMI_LDC1(%[ftmp2], %[src], 0x10)
MMI_LDC1(%[ftmp3], %[src], 0x20)
MMI_LDC1(%[ftmp4], %[src], 0x30)
"punpcklhw %[ftmp5], %[ftmp1], %[ftmp2] \n\t"
"punpckhhw %[ftmp6], %[ftmp1], %[ftmp2] \n\t"
"punpcklhw %[ftmp7], %[ftmp3], %[ftmp4] \n\t"
"punpckhhw %[ftmp8], %[ftmp3], %[ftmp4] \n\t"


"li %[tmp0], 0x00160011 \n\t"
"mtc1 %[tmp0], %[ftmp3] \n\t"
"pshufh %[ftmp3], %[ftmp3], %[ftmp15] \n\t"
"li %[tmp0], 0x000a0011 \n\t"
"mtc1 %[tmp0], %[ftmp4] \n\t"
"pshufh %[ftmp4], %[ftmp4], %[ftmp15] \n\t"
"pmaddhw %[ftmp1], %[ftmp5], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp7], %[ftmp4] \n\t"
"paddw %[ftmp9], %[ftmp1], %[ftmp2] \n\t"
"pmaddhw %[ftmp1], %[ftmp6], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp8], %[ftmp4] \n\t"
"paddw %[ftmp10], %[ftmp1], %[ftmp2] \n\t"
"paddw %[ftmp9], %[ftmp9], %[ff_pw_64] \n\t"
"paddw %[ftmp10], %[ftmp10], %[ff_pw_64] \n\t"
"psraw %[ftmp9], %[ftmp9], %[ftmp0] \n\t"
"psraw %[ftmp10], %[ftmp10], %[ftmp0] \n\t"
"punpcklhw %[ftmp1], %[ftmp9], %[ftmp10] \n\t"
"punpckhhw %[ftmp2], %[ftmp9], %[ftmp10] \n\t"
"punpcklhw %[ftmp11], %[ftmp1], %[ftmp2] \n\t"


"li %[tmp0], 0x000a0011 \n\t"
"mtc1 %[tmp0], %[ftmp3] \n\t"
"pshufh %[ftmp3], %[ftmp3], %[ftmp15] \n\t"
"li %[tmp0], 0xffeaffef \n\t"
"mtc1 %[tmp0], %[ftmp4] \n\t"
"pshufh %[ftmp4], %[ftmp4], %[ftmp15] \n\t"
"pmaddhw %[ftmp1], %[ftmp5], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp7], %[ftmp4] \n\t"
"paddw %[ftmp9], %[ftmp1], %[ftmp2] \n\t"
"pmaddhw %[ftmp1], %[ftmp6], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp8], %[ftmp4] \n\t"
"paddw %[ftmp10], %[ftmp1], %[ftmp2] \n\t"
"paddw %[ftmp9], %[ftmp9], %[ff_pw_64] \n\t"
"paddw %[ftmp10], %[ftmp10], %[ff_pw_64] \n\t"
"psraw %[ftmp9], %[ftmp9], %[ftmp0] \n\t"
"psraw %[ftmp10], %[ftmp10], %[ftmp0] \n\t"
"punpcklhw %[ftmp1], %[ftmp9], %[ftmp10] \n\t"
"punpckhhw %[ftmp2], %[ftmp9], %[ftmp10] \n\t"
"punpcklhw %[ftmp12], %[ftmp1], %[ftmp2] \n\t"


"li %[tmp0], 0xfff60011 \n\t"
"mtc1 %[tmp0], %[ftmp3] \n\t"
"pshufh %[ftmp3], %[ftmp3], %[ftmp15] \n\t"
"li %[tmp0], 0x0016ffef \n\t"
"mtc1 %[tmp0], %[ftmp4] \n\t"
"pshufh %[ftmp4], %[ftmp4], %[ftmp15] \n\t"
"pmaddhw %[ftmp1], %[ftmp5], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp7], %[ftmp4] \n\t"
"paddw %[ftmp9], %[ftmp1], %[ftmp2] \n\t"
"pmaddhw %[ftmp1], %[ftmp6], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp8], %[ftmp4] \n\t"
"paddw %[ftmp10], %[ftmp1], %[ftmp2] \n\t"
"paddw %[ftmp9], %[ftmp9], %[ff_pw_64] \n\t"
"paddw %[ftmp10], %[ftmp10], %[ff_pw_64] \n\t"
"psraw %[ftmp9], %[ftmp9], %[ftmp0] \n\t"
"psraw %[ftmp10], %[ftmp10], %[ftmp0] \n\t"
"punpcklhw %[ftmp1], %[ftmp9], %[ftmp10] \n\t"
"punpckhhw %[ftmp2], %[ftmp9], %[ftmp10] \n\t"
"punpcklhw %[ftmp13], %[ftmp1], %[ftmp2] \n\t"


"li %[tmp0], 0xffea0011 \n\t"
"mtc1 %[tmp0], %[ftmp3] \n\t"
"pshufh %[ftmp3], %[ftmp3], %[ftmp15] \n\t"
"li %[tmp0], 0xfff60011 \n\t"
"mtc1 %[tmp0], %[ftmp4] \n\t"
"pshufh %[ftmp4], %[ftmp4], %[ftmp15] \n\t"
"pmaddhw %[ftmp1], %[ftmp5], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp7], %[ftmp4] \n\t"
"paddw %[ftmp9], %[ftmp1], %[ftmp2] \n\t"
"pmaddhw %[ftmp1], %[ftmp6], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp8], %[ftmp4] \n\t"
"paddw %[ftmp10], %[ftmp1], %[ftmp2] \n\t"
"paddw %[ftmp9], %[ftmp9], %[ff_pw_64] \n\t"
"paddw %[ftmp10], %[ftmp10], %[ff_pw_64] \n\t"
"psraw %[ftmp9], %[ftmp9], %[ftmp0] \n\t"
"psraw %[ftmp10], %[ftmp10], %[ftmp0] \n\t"
"punpcklhw %[ftmp1], %[ftmp9], %[ftmp10] \n\t"
"punpckhhw %[ftmp2], %[ftmp9], %[ftmp10] \n\t"
"punpcklhw %[ftmp14], %[ftmp1], %[ftmp2] \n\t"

MMI_LWC1(%[ftmp1], %[dest], 0x00)
PTR_ADDU "%[tmp0], %[dest], %[linesize] \n\t"
MMI_LWC1(%[ftmp2], %[tmp0], 0x00)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_LWC1(%[ftmp3], %[tmp0], 0x00)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_LWC1(%[ftmp4], %[tmp0], 0x00)
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp0] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp0] \n\t"
"punpcklbh %[ftmp4], %[ftmp4], %[ftmp0] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ftmp11] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ftmp12] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp13] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ftmp14] \n\t"
"packushb %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"packushb %[ftmp2], %[ftmp2], %[ftmp0] \n\t"
"packushb %[ftmp3], %[ftmp3], %[ftmp0] \n\t"
"packushb %[ftmp4], %[ftmp4], %[ftmp0] \n\t"
MMI_SWC1(%[ftmp1], %[dest], 0x00)
PTR_ADDU "%[tmp0], %[dest], %[linesize] \n\t"
MMI_SWC1(%[ftmp2], %[tmp0], 0x00)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_SWC1(%[ftmp3], %[tmp0], 0x00)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_SWC1(%[ftmp4], %[tmp0], 0x00)


"li %[tmp0], 0x07 \n\t"
"mtc1 %[tmp0], %[ftmp0] \n\t"
MMI_LDC1(%[ftmp1], %[src], 0x08)
MMI_LDC1(%[ftmp2], %[src], 0x18)
MMI_LDC1(%[ftmp3], %[src], 0x28)
MMI_LDC1(%[ftmp4], %[src], 0x38)
"punpcklhw %[ftmp5], %[ftmp1], %[ftmp2] \n\t"
"punpckhhw %[ftmp6], %[ftmp1], %[ftmp2] \n\t"
"punpcklhw %[ftmp7], %[ftmp3], %[ftmp4] \n\t"
"punpckhhw %[ftmp8], %[ftmp3], %[ftmp4] \n\t"


"li %[tmp0], 0x00160011 \n\t"
"mtc1 %[tmp0], %[ftmp3] \n\t"
"pshufh %[ftmp3], %[ftmp3], %[ftmp15] \n\t"
"li %[tmp0], 0x000a0011 \n\t"
"mtc1 %[tmp0], %[ftmp4] \n\t"
"pshufh %[ftmp4], %[ftmp4], %[ftmp15] \n\t"
"pmaddhw %[ftmp1], %[ftmp5], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp7], %[ftmp4] \n\t"
"paddw %[ftmp9], %[ftmp1], %[ftmp2] \n\t"
"pmaddhw %[ftmp1], %[ftmp6], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp8], %[ftmp4] \n\t"
"paddw %[ftmp10], %[ftmp1], %[ftmp2] \n\t"
"paddw %[ftmp9], %[ftmp9], %[ff_pw_64] \n\t"
"paddw %[ftmp10], %[ftmp10], %[ff_pw_64] \n\t"
"psraw %[ftmp9], %[ftmp9], %[ftmp0] \n\t"
"psraw %[ftmp10], %[ftmp10], %[ftmp0] \n\t"
"punpcklhw %[ftmp1], %[ftmp9], %[ftmp10] \n\t"
"punpckhhw %[ftmp2], %[ftmp9], %[ftmp10] \n\t"
"punpcklhw %[ftmp11], %[ftmp1], %[ftmp2] \n\t"


"li %[tmp0], 0x000a0011 \n\t"
"mtc1 %[tmp0], %[ftmp3] \n\t"
"pshufh %[ftmp3], %[ftmp3], %[ftmp15] \n\t"
"li %[tmp0], 0xffeaffef \n\t"
"mtc1 %[tmp0], %[ftmp4] \n\t"
"pshufh %[ftmp4], %[ftmp4], %[ftmp15] \n\t"
"pmaddhw %[ftmp1], %[ftmp5], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp7], %[ftmp4] \n\t"
"paddw %[ftmp9], %[ftmp1], %[ftmp2] \n\t"
"pmaddhw %[ftmp1], %[ftmp6], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp8], %[ftmp4] \n\t"
"paddw %[ftmp10], %[ftmp1], %[ftmp2] \n\t"
"paddw %[ftmp9], %[ftmp9], %[ff_pw_64] \n\t"
"paddw %[ftmp10], %[ftmp10], %[ff_pw_64] \n\t"
"psraw %[ftmp9], %[ftmp9], %[ftmp0] \n\t"
"psraw %[ftmp10], %[ftmp10], %[ftmp0] \n\t"
"punpcklhw %[ftmp1], %[ftmp9], %[ftmp10] \n\t"
"punpckhhw %[ftmp2], %[ftmp9], %[ftmp10] \n\t"
"punpcklhw %[ftmp12], %[ftmp1], %[ftmp2] \n\t"


"li %[tmp0], 0xfff60011 \n\t"
"mtc1 %[tmp0], %[ftmp3] \n\t"
"pshufh %[ftmp3], %[ftmp3], %[ftmp15] \n\t"
"li %[tmp0], 0x0016ffef \n\t"
"mtc1 %[tmp0], %[ftmp4] \n\t"
"pshufh %[ftmp4], %[ftmp4], %[ftmp15] \n\t"
"pmaddhw %[ftmp1], %[ftmp5], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp7], %[ftmp4] \n\t"
"paddw %[ftmp9], %[ftmp1], %[ftmp2] \n\t"
"pmaddhw %[ftmp1], %[ftmp6], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp8], %[ftmp4] \n\t"
"paddw %[ftmp10], %[ftmp1], %[ftmp2] \n\t"
"paddw %[ftmp9], %[ftmp9], %[ff_pw_64] \n\t"
"paddw %[ftmp10], %[ftmp10], %[ff_pw_64] \n\t"
"psraw %[ftmp9], %[ftmp9], %[ftmp0] \n\t"
"psraw %[ftmp10], %[ftmp10], %[ftmp0] \n\t"
"punpcklhw %[ftmp1], %[ftmp9], %[ftmp10] \n\t"
"punpckhhw %[ftmp2], %[ftmp9], %[ftmp10] \n\t"
"punpcklhw %[ftmp13], %[ftmp1], %[ftmp2] \n\t"


"li %[tmp0], 0xffea0011 \n\t"
"mtc1 %[tmp0], %[ftmp3] \n\t"
"pshufh %[ftmp3], %[ftmp3], %[ftmp15] \n\t"
"li %[tmp0], 0xfff60011 \n\t"
"mtc1 %[tmp0], %[ftmp4] \n\t"
"pshufh %[ftmp4], %[ftmp4], %[ftmp15] \n\t"
"pmaddhw %[ftmp1], %[ftmp5], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp7], %[ftmp4] \n\t"
"paddw %[ftmp9], %[ftmp1], %[ftmp2] \n\t"
"pmaddhw %[ftmp1], %[ftmp6], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp8], %[ftmp4] \n\t"
"paddw %[ftmp10], %[ftmp1], %[ftmp2] \n\t"
"paddw %[ftmp9], %[ftmp9], %[ff_pw_64] \n\t"
"paddw %[ftmp10], %[ftmp10], %[ff_pw_64] \n\t"
"psraw %[ftmp9], %[ftmp9], %[ftmp0] \n\t"
"psraw %[ftmp10], %[ftmp10], %[ftmp0] \n\t"
"punpcklhw %[ftmp1], %[ftmp9], %[ftmp10] \n\t"
"punpckhhw %[ftmp2], %[ftmp9], %[ftmp10] \n\t"
"punpcklhw %[ftmp14], %[ftmp1], %[ftmp2] \n\t"

MMI_LWC1(%[ftmp1], %[dest], 0x04)
PTR_ADDU "%[tmp0], %[dest], %[linesize] \n\t"
MMI_LWC1(%[ftmp2], %[tmp0], 0x04)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_LWC1(%[ftmp3], %[tmp0], 0x04)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_LWC1(%[ftmp4], %[tmp0], 0x04)
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp0] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp0] \n\t"
"punpcklbh %[ftmp4], %[ftmp4], %[ftmp0] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ftmp11] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ftmp12] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp13] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ftmp14] \n\t"
"packushb %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"packushb %[ftmp2], %[ftmp2], %[ftmp0] \n\t"
"packushb %[ftmp3], %[ftmp3], %[ftmp0] \n\t"
"packushb %[ftmp4], %[ftmp4], %[ftmp0] \n\t"
MMI_SWC1(%[ftmp1], %[dest], 0x04)
PTR_ADDU "%[tmp0], %[dest], %[linesize] \n\t"
MMI_SWC1(%[ftmp2], %[tmp0], 0x04)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_SWC1(%[ftmp3], %[tmp0], 0x04)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_SWC1(%[ftmp4], %[tmp0], 0x04)

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[ftmp10]"=&amp;f"(ftmp[10]), [ftmp11]"=&amp;f"(ftmp[11]),
[ftmp12]"=&amp;f"(ftmp[12]), [ftmp13]"=&amp;f"(ftmp[13]),
[ftmp14]"=&amp;f"(ftmp[14]), [ftmp15]"=&amp;f"(ftmp[15]),
[tmp0]"=&amp;r"(tmp[0])
: [ff_pw_64]"f"(ff_pw_64_local),
[src]"r"(src), [dest]"r"(dest), [linesize]"r"(linesize)
:"memory"
);</asm>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>void</name></type> <name>ff_vc1_inv_trans_4x8_dc_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dc</name> <init>= <expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>(</operator><literal type="number">17</literal> <operator>*</operator> <name>dc</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>(</operator><literal type="number">12</literal> <operator>*</operator> <name>dc</name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"pshufh %[dc], %[dc], %[ftmp0] \n\t"

MMI_LWC1(%[ftmp1], %[dest0], 0x00)
MMI_LWC1(%[ftmp2], %[dest1], 0x00)
MMI_LWC1(%[ftmp3], %[dest2], 0x00)
MMI_LWC1(%[ftmp4], %[dest3], 0x00)
MMI_LWC1(%[ftmp5], %[dest4], 0x00)
MMI_LWC1(%[ftmp6], %[dest5], 0x00)
MMI_LWC1(%[ftmp7], %[dest6], 0x00)
MMI_LWC1(%[ftmp8], %[dest7], 0x00)

"punpcklbh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp0] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp0] \n\t"
"punpcklbh %[ftmp4], %[ftmp4], %[ftmp0] \n\t"
"punpcklbh %[ftmp5], %[ftmp5], %[ftmp0] \n\t"
"punpcklbh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"punpcklbh %[ftmp7], %[ftmp7], %[ftmp0] \n\t"
"punpcklbh %[ftmp8], %[ftmp8], %[ftmp0] \n\t"

"paddsh %[ftmp1], %[ftmp1], %[dc] \n\t"
"paddsh %[ftmp2], %[ftmp2], %[dc] \n\t"
"paddsh %[ftmp3], %[ftmp3], %[dc] \n\t"
"paddsh %[ftmp4], %[ftmp4], %[dc] \n\t"
"paddsh %[ftmp5], %[ftmp5], %[dc] \n\t"
"paddsh %[ftmp6], %[ftmp6], %[dc] \n\t"
"paddsh %[ftmp7], %[ftmp7], %[dc] \n\t"
"paddsh %[ftmp8], %[ftmp8], %[dc] \n\t"

"packushb %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"packushb %[ftmp2], %[ftmp2], %[ftmp0] \n\t"
"packushb %[ftmp3], %[ftmp3], %[ftmp0] \n\t"
"packushb %[ftmp4], %[ftmp4], %[ftmp0] \n\t"
"packushb %[ftmp5], %[ftmp5], %[ftmp0] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"packushb %[ftmp7], %[ftmp7], %[ftmp0] \n\t"
"packushb %[ftmp8], %[ftmp8], %[ftmp0] \n\t"

MMI_SWC1(%[ftmp1], %[dest0], 0x00)
MMI_SWC1(%[ftmp2], %[dest1], 0x00)
MMI_SWC1(%[ftmp3], %[dest2], 0x00)
MMI_SWC1(%[ftmp4], %[dest3], 0x00)
MMI_SWC1(%[ftmp5], %[dest4], 0x00)
MMI_SWC1(%[ftmp6], %[dest5], 0x00)
MMI_SWC1(%[ftmp7], %[dest6], 0x00)
MMI_SWC1(%[ftmp8], %[dest7], 0x00)
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
RESTRICT_ASM_LOW32
[ftmp8]"=&amp;f"(ftmp[8])
: [dest0]"r"(dest+0*linesize), [dest1]"r"(dest+1*linesize),
[dest2]"r"(dest+2*linesize), [dest3]"r"(dest+3*linesize),
[dest4]"r"(dest+4*linesize), [dest5]"r"(dest+5*linesize),
[dest6]"r"(dest+6*linesize), [dest7]"r"(dest+7*linesize),
[dc]"f"(dc)
: "memory"
);</asm>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MIPS_SIM</name> <operator>!=</operator> <name>_ABIO32</name></expr></cpp:if>
<function><type><name>void</name></type> <name>ff_vc1_inv_trans_4x8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>block</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>block</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">23</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>coeff</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">17</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">10</literal></expr>,
<expr><literal type="number">17</literal></expr>, <expr><literal type="number">10</literal></expr>,<expr><operator>-</operator><literal type="number">17</literal></expr>,<expr><operator>-</operator><literal type="number">22</literal></expr>,
<expr><literal type="number">17</literal></expr>,<expr><operator>-</operator><literal type="number">10</literal></expr>,<expr><operator>-</operator><literal type="number">17</literal></expr>, <expr><literal type="number">22</literal></expr>,
<expr><literal type="number">17</literal></expr>,<expr><operator>-</operator><literal type="number">22</literal></expr>, <expr><literal type="number">17</literal></expr>,<expr><operator>-</operator><literal type="number">10</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_1_local</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0000000100000001ULL</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_4_local</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0000000400000004ULL</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_64_local</name></expr></argument>)</argument_list></call><operator>=</operator> <block>{<expr><literal type="number">0x0000004000000040ULL</literal></expr>}</block></expr>;</expr_stmt>


<asm>__asm__ <specifier>volatile</specifier> (

"li %[tmp0], 0x03 \n\t"
"mtc1 %[tmp0], %[ftmp0] \n\t"

MMI_LDC1(%[ftmp2], %[coeff], 0x00)
MMI_LDC1(%[ftmp3], %[coeff], 0x08)
MMI_LDC1(%[ftmp4], %[coeff], 0x10)
MMI_LDC1(%[ftmp5], %[coeff], 0x18)
"1: \n\t"

MMI_LDC1(%[ftmp1], %[src], 0x00)
"pmaddhw %[ftmp6], %[ftmp2], %[ftmp1] \n\t"
"pmaddhw %[ftmp7], %[ftmp3], %[ftmp1] \n\t"
"pmaddhw %[ftmp8], %[ftmp4], %[ftmp1] \n\t"
"pmaddhw %[ftmp9], %[ftmp5], %[ftmp1] \n\t"
"punpcklwd %[ftmp10], %[ftmp6], %[ftmp7] \n\t"
"punpckhwd %[ftmp11], %[ftmp6], %[ftmp7] \n\t"
"punpcklwd %[ftmp6], %[ftmp8], %[ftmp9] \n\t"
"punpckhwd %[ftmp7], %[ftmp8], %[ftmp9] \n\t"
"paddw %[ftmp8], %[ftmp10], %[ftmp11] \n\t"
"paddw %[ftmp9], %[ftmp6], %[ftmp7] \n\t"
"paddw %[ftmp8], %[ftmp8], %[ff_pw_4] \n\t"
"paddw %[ftmp9], %[ftmp9], %[ff_pw_4] \n\t"
"psraw %[ftmp8], %[ftmp8], %[ftmp0] \n\t"
"psraw %[ftmp9], %[ftmp9], %[ftmp0] \n\t"
"punpcklhw %[ftmp6], %[ftmp8], %[ftmp9] \n\t"
"punpckhhw %[ftmp7], %[ftmp8], %[ftmp9] \n\t"
"punpcklhw %[ftmp8], %[ftmp6], %[ftmp7] \n\t"
MMI_SDC1(%[ftmp8], %[dst], 0x00)

PTR_ADDIU "%[src], %[src], 0x10 \n\t"
PTR_ADDIU "%[dst], %[dst], 0x10 \n\t"
"addiu %[count], %[count], -0x01 \n\t"
"bnez %[count], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[ftmp10]"=&amp;f"(ftmp[10]), [ftmp11]"=&amp;f"(ftmp[11]),
[tmp0]"=&amp;r"(tmp[0]), [count]"+&amp;r"(count),
[src]"+&amp;r"(src), [dst]"+&amp;r"(dst)
: [ff_pw_4]"f"(ff_pw_4_local), [coeff]"r"(coeff)
: "memory"
);</asm>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>


<asm>__asm__ <specifier>volatile</specifier> (
"li %[tmp0], 0x07 \n\t"
"mtc1 %[tmp0], %[ftmp0] \n\t"

MMI_LDC1(%[ftmp1], %[src], 0x00)
MMI_LDC1(%[ftmp2], %[src], 0x20)
MMI_LDC1(%[ftmp3], %[src], 0x40)
MMI_LDC1(%[ftmp4], %[src], 0x60)
"punpcklhw %[ftmp5], %[ftmp1], %[ftmp2] \n\t"
"punpckhhw %[ftmp6], %[ftmp1], %[ftmp2] \n\t"
"punpcklhw %[ftmp7], %[ftmp3], %[ftmp4] \n\t"
"punpckhhw %[ftmp8], %[ftmp3], %[ftmp4] \n\t"

MMI_LDC1(%[ftmp1], %[src], 0x10)
MMI_LDC1(%[ftmp2], %[src], 0x30)
MMI_LDC1(%[ftmp3], %[src], 0x50)
MMI_LDC1(%[ftmp4], %[src], 0x70)
"punpcklhw %[ftmp9], %[ftmp1], %[ftmp2] \n\t"
"punpckhhw %[ftmp10], %[ftmp1], %[ftmp2] \n\t"
"punpcklhw %[ftmp11], %[ftmp3], %[ftmp4] \n\t"
"punpckhhw %[ftmp12], %[ftmp3], %[ftmp4] \n\t"


VC1_INV_TRANCS_8_TYPE2(%[ftmp15], %[ftmp22], 0x0010000c, 0x0006000c,
0x000f0010, 0x00040009, %[ff_pw_64], %[ff_pw_1])


VC1_INV_TRANCS_8_TYPE2(%[ftmp16], %[ftmp21], 0x0006000c, 0xfff0fff4,
0xfffc000f, 0xfff7fff0, %[ff_pw_64], %[ff_pw_1])


VC1_INV_TRANCS_8_TYPE2(%[ftmp17], %[ftmp20], 0xfffa000c, 0x0010fff4,
0xfff00009, 0x000f0004, %[ff_pw_64], %[ff_pw_1])


VC1_INV_TRANCS_8_TYPE2(%[ftmp18], %[ftmp19], 0xfff0000c, 0xfffa000c,
0xfff70004, 0xfff0000f, %[ff_pw_64], %[ff_pw_1])

MMI_LWC1(%[ftmp1], %[dest], 0x00)
PTR_ADDU "%[tmp0], %[dest], %[linesize] \n\t"
MMI_LWC1(%[ftmp2], %[tmp0], 0x00)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_LWC1(%[ftmp3], %[tmp0], 0x00)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_LWC1(%[ftmp4], %[tmp0], 0x00)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_LWC1(%[ftmp5], %[tmp0], 0x00)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_LWC1(%[ftmp6], %[tmp0], 0x00)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_LWC1(%[ftmp7], %[tmp0], 0x00)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_LWC1(%[ftmp8], %[tmp0], 0x00)
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp0] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp0] \n\t"
"punpcklbh %[ftmp4], %[ftmp4], %[ftmp0] \n\t"
"punpcklbh %[ftmp5], %[ftmp5], %[ftmp0] \n\t"
"punpcklbh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"punpcklbh %[ftmp7], %[ftmp7], %[ftmp0] \n\t"
"punpcklbh %[ftmp8], %[ftmp8], %[ftmp0] \n\t"

"paddh %[ftmp1], %[ftmp1], %[ftmp15] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ftmp16] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp17] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ftmp18] \n\t"
"paddh %[ftmp5], %[ftmp5], %[ftmp19] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp20] \n\t"
"paddh %[ftmp7], %[ftmp7], %[ftmp21] \n\t"
"paddh %[ftmp8], %[ftmp8], %[ftmp22] \n\t"

"packushb %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"packushb %[ftmp2], %[ftmp2], %[ftmp0] \n\t"
"packushb %[ftmp3], %[ftmp3], %[ftmp0] \n\t"
"packushb %[ftmp4], %[ftmp4], %[ftmp0] \n\t"
"packushb %[ftmp5], %[ftmp5], %[ftmp0] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"packushb %[ftmp7], %[ftmp7], %[ftmp0] \n\t"
"packushb %[ftmp8], %[ftmp8], %[ftmp0] \n\t"

MMI_SWC1(%[ftmp1], %[dest], 0x00)
PTR_ADDU "%[tmp0], %[dest], %[linesize] \n\t"
MMI_SWC1(%[ftmp2], %[tmp0], 0x00)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_SWC1(%[ftmp3], %[tmp0], 0x00)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_SWC1(%[ftmp4], %[tmp0], 0x00)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_SWC1(%[ftmp5], %[tmp0], 0x00)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_SWC1(%[ftmp6], %[tmp0], 0x00)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_SWC1(%[ftmp7], %[tmp0], 0x00)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_SWC1(%[ftmp8], %[tmp0], 0x00)

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[ftmp10]"=&amp;f"(ftmp[10]), [ftmp11]"=&amp;f"(ftmp[11]),
[ftmp12]"=&amp;f"(ftmp[12]), [ftmp13]"=&amp;f"(ftmp[13]),
[ftmp14]"=&amp;f"(ftmp[14]), [ftmp15]"=&amp;f"(ftmp[15]),
[ftmp16]"=&amp;f"(ftmp[16]), [ftmp17]"=&amp;f"(ftmp[17]),
[ftmp18]"=&amp;f"(ftmp[18]), [ftmp19]"=&amp;f"(ftmp[19]),
[ftmp20]"=&amp;f"(ftmp[20]), [ftmp21]"=&amp;f"(ftmp[21]),
[ftmp22]"=&amp;f"(ftmp[22]),
[tmp0]"=&amp;r"(tmp[0])
: [ff_pw_1]"f"(ff_pw_1_local), [ff_pw_64]"f"(ff_pw_64_local),
[src]"r"(src), [dest]"r"(dest), [linesize]"r"(linesize)
: "memory"
);</asm>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>void</name></type> <name>ff_vc1_inv_trans_4x4_dc_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dc</name> <init>= <expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>(</operator><literal type="number">17</literal> <operator>*</operator> <name>dc</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> <operator>=</operator> <operator>(</operator><literal type="number">17</literal> <operator>*</operator> <name>dc</name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"pshufh %[dc], %[dc], %[ftmp0] \n\t"

MMI_LWC1(%[ftmp1], %[dest0], 0x00)
MMI_LWC1(%[ftmp2], %[dest1], 0x00)
MMI_LWC1(%[ftmp3], %[dest2], 0x00)
MMI_LWC1(%[ftmp4], %[dest3], 0x00)

"punpcklbh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp0] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp0] \n\t"
"punpcklbh %[ftmp4], %[ftmp4], %[ftmp0] \n\t"

"paddsh %[ftmp1], %[ftmp1], %[dc] \n\t"
"paddsh %[ftmp2], %[ftmp2], %[dc] \n\t"
"paddsh %[ftmp3], %[ftmp3], %[dc] \n\t"
"paddsh %[ftmp4], %[ftmp4], %[dc] \n\t"

"packushb %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"packushb %[ftmp2], %[ftmp2], %[ftmp0] \n\t"
"packushb %[ftmp3], %[ftmp3], %[ftmp0] \n\t"
"packushb %[ftmp4], %[ftmp4], %[ftmp0] \n\t"

MMI_SWC1(%[ftmp1], %[dest0], 0x00)
MMI_SWC1(%[ftmp2], %[dest1], 0x00)
MMI_SWC1(%[ftmp3], %[dest2], 0x00)
MMI_SWC1(%[ftmp4], %[dest3], 0x00)
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
RESTRICT_ASM_LOW32
[ftmp4]"=&amp;f"(ftmp[4])
: [dest0]"r"(dest+0*linesize), [dest1]"r"(dest+1*linesize),
[dest2]"r"(dest+2*linesize), [dest3]"r"(dest+3*linesize),
[dc]"f"(dc)
: "memory"
);</asm>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vc1_inv_trans_4x4_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>block</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>block</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>coeff</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">17</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">10</literal></expr>,
<expr><literal type="number">17</literal></expr>, <expr><literal type="number">10</literal></expr>,<expr><operator>-</operator><literal type="number">17</literal></expr>,<expr><operator>-</operator><literal type="number">22</literal></expr>,
<expr><literal type="number">17</literal></expr>,<expr><operator>-</operator><literal type="number">10</literal></expr>,<expr><operator>-</operator><literal type="number">17</literal></expr>, <expr><literal type="number">22</literal></expr>,
<expr><literal type="number">17</literal></expr>,<expr><operator>-</operator><literal type="number">22</literal></expr>, <expr><literal type="number">17</literal></expr>,<expr><operator>-</operator><literal type="number">10</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_4_local</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{<expr><literal type="number">0x0000000400000004ULL</literal></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_64_local</name></expr></argument>)</argument_list></call><operator>=</operator> <block>{<expr><literal type="number">0x0000004000000040ULL</literal></expr>}</block></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"li %[tmp0], 0x03 \n\t"
"mtc1 %[tmp0], %[ftmp0] \n\t"
MMI_LDC1(%[ftmp2], %[coeff], 0x00)
MMI_LDC1(%[ftmp3], %[coeff], 0x08)
MMI_LDC1(%[ftmp4], %[coeff], 0x10)
MMI_LDC1(%[ftmp5], %[coeff], 0x18)
"1: \n\t"

MMI_LDC1(%[ftmp1], %[src], 0x00)
"pmaddhw %[ftmp6], %[ftmp2], %[ftmp1] \n\t"
"pmaddhw %[ftmp7], %[ftmp3], %[ftmp1] \n\t"
"pmaddhw %[ftmp8], %[ftmp4], %[ftmp1] \n\t"
"pmaddhw %[ftmp9], %[ftmp5], %[ftmp1] \n\t"
"punpcklwd %[ftmp10], %[ftmp6], %[ftmp7] \n\t"
"punpckhwd %[ftmp11], %[ftmp6], %[ftmp7] \n\t"
"punpcklwd %[ftmp6], %[ftmp8], %[ftmp9] \n\t"
"punpckhwd %[ftmp7], %[ftmp8], %[ftmp9] \n\t"
"paddw %[ftmp8], %[ftmp10], %[ftmp11] \n\t"
"paddw %[ftmp9], %[ftmp6], %[ftmp7] \n\t"
"paddw %[ftmp8], %[ftmp8], %[ff_pw_4] \n\t"
"paddw %[ftmp9], %[ftmp9], %[ff_pw_4] \n\t"
"psraw %[ftmp8], %[ftmp8], %[ftmp0] \n\t"
"psraw %[ftmp9], %[ftmp9], %[ftmp0] \n\t"
"punpcklhw %[ftmp6], %[ftmp8], %[ftmp9] \n\t"
"punpckhhw %[ftmp7], %[ftmp8], %[ftmp9] \n\t"
"punpcklhw %[ftmp8], %[ftmp6], %[ftmp7] \n\t"
MMI_SDC1(%[ftmp8], %[dst], 0x00)

PTR_ADDIU "%[src], %[src], 0x10 \n\t"
PTR_ADDIU "%[dst], %[dst], 0x10 \n\t"
"addiu %[count], %[count], -0x01 \n\t"
"bnez %[count], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[ftmp10]"=&amp;f"(ftmp[10]), [ftmp11]"=&amp;f"(ftmp[11]),
[tmp0]"=&amp;r"(tmp[0]), [count]"+&amp;r"(count),
[src]"+&amp;r"(src), [dst]"+&amp;r"(dst)
: [ff_pw_4]"f"(ff_pw_4_local), [coeff]"r"(coeff)
: "memory"
);</asm>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>


<asm>__asm__ <specifier>volatile</specifier> (
"li %[tmp0], 0x07 \n\t"
"mtc1 %[tmp0], %[ftmp0] \n\t"
"li %[tmp0], 0x44 \n\t"
"mtc1 %[tmp0], %[ftmp15] \n\t"

MMI_LDC1(%[ftmp1], %[src], 0x00)
MMI_LDC1(%[ftmp2], %[src], 0x10)
MMI_LDC1(%[ftmp3], %[src], 0x20)
MMI_LDC1(%[ftmp4], %[src], 0x30)
"punpcklhw %[ftmp5], %[ftmp1], %[ftmp2] \n\t"
"punpckhhw %[ftmp6], %[ftmp1], %[ftmp2] \n\t"
"punpcklhw %[ftmp7], %[ftmp3], %[ftmp4] \n\t"
"punpckhhw %[ftmp8], %[ftmp3], %[ftmp4] \n\t"


"li %[tmp0], 0x00160011 \n\t"
"mtc1 %[tmp0], %[ftmp3] \n\t"
"pshufh %[ftmp3], %[ftmp3], %[ftmp15] \n\t"
"li %[tmp0], 0x000a0011 \n\t"
"mtc1 %[tmp0], %[ftmp4] \n\t"
"pshufh %[ftmp4], %[ftmp4], %[ftmp15] \n\t"
"pmaddhw %[ftmp1], %[ftmp5], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp7], %[ftmp4] \n\t"
"paddw %[ftmp9], %[ftmp1], %[ftmp2] \n\t"
"pmaddhw %[ftmp1], %[ftmp6], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp8], %[ftmp4] \n\t"
"paddw %[ftmp10], %[ftmp1], %[ftmp2] \n\t"
"paddw %[ftmp9], %[ftmp9], %[ff_pw_64] \n\t"
"paddw %[ftmp10], %[ftmp10], %[ff_pw_64] \n\t"
"psraw %[ftmp9], %[ftmp9], %[ftmp0] \n\t"
"psraw %[ftmp10], %[ftmp10], %[ftmp0] \n\t"
"punpcklhw %[ftmp1], %[ftmp9], %[ftmp10] \n\t"
"punpckhhw %[ftmp2], %[ftmp9], %[ftmp10] \n\t"
"punpcklhw %[ftmp11], %[ftmp1], %[ftmp2] \n\t"


"li %[tmp0], 0x000a0011 \n\t"
"mtc1 %[tmp0], %[ftmp3] \n\t"
"pshufh %[ftmp3], %[ftmp3], %[ftmp15] \n\t"
"li %[tmp0], 0xffeaffef \n\t"
"mtc1 %[tmp0], %[ftmp4] \n\t"
"pshufh %[ftmp4], %[ftmp4], %[ftmp15] \n\t"
"pmaddhw %[ftmp1], %[ftmp5], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp7], %[ftmp4] \n\t"
"paddw %[ftmp9], %[ftmp1], %[ftmp2] \n\t"
"pmaddhw %[ftmp1], %[ftmp6], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp8], %[ftmp4] \n\t"
"paddw %[ftmp10], %[ftmp1], %[ftmp2] \n\t"
"paddw %[ftmp9], %[ftmp9], %[ff_pw_64] \n\t"
"paddw %[ftmp10], %[ftmp10], %[ff_pw_64] \n\t"
"psraw %[ftmp9], %[ftmp9], %[ftmp0] \n\t"
"psraw %[ftmp10], %[ftmp10], %[ftmp0] \n\t"
"punpcklhw %[ftmp1], %[ftmp9], %[ftmp10] \n\t"
"punpckhhw %[ftmp2], %[ftmp9], %[ftmp10] \n\t"
"punpcklhw %[ftmp12], %[ftmp1], %[ftmp2] \n\t"


"li %[tmp0], 0xfff60011 \n\t"
"mtc1 %[tmp0], %[ftmp3] \n\t"
"pshufh %[ftmp3], %[ftmp3], %[ftmp15] \n\t"
"li %[tmp0], 0x0016ffef \n\t"
"mtc1 %[tmp0], %[ftmp4] \n\t"
"pshufh %[ftmp4], %[ftmp4], %[ftmp15] \n\t"
"pmaddhw %[ftmp1], %[ftmp5], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp7], %[ftmp4] \n\t"
"paddw %[ftmp9], %[ftmp1], %[ftmp2] \n\t"
"pmaddhw %[ftmp1], %[ftmp6], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp8], %[ftmp4] \n\t"
"paddw %[ftmp10], %[ftmp1], %[ftmp2] \n\t"
"paddw %[ftmp9], %[ftmp9], %[ff_pw_64] \n\t"
"paddw %[ftmp10], %[ftmp10], %[ff_pw_64] \n\t"
"psraw %[ftmp9], %[ftmp9], %[ftmp0] \n\t"
"psraw %[ftmp10], %[ftmp10], %[ftmp0] \n\t"
"punpcklhw %[ftmp1], %[ftmp9], %[ftmp10] \n\t"
"punpckhhw %[ftmp2], %[ftmp9], %[ftmp10] \n\t"
"punpcklhw %[ftmp13], %[ftmp1], %[ftmp2] \n\t"


"li %[tmp0], 0xffea0011 \n\t"
"mtc1 %[tmp0], %[ftmp3] \n\t"
"pshufh %[ftmp3], %[ftmp3], %[ftmp15] \n\t"
"li %[tmp0], 0xfff60011 \n\t"
"mtc1 %[tmp0], %[ftmp4] \n\t"
"pshufh %[ftmp4], %[ftmp4], %[ftmp15] \n\t"
"pmaddhw %[ftmp1], %[ftmp5], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp7], %[ftmp4] \n\t"
"paddw %[ftmp9], %[ftmp1], %[ftmp2] \n\t"
"pmaddhw %[ftmp1], %[ftmp6], %[ftmp3] \n\t"
"pmaddhw %[ftmp2], %[ftmp8], %[ftmp4] \n\t"
"paddw %[ftmp10], %[ftmp1], %[ftmp2] \n\t"
"paddw %[ftmp9], %[ftmp9], %[ff_pw_64] \n\t"
"paddw %[ftmp10], %[ftmp10], %[ff_pw_64] \n\t"
"psraw %[ftmp9], %[ftmp9], %[ftmp0] \n\t"
"psraw %[ftmp10], %[ftmp10], %[ftmp0] \n\t"
"punpcklhw %[ftmp1], %[ftmp9], %[ftmp10] \n\t"
"punpckhhw %[ftmp2], %[ftmp9], %[ftmp10] \n\t"
"punpcklhw %[ftmp14], %[ftmp1], %[ftmp2] \n\t"

MMI_LWC1(%[ftmp1], %[dest], 0x00)
PTR_ADDU "%[tmp0], %[dest], %[linesize] \n\t"
MMI_LWC1(%[ftmp2], %[tmp0], 0x00)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_LWC1(%[ftmp3], %[tmp0], 0x00)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_LWC1(%[ftmp4], %[tmp0], 0x00)
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp0] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp0] \n\t"
"punpcklbh %[ftmp4], %[ftmp4], %[ftmp0] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ftmp11] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ftmp12] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp13] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ftmp14] \n\t"
"packushb %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"packushb %[ftmp2], %[ftmp2], %[ftmp0] \n\t"
"packushb %[ftmp3], %[ftmp3], %[ftmp0] \n\t"
"packushb %[ftmp4], %[ftmp4], %[ftmp0] \n\t"

MMI_SWC1(%[ftmp1], %[dest], 0x00)
PTR_ADDU "%[tmp0], %[dest], %[linesize] \n\t"
MMI_SWC1(%[ftmp2], %[tmp0], 0x00)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_SWC1(%[ftmp3], %[tmp0], 0x00)
PTR_ADDU "%[tmp0], %[tmp0], %[linesize] \n\t"
MMI_SWC1(%[ftmp4], %[tmp0], 0x00)

: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[ftmp10]"=&amp;f"(ftmp[10]), [ftmp11]"=&amp;f"(ftmp[11]),
[ftmp12]"=&amp;f"(ftmp[12]), [ftmp13]"=&amp;f"(ftmp[13]),
[ftmp14]"=&amp;f"(ftmp[14]), [ftmp15]"=&amp;f"(ftmp[15]),
[tmp0]"=&amp;r"(tmp[0])
: [ff_pw_64]"f"(ff_pw_64_local),
[src]"r"(src), [dest]"r"(dest), [linesize]"r"(linesize)
:"memory"
);</asm>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ff_vc1_h_overlap_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rnd</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>d</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>d</name> <operator>+</operator> <name>b</name> <operator>-</operator> <name>c</name> <operator>+</operator> <literal type="number">4</literal> <operator>-</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>c</name> <operator>+</operator> <name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>d</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rnd</name> <operator>=</operator> <operator>!</operator><name>rnd</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vc1_h_s_overlap_mmi</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>right</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rnd1</name> <init>= <expr><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rnd2</name> <init>= <expr><literal type="number">7</literal> <operator>-</operator> <name>rnd1</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>left</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>left</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>right</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>d</name> <operator>+</operator> <name>b</name> <operator>-</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name>d1</name> <operator>+</operator> <name>rnd1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>left</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name>d2</name> <operator>+</operator> <name>rnd2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>d2</name> <operator>+</operator> <name>rnd1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>right</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>d1</name> <operator>+</operator> <name>rnd2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>+=</operator> <name>right_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> <operator>+=</operator> <name>left_stride</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rnd2</name> <operator>=</operator> <literal type="number">7</literal> <operator>-</operator> <name>rnd2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rnd1</name> <operator>=</operator> <literal type="number">7</literal> <operator>-</operator> <name>rnd1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ff_vc1_v_overlap_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rnd</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>-</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>src</name><index>[<expr><name>stride</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>d</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>d</name> <operator>+</operator> <name>b</name> <operator>-</operator> <name>c</name> <operator>+</operator> <literal type="number">4</literal> <operator>-</operator> <name>rnd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><operator>-</operator><name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>c</name> <operator>+</operator> <name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[<expr><name>stride</name></expr>]</index></name> <operator>=</operator> <name>d</name> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>rnd</name> <operator>=</operator> <operator>!</operator><name>rnd</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vc1_v_s_overlap_mmi</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>bottom</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rnd1</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"/><name>rnd2</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>bottom</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>bottom</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>d</name> <operator>+</operator> <name>b</name> <operator>-</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>top</name><index>[<expr><literal type="number">48</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name>d1</name> <operator>+</operator> <name>rnd1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>top</name><index>[<expr><literal type="number">56</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name>d2</name> <operator>+</operator> <name>rnd2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bottom</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>d2</name> <operator>+</operator> <name>rnd1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bottom</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>d1</name> <operator>+</operator> <name>rnd2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bottom</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>top</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>rnd2</name> <operator>=</operator> <literal type="number">7</literal> <operator>-</operator> <name>rnd2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rnd1</name> <operator>=</operator> <literal type="number">7</literal> <operator>-</operator> <name>rnd1</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>vc1_filter_line</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a0</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name><operator>)</operator> <operator>-</operator>
<literal type="number">5</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a0_sign</name> <init>= <expr><name>a0</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>a0</name> <operator>=</operator> <operator>(</operator><name>a0</name> <operator>^</operator> <name>a0_sign</name><operator>)</operator> <operator>-</operator> <name>a0_sign</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>a0</name> <operator>&lt;</operator> <name>pq</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a1</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name><operator>)</operator> <operator>-</operator>
<literal type="number">5</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a2</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[ <expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[ <expr><literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr>]</index></name><operator>)</operator> <operator>-</operator>
<literal type="number">5</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[ <expr><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[ <expr><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>a1</name> <operator>&lt;</operator> <name>a0</name> <operator>||</operator> <name>a2</name> <operator>&lt;</operator> <name>a0</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>clip</name> <init>= <expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>clip_sign</name> <init>= <expr><name>clip</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>clip</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>clip</name> <operator>^</operator> <name>clip_sign</name><operator>)</operator> <operator>-</operator> <name>clip_sign</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>clip</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a3</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><literal type="number">5</literal> <operator>*</operator> <operator>(</operator><name>a3</name> <operator>-</operator> <name>a0</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d_sign</name> <init>= <expr><operator>(</operator><name>d</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>^</operator> <name>d_sign</name><operator>)</operator> <operator>-</operator> <name>d_sign</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d_sign</name> <operator>^=</operator> <name>a0_sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d_sign</name> <operator>^</operator> <name>clip_sign</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>d</name> <operator>^</operator> <name>d_sign</name><operator>)</operator> <operator>-</operator> <name>d_sign</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>-</operator> <name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name><index>[ <expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>src</name><index>[ <expr><literal type="number">0</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>+</operator> <name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vc1_loop_filter</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filt3</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>filt3</name> <operator>=</operator> <call><name>vc1_filter_line</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>step</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>filt3</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vc1_filter_line</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <name>step</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vc1_filter_line</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>step</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vc1_filter_line</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>step</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>step</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vc1_v_loop_filter4_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vc1_loop_filter</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vc1_h_loop_filter4_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vc1_loop_filter</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vc1_v_loop_filter8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vc1_loop_filter</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vc1_h_loop_filter8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vc1_loop_filter</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vc1_v_loop_filter16_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vc1_loop_filter</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vc1_h_loop_filter16_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vc1_loop_filter</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_vc1_mspel_mc00_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_put_pixels8_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ff_put_vc1_mspel_mc00_16_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_put_pixels16_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ff_avg_vc1_mspel_mc00_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_avg_pixels8_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>ff_avg_vc1_mspel_mc00_16_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rnd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_avg_pixels16_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_PUT</name><parameter_list>(<parameter><type><name>S</name></type></parameter>, <parameter><type><name>D</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_AVG</name><parameter_list>(<parameter><type><name>S</name></type></parameter>, <parameter><type><name>D</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"ldc1 $f16, "#S" \n\t" "pavgb "#D", "#D", $f16 \n\t"</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORMALIZE_MMI</name><parameter_list>(<parameter><type><name>SHIFT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"paddh $f6, $f6, $f14 \n\t" "paddh $f8, $f8, $f14 \n\t" "psrah $f6, $f6, "SHIFT" \n\t" "psrah $f8, $f8, "SHIFT" \n\t"</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSFER_DO_PACK</name><parameter_list>(<parameter><type><name>OP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"packushb $f6, $f6, $f8 \n\t" OP((%[dst]), $f6) "sdc1 $f6, 0x00(%[dst]) \n\t"</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSFER_DONT_PACK</name><parameter_list>(<parameter><type><name>OP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OP(0(%[dst]), $f6) OP(8(%[dst]), $f8) "sdc1 $f6, 0x00(%[dst]) \n\t" "sdc1 $f8, 0x08(%[dst]) \n\t"</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_UNPACK</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"punpcklbh "reg", "reg", $f0 \n\t"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DONT_UNPACK</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_ROUNDER_MMI</name><parameter_list>(<parameter><type><name>ROUND</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"lwc1 $f14, "ROUND" \n\t" "punpcklhw $f14, $f14, $f14 \n\t" "punpcklwd $f14, $f14, $f14 \n\t"</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT2_LINE</name><parameter_list>(<parameter><type><name>OFF</name></type></parameter>, <parameter><type><name>R0</name></type></parameter>, <parameter><type><name>R1</name></type></parameter>, <parameter><type><name>R2</name></type></parameter>, <parameter><type><name>R3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"paddh "#R1", "#R1", "#R2" \n\t" PTR_ADDU "$9, %[src], %[stride1] \n\t" MMI_ULWC1(R0, $9, 0x00) "pmullh "#R1", "#R1", $f6 \n\t" "punpcklbh "#R0", "#R0", $f0 \n\t" PTR_ADDU "$9, %[src], %[stride] \n\t" MMI_ULWC1(R3, $9, 0x00) "psubh "#R1", "#R1", "#R0" \n\t" "punpcklbh "#R3", "#R3", $f0 \n\t" "paddh "#R1", "#R1", $f14 \n\t" "psubh "#R1", "#R1", "#R3" \n\t" "psrah "#R1", "#R1", %[shift] \n\t" MMI_SDC1(R1, %[dst], OFF) PTR_ADDU "%[src], %[src], %[stride] \n\t"</cpp:value></cpp:define>
















<function><type><specifier>static</specifier> <name>void</name></type> <name>vc1_put_ver_16b_shift2_mmi</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>mips_reg</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>rnd</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DECLARE_VAR_ADDRT</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(
"xor $f0, $f0, $f0 \n\t"
"li $8, 0x03 \n\t"
LOAD_ROUNDER_MMI("%[rnd]")
"ldc1 $f12, %[ff_pw_9] \n\t"
"1: \n\t"
MMI_ULWC1($f4, %[src], 0x00)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
MMI_ULWC1($f6, %[src], 0x00)
"punpcklbh $f4, $f4, $f0 \n\t"
"punpcklbh $f6, $f6, $f0 \n\t"
SHIFT2_LINE( 0, $f2, $f4, $f6, $f8)
SHIFT2_LINE( 24, $f4, $f6, $f8, $f2)
SHIFT2_LINE( 48, $f6, $f8, $f2, $f4)
SHIFT2_LINE( 72, $f8, $f2, $f4, $f6)
SHIFT2_LINE( 96, $f2, $f4, $f6, $f8)
SHIFT2_LINE(120, $f4, $f6, $f8, $f2)
SHIFT2_LINE(144, $f6, $f8, $f2, $f4)
SHIFT2_LINE(168, $f8, $f2, $f4, $f6)
PTR_SUBU "%[src], %[src], %[stride2] \n\t"
PTR_ADDIU "%[dst], %[dst], 0x08 \n\t"
"addiu $8, $8, -0x01 \n\t"
"bnez $8, 1b \n\t"
: RESTRICT_ASM_LOW32 RESTRICT_ASM_ADDRT
[src]"+r"(src), [dst]"+r"(dst)
: [stride]"r"(stride), [stride1]"r"(-2*stride),
[shift]"f"(shift), [rnd]"m"(rnd),
[stride2]"r"(9*stride-4), [ff_pw_9]"m"(ff_pw_9)
: "$8", "$9", "$f0", "$f2", "$f4", "$f6", "$f8", "$f10", "$f12",
"$f14", "$f16", "memory"
);</asm>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VC1_HOR_16B_SHIFT2</name><parameter_list>(<parameter><type><name>OP</name></type></parameter>, <parameter><type><name>OPNAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OPNAME ##vc1_hor_16b_shift2_mmi(uint8_t *dst, mips_reg stride, const int16_t *src, int rnd) { int h = 8; DECLARE_VAR_ALL64; DECLARE_VAR_ADDRT; src -= 1; rnd -= (-1+9+9-1)*1024; __asm__ volatile( LOAD_ROUNDER_MMI("%[rnd]") "ldc1 $f12, %[ff_pw_128] \n\t" "ldc1 $f10, %[ff_pw_9] \n\t" "1: \n\t" MMI_ULDC1($f2, %[src], 0x00) MMI_ULDC1($f4, %[src], 0x08) MMI_ULDC1($f6, %[src], 0x02) MMI_ULDC1($f8, %[src], 0x0a) MMI_ULDC1($f0, %[src], 0x06) "paddh $f2, $f2, $f0 \n\t" MMI_ULDC1($f0, %[src], 0x0e) "paddh $f4, $f4, $f0 \n\t" MMI_ULDC1($f0, %[src], 0x04) "paddh $f6, $f6, $f0 \n\t" MMI_ULDC1($f0, %[src], 0x0b) "paddh $f8, $f8, $f0 \n\t" "pmullh $f6, $f6, $f10 \n\t" "pmullh $f8, $f8, $f10 \n\t" "psubh $f6, $f6, $f2 \n\t" "psubh $f8, $f8, $f4 \n\t" "li $8, 0x07 \n\t" "mtc1 $8, $f16 \n\t" NORMALIZE_MMI("$f16") "paddh $f6, $f6, $f12 \n\t" "paddh $f8, $f8, $f12 \n\t" TRANSFER_DO_PACK(OP) "addiu %[h], %[h], -0x01 \n\t" PTR_ADDIU "%[src], %[src], 0x18 \n\t" PTR_ADDU "%[dst], %[dst], %[stride] \n\t" "bnez %[h], 1b \n\t" : RESTRICT_ASM_ALL64 RESTRICT_ASM_ADDRT [h]"+r"(h), [src]"+r"(src), [dst]"+r"(dst) : [stride]"r"(stride), [rnd]"m"(rnd), [ff_pw_9]"m"(ff_pw_9), [ff_pw_128]"m"(ff_pw_128) : "$8", "$f0", "$f2", "$f4", "$f6", "$f8", "$f10", "$f12", "$f14", "$f16", "memory" ); }</cpp:value></cpp:define>




















































<macro><name>VC1_HOR_16B_SHIFT2</name><argument_list>(<argument>OP_PUT</argument>, <argument>put_</argument>)</argument_list></macro>
<macro><name>VC1_HOR_16B_SHIFT2</name><argument_list>(<argument>OP_AVG</argument>, <argument>avg_</argument>)</argument_list></macro>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VC1_SHIFT2</name><parameter_list>(<parameter><type><name>OP</name></type></parameter>, <parameter><type><name>OPNAME</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>static void OPNAME ##vc1_shift2_mmi(uint8_t *dst, const uint8_t *src, mips_reg stride, int rnd, mips_reg offset) { DECLARE_VAR_LOW32; DECLARE_VAR_ADDRT; rnd = 8 - rnd; __asm__ volatile( "xor $f0, $f0, $f0 \n\t" "li $10, 0x08 \n\t" LOAD_ROUNDER_MMI("%[rnd]") "ldc1 $f12, %[ff_pw_9] \n\t" "1: \n\t" MMI_ULWC1($f6, %[src], 0x00) MMI_ULWC1($f8, %[src], 0x04) PTR_ADDU "$9, %[src], %[offset] \n\t" MMI_ULWC1($f2, $9, 0x00) MMI_ULWC1($f4, $9, 0x04) PTR_ADDU "%[src], %[src], %[offset] \n\t" "punpcklbh $f6, $f6, $f0 \n\t" "punpcklbh $f8, $f8, $f0 \n\t" "punpcklbh $f2, $f2, $f0 \n\t" "punpcklbh $f4, $f4, $f0 \n\t" "paddh $f6, $f6, $f2 \n\t" "paddh $f8, $f8, $f4 \n\t" PTR_ADDU "$9, %[src], %[offset_x2n] \n\t" MMI_ULWC1($f2, $9, 0x00) MMI_ULWC1($f4, $9, 0x04) "pmullh $f6, $f6, $f12 \n\t" "pmullh $f8, $f8, $f12 \n\t" "punpcklbh $f2, $f2, $f0 \n\t" "punpcklbh $f4, $f4, $f0 \n\t" "psubh $f6, $f6, $f2 \n\t" "psubh $f8, $f8, $f4 \n\t" PTR_ADDU "$9, %[src], %[offset] \n\t" MMI_ULWC1($f2, $9, 0x00) MMI_ULWC1($f4, $9, 0x04) "punpcklbh $f2, $f2, $f0 \n\t" "punpcklbh $f4, $f4, $f0 \n\t" "psubh $f6, $f6, $f2 \n\t" "psubh $f8, $f8, $f4 \n\t" "li $8, 0x04 \n\t" "mtc1 $8, $f16 \n\t" NORMALIZE_MMI("$f16") "packushb $f6, $f6, $f8 \n\t" OP((%[dst]), $f6) "sdc1 $f6, 0x00(%[dst]) \n\t" "addiu $10, $10, -0x01 \n\t" PTR_ADDU "%[src], %[src], %[stride1] \n\t" PTR_ADDU "%[dst], %[dst], %[stride] \n\t" "bnez $10, 1b \n\t" : RESTRICT_ASM_LOW32 RESTRICT_ASM_ADDRT [src]"+r"(src), [dst]"+r"(dst) : [offset]"r"(offset), [offset_x2n]"r"(-2*offset), [stride]"r"(stride), [rnd]"m"(rnd), [stride1]"r"(stride-offset), [ff_pw_9]"m"(ff_pw_9) : "$8", "$9", "$10", "$f0", "$f2", "$f4", "$f6", "$f8", "$f10", "$f12", "$f14", "$f16", "memory" ); }</cpp:value></cpp:define>
































































<macro><name>VC1_SHIFT2</name><argument_list>(<argument>OP_PUT</argument>, <argument>put_</argument>)</argument_list></macro>
<macro><name>VC1_SHIFT2</name><argument_list>(<argument>OP_AVG</argument>, <argument>avg_</argument>)</argument_list></macro>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSPEL_FILTER13_CORE</name><parameter_list>(<parameter><type><name>UNPACK</name></type></parameter>, <parameter><type><name>LOAD</name></type></parameter>, <parameter><type><name>M</name></type></parameter>, <parameter><type><name>A1</name></type></parameter>, <parameter><type><name>A2</name></type></parameter>, <parameter><type><name>A3</name></type></parameter>, <parameter><type><name>A4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PTR_ADDU "$9, %[src], "#A1" \n\t" LOAD($f2, $9, M*0) LOAD($f4, $9, M*4) UNPACK("$f2") UNPACK("$f4") "pmullh $f2, $f2, %[ff_pw_3] \n\t" "pmullh $f4, $f4, %[ff_pw_3] \n\t" PTR_ADDU "$9, %[src], "#A2" \n\t" LOAD($f6, $9, M*0) LOAD($f8, $9, M*4) UNPACK("$f6") UNPACK("$f8") "pmullh $f6, $f6, $f12 \n\t" "pmullh $f8, $f8, $f12 \n\t" "psubh $f6, $f6, $f2 \n\t" "psubh $f8, $f8, $f4 \n\t" PTR_ADDU "$9, %[src], "#A4" \n\t" LOAD($f2, $9, M*0) LOAD($f4, $9, M*4) UNPACK("$f2") UNPACK("$f4") "li $8, 0x02 \n\t" "mtc1 $8, $f16 \n\t" "psllh $f2, $f2, $f16 \n\t" "psllh $f4, $f4, $f16 \n\t" "psubh $f6, $f6, $f2 \n\t" "psubh $f8, $f8, $f4 \n\t" PTR_ADDU "$9, %[src], "#A3" \n\t" LOAD($f2, $9, M*0) LOAD($f4, $9, M*4) UNPACK("$f2") UNPACK("$f4") "pmullh $f2, $f2, $f10 \n\t" "pmullh $f4, $f4, $f10 \n\t" "paddh $f6, $f6, $f2 \n\t" "paddh $f8, $f8, $f4 \n\t"</cpp:value></cpp:define> 













































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSPEL_FILTER13_VER_16B</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>A1</name></type></parameter>, <parameter><type><name>A2</name></type></parameter>, <parameter><type><name>A3</name></type></parameter>, <parameter><type><name>A4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void vc1_put_ver_16b_ ##NAME ##_mmi(int16_t *dst, const uint8_t *src, mips_reg src_stride, int rnd, int64_t shift) { int h = 8; DECLARE_VAR_LOW32; DECLARE_VAR_ADDRT; src -= src_stride; __asm__ volatile( "xor $f0, $f0, $f0 \n\t" LOAD_ROUNDER_MMI("%[rnd]") "ldc1 $f10, %[ff_pw_53] \n\t" "ldc1 $f12, %[ff_pw_18] \n\t" ".p2align 3 \n\t" "1: \n\t" MSPEL_FILTER13_CORE(DO_UNPACK, MMI_ULWC1, 1, A1, A2, A3, A4) NORMALIZE_MMI("%[shift]") TRANSFER_DONT_PACK(OP_PUT) PTR_ADDU "$9, %[src], "#A1" \n\t" MMI_ULWC1($f2, $9, 0x08) DO_UNPACK("$f2") "mov.d $f6, $f2 \n\t" "paddh $f2, $f2, $f2 \n\t" "paddh $f2, $f2, $f6 \n\t" PTR_ADDU "$9, %[src], "#A2" \n\t" MMI_ULWC1($f6, $9, 0x08) DO_UNPACK("$f6") "pmullh $f6, $f6, $f12 \n\t" "psubh $f6, $f6, $f2 \n\t" PTR_ADDU "$9, %[src], "#A3" \n\t" MMI_ULWC1($f2, $9, 0x08) DO_UNPACK("$f2") "pmullh $f2, $f2, $f10 \n\t" "paddh $f6, $f6, $f2 \n\t" PTR_ADDU "$9, %[src], "#A4" \n\t" MMI_ULWC1($f2, $9, 0x08) DO_UNPACK("$f2") "li $8, 0x02 \n\t" "mtc1 $8, $f16 \n\t" "psllh $f2, $f2, $f16 \n\t" "psubh $f6, $f6, $f2 \n\t" "paddh $f6, $f6, $f14 \n\t" "li $8, 0x06 \n\t" "mtc1 $8, $f16 \n\t" "psrah $f6, $f6, $f16 \n\t" "sdc1 $f6, 0x10(%[dst]) \n\t" "addiu %[h], %[h], -0x01 \n\t" PTR_ADDU "%[src], %[src], %[stride_x1] \n\t" PTR_ADDIU "%[dst], %[dst], 0x18 \n\t" "bnez %[h], 1b \n\t" : RESTRICT_ASM_LOW32 RESTRICT_ASM_ADDRT [h]"+r"(h), [src]"+r"(src), [dst]"+r"(dst) : [stride_x1]"r"(src_stride), [stride_x2]"r"(2*src_stride), [stride_x3]"r"(3*src_stride), [rnd]"m"(rnd), [shift]"f"(shift), [ff_pw_53]"m"(ff_pw_53), [ff_pw_18]"m"(ff_pw_18), [ff_pw_3]"f"(ff_pw_3) : "$8", "$9", "$f0", "$f2", "$f4", "$f6", "$f8", "$f10", "$f12", "$f14", "$f16", "memory" ); }</cpp:value></cpp:define>










































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSPEL_FILTER13_HOR_16B</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>A1</name></type></parameter>, <parameter><type><name>A2</name></type></parameter>, <parameter><type><name>A3</name></type></parameter>, <parameter><type><name>A4</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>, <parameter><type><name>OPNAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OPNAME ##vc1_hor_16b_ ##NAME ##_mmi(uint8_t *dst, mips_reg stride, const int16_t *src, int rnd) { int h = 8; DECLARE_VAR_ALL64; DECLARE_VAR_ADDRT; src -= 1; rnd -= (-4+58+13-3)*256; __asm__ volatile( "xor $f0, $f0, $f0 \n\t" LOAD_ROUNDER_MMI("%[rnd]") "ldc1 $f10, %[ff_pw_53] \n\t" "ldc1 $f12, %[ff_pw_18] \n\t" ".p2align 3 \n\t" "1: \n\t" MSPEL_FILTER13_CORE(DONT_UNPACK, MMI_ULDC1, 2, A1, A2, A3, A4) "li $8, 0x07 \n\t" "mtc1 $8, $f16 \n\t" NORMALIZE_MMI("$f16") "paddh $f6, $f6, %[ff_pw_128] \n\t" "paddh $f8, $f8, %[ff_pw_128] \n\t" TRANSFER_DO_PACK(OP) "addiu %[h], %[h], -0x01 \n\t" PTR_ADDU "%[src], %[src], 0x18 \n\t" PTR_ADDU "%[dst], %[dst], %[stride] \n\t" "bnez %[h], 1b \n\t" : RESTRICT_ASM_ALL64 RESTRICT_ASM_ADDRT [h]"+r"(h), [src]"+r"(src), [dst]"+r"(dst) : [stride]"r"(stride), [rnd]"m"(rnd), [ff_pw_53]"m"(ff_pw_53), [ff_pw_18]"m"(ff_pw_18), [ff_pw_3]"f"(ff_pw_3), [ff_pw_128]"f"(ff_pw_128) : "$8", "$9", "$f0", "$f2", "$f4", "$f6", "$f8", "$f10", "$f12", "$f14", "$f16", "memory" ); }</cpp:value></cpp:define>

















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSPEL_FILTER13_8B</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>A1</name></type></parameter>, <parameter><type><name>A2</name></type></parameter>, <parameter><type><name>A3</name></type></parameter>, <parameter><type><name>A4</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>, <parameter><type><name>OPNAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OPNAME ##vc1_##NAME ##_mmi(uint8_t *dst, const uint8_t *src, mips_reg stride, int rnd, mips_reg offset) { int h = 8; DECLARE_VAR_LOW32; DECLARE_VAR_ADDRT; src -= offset; rnd = 32-rnd; __asm__ volatile ( "xor $f0, $f0, $f0 \n\t" LOAD_ROUNDER_MMI("%[rnd]") "ldc1 $f10, %[ff_pw_53] \n\t" "ldc1 $f12, %[ff_pw_18] \n\t" ".p2align 3 \n\t" "1: \n\t" MSPEL_FILTER13_CORE(DO_UNPACK, MMI_ULWC1, 1, A1, A2, A3, A4) "li $8, 0x06 \n\t" "mtc1 $8, $f16 \n\t" NORMALIZE_MMI("$f16") TRANSFER_DO_PACK(OP) "addiu %[h], %[h], -0x01 \n\t" PTR_ADDU "%[src], %[src], %[stride] \n\t" PTR_ADDU "%[dst], %[dst], %[stride] \n\t" "bnez %[h], 1b \n\t" : RESTRICT_ASM_LOW32 RESTRICT_ASM_ADDRT [h]"+r"(h), [src]"+r"(src), [dst]"+r"(dst) : [offset_x1]"r"(offset), [offset_x2]"r"(2*offset), [offset_x3]"r"(3*offset), [stride]"r"(stride), [rnd]"m"(rnd), [ff_pw_53]"m"(ff_pw_53), [ff_pw_18]"m"(ff_pw_18), [ff_pw_3]"f"(ff_pw_3) : "$8", "$9", "$f0", "$f2", "$f4", "$f6", "$f8", "$f10", "$f12", "$f14", "$f16", "memory" ); }</cpp:value></cpp:define>










































<macro><name>MSPEL_FILTER13_8B</name><argument_list>(<argument>shift1</argument>, <argument>%[offset_x3]</argument>, <argument>%[offset_x2]</argument>, <argument>%[offset_x1]</argument>, <argument>$0</argument>, <argument>OP_PUT</argument>, <argument>put_</argument>)</argument_list></macro>
<macro><name>MSPEL_FILTER13_8B</name><argument_list>(<argument>shift1</argument>, <argument>%[offset_x3]</argument>, <argument>%[offset_x2]</argument>, <argument>%[offset_x1]</argument>, <argument>$0</argument>, <argument>OP_AVG</argument>, <argument>avg_</argument>)</argument_list></macro>
<macro><name>MSPEL_FILTER13_VER_16B</name><argument_list>(<argument>shift1</argument>, <argument>%[stride_x3]</argument>, <argument>%[stride_x2]</argument>, <argument>%[stride_x1]</argument>, <argument>$0</argument>)</argument_list></macro>
<macro><name>MSPEL_FILTER13_HOR_16B</name><argument_list>(<argument>shift1</argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>OP_PUT</argument>, <argument>put_</argument>)</argument_list></macro>
<macro><name>MSPEL_FILTER13_HOR_16B</name><argument_list>(<argument>shift1</argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>OP_AVG</argument>, <argument>avg_</argument>)</argument_list></macro>


<macro><name>MSPEL_FILTER13_8B</name><argument_list>(<argument>shift3</argument>, <argument>$0</argument>, <argument>%[offset_x1]</argument>, <argument>%[offset_x2]</argument>, <argument>%[offset_x3]</argument>, <argument>OP_PUT</argument>, <argument>put_</argument>)</argument_list></macro>
<macro><name>MSPEL_FILTER13_8B</name><argument_list>(<argument>shift3</argument>, <argument>$0</argument>, <argument>%[offset_x1]</argument>, <argument>%[offset_x2]</argument>, <argument>%[offset_x3]</argument>, <argument>OP_AVG</argument>, <argument>avg_</argument>)</argument_list></macro>
<macro><name>MSPEL_FILTER13_VER_16B</name><argument_list>(<argument>shift3</argument>, <argument>$0</argument>, <argument>%[stride_x1]</argument>, <argument>%[stride_x2]</argument>, <argument>%[stride_x3]</argument>)</argument_list></macro>
<macro><name>MSPEL_FILTER13_HOR_16B</name><argument_list>(<argument>shift3</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument>OP_PUT</argument>, <argument>put_</argument>)</argument_list></macro>
<macro><name>MSPEL_FILTER13_HOR_16B</name><argument_list>(<argument>shift3</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument>OP_AVG</argument>, <argument>avg_</argument>)</argument_list></macro>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>vc1_mspel_mc_filter_ver_16bits</name>)
<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>mips_reg</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rnd</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>shift</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>vc1_mspel_mc_filter_hor_16bits</name>)
<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>mips_reg</name></type> <name>dst_stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rnd</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>vc1_mspel_mc_filter_8bits</name>)
<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>mips_reg</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rnd</name></decl></parameter>,
<parameter><decl><type><name>mips_reg</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl></typedef>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VC1_MSPEL_MC</name><parameter_list>(<parameter><type><name>OP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OP ##vc1_mspel_mc(uint8_t *dst, const uint8_t *src, int stride,int hmode, int vmode, int rnd) { static const vc1_mspel_mc_filter_ver_16bits vc1_put_shift_ver_16bits[] ={ NULL, vc1_put_ver_16b_shift1_mmi, vc1_put_ver_16b_shift2_mmi, vc1_put_ver_16b_shift3_mmi }; static const vc1_mspel_mc_filter_hor_16bits vc1_put_shift_hor_16bits[] ={ NULL, OP ##vc1_hor_16b_shift1_mmi, OP ##vc1_hor_16b_shift2_mmi, OP ##vc1_hor_16b_shift3_mmi }; static const vc1_mspel_mc_filter_8bits vc1_put_shift_8bits[] = { NULL, OP ##vc1_shift1_mmi, OP ##vc1_shift2_mmi, OP ##vc1_shift3_mmi }; if (vmode) { if (hmode) { static const int shift_value[] = { 0, 5, 1, 5 }; int shift = (shift_value[hmode]+shift_value[vmode])&gt;&gt;1; int r; LOCAL_ALIGNED(16, int16_t, tmp, [12*8]); r = (1&lt;&lt;(shift-1)) + rnd-1; vc1_put_shift_ver_16bits[vmode](tmp, src-1, stride, r, shift); vc1_put_shift_hor_16bits[hmode](dst, stride, tmp+1, 64-rnd); return; } else { vc1_put_shift_8bits[vmode](dst, src, stride, 1-rnd, stride); return; } } vc1_put_shift_8bits[hmode](dst, src, stride, rnd, 1); } static void OP ##vc1_mspel_mc_16(uint8_t *dst, const uint8_t *src, int stride, int hmode, int vmode, int rnd){ OP ##vc1_mspel_mc(dst + 0, src + 0, stride, hmode, vmode, rnd); OP ##vc1_mspel_mc(dst + 8, src + 8, stride, hmode, vmode, rnd); dst += 8*stride; src += 8*stride; OP ##vc1_mspel_mc(dst + 0, src + 0, stride, hmode, vmode, rnd); OP ##vc1_mspel_mc(dst + 8, src + 8, stride, hmode, vmode, rnd); }</cpp:value></cpp:define>
















































<macro><name>VC1_MSPEL_MC</name><argument_list>(<argument>put_</argument>)</argument_list></macro>
<macro><name>VC1_MSPEL_MC</name><argument_list>(<argument>avg_</argument>)</argument_list></macro>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_FUNCTION</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_put_vc1_mspel_mc ##a ##b ##_mmi(uint8_t *dst, const uint8_t *src, ptrdiff_t stride, int rnd) { put_vc1_mspel_mc(dst, src, stride, a, b, rnd); } void ff_avg_vc1_mspel_mc ##a ##b ##_mmi(uint8_t *dst, const uint8_t *src, ptrdiff_t stride, int rnd) { avg_vc1_mspel_mc(dst, src, stride, a, b, rnd); } void ff_put_vc1_mspel_mc ##a ##b ##_16_mmi(uint8_t *dst, const uint8_t *src, ptrdiff_t stride, int rnd) { put_vc1_mspel_mc_16(dst, src, stride, a, b, rnd); } void ff_avg_vc1_mspel_mc ##a ##b ##_16_mmi(uint8_t *dst, const uint8_t *src, ptrdiff_t stride, int rnd) { avg_vc1_mspel_mc_16(dst, src, stride, a, b, rnd); }</cpp:value></cpp:define>





























<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>
<macro><name>DECLARE_FUNCTION</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_MC_8_MMI</name></cpp:macro> <cpp:value>"punpckhbh %[ftmp5], %[ftmp1], %[ftmp0] \n\t" "punpcklbh %[ftmp1], %[ftmp1], %[ftmp0] \n\t" "punpckhbh %[ftmp6], %[ftmp2], %[ftmp0] \n\t" "punpcklbh %[ftmp2], %[ftmp2], %[ftmp0] \n\t" "punpckhbh %[ftmp7], %[ftmp3], %[ftmp0] \n\t" "punpcklbh %[ftmp3], %[ftmp3], %[ftmp0] \n\t" "punpckhbh %[ftmp8], %[ftmp4], %[ftmp0] \n\t" "punpcklbh %[ftmp4], %[ftmp4], %[ftmp0] \n\t" "pmullh %[ftmp1], %[ftmp1], %[A] \n\t" "pmullh %[ftmp5], %[ftmp5], %[A] \n\t" "pmullh %[ftmp2], %[ftmp2], %[B] \n\t" "pmullh %[ftmp6], %[ftmp6], %[B] \n\t" "pmullh %[ftmp3], %[ftmp3], %[C] \n\t" "pmullh %[ftmp7], %[ftmp7], %[C] \n\t" "pmullh %[ftmp4], %[ftmp4], %[D] \n\t" "pmullh %[ftmp8], %[ftmp8], %[D] \n\t" "paddh %[ftmp1], %[ftmp1], %[ftmp2] \n\t" "paddh %[ftmp3], %[ftmp3], %[ftmp4] \n\t" "paddh %[ftmp1], %[ftmp1], %[ftmp3] \n\t" "paddh %[ftmp1], %[ftmp1], %[ff_pw_28] \n\t" "paddh %[ftmp5], %[ftmp5], %[ftmp6] \n\t" "paddh %[ftmp7], %[ftmp7], %[ftmp8] \n\t" "paddh %[ftmp5], %[ftmp5], %[ftmp7] \n\t" "paddh %[ftmp5], %[ftmp5], %[ff_pw_28] \n\t" "psrlh %[ftmp1], %[ftmp1], %[ftmp9] \n\t" "psrlh %[ftmp5], %[ftmp5], %[ftmp9] \n\t" "packushb %[ftmp1], %[ftmp1], %[ftmp5] \n\t"</cpp:value></cpp:define>

































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_MC_4_MMI</name></cpp:macro> <cpp:value>"punpcklbh %[ftmp1], %[ftmp1], %[ftmp0] \n\t" "punpcklbh %[ftmp2], %[ftmp2], %[ftmp0] \n\t" "punpcklbh %[ftmp3], %[ftmp3], %[ftmp0] \n\t" "punpcklbh %[ftmp4], %[ftmp4], %[ftmp0] \n\t" "pmullh %[ftmp1], %[ftmp1], %[A] \n\t" "pmullh %[ftmp2], %[ftmp2], %[B] \n\t" "pmullh %[ftmp3], %[ftmp3], %[C] \n\t" "pmullh %[ftmp4], %[ftmp4], %[D] \n\t" "paddh %[ftmp1], %[ftmp1], %[ftmp2] \n\t" "paddh %[ftmp3], %[ftmp3], %[ftmp4] \n\t" "paddh %[ftmp1], %[ftmp1], %[ftmp3] \n\t" "paddh %[ftmp1], %[ftmp1], %[ff_pw_28] \n\t" "psrlh %[ftmp1], %[ftmp1], %[ftmp5] \n\t" "packushb %[ftmp1], %[ftmp1], %[ftmp0] \n\t"</cpp:value></cpp:define>



















<function><type><name>void</name></type> <name>ff_put_no_rnd_vc1_chroma_mc8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter> ,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter> ,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>A</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>B</name> <init>= <expr><operator>(</operator><name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>C</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>D</name> <init>= <expr><operator>(</operator><name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DECLARE_VAR_ADDRT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(
"li %[tmp0], 0x06 \n\t"
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"mtc1 %[tmp0], %[ftmp9] \n\t"
"pshufh %[A], %[A], %[ftmp0] \n\t"
"pshufh %[B], %[B], %[ftmp0] \n\t"
"pshufh %[C], %[C], %[ftmp0] \n\t"
"pshufh %[D], %[D], %[ftmp0] \n\t"

"1: \n\t"
MMI_ULDC1(%[ftmp1], %[src], 0x00)
MMI_ULDC1(%[ftmp2], %[src], 0x01)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
MMI_ULDC1(%[ftmp3], %[src], 0x00)
MMI_ULDC1(%[ftmp4], %[src], 0x01)

CHROMA_MC_8_MMI

MMI_SDC1(%[ftmp1], %[dst], 0x00)
"addiu %[h], %[h], -0x01 \n\t"
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
"bnez %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
RESTRICT_ASM_ALL64
RESTRICT_ASM_ADDRT
[tmp0]"=&amp;r"(tmp[0]),
[src]"+&amp;r"(src), [dst]"+&amp;r"(dst),
[h]"+&amp;r"(h)
: [stride]"r"((mips_reg)stride),
[A]"f"(A), [B]"f"(B),
[C]"f"(C), [D]"f"(D),
[ff_pw_28]"f"(ff_pw_28)
: "memory"
);</asm>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_no_rnd_vc1_chroma_mc4_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter> ,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter> ,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>A</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>B</name> <init>= <expr><operator>(</operator><name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>C</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>D</name> <init>= <expr><operator>(</operator><name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DECLARE_VAR_ADDRT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(
"li %[tmp0], 0x06 \n\t"
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"mtc1 %[tmp0], %[ftmp5] \n\t"
"pshufh %[A], %[A], %[ftmp0] \n\t"
"pshufh %[B], %[B], %[ftmp0] \n\t"
"pshufh %[C], %[C], %[ftmp0] \n\t"
"pshufh %[D], %[D], %[ftmp0] \n\t"

"1: \n\t"
MMI_ULWC1(%[ftmp1], %[src], 0x00)
MMI_ULWC1(%[ftmp2], %[src], 0x01)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
MMI_ULWC1(%[ftmp3], %[src], 0x00)
MMI_ULWC1(%[ftmp4], %[src], 0x01)

CHROMA_MC_4_MMI

MMI_SWC1(%[ftmp1], %[dst], 0x00)
"addiu %[h], %[h], -0x01 \n\t"
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
"bnez %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[tmp0]"=&amp;r"(tmp[0]),
RESTRICT_ASM_LOW32
RESTRICT_ASM_ADDRT
[src]"+&amp;r"(src), [dst]"+&amp;r"(dst),
[h]"+&amp;r"(h)
: [stride]"r"((mips_reg)stride),
[A]"f"(A), [B]"f"(B),
[C]"f"(C), [D]"f"(D),
[ff_pw_28]"f"(ff_pw_28)
: "memory"
);</asm>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_no_rnd_vc1_chroma_mc8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter> ,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter> ,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>A</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>B</name> <init>= <expr><operator>(</operator><name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>C</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>D</name> <init>= <expr><operator>(</operator><name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DECLARE_VAR_ADDRT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(
"li %[tmp0], 0x06 \n\t"
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"mtc1 %[tmp0], %[ftmp9] \n\t"
"pshufh %[A], %[A], %[ftmp0] \n\t"
"pshufh %[B], %[B], %[ftmp0] \n\t"
"pshufh %[C], %[C], %[ftmp0] \n\t"
"pshufh %[D], %[D], %[ftmp0] \n\t"

"1: \n\t"
MMI_ULDC1(%[ftmp1], %[src], 0x00)
MMI_ULDC1(%[ftmp2], %[src], 0x01)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
MMI_ULDC1(%[ftmp3], %[src], 0x00)
MMI_ULDC1(%[ftmp4], %[src], 0x01)

CHROMA_MC_8_MMI

MMI_LDC1(%[ftmp2], %[dst], 0x00)
"pavgb %[ftmp1], %[ftmp1], %[ftmp2] \n\t"

MMI_SDC1(%[ftmp1], %[dst], 0x00)
"addiu %[h], %[h], -0x01 \n\t"
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
"bnez %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[tmp0]"=&amp;r"(tmp[0]),
RESTRICT_ASM_ALL64
RESTRICT_ASM_ADDRT
[src]"+&amp;r"(src), [dst]"+&amp;r"(dst),
[h]"+&amp;r"(h)
: [stride]"r"((mips_reg)stride),
[A]"f"(A), [B]"f"(B),
[C]"f"(C), [D]"f"(D),
[ff_pw_28]"f"(ff_pw_28)
: "memory"
);</asm>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_no_rnd_vc1_chroma_mc4_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter> ,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter> ,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>A</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>B</name> <init>= <expr><operator>(</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>C</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>D</name> <init>= <expr><operator>(</operator> <name>x</name><operator>)</operator> <operator>*</operator> <operator>(</operator> <name>y</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DECLARE_VAR_ADDRT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(
"li %[tmp0], 0x06 \n\t"
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"mtc1 %[tmp0], %[ftmp5] \n\t"
"pshufh %[A], %[A], %[ftmp0] \n\t"
"pshufh %[B], %[B], %[ftmp0] \n\t"
"pshufh %[C], %[C], %[ftmp0] \n\t"
"pshufh %[D], %[D], %[ftmp0] \n\t"

"1: \n\t"
MMI_ULWC1(%[ftmp1], %[src], 0x00)
MMI_ULWC1(%[ftmp2], %[src], 0x01)
PTR_ADDU "%[src], %[src], %[stride] \n\t"
MMI_ULWC1(%[ftmp3], %[src], 0x00)
MMI_ULWC1(%[ftmp4], %[src], 0x01)

CHROMA_MC_4_MMI

MMI_LWC1(%[ftmp2], %[dst], 0x00)
"pavgb %[ftmp1], %[ftmp1], %[ftmp2] \n\t"

MMI_SWC1(%[ftmp1], %[dst], 0x00)
"addiu %[h], %[h], -0x01 \n\t"
PTR_ADDU "%[dst], %[dst], %[stride] \n\t"
"bnez %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[tmp0]"=&amp;r"(tmp[0]),
RESTRICT_ASM_LOW32
RESTRICT_ASM_ADDRT
[src]"+&amp;r"(src), [dst]"+&amp;r"(dst),
[h]"+&amp;r"(h)
: [stride]"r"((mips_reg)stride),
[A]"f"(A), [B]"f"(B),
[C]"f"(C), [D]"f"(D),
[ff_pw_28]"f"(ff_pw_28)
: "memory"
);</asm>
</block_content>}</block></function>
</unit>
