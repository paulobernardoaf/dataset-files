<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mips\h264pred_init_mips.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dsp_mips.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264pred_mips.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MSA</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>h264_pred_init_msa</name><parameter_list>(<parameter><decl><type><name>H264PredContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codec_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>bit_depth</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_format_idc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">8</literal> <operator>==</operator> <name>bit_depth</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>VERT_PRED8x8</name></expr>]</index></name> <operator>=</operator> <name>ff_h264_intra_pred_vert_8x8_msa</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>HOR_PRED8x8</name></expr>]</index></name> <operator>=</operator> <name>ff_h264_intra_pred_horiz_8x8_msa</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>codec_id</name> <operator>!=</operator> <name>AV_CODEC_ID_VP7</name> <operator>&amp;&amp;</operator> <name>codec_id</name> <operator>!=</operator> <name>AV_CODEC_ID_VP8</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>PLANE_PRED8x8</name></expr>]</index></name> <operator>=</operator> <name>ff_h264_intra_predict_plane_8x8_msa</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>codec_id</name> <operator>!=</operator> <name>AV_CODEC_ID_RV40</name> <operator>&amp;&amp;</operator> <name>codec_id</name> <operator>!=</operator> <name>AV_CODEC_ID_VP7</name>
<operator>&amp;&amp;</operator> <name>codec_id</name> <operator>!=</operator> <name>AV_CODEC_ID_VP8</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>DC_PRED8x8</name></expr>]</index></name> <operator>=</operator> <name>ff_h264_intra_predict_dc_4blk_8x8_msa</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>LEFT_DC_PRED8x8</name></expr>]</index></name> <operator>=</operator>
<name>ff_h264_intra_predict_hor_dc_8x8_msa</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>TOP_DC_PRED8x8</name></expr>]</index></name> <operator>=</operator>
<name>ff_h264_intra_predict_vert_dc_8x8_msa</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>ALZHEIMER_DC_L0T_PRED8x8</name></expr>]</index></name> <operator>=</operator>
<name>ff_h264_intra_predict_mad_cow_dc_l0t_8x8_msa</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>ALZHEIMER_DC_0LT_PRED8x8</name></expr>]</index></name> <operator>=</operator>
<name>ff_h264_intra_predict_mad_cow_dc_0lt_8x8_msa</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>ALZHEIMER_DC_L00_PRED8x8</name></expr>]</index></name> <operator>=</operator>
<name>ff_h264_intra_predict_mad_cow_dc_l00_8x8_msa</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>ALZHEIMER_DC_0L0_PRED8x8</name></expr>]</index></name> <operator>=</operator>
<name>ff_h264_intra_predict_mad_cow_dc_0l0_8x8_msa</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_VP7</name> <operator>||</operator> <name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_VP8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>ff_vp8_pred8x8_127_dc_8_msa</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>ff_vp8_pred8x8_129_dc_8_msa</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>DC_128_PRED8x8</name></expr>]</index></name> <operator>=</operator> <name>ff_h264_intra_pred_dc_128_8x8_msa</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><name>DC_PRED8x8</name></expr>]</index></name> <operator>=</operator> <name>ff_h264_intra_pred_dc_16x16_msa</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><name>VERT_PRED8x8</name></expr>]</index></name> <operator>=</operator> <name>ff_h264_intra_pred_vert_16x16_msa</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><name>HOR_PRED8x8</name></expr>]</index></name> <operator>=</operator> <name>ff_h264_intra_pred_horiz_16x16_msa</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>codec_id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_SVQ3</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_RV40</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_VP7</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_VP8</name></expr>:</case>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>ff_vp8_pred16x16_127_dc_8_msa</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>ff_vp8_pred16x16_129_dc_8_msa</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><name>PLANE_PRED8x8</name></expr>]</index></name> <operator>=</operator>
<name>ff_h264_intra_predict_plane_16x16_msa</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><name>LEFT_DC_PRED8x8</name></expr>]</index></name> <operator>=</operator> <name>ff_h264_intra_pred_dc_left_16x16_msa</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><name>TOP_DC_PRED8x8</name></expr>]</index></name> <operator>=</operator> <name>ff_h264_intra_pred_dc_top_16x16_msa</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><name>DC_128_PRED8x8</name></expr>]</index></name> <operator>=</operator> <name>ff_h264_intra_pred_dc_128_16x16_msa</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMI</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>h264_pred_init_mmi</name><parameter_list>(<parameter><decl><type><name>H264PredContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codec_id</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>bit_depth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_format_idc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bit_depth</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name> <index>[<expr><name>VERT_PRED8x8</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred8x8_vertical_8_mmi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name> <index>[<expr><name>HOR_PRED8x8</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred8x8_horizontal_8_mmi</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name> <index>[<expr><name>VERT_PRED8x8</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred8x16_vertical_8_mmi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name> <index>[<expr><name>HOR_PRED8x8</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred8x16_horizontal_8_mmi</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><name>DC_PRED8x8</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred16x16_dc_8_mmi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><name>VERT_PRED8x8</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred16x16_vertical_8_mmi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><name>HOR_PRED8x8</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred16x16_horizontal_8_mmi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8l</name> <index>[<expr><name>TOP_DC_PRED</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred8x8l_top_dc_8_mmi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8l</name> <index>[<expr><name>DC_PRED</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred8x8l_dc_8_mmi</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_MIPS64</name></expr></cpp:if>
<switch>switch <condition>(<expr><name>codec_id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AV_CODEC_ID_SVQ3</name></expr>:</case>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><name>PLANE_PRED8x8</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred16x16_plane_svq3_8_mmi</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_RV40</name></expr>:</case>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><name>PLANE_PRED8x8</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred16x16_plane_rv40_8_mmi</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AV_CODEC_ID_VP7</name></expr>:</case>
<case>case <expr><name>AV_CODEC_ID_VP8</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred16x16</name><index>[<expr><name>PLANE_PRED8x8</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred16x16_plane_h264_8_mmi</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_SVQ3</name> <operator>||</operator> <name>codec_id</name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>chroma_format_idc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>TOP_DC_PRED8x8</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred8x8_top_dc_8_mmi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred8x8</name><index>[<expr><name>DC_PRED8x8</name></expr> ]</index></name> <operator>=</operator> <name>ff_pred8x8_dc_8_mmi</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_h264_pred_init_mips</name><parameter_list>(<parameter><decl><type><name>H264PredContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codec_id</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>bit_depth</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_format_idc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMI</name></expr></cpp:if>
<expr_stmt><expr><call><name>h264_pred_init_mmi</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>codec_id</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>, <argument><expr><name>chroma_format_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MSA</name></expr></cpp:if>
<expr_stmt><expr><call><name>h264_pred_init_msa</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>codec_id</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>, <argument><expr><name>chroma_format_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>
</unit>
