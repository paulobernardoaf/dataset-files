<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mips\xvid_idct_mmi.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp_mips.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xvididct_mips.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITS_INV_ACC</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT_INV_ROW</name></cpp:macro> <cpp:value>(16 - BITS_INV_ACC)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT_INV_COL</name></cpp:macro> <cpp:value>(1 + BITS_INV_ACC)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RND_INV_ROW</name></cpp:macro> <cpp:value>(1024 * (6 - BITS_INV_ACC))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RND_INV_COL</name></cpp:macro> <cpp:value>(16 * (BITS_INV_ACC - 3))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RND_INV_CORR</name></cpp:macro> <cpp:value>(RND_INV_COL - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITS_FRW_ACC</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT_FRW_COL</name></cpp:macro> <cpp:value>BITS_FRW_ACC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT_FRW_ROW</name></cpp:macro> <cpp:value>(BITS_FRW_ACC + 17)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RND_FRW_ROW</name></cpp:macro> <cpp:value>(262144*(BITS_FRW_ACC - 1))</cpp:value></cpp:define>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></expr></argument>, <argument><expr><name>tg_1_16</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">4</literal></expr>]</index> <operator>=</operator> <block>{
<expr><literal type="number">13036</literal></expr>, <expr><literal type="number">13036</literal></expr>, <expr><literal type="number">13036</literal></expr>, <expr><literal type="number">13036</literal></expr>, 
<expr><literal type="number">27146</literal></expr>, <expr><literal type="number">27146</literal></expr>, <expr><literal type="number">27146</literal></expr>, <expr><literal type="number">27146</literal></expr>, 
<expr><operator>-</operator><literal type="number">21746</literal></expr>,<expr><operator>-</operator><literal type="number">21746</literal></expr>,<expr><operator>-</operator><literal type="number">21746</literal></expr>,<expr><operator>-</operator><literal type="number">21746</literal></expr>, 
<expr><literal type="number">23170</literal></expr>, <expr><literal type="number">23170</literal></expr>, <expr><literal type="number">23170</literal></expr>, <expr><literal type="number">23170</literal></expr> 
}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></expr></argument>, <argument><expr><name>rounder_0</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">8</literal></expr>]</index> <operator>=</operator> <block>{
<expr><literal type="number">65536</literal></expr>,<expr><literal type="number">65536</literal></expr>,
<expr><literal type="number">3597</literal></expr>, <expr><literal type="number">3597</literal></expr>,
<expr><literal type="number">2260</literal></expr>, <expr><literal type="number">2260</literal></expr>,
<expr><literal type="number">1203</literal></expr>, <expr><literal type="number">1203</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><literal type="number">120</literal></expr>, <expr><literal type="number">120</literal></expr>,
<expr><literal type="number">512</literal></expr>, <expr><literal type="number">512</literal></expr>,
<expr><literal type="number">512</literal></expr>, <expr><literal type="number">512</literal></expr>
}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></expr></argument>, <argument><expr><name>tab_i_04_mmi</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">32</literal><operator>*</operator><literal type="number">4</literal></expr>]</index> <operator>=</operator> <block>{
<expr><literal type="number">16384</literal></expr>, <expr><literal type="number">21407</literal></expr>, <expr><literal type="number">16384</literal></expr>, <expr><literal type="number">8867</literal></expr>, 
<expr><literal type="number">16384</literal></expr>, <expr><literal type="number">8867</literal></expr>,<expr><operator>-</operator><literal type="number">16384</literal></expr>,<expr><operator>-</operator><literal type="number">21407</literal></expr>, 
<expr><literal type="number">16384</literal></expr>, <expr><operator>-</operator><literal type="number">8867</literal></expr>, <expr><literal type="number">16384</literal></expr>,<expr><operator>-</operator><literal type="number">21407</literal></expr>, 
<expr><operator>-</operator><literal type="number">16384</literal></expr>, <expr><literal type="number">21407</literal></expr>, <expr><literal type="number">16384</literal></expr>, <expr><operator>-</operator><literal type="number">8867</literal></expr>, 
<expr><literal type="number">22725</literal></expr>, <expr><literal type="number">19266</literal></expr>, <expr><literal type="number">19266</literal></expr>, <expr><operator>-</operator><literal type="number">4520</literal></expr>, 
<expr><literal type="number">12873</literal></expr>, <expr><literal type="number">4520</literal></expr>,<expr><operator>-</operator><literal type="number">22725</literal></expr>,<expr><operator>-</operator><literal type="number">12873</literal></expr>, 
<expr><literal type="number">12873</literal></expr>,<expr><operator>-</operator><literal type="number">22725</literal></expr>, <expr><literal type="number">4520</literal></expr>,<expr><operator>-</operator><literal type="number">12873</literal></expr>, 
<expr><literal type="number">4520</literal></expr>, <expr><literal type="number">19266</literal></expr>, <expr><literal type="number">19266</literal></expr>,<expr><operator>-</operator><literal type="number">22725</literal></expr>, 

<expr><literal type="number">22725</literal></expr>, <expr><literal type="number">29692</literal></expr>, <expr><literal type="number">22725</literal></expr>, <expr><literal type="number">12299</literal></expr>, 
<expr><literal type="number">22725</literal></expr>, <expr><literal type="number">12299</literal></expr>,<expr><operator>-</operator><literal type="number">22725</literal></expr>,<expr><operator>-</operator><literal type="number">29692</literal></expr>, 
<expr><literal type="number">22725</literal></expr>,<expr><operator>-</operator><literal type="number">12299</literal></expr>, <expr><literal type="number">22725</literal></expr>,<expr><operator>-</operator><literal type="number">29692</literal></expr>, 
<expr><operator>-</operator><literal type="number">22725</literal></expr>, <expr><literal type="number">29692</literal></expr>, <expr><literal type="number">22725</literal></expr>,<expr><operator>-</operator><literal type="number">12299</literal></expr>, 
<expr><literal type="number">31521</literal></expr>, <expr><literal type="number">26722</literal></expr>, <expr><literal type="number">26722</literal></expr>, <expr><operator>-</operator><literal type="number">6270</literal></expr>, 
<expr><literal type="number">17855</literal></expr>, <expr><literal type="number">6270</literal></expr>,<expr><operator>-</operator><literal type="number">31521</literal></expr>,<expr><operator>-</operator><literal type="number">17855</literal></expr>, 
<expr><literal type="number">17855</literal></expr>,<expr><operator>-</operator><literal type="number">31521</literal></expr>, <expr><literal type="number">6270</literal></expr>,<expr><operator>-</operator><literal type="number">17855</literal></expr>, 
<expr><literal type="number">6270</literal></expr>, <expr><literal type="number">26722</literal></expr>, <expr><literal type="number">26722</literal></expr>,<expr><operator>-</operator><literal type="number">31521</literal></expr>, 

<expr><literal type="number">21407</literal></expr>, <expr><literal type="number">27969</literal></expr>, <expr><literal type="number">21407</literal></expr>, <expr><literal type="number">11585</literal></expr>, 
<expr><literal type="number">21407</literal></expr>, <expr><literal type="number">11585</literal></expr>,<expr><operator>-</operator><literal type="number">21407</literal></expr>,<expr><operator>-</operator><literal type="number">27969</literal></expr>, 
<expr><literal type="number">21407</literal></expr>,<expr><operator>-</operator><literal type="number">11585</literal></expr>, <expr><literal type="number">21407</literal></expr>,<expr><operator>-</operator><literal type="number">27969</literal></expr>, 
<expr><operator>-</operator><literal type="number">21407</literal></expr>, <expr><literal type="number">27969</literal></expr>, <expr><literal type="number">21407</literal></expr>,<expr><operator>-</operator><literal type="number">11585</literal></expr>, 
<expr><literal type="number">29692</literal></expr>, <expr><literal type="number">25172</literal></expr>, <expr><literal type="number">25172</literal></expr>, <expr><operator>-</operator><literal type="number">5906</literal></expr>, 
<expr><literal type="number">16819</literal></expr>, <expr><literal type="number">5906</literal></expr>,<expr><operator>-</operator><literal type="number">29692</literal></expr>,<expr><operator>-</operator><literal type="number">16819</literal></expr>, 
<expr><literal type="number">16819</literal></expr>,<expr><operator>-</operator><literal type="number">29692</literal></expr>, <expr><literal type="number">5906</literal></expr>,<expr><operator>-</operator><literal type="number">16819</literal></expr>, 
<expr><literal type="number">5906</literal></expr>, <expr><literal type="number">25172</literal></expr>, <expr><literal type="number">25172</literal></expr>,<expr><operator>-</operator><literal type="number">29692</literal></expr>, 

<expr><literal type="number">19266</literal></expr>, <expr><literal type="number">25172</literal></expr>, <expr><literal type="number">19266</literal></expr>, <expr><literal type="number">10426</literal></expr>, 
<expr><literal type="number">19266</literal></expr>, <expr><literal type="number">10426</literal></expr>,<expr><operator>-</operator><literal type="number">19266</literal></expr>,<expr><operator>-</operator><literal type="number">25172</literal></expr>, 
<expr><literal type="number">19266</literal></expr>,<expr><operator>-</operator><literal type="number">10426</literal></expr>, <expr><literal type="number">19266</literal></expr>,<expr><operator>-</operator><literal type="number">25172</literal></expr>, 
<expr><operator>-</operator><literal type="number">19266</literal></expr>, <expr><literal type="number">25172</literal></expr>, <expr><literal type="number">19266</literal></expr>,<expr><operator>-</operator><literal type="number">10426</literal></expr>, 
<expr><literal type="number">26722</literal></expr>, <expr><literal type="number">22654</literal></expr>, <expr><literal type="number">22654</literal></expr>, <expr><operator>-</operator><literal type="number">5315</literal></expr>, 
<expr><literal type="number">15137</literal></expr>, <expr><literal type="number">5315</literal></expr>,<expr><operator>-</operator><literal type="number">26722</literal></expr>,<expr><operator>-</operator><literal type="number">15137</literal></expr>, 
<expr><literal type="number">15137</literal></expr>,<expr><operator>-</operator><literal type="number">26722</literal></expr>, <expr><literal type="number">5315</literal></expr>,<expr><operator>-</operator><literal type="number">15137</literal></expr>, 
<expr><literal type="number">5315</literal></expr>, <expr><literal type="number">22654</literal></expr>, <expr><literal type="number">22654</literal></expr>,<expr><operator>-</operator><literal type="number">26722</literal></expr>, 
}</block></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCT_8_INV_ROW_MMI</name><parameter_list>(<parameter><type><name>A1</name></type></parameter>,<parameter><type><name>A2</name></type></parameter>,<parameter><type><name>A3</name></type></parameter>,<parameter><type><name>A4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"dli $10, 0x88 \n\t" "ldc1 $f4, "#A1" \n\t" "dmtc1 $10, $f16 \n\t" "ldc1 $f10, 8+"#A1" \n\t" "ldc1 $f6, "#A3" \n\t" "pshufh $f0, $f4, $f16 \n\t" "ldc1 $f8, 8+"#A3" \n\t" "ldc1 $f12, 32+"#A3" \n\t" "pmaddhw $f6, $f6, $f0 \n\t" "dli $10, 0xdd \n\t" "pshufh $f2, $f10, $f16 \n\t" "dmtc1 $10, $f16 \n\t" "pmaddhw $f8, $f8, $f2 \n\t" "ldc1 $f14, 40+"#A3" \n\t" "pshufh $f4, $f4, $f16 \n\t" "pmaddhw $f12, $f12, $f4 \n\t" "pshufh $f10, $f10, $f16 \n\t" "ldc1 $f18, "#A4" \n\t" "pmaddhw $f14, $f14, $f10 \n\t" "paddw $f6, $f6, $f18 \n\t" "ldc1 $f16, 16+"#A3" \n\t" "pmaddhw $f0, $f0, $f16 \n\t" "ldc1 $f16, 24+"#A3" \n\t" "paddw $f6, $f6, $f8 \n\t" "pmaddhw $f2, $f2, $f16 \n\t" "ldc1 $f16, 48+"#A3" \n\t" "pmaddhw $f4, $f4, $f16 \n\t" "ldc1 $f16, 56+"#A3" \n\t" "paddw $f12, $f12, $f14 \n\t" "dli $10, 11 \n\t" "pmaddhw $f10, $f10, $f16 \n\t" "dmtc1 $10, $f16 \n\t" "psubw $f8, $f6, $f12 \n\t" "paddw $f6, $f6, $f12 \n\t" "paddw $f0, $f0, $f18 \n\t" "psraw $f6, $f6, $f16 \n\t" "paddw $f0, $f0, $f2 \n\t" "paddw $f4, $f4, $f10 \n\t" "psraw $f8, $f8, $f16 \n\t" "psubw $f14, $f0, $f4 \n\t" "paddw $f0, $f0, $f4 \n\t" "psraw $f0, $f0, $f16 \n\t" "psraw $f14, $f14, $f16 \n\t" "dli $10, 0xb1 \n\t" "packsswh $f6, $f6, $f0 \n\t" "dmtc1 $10, $f16 \n\t" "packsswh $f14, $f14, $f8 \n\t" "sdc1 $f6, "#A2" \n\t" "pshufh $f14, $f14, $f16 \n\t" "sdc1 $f14, 8+"#A2" \n\t"</cpp:value></cpp:define> 




















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCT_8_INV_COL</name><parameter_list>(<parameter><type><name>A1</name></type></parameter>,<parameter><type><name>A2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"ldc1 $f2, 2*8(%3) \n\t" "ldc1 $f6, 16*3+"#A1" \n\t" "ldc1 $f10, 16*5+"#A1" \n\t" "pmulhh $f0, $f2, $f6 \n\t" "ldc1 $f4, 0(%3) \n\t" "pmulhh $f2, $f2, $f10 \n\t" "ldc1 $f14, 16*7+"#A1" \n\t" "ldc1 $f12, 16*1+"#A1" \n\t" "pmulhh $f8, $f4, $f14 \n\t" "paddsh $f0, $f0, $f6 \n\t" "pmulhh $f4, $f4, $f12 \n\t" "paddsh $f2, $f2, $f6 \n\t" "psubsh $f0, $f0, $f10 \n\t" "ldc1 $f6, 3*8(%3) \n\t" "paddsh $f2, $f2, $f10 \n\t" "paddsh $f8, $f8, $f12 \n\t" "psubsh $f4, $f4, $f14 \n\t" "paddsh $f10, $f8, $f2 \n\t" "psubsh $f12, $f4, $f0 \n\t" "psubsh $f8, $f8, $f2 \n\t" "paddsh $f4, $f4, $f0 \n\t" "ldc1 $f14, 1*8(%3) \n\t" "sdc1 $f10, 3*16+"#A2" \n\t" "paddsh $f2, $f8, $f4 \n\t" "sdc1 $f12, 5*16+"#A2" \n\t" "psubsh $f8, $f8, $f4 \n\t" "ldc1 $f10, 2*16+"#A1" \n\t" "ldc1 $f12, 6*16+"#A1" \n\t" "pmulhh $f0, $f14, $f10 \n\t" "pmulhh $f14, $f14, $f12 \n\t" "pmulhh $f2, $f2, $f6 \n\t" "ldc1 $f4, 0*16+"#A1" \n\t" "pmulhh $f8, $f8, $f6 \n\t" "psubsh $f0, $f0, $f12 \n\t" "ldc1 $f12, 4*16+"#A1" \n\t" "paddsh $f14, $f14, $f10 \n\t" "psubsh $f6, $f4, $f12 \n\t" "paddsh $f4, $f4, $f12 \n\t" "paddsh $f10, $f4, $f14 \n\t" "psubsh $f12, $f6, $f0 \n\t" "psubsh $f4, $f4, $f14 \n\t" "paddsh $f6, $f6, $f0 \n\t" "paddsh $f2, $f2, $f2 \n\t" "paddsh $f8, $f8, $f8 \n\t" "psubsh $f14, $f6, $f2 \n\t" "dli $10, 6 \n\t" "paddsh $f6, $f6, $f2 \n\t" "dmtc1 $10, $f16 \n\t" "psubsh $f0, $f12, $f8 \n\t" "paddsh $f12, $f12, $f8 \n\t" "psrah $f6, $f6, $f16 \n\t" "psrah $f12, $f12, $f16 \n\t" "ldc1 $f2, 3*16+"#A2" \n\t" "psrah $f14, $f14, $f16 \n\t" "psrah $f0, $f0, $f16 \n\t" "sdc1 $f6, 1*16+"#A2" \n\t" "psubsh $f8, $f10, $f2 \n\t" "paddsh $f10, $f10, $f2 \n\t" "sdc1 $f12, 2*16+"#A2" \n\t" "ldc1 $f6, 5*16+"#A2" \n\t" "psrah $f10, $f10, $f16 \n\t" "psrah $f8, $f8, $f16 \n\t" "sdc1 $f0, 5*16+"#A2" \n\t" "psubsh $f12, $f4, $f6 \n\t" "paddsh $f4, $f4, $f6 \n\t" "sdc1 $f14, 6*16+"#A2" \n\t" "sdc1 $f10, 0*16+"#A2" \n\t" "psrah $f4, $f4, $f16 \n\t" "sdc1 $f8, 7*16+"#A2" \n\t" "psrah $f12, $f12, $f16 \n\t" "sdc1 $f4, 3*16+"#A2" \n\t" "sdc1 $f12, 4*16+"#A2" \n\t"</cpp:value></cpp:define> 










































































<function><type><name>void</name></type> <name>ff_xvid_idct_mmi</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier> (

DCT_8_INV_ROW_MMI(0*16(%0), 0*16(%0), 64*0(%2), 8*0(%1))
DCT_8_INV_ROW_MMI(1*16(%0), 1*16(%0), 64*1(%2), 8*1(%1))
DCT_8_INV_ROW_MMI(2*16(%0), 2*16(%0), 64*2(%2), 8*2(%1))
DCT_8_INV_ROW_MMI(3*16(%0), 3*16(%0), 64*3(%2), 8*3(%1))
DCT_8_INV_ROW_MMI(4*16(%0), 4*16(%0), 64*0(%2), 8*4(%1))
DCT_8_INV_ROW_MMI(5*16(%0), 5*16(%0), 64*3(%2), 8*5(%1))
DCT_8_INV_ROW_MMI(6*16(%0), 6*16(%0), 64*2(%2), 8*6(%1))
DCT_8_INV_ROW_MMI(7*16(%0), 7*16(%0), 64*1(%2), 8*7(%1))

DCT_8_INV_COL(0(%0), 0(%0))
DCT_8_INV_COL(8(%0), 8(%0))
::"r"(block),"r"(rounder_0),"r"(tab_i_04_mmi),"r"(tg_1_16)
: "$10"
);</asm>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_xvid_idct_put_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_xvid_idct_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels_clamped_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_xvid_idct_add_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_xvid_idct_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_add_pixels_clamped_mmi</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
