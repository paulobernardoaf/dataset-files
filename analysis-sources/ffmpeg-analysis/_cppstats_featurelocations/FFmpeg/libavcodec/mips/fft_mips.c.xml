<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mips\fft_mips.c">
















































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/fft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/fft_table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/asmdefs.h"</cpp:file></cpp:include>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_MIPS32R6</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>HAVE_MIPS64R6</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_fft_calc_mips</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nbits</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>num_transforms</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n4</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>, <decl><type ref="prev"/><name>n34</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTSample</name></type> <name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>, <decl><type ref="prev"/><name>tmp7</name></decl>, <decl><type ref="prev"/><name>tmp8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>tmpz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>w_re</name></decl>, <decl><type ref="prev"/><name>w_im</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>w_re_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>w_im_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fft_size</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nbits</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>pom</name></decl>, <decl><type ref="prev"/><name>pom1</name></decl>, <decl><type ref="prev"/><name>pom2</name></decl>, <decl><type ref="prev"/><name>pom3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>temp</name></decl>, <decl><type ref="prev"/><name>temp1</name></decl>, <decl><type ref="prev"/><name>temp3</name></decl>, <decl><type ref="prev"/><name>temp4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type> <name>tmpz_n2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>tmpz_n34</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>tmpz_n4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type> <name>tmpz_n2_i</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>tmpz_n34_i</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>tmpz_n4_i</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type> <name>tmpz_i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num_transforms</name> <operator>=</operator> <operator>(</operator><literal type="number">21845</literal> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">17</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>nbits</name></name><operator>)</operator><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name><operator>&lt;</operator><name>num_transforms</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>ff_fft_offsets_lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpz</name> <operator>=</operator> <name>z</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>tmpz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp5</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>+</operator> <name><name>tmpz</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>tmpz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp6</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>+</operator> <name><name>tmpz</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name><name>tmpz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp8</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <name><name>tmpz</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp4</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>-</operator> <name><name>tmpz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp7</name> <operator>=</operator> <name><name>tmpz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>-</operator> <name><name>tmpz</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>tmp5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>tmp2</name> <operator>+</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>tmp2</name> <operator>-</operator> <name>tmp6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>tmp3</name> <operator>+</operator> <name>tmp8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>tmp3</name> <operator>-</operator> <name>tmp8</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>tmp4</name> <operator>-</operator> <name>tmp7</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpz</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>tmp4</name> <operator>+</operator> <name>tmp7</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>fft_size</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num_transforms</name> <operator>=</operator> <operator>(</operator><name>num_transforms</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name><operator>&lt;</operator><name>num_transforms</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>ff_fft_offsets_lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpz</name> <operator>=</operator> <name>z</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
"lwc1 %[tmp1], 32(%[tmpz]) \n\t"
"lwc1 %[pom], 40(%[tmpz]) \n\t"
"lwc1 %[tmp3], 48(%[tmpz]) \n\t"
"lwc1 %[pom1], 56(%[tmpz]) \n\t"
"lwc1 %[tmp2], 36(%[tmpz]) \n\t"
"lwc1 %[pom2], 44(%[tmpz]) \n\t"
"lwc1 %[pom3], 60(%[tmpz]) \n\t"
"lwc1 %[tmp4], 52(%[tmpz]) \n\t"
"add.s %[tmp1], %[tmp1], %[pom] \n\t" 
"add.s %[tmp3], %[tmp3], %[pom1] \n\t" 
"add.s %[tmp2], %[tmp2], %[pom2] \n\t" 
"lwc1 %[pom], 40(%[tmpz]) \n\t"
"add.s %[tmp4], %[tmp4], %[pom3] \n\t" 
"add.s %[tmp5], %[tmp1], %[tmp3] \n\t" 
"sub.s %[tmp7], %[tmp1], %[tmp3] \n\t" 
"lwc1 %[tmp1], 32(%[tmpz]) \n\t"
"lwc1 %[pom1], 44(%[tmpz]) \n\t"
"add.s %[tmp6], %[tmp2], %[tmp4] \n\t" 
"sub.s %[tmp8], %[tmp2], %[tmp4] \n\t" 
"lwc1 %[tmp2], 36(%[tmpz]) \n\t"
"lwc1 %[pom2], 56(%[tmpz]) \n\t"
"lwc1 %[pom3], 60(%[tmpz]) \n\t"
"lwc1 %[tmp3], 48(%[tmpz]) \n\t"
"lwc1 %[tmp4], 52(%[tmpz]) \n\t"
"sub.s %[tmp1], %[tmp1], %[pom] \n\t" 
"lwc1 %[pom], 0(%[tmpz]) \n\t"
"sub.s %[tmp2], %[tmp2], %[pom1] \n\t" 
"sub.s %[tmp3], %[tmp3], %[pom2] \n\t" 
"lwc1 %[pom2], 4(%[tmpz]) \n\t"
"sub.s %[pom1], %[pom], %[tmp5] \n\t"
"sub.s %[tmp4], %[tmp4], %[pom3] \n\t" 
"add.s %[pom3], %[pom], %[tmp5] \n\t"
"sub.s %[pom], %[pom2], %[tmp6] \n\t"
"add.s %[pom2], %[pom2], %[tmp6] \n\t"
"swc1 %[pom1], 32(%[tmpz]) \n\t" 
"swc1 %[pom3], 0(%[tmpz]) \n\t" 
"swc1 %[pom], 36(%[tmpz]) \n\t" 
"swc1 %[pom2], 4(%[tmpz]) \n\t" 
"lwc1 %[pom1], 16(%[tmpz]) \n\t"
"lwc1 %[pom3], 20(%[tmpz]) \n\t"
"li.s %[pom], 0.7071067812 \n\t" 
"add.s %[temp1],%[tmp1], %[tmp2] \n\t"
"sub.s %[temp], %[pom1], %[tmp8] \n\t"
"add.s %[pom2], %[pom3], %[tmp7] \n\t"
"sub.s %[temp3],%[tmp3], %[tmp4] \n\t"
"sub.s %[temp4],%[tmp2], %[tmp1] \n\t"
"swc1 %[temp], 48(%[tmpz]) \n\t" 
"swc1 %[pom2], 52(%[tmpz]) \n\t" 
"add.s %[pom1], %[pom1], %[tmp8] \n\t"
"sub.s %[pom3], %[pom3], %[tmp7] \n\t"
"add.s %[tmp3], %[tmp3], %[tmp4] \n\t"
"mul.s %[tmp5], %[pom], %[temp1] \n\t" 
"mul.s %[tmp7], %[pom], %[temp3] \n\t" 
"mul.s %[tmp6], %[pom], %[temp4] \n\t" 
"mul.s %[tmp8], %[pom], %[tmp3] \n\t" 
"swc1 %[pom1], 16(%[tmpz]) \n\t" 
"swc1 %[pom3], 20(%[tmpz]) \n\t" 
"add.s %[tmp1], %[tmp5], %[tmp7] \n\t" 
"sub.s %[tmp3], %[tmp5], %[tmp7] \n\t" 
"add.s %[tmp2], %[tmp6], %[tmp8] \n\t" 
"sub.s %[tmp4], %[tmp6], %[tmp8] \n\t" 
"lwc1 %[temp], 8(%[tmpz]) \n\t"
"lwc1 %[temp1],12(%[tmpz]) \n\t"
"lwc1 %[pom], 24(%[tmpz]) \n\t"
"lwc1 %[pom2], 28(%[tmpz]) \n\t"
"sub.s %[temp4],%[temp], %[tmp1] \n\t"
"sub.s %[temp3],%[temp1], %[tmp2] \n\t"
"add.s %[temp], %[temp], %[tmp1] \n\t"
"add.s %[temp1],%[temp1], %[tmp2] \n\t"
"sub.s %[pom1], %[pom], %[tmp4] \n\t"
"add.s %[pom3], %[pom2], %[tmp3] \n\t"
"add.s %[pom], %[pom], %[tmp4] \n\t"
"sub.s %[pom2], %[pom2], %[tmp3] \n\t"
"swc1 %[temp4],40(%[tmpz]) \n\t" 
"swc1 %[temp3],44(%[tmpz]) \n\t" 
"swc1 %[temp], 8(%[tmpz]) \n\t" 
"swc1 %[temp1],12(%[tmpz]) \n\t" 
"swc1 %[pom1], 56(%[tmpz]) \n\t" 
"swc1 %[pom3], 60(%[tmpz]) \n\t" 
"swc1 %[pom], 24(%[tmpz]) \n\t" 
"swc1 %[pom2], 28(%[tmpz]) \n\t" 
: [tmp1]"=&amp;f"(tmp1), [pom]"=&amp;f"(pom), [pom1]"=&amp;f"(pom1), [pom2]"=&amp;f"(pom2),
[tmp3]"=&amp;f"(tmp3), [tmp2]"=&amp;f"(tmp2), [tmp4]"=&amp;f"(tmp4), [tmp5]"=&amp;f"(tmp5), [tmp7]"=&amp;f"(tmp7),
[tmp6]"=&amp;f"(tmp6), [tmp8]"=&amp;f"(tmp8), [pom3]"=&amp;f"(pom3),[temp]"=&amp;f"(temp), [temp1]"=&amp;f"(temp1),
[temp3]"=&amp;f"(temp3), [temp4]"=&amp;f"(temp4)
: [tmpz]"r"(tmpz)
: "memory"
);</asm>
</block_content>}</block></for>

<expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>MAX_LOG2_NFFT</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n4</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>nbits</name><operator>=</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>nbits</name><operator>&lt;=</operator><name><name>s</name><operator>-&gt;</operator><name>nbits</name></name></expr>;</condition> <incr><expr><name>nbits</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>num_transforms</name> <operator>=</operator> <operator>(</operator><name>num_transforms</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n2</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>n4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n34</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name>n4</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name><operator>&lt;</operator><name>num_transforms</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>ff_fft_offsets_lut</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>nbits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpz</name> <operator>=</operator> <name>z</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpz_n2</name> <operator>=</operator> <name>tmpz</name> <operator>+</operator> <name>n2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpz_n4</name> <operator>=</operator> <name>tmpz</name> <operator>+</operator> <name>n4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpz_n34</name> <operator>=</operator> <name>tmpz</name> <operator>+</operator> <name>n34</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
"lwc1 %[pom1], 0(%[tmpz_n2]) \n\t"
"lwc1 %[pom], 0(%[tmpz_n34]) \n\t"
"lwc1 %[pom2], 4(%[tmpz_n2]) \n\t"
"lwc1 %[pom3], 4(%[tmpz_n34]) \n\t"
"lwc1 %[temp1],0(%[tmpz]) \n\t"
"lwc1 %[temp3],4(%[tmpz]) \n\t"
"add.s %[tmp5], %[pom1], %[pom] \n\t" 
"sub.s %[tmp1], %[pom1], %[pom] \n\t" 
"add.s %[tmp6], %[pom2], %[pom3] \n\t" 
"sub.s %[tmp2], %[pom2], %[pom3] \n\t" 
"sub.s %[temp], %[temp1], %[tmp5] \n\t"
"add.s %[temp1],%[temp1], %[tmp5] \n\t"
"sub.s %[temp4],%[temp3], %[tmp6] \n\t"
"add.s %[temp3],%[temp3], %[tmp6] \n\t"
"swc1 %[temp], 0(%[tmpz_n2]) \n\t" 
"swc1 %[temp1],0(%[tmpz]) \n\t" 
"lwc1 %[pom1], 0(%[tmpz_n4]) \n\t"
"swc1 %[temp4],4(%[tmpz_n2]) \n\t" 
"lwc1 %[temp], 4(%[tmpz_n4]) \n\t"
"swc1 %[temp3],4(%[tmpz]) \n\t" 
"sub.s %[pom], %[pom1], %[tmp2] \n\t"
"add.s %[pom1], %[pom1], %[tmp2] \n\t"
"add.s %[temp1],%[temp], %[tmp1] \n\t"
"sub.s %[temp], %[temp], %[tmp1] \n\t"
"swc1 %[pom], 0(%[tmpz_n34]) \n\t" 
"swc1 %[pom1], 0(%[tmpz_n4]) \n\t" 
"swc1 %[temp1],4(%[tmpz_n34]) \n\t" 
"swc1 %[temp], 4(%[tmpz_n4]) \n\t" 
: [tmp5]"=&amp;f"(tmp5),
[tmp1]"=&amp;f"(tmp1), [pom]"=&amp;f"(pom), [pom1]"=&amp;f"(pom1), [pom2]"=&amp;f"(pom2),
[tmp2]"=&amp;f"(tmp2), [tmp6]"=&amp;f"(tmp6), [pom3]"=&amp;f"(pom3),
[temp]"=&amp;f"(temp), [temp1]"=&amp;f"(temp1), [temp3]"=&amp;f"(temp3), [temp4]"=&amp;f"(temp4)
: [tmpz]"r"(tmpz), [tmpz_n2]"r"(tmpz_n2), [tmpz_n34]"r"(tmpz_n34), [tmpz_n4]"r"(tmpz_n4)
: "memory"
);</asm>

<expr_stmt><expr><name>w_re_ptr</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ff_cos_131072</name> <operator>+</operator> <name>step</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>w_im_ptr</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ff_cos_131072</name> <operator>+</operator> <name>MAX_FFT_SIZE</name><operator>/</operator><literal type="number">4</literal> <operator>-</operator> <name>step</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n4</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>w_re</name> <operator>=</operator> <name><name>w_re_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>w_im</name> <operator>=</operator> <name><name>w_im_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpz_n2_i</name> <operator>=</operator> <name>tmpz_n2</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpz_n4_i</name> <operator>=</operator> <name>tmpz_n4</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpz_n34_i</name><operator>=</operator> <name>tmpz_n34</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpz_i</name> <operator>=</operator> <name>tmpz</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
"lwc1 %[temp], 0(%[tmpz_n2_i]) \n\t"
"lwc1 %[temp1], 4(%[tmpz_n2_i]) \n\t"
"lwc1 %[pom], 0(%[tmpz_n34_i]) \n\t"
"lwc1 %[pom1], 4(%[tmpz_n34_i]) \n\t"
"mul.s %[temp3], %[w_im], %[temp] \n\t"
"mul.s %[temp4], %[w_im], %[temp1] \n\t"
"mul.s %[pom2], %[w_im], %[pom1] \n\t"
"mul.s %[pom3], %[w_im], %[pom] \n\t"
"msub.s %[tmp2], %[temp3], %[w_re], %[temp1] \n\t" 
"madd.s %[tmp1], %[temp4], %[w_re], %[temp] \n\t" 
"msub.s %[tmp3], %[pom2], %[w_re], %[pom] \n\t" 
"madd.s %[tmp4], %[pom3], %[w_re], %[pom1] \n\t" 
"lwc1 %[temp], 0(%[tmpz_i]) \n\t"
"lwc1 %[pom], 4(%[tmpz_i]) \n\t"
"add.s %[tmp5], %[tmp1], %[tmp3] \n\t" 
"sub.s %[tmp1], %[tmp1], %[tmp3] \n\t" 
"add.s %[tmp6], %[tmp2], %[tmp4] \n\t" 
"sub.s %[tmp2], %[tmp2], %[tmp4] \n\t" 
"sub.s %[temp1], %[temp], %[tmp5] \n\t"
"add.s %[temp], %[temp], %[tmp5] \n\t"
"sub.s %[pom1], %[pom], %[tmp6] \n\t"
"add.s %[pom], %[pom], %[tmp6] \n\t"
"lwc1 %[temp3], 0(%[tmpz_n4_i]) \n\t"
"lwc1 %[pom2], 4(%[tmpz_n4_i]) \n\t"
"swc1 %[temp1], 0(%[tmpz_n2_i]) \n\t" 
"swc1 %[temp], 0(%[tmpz_i]) \n\t" 
"swc1 %[pom1], 4(%[tmpz_n2_i]) \n\t" 
"swc1 %[pom] , 4(%[tmpz_i]) \n\t" 
"sub.s %[temp4], %[temp3], %[tmp2] \n\t"
"add.s %[pom3], %[pom2], %[tmp1] \n\t"
"add.s %[temp3], %[temp3], %[tmp2] \n\t"
"sub.s %[pom2], %[pom2], %[tmp1] \n\t"
"swc1 %[temp4], 0(%[tmpz_n34_i]) \n\t" 
"swc1 %[pom3], 4(%[tmpz_n34_i]) \n\t" 
"swc1 %[temp3], 0(%[tmpz_n4_i]) \n\t" 
"swc1 %[pom2], 4(%[tmpz_n4_i]) \n\t" 
: [tmp1]"=&amp;f"(tmp1), [tmp2]"=&amp;f" (tmp2), [temp]"=&amp;f"(temp), [tmp3]"=&amp;f"(tmp3),
[tmp4]"=&amp;f"(tmp4), [tmp5]"=&amp;f"(tmp5), [tmp6]"=&amp;f"(tmp6),
[temp1]"=&amp;f"(temp1), [temp3]"=&amp;f"(temp3), [temp4]"=&amp;f"(temp4),
[pom]"=&amp;f"(pom), [pom1]"=&amp;f"(pom1), [pom2]"=&amp;f"(pom2), [pom3]"=&amp;f"(pom3)
: [w_re]"f"(w_re), [w_im]"f"(w_im),
[tmpz_i]"r"(tmpz_i),[tmpz_n2_i]"r"(tmpz_n2_i),
[tmpz_n34_i]"r"(tmpz_n34_i), [tmpz_n4_i]"r"(tmpz_n4_i)
: "memory"
);</asm>
<expr_stmt><expr><name>w_re_ptr</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
<expr_stmt><expr><name>w_im_ptr</name> <operator>-=</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><name>step</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n4</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_imdct_half_mips</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>n8</name></decl>, <decl><type ref="prev"/><name>n4</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>revtab</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>revtab</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>tcos</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tcos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>tsin</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tsin</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>in1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>in2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>in3</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>in4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator><name>FFTComplex</name> <operator>*</operator><operator>)</operator><name>output</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>tcos1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tsin1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tcos2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tsin2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>, <decl><type ref="prev"/><name>temp3</name></decl>, <decl><type ref="prev"/><name>temp4</name></decl>, <decl><type ref="prev"/><name>temp5</name></decl>, <decl><type ref="prev"/><name>temp6</name></decl>, <decl><type ref="prev"/><name>temp7</name></decl>, <decl><type ref="prev"/><name>temp8</name></decl>,
<decl><type ref="prev"/><name>temp9</name></decl>, <decl><type ref="prev"/><name>temp10</name></decl>, <decl><type ref="prev"/><name>temp11</name></decl>, <decl><type ref="prev"/><name>temp12</name></decl>, <decl><type ref="prev"/><name>temp13</name></decl>, <decl><type ref="prev"/><name>temp14</name></decl>, <decl><type ref="prev"/><name>temp15</name></decl>, <decl><type ref="prev"/><name>temp16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>z2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mdct_bits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n2</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n4</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n8</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>in1</name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in2</name> <operator>=</operator> <name>input</name> <operator>+</operator> <name>n2</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in3</name> <operator>=</operator> <name>input</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in4</name> <operator>=</operator> <name>input</name> <operator>+</operator> <name>n2</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tcos1</name> <operator>=</operator> <name>tcos</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tsin1</name> <operator>=</operator> <name>tsin</name></expr>;</expr_stmt>


<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n4</name></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>revtab</name><index>[<expr><name>k</name></expr> ]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j1</name> <operator>=</operator> <name><name>revtab</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
"lwc1 %[temp1], 0(%[in2]) \t\n"
"lwc1 %[temp2], 0(%[tcos1]) \t\n"
"lwc1 %[temp3], 0(%[tsin1]) \t\n"
"lwc1 %[temp4], 0(%[in1]) \t\n"
"lwc1 %[temp5], 0(%[in4]) \t\n"
"mul.s %[temp9], %[temp1], %[temp2] \t\n"
"mul.s %[temp10], %[temp1], %[temp3] \t\n"
"lwc1 %[temp6], 4(%[tcos1]) \t\n"
"lwc1 %[temp7], 4(%[tsin1]) \t\n"
"nmsub.s %[temp9], %[temp9], %[temp4], %[temp3] \t\n"
"madd.s %[temp10], %[temp10], %[temp4], %[temp2] \t\n"
"mul.s %[temp11], %[temp5], %[temp6] \t\n"
"mul.s %[temp12], %[temp5], %[temp7] \t\n"
"lwc1 %[temp8], 0(%[in3]) \t\n"
PTR_ADDIU " %[tcos1], %[tcos1], 8 \t\n"
PTR_ADDIU " %[tsin1], %[tsin1], 8 \t\n"
PTR_ADDIU " %[in1], %[in1], 16 \t\n"
"nmsub.s %[temp11], %[temp11], %[temp8], %[temp7] \t\n"
"madd.s %[temp12], %[temp12], %[temp8], %[temp6] \t\n"
PTR_ADDIU " %[in2], %[in2], -16 \t\n"
PTR_ADDIU " %[in3], %[in3], 16 \t\n"
PTR_ADDIU " %[in4], %[in4], -16 \t\n"

: [temp1]"=&amp;f"(temp1), [temp2]"=&amp;f"(temp2),
[temp3]"=&amp;f"(temp3), [temp4]"=&amp;f"(temp4),
[temp5]"=&amp;f"(temp5), [temp6]"=&amp;f"(temp6),
[temp7]"=&amp;f"(temp7), [temp8]"=&amp;f"(temp8),
[temp9]"=&amp;f"(temp9), [temp10]"=&amp;f"(temp10),
[temp11]"=&amp;f"(temp11), [temp12]"=&amp;f"(temp12),
[tsin1]"+r"(tsin1), [tcos1]"+r"(tcos1),
[in1]"+r"(in1), [in2]"+r"(in2),
[in3]"+r"(in3), [in4]"+r"(in4)
:
: "memory"
);</asm>

<expr_stmt><expr><name><name>z</name><index>[<expr><name>j</name></expr> ]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>temp9</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><name>j</name></expr> ]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>temp10</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><name>j1</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>temp11</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><name>j1</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>temp12</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fft_calc</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n8</name></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tcos1</name> <operator>=</operator> <operator>&amp;</operator><name><name>tcos</name><index>[<expr><name>n8</name> <operator>-</operator> <name>k</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tsin1</name> <operator>=</operator> <operator>&amp;</operator><name><name>tsin</name><index>[<expr><name>n8</name> <operator>-</operator> <name>k</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tcos2</name> <operator>=</operator> <operator>&amp;</operator><name><name>tcos</name><index>[<expr><name>n8</name> <operator>+</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tsin2</name> <operator>=</operator> <operator>&amp;</operator><name><name>tsin</name><index>[<expr><name>n8</name> <operator>+</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>z1</name> <operator>=</operator> <operator>&amp;</operator><name><name>z</name><index>[<expr><name>n8</name> <operator>-</operator> <name>k</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <operator>&amp;</operator><name><name>z</name><index>[<expr><name>n8</name> <operator>+</operator> <name>k</name></expr> ]</index></name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
"lwc1 %[temp1], 12(%[z1]) \t\n"
"lwc1 %[temp2], 4(%[tsin1]) \t\n"
"lwc1 %[temp3], 4(%[tcos1]) \t\n"
"lwc1 %[temp4], 8(%[z1]) \t\n"
"lwc1 %[temp5], 4(%[z1]) \t\n"
"mul.s %[temp9], %[temp1], %[temp2] \t\n"
"mul.s %[temp10], %[temp1], %[temp3] \t\n"
"lwc1 %[temp6], 0(%[tsin1]) \t\n"
"lwc1 %[temp7], 0(%[tcos1]) \t\n"
"nmsub.s %[temp9], %[temp9], %[temp4], %[temp3] \t\n"
"madd.s %[temp10], %[temp10], %[temp4], %[temp2] \t\n"
"mul.s %[temp11], %[temp5], %[temp6] \t\n"
"mul.s %[temp12], %[temp5], %[temp7] \t\n"
"lwc1 %[temp8], 0(%[z1]) \t\n"
"lwc1 %[temp1], 4(%[z2]) \t\n"
"lwc1 %[temp2], 0(%[tsin2]) \t\n"
"lwc1 %[temp3], 0(%[tcos2]) \t\n"
"nmsub.s %[temp11], %[temp11], %[temp8], %[temp7] \t\n"
"madd.s %[temp12], %[temp12], %[temp8], %[temp6] \t\n"
"mul.s %[temp13], %[temp1], %[temp2] \t\n"
"mul.s %[temp14], %[temp1], %[temp3] \t\n"
"lwc1 %[temp4], 0(%[z2]) \t\n"
"lwc1 %[temp5], 12(%[z2]) \t\n"
"lwc1 %[temp6], 4(%[tsin2]) \t\n"
"lwc1 %[temp7], 4(%[tcos2]) \t\n"
"nmsub.s %[temp13], %[temp13], %[temp4], %[temp3] \t\n"
"madd.s %[temp14], %[temp14], %[temp4], %[temp2] \t\n"
"mul.s %[temp15], %[temp5], %[temp6] \t\n"
"mul.s %[temp16], %[temp5], %[temp7] \t\n"
"lwc1 %[temp8], 8(%[z2]) \t\n"
"nmsub.s %[temp15], %[temp15], %[temp8], %[temp7] \t\n"
"madd.s %[temp16], %[temp16], %[temp8], %[temp6] \t\n"
: [temp1]"=&amp;f"(temp1), [temp2]"=&amp;f"(temp2),
[temp3]"=&amp;f"(temp3), [temp4]"=&amp;f"(temp4),
[temp5]"=&amp;f"(temp5), [temp6]"=&amp;f"(temp6),
[temp7]"=&amp;f"(temp7), [temp8]"=&amp;f"(temp8),
[temp9]"=&amp;f"(temp9), [temp10]"=&amp;f"(temp10),
[temp11]"=&amp;f"(temp11), [temp12]"=&amp;f"(temp12),
[temp13]"=&amp;f"(temp13), [temp14]"=&amp;f"(temp14),
[temp15]"=&amp;f"(temp15), [temp16]"=&amp;f"(temp16)
: [z1]"r"(z1), [z2]"r"(z2),
[tsin1]"r"(tsin1), [tcos1]"r"(tcos1),
[tsin2]"r"(tsin2), [tcos2]"r"(tcos2)
: "memory"
);</asm>

<expr_stmt><expr><name><name>z1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>temp9</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>temp14</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>temp13</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>temp10</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>temp11</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>temp16</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name>temp15</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name>temp12</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_imdct_calc_mips</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mdct_bits</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n2</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n4</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_imdct_half_mips</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>output</name><operator>+</operator><name>n4</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n4</name></expr>;</condition> <incr><expr><name>k</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>output</name><index>[<expr><name>n2</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>output</name><index>[<expr><name>n2</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>output</name><index>[<expr><name>n2</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>output</name><index>[<expr><name>n2</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>n</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>output</name><index>[<expr><name>n2</name><operator>+</operator><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>n</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>output</name><index>[<expr><name>n2</name><operator>+</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>n</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>output</name><index>[<expr><name>n2</name><operator>+</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>n</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>output</name><index>[<expr><name>n2</name><operator>+</operator><name>k</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_fft_init_mips</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_fft_lut_init</name><argument_list>(<argument><expr><name>ff_fft_offsets_lut</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">17</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_init_ff_cos_tabs</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_MIPS32R6</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>HAVE_MIPS64R6</name></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_calc</name></name> <operator>=</operator> <name>ff_fft_calc_mips</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MDCT</name></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>imdct_calc</name></name> <operator>=</operator> <name>ff_imdct_calc_mips</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>imdct_half</name></name> <operator>=</operator> <name>ff_imdct_half_mips</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
