<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mips\h264qpel_mmi.c">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dsp_mips.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hpeldsp_mips.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/bit_depth_template.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/mmiutils.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>copy_block4_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
"1: \n\t"
MMI_ULWC1(%[ftmp0], %[src], 0x00)
MMI_SWC1(%[ftmp0], %[dst], 0x00)
"addi %[h], %[h], -0x01 \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"bnez %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]),
[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),
RESTRICT_ASM_LOW32
[h]"+&amp;r"(h)
: [dstStride]"r"((mips_reg)dstStride),
[srcStride]"r"((mips_reg)srcStride)
: "memory"
);</asm>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>copy_block8_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
"1: \n\t"
MMI_ULDC1(%[ftmp0], %[src], 0x00)
MMI_SDC1(%[ftmp0], %[dst], 0x00)
"addi %[h], %[h], -0x01 \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"bnez %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]),
RESTRICT_ASM_ALL64
[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),
[h]"+&amp;r"(h)
: [dstStride]"r"((mips_reg)dstStride),
[srcStride]"r"((mips_reg)srcStride)
: "memory"
);</asm>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>copy_block16_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
"1: \n\t"
MMI_ULDC1(%[ftmp0], %[src], 0x00)
"ldl %[tmp0], 0x0f(%[src]) \n\t"
"ldr %[tmp0], 0x08(%[src]) \n\t"
MMI_SDC1(%[ftmp0], %[dst], 0x00)
"sdl %[tmp0], 0x0f(%[dst]) \n\t"
"sdr %[tmp0], 0x08(%[dst]) \n\t"
"addi %[h], %[h], -0x01 \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"bnez %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]),
[tmp0]"=&amp;r"(tmp[0]),
RESTRICT_ASM_ALL64
[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),
[h]"+&amp;r"(h)
: [dstStride]"r"((mips_reg)dstStride),
[srcStride]"r"((mips_reg)srcStride)
: "memory"
);</asm>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op2_avg</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = (((a)+CLIP(((b) + 512)&gt;&gt;10)+1)&gt;&gt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op2_put</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = CLIP(((b) + 512)&gt;&gt;10)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>put_h264_qpel4_h_lowpass_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"dli %[tmp0], 0x04 \n\t"
"1: \n\t"
MMI_ULWC1(%[ftmp1], %[src], -0x02)
MMI_ULWC1(%[ftmp2], %[src], -0x01)
MMI_ULWC1(%[ftmp3], %[src], 0x00)
MMI_ULWC1(%[ftmp4], %[src], 0x01)
MMI_ULWC1(%[ftmp5], %[src], 0x02)
MMI_ULWC1(%[ftmp6], %[src], 0x03)

"punpcklbh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp0] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp0] \n\t"
"punpcklbh %[ftmp4], %[ftmp4], %[ftmp0] \n\t"
"punpcklbh %[ftmp5], %[ftmp5], %[ftmp0] \n\t"
"punpcklbh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"paddsh %[ftmp7], %[ftmp3], %[ftmp4] \n\t"
"paddsh %[ftmp8], %[ftmp2], %[ftmp5] \n\t"
"paddsh %[ftmp9], %[ftmp1], %[ftmp6] \n\t"
"pmullh %[ftmp7], %[ftmp7], %[ff_pw_20] \n\t"
"pmullh %[ftmp8], %[ftmp8], %[ff_pw_5] \n\t"
"psubsh %[ftmp7], %[ftmp7], %[ftmp8] \n\t"
"paddsh %[ftmp9], %[ftmp7], %[ftmp9] \n\t"
"paddsh %[ftmp9], %[ftmp9], %[ff_pw_16] \n\t"
"psrah %[ftmp9], %[ftmp9], %[ff_pw_5] \n\t"
"packushb %[ftmp9], %[ftmp9], %[ftmp0] \n\t"
MMI_SWC1(%[ftmp9], %[dst], 0x00)
"daddi %[tmp0], %[tmp0], -0x01 \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"bnez %[tmp0], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[tmp0]"=&amp;r"(tmp[0]),
RESTRICT_ASM_LOW32
[dst]"+&amp;r"(dst), [src]"+&amp;r"(src)
: [dstStride]"r"((mips_reg)dstStride),
[srcStride]"r"((mips_reg)srcStride),
[ff_pw_20]"f"(ff_pw_20), [ff_pw_5]"f"(ff_pw_5),
[ff_pw_16]"f"(ff_pw_16)
: "memory"
);</asm>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_h264_qpel8_h_lowpass_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"dli %[tmp0], 0x08 \n\t"
"1: \n\t"
MMI_ULDC1(%[ftmp1], %[src], -0x02)
MMI_ULDC1(%[ftmp2], %[src], -0x01)
MMI_ULDC1(%[ftmp3], %[src], 0x00)
MMI_ULDC1(%[ftmp4], %[src], 0x01)
MMI_ULDC1(%[ftmp5], %[src], 0x02)
MMI_ULDC1(%[ftmp6], %[src], 0x03)
"punpcklbh %[ftmp7], %[ftmp3], %[ftmp0] \n\t"
"punpckhbh %[ftmp8], %[ftmp3], %[ftmp0] \n\t"
"punpcklbh %[ftmp9], %[ftmp4], %[ftmp0] \n\t"
"punpckhbh %[ftmp10], %[ftmp4], %[ftmp0] \n\t"
"paddsh %[ftmp3], %[ftmp7], %[ftmp9] \n\t"
"paddsh %[ftmp4], %[ftmp8], %[ftmp10] \n\t"
"pmullh %[ftmp3], %[ftmp3], %[ff_pw_20] \n\t"
"pmullh %[ftmp4], %[ftmp4], %[ff_pw_20] \n\t"
"punpcklbh %[ftmp7], %[ftmp2], %[ftmp0] \n\t"
"punpckhbh %[ftmp8], %[ftmp2], %[ftmp0] \n\t"
"punpcklbh %[ftmp9], %[ftmp5], %[ftmp0] \n\t"
"punpckhbh %[ftmp10], %[ftmp5], %[ftmp0] \n\t"
"paddsh %[ftmp2], %[ftmp7], %[ftmp9] \n\t"
"paddsh %[ftmp5], %[ftmp8], %[ftmp10] \n\t"
"pmullh %[ftmp2], %[ftmp2], %[ff_pw_5] \n\t"
"pmullh %[ftmp5], %[ftmp5], %[ff_pw_5] \n\t"
"punpcklbh %[ftmp7], %[ftmp1], %[ftmp0] \n\t"
"punpckhbh %[ftmp8], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp9], %[ftmp6], %[ftmp0] \n\t"
"punpckhbh %[ftmp10], %[ftmp6], %[ftmp0] \n\t"
"paddsh %[ftmp1], %[ftmp7], %[ftmp9] \n\t"
"paddsh %[ftmp6], %[ftmp8], %[ftmp10] \n\t"
"psubsh %[ftmp3], %[ftmp3], %[ftmp2] \n\t"
"psubsh %[ftmp4], %[ftmp4], %[ftmp5] \n\t"
"paddsh %[ftmp3], %[ftmp3], %[ftmp1] \n\t"
"paddsh %[ftmp4], %[ftmp4], %[ftmp6] \n\t"
"paddsh %[ftmp3], %[ftmp3], %[ff_pw_16] \n\t"
"paddsh %[ftmp4], %[ftmp4], %[ff_pw_16] \n\t"
"psrah %[ftmp3], %[ftmp3], %[ff_pw_5] \n\t"
"psrah %[ftmp4], %[ftmp4], %[ff_pw_5] \n\t"
"packushb %[ftmp9], %[ftmp3], %[ftmp4] \n\t"
MMI_SDC1(%[ftmp9], %[dst], 0x00)
"daddi %[tmp0], %[tmp0], -0x01 \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"bnez %[tmp0], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[ftmp10]"=&amp;f"(ftmp[10]),
[tmp0]"=&amp;r"(tmp[0]),
RESTRICT_ASM_ALL64
[dst]"+&amp;r"(dst), [src]"+&amp;r"(src)
: [dstStride]"r"((mips_reg)dstStride),
[srcStride]"r"((mips_reg)srcStride),
[ff_pw_20]"f"(ff_pw_20), [ff_pw_5]"f"(ff_pw_5),
[ff_pw_16]"f"(ff_pw_16)
: "memory"
);</asm>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_h264_qpel16_h_lowpass_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_h264_qpel8_h_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_h_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal><operator>*</operator><name>srcStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal><operator>*</operator><name>dstStride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_h_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_h_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_h264_qpel4_h_lowpass_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"dli %[tmp0], 0x04 \n\t"
"1: \n\t"
MMI_ULWC1(%[ftmp1], %[src], -0x02)
MMI_ULWC1(%[ftmp2], %[src], -0x01)
MMI_ULWC1(%[ftmp3], %[src], 0x00)
MMI_ULWC1(%[ftmp4], %[src], 0x01)
MMI_ULWC1(%[ftmp5], %[src], 0x02)
MMI_ULWC1(%[ftmp6], %[src], 0x03)
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp0] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp0] \n\t"
"punpcklbh %[ftmp4], %[ftmp4], %[ftmp0] \n\t"
"punpcklbh %[ftmp5], %[ftmp5], %[ftmp0] \n\t"
"punpcklbh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"paddsh %[ftmp7], %[ftmp3], %[ftmp4] \n\t"
"paddsh %[ftmp8], %[ftmp2], %[ftmp5] \n\t"
"paddsh %[ftmp9], %[ftmp1], %[ftmp6] \n\t"
"pmullh %[ftmp7], %[ftmp7], %[ff_pw_20] \n\t"
"pmullh %[ftmp8], %[ftmp8], %[ff_pw_5] \n\t"
"psubsh %[ftmp7], %[ftmp7], %[ftmp8] \n\t"
"paddsh %[ftmp9], %[ftmp7], %[ftmp9] \n\t"
"paddsh %[ftmp9], %[ftmp9], %[ff_pw_16] \n\t"
"psrah %[ftmp9], %[ftmp9], %[ff_pw_5] \n\t"
"packushb %[ftmp9], %[ftmp9], %[ftmp0] \n\t"
MMI_LWC1(%[ftmp10], %[dst], 0x00)
"pavgb %[ftmp9], %[ftmp9], %[ftmp10] \n\t"
MMI_SWC1(%[ftmp9], %[dst], 0x00)
"daddi %[tmp0], %[tmp0], -0x01 \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"bnez %[tmp0], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[ftmp10]"=&amp;f"(ftmp[10]),
[tmp0]"=&amp;r"(tmp[0]),
RESTRICT_ASM_LOW32
[dst]"+&amp;r"(dst), [src]"+&amp;r"(src)
: [dstStride]"r"((mips_reg)dstStride),
[srcStride]"r"((mips_reg)srcStride),
[ff_pw_20]"f"(ff_pw_20), [ff_pw_5]"f"(ff_pw_5),
[ff_pw_16]"f"(ff_pw_16)
: "memory"
);</asm>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_h264_qpel8_h_lowpass_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"dli %[tmp0], 0x08 \n\t"
"1: \n\t"
MMI_ULDC1(%[ftmp1], %[src], -0x02)
MMI_ULDC1(%[ftmp2], %[src], -0x01)
MMI_ULDC1(%[ftmp3], %[src], 0x00)
MMI_ULDC1(%[ftmp4], %[src], 0x01)
MMI_ULDC1(%[ftmp5], %[src], 0x02)
MMI_ULDC1(%[ftmp6], %[src], 0x03)
"punpcklbh %[ftmp7], %[ftmp3], %[ftmp0] \n\t"
"punpckhbh %[ftmp8], %[ftmp3], %[ftmp0] \n\t"
"punpcklbh %[ftmp9], %[ftmp4], %[ftmp0] \n\t"
"punpckhbh %[ftmp10], %[ftmp4], %[ftmp0] \n\t"
"paddsh %[ftmp3], %[ftmp7], %[ftmp9] \n\t"
"paddsh %[ftmp4], %[ftmp8], %[ftmp10] \n\t"
"pmullh %[ftmp3], %[ftmp3], %[ff_pw_20] \n\t"
"pmullh %[ftmp4], %[ftmp4], %[ff_pw_20] \n\t"
"punpcklbh %[ftmp7], %[ftmp2], %[ftmp0] \n\t"
"punpckhbh %[ftmp8], %[ftmp2], %[ftmp0] \n\t"
"punpcklbh %[ftmp9], %[ftmp5], %[ftmp0] \n\t"
"punpckhbh %[ftmp10], %[ftmp5], %[ftmp0] \n\t"
"paddsh %[ftmp2], %[ftmp7], %[ftmp9] \n\t"
"paddsh %[ftmp5], %[ftmp8], %[ftmp10] \n\t"
"pmullh %[ftmp2], %[ftmp2], %[ff_pw_5] \n\t"
"pmullh %[ftmp5], %[ftmp5], %[ff_pw_5] \n\t"
"punpcklbh %[ftmp7], %[ftmp1], %[ftmp0] \n\t"
"punpckhbh %[ftmp8], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp9], %[ftmp6], %[ftmp0] \n\t"
"punpckhbh %[ftmp10], %[ftmp6], %[ftmp0] \n\t"
"paddsh %[ftmp1], %[ftmp7], %[ftmp9] \n\t"
"paddsh %[ftmp6], %[ftmp8], %[ftmp10] \n\t"
"psubsh %[ftmp3], %[ftmp3], %[ftmp2] \n\t"
"psubsh %[ftmp4], %[ftmp4], %[ftmp5] \n\t"
"paddsh %[ftmp3], %[ftmp3], %[ftmp1] \n\t"
"paddsh %[ftmp4], %[ftmp4], %[ftmp6] \n\t"
"paddsh %[ftmp3], %[ftmp3], %[ff_pw_16] \n\t"
"paddsh %[ftmp4], %[ftmp4], %[ff_pw_16] \n\t"
"psrah %[ftmp3], %[ftmp3], %[ff_pw_5] \n\t"
"psrah %[ftmp4], %[ftmp4], %[ff_pw_5] \n\t"
"packushb %[ftmp9], %[ftmp3], %[ftmp4] \n\t"
MMI_LDC1(%[ftmp10], %[dst], 0x00)
"pavgb %[ftmp9], %[ftmp9], %[ftmp10] \n\t"
MMI_SDC1(%[ftmp9], %[dst], 0x00)
"daddi %[tmp0], %[tmp0], -0x01 \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"bnez %[tmp0], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[ftmp10]"=&amp;f"(ftmp[10]),
[tmp0]"=&amp;r"(tmp[0]),
RESTRICT_ASM_ALL64
[dst]"+&amp;r"(dst), [src]"+&amp;r"(src)
: [dstStride]"r"((mips_reg)dstStride),
[srcStride]"r"((mips_reg)srcStride),
[ff_pw_20]"f"(ff_pw_20), [ff_pw_5]"f"(ff_pw_5),
[ff_pw_16]"f"(ff_pw_16)
: "memory"
);</asm>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_h264_qpel16_h_lowpass_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avg_h264_qpel8_h_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avg_h264_qpel8_h_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal><operator>*</operator><name>srcStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal><operator>*</operator><name>dstStride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avg_h264_qpel8_h_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avg_h264_qpel8_h_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_h264_qpel4_v_lowpass_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>srcStride</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"dli %[tmp0], 0x02 \n\t"
MMI_LWC1(%[ftmp1], %[src], 0x00)
"mtc1 %[tmp0], %[ftmp10] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"dli %[tmp0], 0x05 \n\t"
MMI_LWC1(%[ftmp2], %[src], 0x00)
"mtc1 %[tmp0], %[ftmp11] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
MMI_LWC1(%[ftmp3], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
MMI_LWC1(%[ftmp4], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
MMI_LWC1(%[ftmp5], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp0] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp0] \n\t"
"punpcklbh %[ftmp4], %[ftmp4], %[ftmp0] \n\t"
"punpcklbh %[ftmp5], %[ftmp5], %[ftmp0] \n\t"
MMI_LWC1(%[ftmp6], %[src], 0x00)
"paddh %[ftmp7], %[ftmp3], %[ftmp4] \n\t"
"psllh %[ftmp7], %[ftmp7], %[ftmp10] \n\t"
"psubh %[ftmp7], %[ftmp7], %[ftmp2] \n\t"
"psubh %[ftmp7], %[ftmp7], %[ftmp5] \n\t"
"punpcklbh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"pmullh %[ftmp7], %[ftmp7], %[ff_pw_5] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ftmp6] \n\t"
"paddh %[ftmp7], %[ftmp7], %[ftmp1] \n\t"
"psrah %[ftmp7], %[ftmp7], %[ftmp11] \n\t"
"packushb %[ftmp7], %[ftmp7], %[ftmp7] \n\t"
MMI_SWC1(%[ftmp7], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
MMI_LWC1(%[ftmp1], %[src], 0x00)
"paddh %[ftmp7], %[ftmp4], %[ftmp5] \n\t"
"psllh %[ftmp7], %[ftmp7], %[ftmp10] \n\t"
"psubh %[ftmp7], %[ftmp7], %[ftmp3] \n\t"
"psubh %[ftmp7], %[ftmp7], %[ftmp6] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"pmullh %[ftmp7], %[ftmp7], %[ff_pw_5] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ftmp1] \n\t"
"paddh %[ftmp7], %[ftmp7], %[ftmp2] \n\t"
"psrah %[ftmp7], %[ftmp7], %[ftmp11] \n\t"
"packushb %[ftmp7], %[ftmp7], %[ftmp7] \n\t"
MMI_SWC1(%[ftmp7], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
MMI_LWC1(%[ftmp2], %[src], 0x00)
"paddh %[ftmp7], %[ftmp5], %[ftmp6] \n\t"
"psllh %[ftmp7], %[ftmp7], %[ftmp10] \n\t"
"psubh %[ftmp7], %[ftmp7], %[ftmp4] \n\t"
"psubh %[ftmp7], %[ftmp7], %[ftmp1] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp0] \n\t"
"pmullh %[ftmp7], %[ftmp7], %[ff_pw_5] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp2] \n\t"
"paddh %[ftmp7], %[ftmp7], %[ftmp3] \n\t"
"psrah %[ftmp7], %[ftmp7], %[ftmp11] \n\t"
"packushb %[ftmp7], %[ftmp7], %[ftmp7] \n\t"
MMI_SWC1(%[ftmp7], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
MMI_LWC1(%[ftmp3], %[src], 0x00)
"paddh %[ftmp7], %[ftmp6], %[ftmp1] \n\t"
"psllh %[ftmp7], %[ftmp7], %[ftmp10] \n\t"
"psubh %[ftmp7], %[ftmp7], %[ftmp5] \n\t"
"psubh %[ftmp7], %[ftmp7], %[ftmp2] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp0] \n\t"
"pmullh %[ftmp7], %[ftmp7], %[ff_pw_5] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ftmp3] \n\t"
"paddh %[ftmp7], %[ftmp7], %[ftmp4] \n\t"
"psrah %[ftmp7], %[ftmp7], %[ftmp11] \n\t"
"packushb %[ftmp7], %[ftmp7], %[ftmp7] \n\t"
MMI_SWC1(%[ftmp7], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
".set pop \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[ftmp10]"=&amp;f"(ftmp[10]), [ftmp11]"=&amp;f"(ftmp[11]),
[tmp0]"=&amp;r"(tmp[0]),
RESTRICT_ASM_LOW32
[dst]"+&amp;r"(dst), [src]"+&amp;r"(src)
: [dstStride]"r"((mips_reg)dstStride),
[srcStride]"r"((mips_reg)srcStride),
[ff_pw_5]"f"(ff_pw_5), [ff_pw_16]"f"(ff_pw_16)
: "memory"
);</asm>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_h264_qpel8_v_lowpass_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>srcStride</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>w</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"
"dli %[tmp0], 0x02 \n\t"
MMI_LWC1(%[ftmp0], %[src], 0x00)
"mtc1 %[tmp0], %[ftmp8] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"dli %[tmp0], 0x05 \n\t"
MMI_LWC1(%[ftmp1], %[src], 0x00)
"mtc1 %[tmp0], %[ftmp9] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
MMI_LWC1(%[ftmp2], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"xor %[ftmp7], %[ftmp7], %[ftmp7] \n\t"
MMI_LWC1(%[ftmp3], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
MMI_LWC1(%[ftmp4], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp7] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp7] \n\t"
MMI_LWC1(%[ftmp5], %[src], 0x00)
"paddh %[ftmp6], %[ftmp2], %[ftmp3] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp7] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"punpcklbh %[ftmp4], %[ftmp4], %[ftmp7] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"punpcklbh %[ftmp0], %[ftmp0], %[ftmp7] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"punpcklbh %[ftmp5], %[ftmp5], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp0], %[ftmp0], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp0], %[ftmp0], %[ftmp5] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
MMI_LWC1(%[ftmp0], %[src], 0x00)
"paddh %[ftmp6], %[ftmp3], %[ftmp4] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"punpcklbh %[ftmp0], %[ftmp0], %[ftmp7] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ff_pw_16] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"paddh %[ftmp6], %[ftmp4], %[ftmp5] \n\t"
MMI_LWC1(%[ftmp1], %[src], 0x00)
"psllh %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp7] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ff_pw_16] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ftmp1] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
"paddh %[ftmp6], %[ftmp5], %[ftmp0] \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
MMI_LWC1(%[ftmp2], %[src], 0x00)
"psubh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp2] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
"paddh %[ftmp6], %[ftmp0], %[ftmp1] \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
MMI_LWC1(%[ftmp3], %[src], 0x00)
"psubh %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
"punpcklbh %[ftmp3] , %[ftmp3], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ftmp3] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
"paddh %[ftmp6], %[ftmp1], %[ftmp2] \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
MMI_LWC1(%[ftmp4], %[src], 0x00)
"psubh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
"punpcklbh %[ftmp4], %[ftmp4], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp5], %[ftmp5], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp5], %[ftmp5], %[ftmp4] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
"paddh %[ftmp6], %[ftmp2], %[ftmp3] \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
MMI_LWC1(%[ftmp5], %[src], 0x00)
"psubh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"punpcklbh %[ftmp5], %[ftmp5], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp0], %[ftmp0], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp0], %[ftmp0], %[ftmp5] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
"paddh %[ftmp6], %[ftmp3], %[ftmp4] \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
MMI_LWC1(%[ftmp0], %[src], 0x00)
"psubh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
"punpcklbh %[ftmp0], %[ftmp0], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
"bne %[h], 0x10, 2f \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"paddh %[ftmp6], %[ftmp4], %[ftmp5] \n\t"
MMI_LWC1(%[ftmp1], %[src], 0x00)
"psllh %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp7] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ff_pw_16] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ftmp1] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
"paddh %[ftmp6], %[ftmp5], %[ftmp0] \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
MMI_LWC1(%[ftmp2], %[src], 0x00)
"psubh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp2] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
"paddh %[ftmp6], %[ftmp0], %[ftmp1] \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
MMI_LWC1(%[ftmp3], %[src], 0x00)
"psubh %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ftmp3] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
"paddh %[ftmp6], %[ftmp1], %[ftmp2] \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
MMI_LWC1(%[ftmp4], %[src], 0x00)
"psubh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
"punpcklbh %[ftmp4], %[ftmp4], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp5], %[ftmp5], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp5], %[ftmp5], %[ftmp4] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
"paddh %[ftmp6], %[ftmp2], %[ftmp3] \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
MMI_LWC1(%[ftmp5], %[src], 0x00)
"psubh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"punpcklbh %[ftmp5], %[ftmp5], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp0], %[ftmp0], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp0], %[ftmp0], %[ftmp5] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
"paddh %[ftmp6], %[ftmp3], %[ftmp4] \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
MMI_LWC1(%[ftmp0], %[src], 0x00)
"psubh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
"punpcklbh %[ftmp0], %[ftmp0], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
"paddh %[ftmp6], %[ftmp4], %[ftmp5] \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
MMI_LWC1(%[ftmp1], %[src], 0x00)
"psubh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ftmp1] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
"paddh %[ftmp6], %[ftmp5], %[ftmp0] \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
MMI_LWC1(%[ftmp2], %[src], 0x00)
"psubh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp2] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"2: \n\t"
".set pop \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[tmp0]"=&amp;r"(tmp[0]),
RESTRICT_ASM_LOW32
[src]"+&amp;r"(src), [dst]"+&amp;r"(dst),
[h]"+&amp;r"(h)
: [dstStride]"r"((mips_reg)dstStride),
[srcStride]"r"((mips_reg)srcStride),
[ff_pw_5]"f"(ff_pw_5), [ff_pw_16]"f"(ff_pw_16)
: "memory"
);</asm>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal> <operator>-</operator> <operator>(</operator><name>h</name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator> <operator>*</operator> <name>srcStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal> <operator>-</operator> <name>h</name> <operator>*</operator> <name>dstStride</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_h264_qpel16_v_lowpass_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_h264_qpel8_v_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_v_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal><operator>*</operator><name>srcStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal><operator>*</operator><name>dstStride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_v_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_v_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_h264_qpel4_v_lowpass_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>srcStride</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"
"dli %[tmp0], 0x02 \n\t"
"xor %[ftmp7], %[ftmp7], %[ftmp7] \n\t"
"mtc1 %[tmp0], %[ftmp9] \n\t"
"dli %[tmp0], 0x05 \n\t"
MMI_LWC1(%[ftmp0], %[src], 0x00)
"mtc1 %[tmp0], %[ftmp8] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
MMI_LWC1(%[ftmp1], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
MMI_LWC1(%[ftmp2], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
MMI_LWC1(%[ftmp3], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
MMI_LWC1(%[ftmp4], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"punpcklbh %[ftmp0], %[ftmp0], %[ftmp7] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp7] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp7] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp7] \n\t"
"punpcklbh %[ftmp4], %[ftmp4], %[ftmp7] \n\t"
MMI_LWC1(%[ftmp5], %[src], 0x00)
"paddh %[ftmp6], %[ftmp2], %[ftmp3] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"punpcklbh %[ftmp5], %[ftmp5], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp0], %[ftmp0], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp0], %[ftmp0], %[ftmp5] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_LWC1(%[ftmp0], %[dst], 0x00)
"pavgb %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
MMI_LWC1(%[ftmp0], %[src], 0x00)
"paddh %[ftmp6], %[ftmp3], %[ftmp4] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
"punpcklbh %[ftmp0], %[ftmp0], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_LWC1(%[ftmp1], %[dst], 0x00)
"pavgb %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
MMI_LWC1(%[ftmp1], %[src], 0x00)
"paddh %[ftmp6], %[ftmp4], %[ftmp5] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ftmp1] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_LWC1(%[ftmp2], %[dst], 0x00)
"pavgb %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
MMI_LWC1(%[ftmp2], %[src], 0x00)
"paddh %[ftmp6], %[ftmp5], %[ftmp0] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp2] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_LWC1(%[ftmp3], %[dst], 0x00)
"pavgb %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
".set pop \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[tmp0]"=&amp;r"(tmp[0]),
[src]"+&amp;r"(src), [dst]"+&amp;r"(dst)
: [dstStride]"r"((mips_reg)dstStride),
[srcStride]"r"((mips_reg)srcStride),
[ff_pw_5]"f"(ff_pw_5), [ff_pw_16]"f"(ff_pw_16)
: "memory"
);</asm>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_h264_qpel8_v_lowpass_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>srcStride</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>w</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier> (
".set push \n\t"
".set noreorder \n\t"
"dli %[tmp0], 0x02 \n\t"
"xor %[ftmp7], %[ftmp7], %[ftmp7] \n\t"
"mtc1 %[tmp0], %[ftmp9] \n\t"
"dli %[tmp0], 0x05 \n\t"
MMI_LWC1(%[ftmp0], %[src], 0x00)
"mtc1 %[tmp0], %[ftmp8] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
MMI_LWC1(%[ftmp1], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
MMI_LWC1(%[ftmp2], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
MMI_LWC1(%[ftmp3], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
MMI_LWC1(%[ftmp4], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"punpcklbh %[ftmp0], %[ftmp0], %[ftmp7] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp7] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp7] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp7] \n\t"
"punpcklbh %[ftmp4], %[ftmp4], %[ftmp7] \n\t"
MMI_LWC1(%[ftmp5], %[src], 0x00)
"paddh %[ftmp6], %[ftmp2], %[ftmp3] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"punpcklbh %[ftmp5], %[ftmp5], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp0], %[ftmp0], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp0], %[ftmp0], %[ftmp5] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_LWC1(%[ftmp0], %[dst], 0x00)
"pavgb %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
MMI_LWC1(%[ftmp0], %[src], 0x00)
"paddh %[ftmp6], %[ftmp3], %[ftmp4] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
"punpcklbh %[ftmp0], %[ftmp0], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_LWC1(%[ftmp1], %[dst], 0x00)
"pavgb %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
MMI_LWC1(%[ftmp1], %[src], 0x00)
"paddh %[ftmp6], %[ftmp4], %[ftmp5] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ftmp1] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_LWC1(%[ftmp2], %[dst], 0x00)
"pavgb %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
MMI_LWC1(%[ftmp2], %[src], 0x00)
"paddh %[ftmp6], %[ftmp5], %[ftmp0] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp2] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_LWC1(%[ftmp3], %[dst], 0x00)
"pavgb %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
MMI_LWC1(%[ftmp3], %[src], 0x00)
"paddh %[ftmp6], %[ftmp0], %[ftmp1] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ftmp3] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_LWC1(%[ftmp4], %[dst], 0x00)
"pavgb %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
MMI_LWC1(%[ftmp4], %[src], 0x00)
"paddh %[ftmp6], %[ftmp1], %[ftmp2] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
"punpcklbh %[ftmp4], %[ftmp4], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp5], %[ftmp5], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp5], %[ftmp5], %[ftmp4] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_LWC1(%[ftmp5], %[dst], 0x00)
"pavgb %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
MMI_LWC1(%[ftmp5], %[src], 0x00)
"paddh %[ftmp6], %[ftmp2], %[ftmp3] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"punpcklbh %[ftmp5], %[ftmp5], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp0], %[ftmp0], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp0], %[ftmp0], %[ftmp5] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_LWC1(%[ftmp0], %[dst], 0x00)
"pavgb %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
MMI_LWC1(%[ftmp0], %[src], 0x00)
"paddh %[ftmp6], %[ftmp3], %[ftmp4] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
"punpcklbh %[ftmp0], %[ftmp0], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_LWC1(%[ftmp1], %[dst], 0x00)
"pavgb %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
"bne %[h], 0x10, 2f \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
MMI_LWC1(%[ftmp1], %[src], 0x00)
"paddh %[ftmp6], %[ftmp4], %[ftmp5] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ftmp1] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_LWC1(%[ftmp2], %[dst], 0x00)
"pavgb %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
MMI_LWC1(%[ftmp2], %[src], 0x00)
"paddh %[ftmp6], %[ftmp5], %[ftmp0] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp2] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_LWC1(%[ftmp3], %[dst], 0x00)
"pavgb %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
MMI_LWC1(%[ftmp3], %[src], 0x00)
"paddh %[ftmp6], %[ftmp0], %[ftmp1] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ftmp3] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_LWC1(%[ftmp4], %[dst], 0x00)
"pavgb %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
MMI_LWC1(%[ftmp4], %[src], 0x00)
"paddh %[ftmp6], %[ftmp1], %[ftmp2] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
"punpcklbh %[ftmp4], %[ftmp4], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp5], %[ftmp5], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp5], %[ftmp5], %[ftmp4] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_LWC1(%[ftmp5], %[dst], 0x00)
"pavgb %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
MMI_LWC1(%[ftmp5], %[src], 0x00)
"paddh %[ftmp6], %[ftmp2], %[ftmp3] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"punpcklbh %[ftmp5], %[ftmp5], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp0], %[ftmp0], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp0], %[ftmp0], %[ftmp5] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_LWC1(%[ftmp0], %[dst], 0x00)
"pavgb %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
MMI_LWC1(%[ftmp0], %[src], 0x00)
"paddh %[ftmp6], %[ftmp3], %[ftmp4] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
"punpcklbh %[ftmp0], %[ftmp0], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_LWC1(%[ftmp1], %[dst], 0x00)
"pavgb %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
MMI_LWC1(%[ftmp1], %[src], 0x00)
"paddh %[ftmp6], %[ftmp4], %[ftmp5] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ftmp1] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_LWC1(%[ftmp2], %[dst], 0x00)
"pavgb %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
MMI_LWC1(%[ftmp2], %[src], 0x00)
"paddh %[ftmp6], %[ftmp5], %[ftmp0] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp9] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ff_pw_16] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp2] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
"psrah %[ftmp6], %[ftmp6], %[ftmp8] \n\t"
"packushb %[ftmp6], %[ftmp6], %[ftmp6] \n\t"
MMI_LWC1(%[ftmp3], %[dst], 0x00)
"pavgb %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
MMI_SWC1(%[ftmp6], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"2: \n\t"
".set pop \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[tmp0]"=&amp;r"(tmp[0]),
RESTRICT_ASM_LOW32
[src]"+&amp;r"(src), [dst]"+&amp;r"(dst),
[h]"+&amp;r"(h)
: [dstStride]"r"((mips_reg)dstStride),
[srcStride]"r"((mips_reg)srcStride),
[ff_pw_5]"f"(ff_pw_5), [ff_pw_16]"f"(ff_pw_16)
: "memory"
);</asm>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal> <operator>-</operator> <operator>(</operator><name>h</name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator> <operator>*</operator> <name>srcStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal> <operator>-</operator> <name>h</name> <operator>*</operator> <name>dstStride</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_h264_qpel16_v_lowpass_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avg_h264_qpel8_v_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avg_h264_qpel8_v_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal><operator>*</operator><name>srcStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal><operator>*</operator><name>dstStride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avg_h264_qpel8_v_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avg_h264_qpel8_v_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_h264_qpel4_hv_lowpass_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>INIT_CLIP</name>
<name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>_tmp</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>_tmp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tmp0</name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">2</literal><operator>*</operator><name>srcStride</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"dli %[tmp0], 0x09 \n\t"
"1: \n\t"
MMI_ULWC1(%[ftmp1], %[src], -0x02)
MMI_ULWC1(%[ftmp2], %[src], -0x01)
MMI_ULWC1(%[ftmp3], %[src], 0x00)
MMI_ULWC1(%[ftmp4], %[src], 0x01)
MMI_ULWC1(%[ftmp5], %[src], 0x02)
MMI_ULWC1(%[ftmp6], %[src], 0x03)
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp0] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp0] \n\t"
"punpcklbh %[ftmp4], %[ftmp4], %[ftmp0] \n\t"
"punpcklbh %[ftmp5], %[ftmp5], %[ftmp0] \n\t"
"punpcklbh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"paddsh %[ftmp7], %[ftmp3], %[ftmp4] \n\t"
"paddsh %[ftmp8], %[ftmp2], %[ftmp5] \n\t"
"paddsh %[ftmp9], %[ftmp1], %[ftmp6] \n\t"
"pmullh %[ftmp7], %[ftmp7], %[ff_pw_20] \n\t"
"pmullh %[ftmp8], %[ftmp8], %[ff_pw_5] \n\t"
"psubsh %[ftmp7], %[ftmp7], %[ftmp8] \n\t"
"paddsh %[ftmp9], %[ftmp7], %[ftmp9] \n\t"
MMI_SDC1(%[ftmp9], %[tmp], 0x00)
"daddi %[tmp0], %[tmp0], -0x01 \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
PTR_ADDU "%[tmp], %[tmp], %[tmpStride] \n\t"
"bnez %[tmp0], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[tmp0]"=&amp;r"(tmp0),
RESTRICT_ASM_LOW32
[tmp]"+&amp;r"(tmp), [src]"+&amp;r"(src)
: [tmpStride]"r"(8),
[srcStride]"r"((mips_reg)srcStride),
[ff_pw_20]"f"(ff_pw_20), [ff_pw_5]"f"(ff_pw_5)
: "memory"
);</asm>

<expr_stmt><expr><name>tmp</name> <operator>-=</operator> <literal type="number">28</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>tmpB</name><init>= <expr><name><name>tmp</name><index>[<expr><operator>-</operator><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>tmpA</name><init>= <expr><name><name>tmp</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>tmp0</name><init>= <expr><name><name>tmp</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>tmp1</name><init>= <expr><name><name>tmp</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>tmp2</name><init>= <expr><name><name>tmp</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>tmp3</name><init>= <expr><name><name>tmp</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>tmp4</name><init>= <expr><name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>tmp5</name><init>= <expr><name><name>tmp</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>tmp6</name><init>= <expr><name><name>tmp</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>op2_put</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>dstStride</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>tmp0</name><operator>+</operator><name>tmp1</name><operator>)</operator><operator>*</operator><literal type="number">20</literal> <operator>-</operator> <operator>(</operator><name>tmpA</name><operator>+</operator><name>tmp2</name><operator>)</operator><operator>*</operator><literal type="number">5</literal> <operator>+</operator> <operator>(</operator><name>tmpB</name><operator>+</operator><name>tmp3</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>op2_put</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>dstStride</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>tmp1</name><operator>+</operator><name>tmp2</name><operator>)</operator><operator>*</operator><literal type="number">20</literal> <operator>-</operator> <operator>(</operator><name>tmp0</name><operator>+</operator><name>tmp3</name><operator>)</operator><operator>*</operator><literal type="number">5</literal> <operator>+</operator> <operator>(</operator><name>tmpA</name><operator>+</operator><name>tmp4</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>op2_put</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>dstStride</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>tmp2</name><operator>+</operator><name>tmp3</name><operator>)</operator><operator>*</operator><literal type="number">20</literal> <operator>-</operator> <operator>(</operator><name>tmp1</name><operator>+</operator><name>tmp4</name><operator>)</operator><operator>*</operator><literal type="number">5</literal> <operator>+</operator> <operator>(</operator><name>tmp0</name><operator>+</operator><name>tmp5</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>op2_put</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>dstStride</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>tmp3</name><operator>+</operator><name>tmp4</name><operator>)</operator><operator>*</operator><literal type="number">20</literal> <operator>-</operator> <operator>(</operator><name>tmp2</name><operator>+</operator><name>tmp5</name><operator>)</operator><operator>*</operator><literal type="number">5</literal> <operator>+</operator> <operator>(</operator><name>tmp1</name><operator>+</operator><name>tmp6</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_h264_qpel8or16_hv1_lowpass_mmi</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>tmpStride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>srcStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tmp0</name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>srcStride</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>w</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier> (
"dli %[tmp0], 0x02 \n\t"
MMI_ULWC1(%[ftmp0], %[src], 0x00)
"mtc1 %[tmp0], %[ftmp10] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"xor %[ftmp7], %[ftmp7], %[ftmp7] \n\t"
MMI_ULWC1(%[ftmp1], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
MMI_ULWC1(%[ftmp2], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
MMI_ULWC1(%[ftmp3], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
MMI_ULWC1(%[ftmp4], %[src], 0x00)
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"punpcklbh %[ftmp0], %[ftmp0], %[ftmp7] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp7] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp7] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp7] \n\t"
"punpcklbh %[ftmp4], %[ftmp4], %[ftmp7] \n\t"
MMI_ULWC1(%[ftmp5], %[src], 0x00)
"paddh %[ftmp6], %[ftmp2], %[ftmp3] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp10] \n\t"
"paddh %[ftmp0], %[ftmp0], %[ff_pw_16] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"punpcklbh %[ftmp5], %[ftmp5], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp0], %[ftmp0], %[ftmp5] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
MMI_SDC1(%[ftmp6], %[tmp], 0x00)
MMI_ULWC1(%[ftmp0], %[src], 0x00)
"paddh %[ftmp6], %[ftmp3], %[ftmp4] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp10] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ff_pw_16] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
"punpcklbh %[ftmp0], %[ftmp0], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
MMI_SDC1(%[ftmp6], %[tmp], 0x30)
MMI_ULWC1(%[ftmp1], %[src], 0x00)
"paddh %[ftmp6], %[ftmp4], %[ftmp5] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp10] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ff_pw_16] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ftmp1] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
MMI_SDC1(%[ftmp6], %[tmp], 0x60)
MMI_ULWC1(%[ftmp2], %[src], 0x00)
"paddh %[ftmp6], %[ftmp5], %[ftmp0] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp10] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ff_pw_16] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp2] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
MMI_SDC1(%[ftmp6], %[tmp], 0x90)
MMI_ULWC1(%[ftmp3], %[src], 0x00)
"paddh %[ftmp6], %[ftmp0], %[ftmp1] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp10] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ff_pw_16] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ftmp3] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
MMI_SDC1(%[ftmp6], %[tmp], 0xc0)
MMI_ULWC1(%[ftmp4], %[src], 0x00)
"paddh %[ftmp6], %[ftmp1], %[ftmp2] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp10] \n\t"
"paddh %[ftmp5], %[ftmp5], %[ff_pw_16] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
"punpcklbh %[ftmp4], %[ftmp4], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp5], %[ftmp5], %[ftmp4] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
MMI_SDC1(%[ftmp6], %[tmp], 0xf0)
MMI_ULWC1(%[ftmp5], %[src], 0x00)
"paddh %[ftmp6], %[ftmp2], %[ftmp3] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp10] \n\t"
"paddh %[ftmp0], %[ftmp0], %[ff_pw_16] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"punpcklbh %[ftmp5], %[ftmp5], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp0], %[ftmp0], %[ftmp5] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
MMI_SDC1(%[ftmp6], %[tmp], 0x120)
MMI_ULWC1(%[ftmp0], %[src], 0x00)
"paddh %[ftmp6], %[ftmp3], %[ftmp4] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp10] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ff_pw_16] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
"punpcklbh %[ftmp0], %[ftmp0], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
MMI_SDC1(%[ftmp6], %[tmp], 0x150)
"bne %[size], 0x10, 2f \n\t"

MMI_ULWC1(%[ftmp1], %[src], 0x00)
"paddh %[ftmp6], %[ftmp4], %[ftmp5] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp10] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ff_pw_16] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ftmp1] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
MMI_SDC1(%[ftmp6], %[tmp], 0x180)
MMI_ULWC1(%[ftmp2], %[src], 0x00)
"paddh %[ftmp6], %[ftmp5], %[ftmp0] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp10] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ff_pw_16] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp2] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
MMI_SDC1(%[ftmp6], %[tmp], 0x1b0)
MMI_ULWC1(%[ftmp3], %[src], 0x00)
"paddh %[ftmp6], %[ftmp0], %[ftmp1] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp10] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ff_pw_16] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ftmp3] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
MMI_SDC1(%[ftmp6], %[tmp], 0x1e0)
MMI_ULWC1(%[ftmp4], %[src], 0x00)
"paddh %[ftmp6], %[ftmp1], %[ftmp2] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp10] \n\t"
"paddh %[ftmp5], %[ftmp5], %[ff_pw_16] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
"punpcklbh %[ftmp4], %[ftmp4], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp5], %[ftmp5], %[ftmp4] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
MMI_SDC1(%[ftmp6], %[tmp], 0x210)
MMI_ULWC1(%[ftmp5], %[src], 0x00)
"paddh %[ftmp6], %[ftmp2], %[ftmp3] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp10] \n\t"
"paddh %[ftmp0], %[ftmp0], %[ff_pw_16] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"punpcklbh %[ftmp5], %[ftmp5], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp0], %[ftmp0], %[ftmp5] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
MMI_SDC1(%[ftmp6], %[tmp], 0x240)
MMI_ULWC1(%[ftmp0], %[src], 0x00)
"paddh %[ftmp6], %[ftmp3], %[ftmp4] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp10] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ff_pw_16] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp5] \n\t"
"punpcklbh %[ftmp0], %[ftmp0], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
MMI_SDC1(%[ftmp6], %[tmp], 0x270)
MMI_ULWC1(%[ftmp1], %[src], 0x00)
"paddh %[ftmp6], %[ftmp4], %[ftmp5] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp10] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ff_pw_16] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ftmp1] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp2] \n\t"
MMI_SDC1(%[ftmp6], %[tmp], 0x2a0)
MMI_ULWC1(%[ftmp2], %[src], 0x00)
"paddh %[ftmp6], %[ftmp5], %[ftmp0] \n\t"
"psllh %[ftmp6], %[ftmp6], %[ftmp10] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ff_pw_16] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"psubh %[ftmp6], %[ftmp6], %[ftmp1] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp7] \n\t"
"pmullh %[ftmp6], %[ftmp6], %[ff_pw_5] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp2] \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp3] \n\t"
MMI_SDC1(%[ftmp6], %[tmp], 0x2d0)
"2: \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[ftmp10]"=&amp;f"(ftmp[10]),
[tmp0]"=&amp;r"(tmp0),
RESTRICT_ASM_LOW32
[src]"+&amp;r"(src)
: [tmp]"r"(tmp), [size]"r"(size),
[srcStride]"r"((mips_reg)srcStride),
[ff_pw_5]"f"(ff_pw_5), [ff_pw_16]"f"(ff_pw_16)
: "memory"
);</asm>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal> <operator>-</operator> <operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator> <operator>*</operator> <name>srcStride</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_h264_qpel8or16_hv2_lowpass_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>tmpStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name>size</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tmp0</name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
"dli %[tmp0], 0x02 \n\t"
"mtc1 %[tmp0], %[ftmp8] \n\t"
"dli %[tmp0], 0x06 \n\t"
"mtc1 %[tmp0], %[ftmp9] \n\t"
"1: \n\t"
MMI_LDC1(%[ftmp0], %[tmp], 0x00)
MMI_LDC1(%[ftmp3], %[tmp], 0x08)
MMI_LDC1(%[ftmp6], %[tmp], 0x10)
MMI_ULDC1(%[ftmp1], %[tmp], 0x02)
MMI_ULDC1(%[ftmp4], %[tmp], 0x0a)
MMI_ULDC1(%[ftmp5], %[tmp], 0x12)
"paddh %[ftmp0], %[ftmp0], %[ftmp4] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ftmp3] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp5] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ftmp6] \n\t"
MMI_ULDC1(%[ftmp2], %[tmp], 0x04)
MMI_ULDC1(%[ftmp6], %[tmp], 0x06)
MMI_ULDC1(%[ftmp5], %[tmp], 0x0c)
MMI_ULDC1(%[ftmp7], %[tmp], 0x0e)
"paddh %[ftmp2], %[ftmp2], %[ftmp6] \n\t"
"paddh %[ftmp5], %[ftmp5], %[ftmp7] \n\t"
"psubh %[ftmp0], %[ftmp0], %[ftmp1] \n\t"
"psubh %[ftmp3], %[ftmp3], %[ftmp4] \n\t"
"psrah %[ftmp0], %[ftmp0], %[ftmp8] \n\t"
"psrah %[ftmp3], %[ftmp3], %[ftmp8] \n\t"
"psubh %[ftmp0], %[ftmp0], %[ftmp1] \n\t"
"psubh %[ftmp3], %[ftmp3], %[ftmp4] \n\t"
"paddsh %[ftmp0], %[ftmp0], %[ftmp2] \n\t"
"paddsh %[ftmp3] , %[ftmp3], %[ftmp5] \n\t"
"psrah %[ftmp0], %[ftmp0], %[ftmp8] \n\t"
"psrah %[ftmp3], %[ftmp3], %[ftmp8] \n\t"
"paddh %[ftmp0], %[ftmp0], %[ftmp2] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp5] \n\t"
"psrah %[ftmp0], %[ftmp0], %[ftmp9] \n\t"
"psrah %[ftmp3], %[ftmp3], %[ftmp9] \n\t"
"packushb %[ftmp0], %[ftmp0], %[ftmp3] \n\t"
"addi %[h], %[h], -0x01 \n\t"
MMI_SDC1(%[ftmp0], %[dst], 0x00)
PTR_ADDIU "%[tmp], %[tmp], 0x30 \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"bnez %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[tmp0]"=&amp;r"(tmp0),
RESTRICT_ASM_ALL64
[tmp]"+&amp;r"(tmp), [dst]"+&amp;r"(dst),
[h]"+&amp;r"(h)
: [dstStride]"r"((mips_reg)dstStride)
: "memory"
);</asm>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">8</literal> <operator>-</operator> <name>size</name> <operator>*</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal> <operator>-</operator> <name>size</name> <operator>*</operator> <name>dstStride</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>w</name><operator>--</operator></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_h264_qpel8or16_hv_lowpass_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>tmpStride</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_h264_qpel8or16_hv1_lowpass_mmi</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>tmpStride</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8or16_hv2_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>tmpStride</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_h264_qpel8_hv_lowpass_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>tmpStride</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_h264_qpel8or16_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>tmpStride</name></expr></argument>,
<argument><expr><name>srcStride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_h264_qpel16_hv_lowpass_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>tmpStride</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_h264_qpel8or16_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>tmpStride</name></expr></argument>,
<argument><expr><name>srcStride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_h264_qpel8_h_lowpass_l2_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src2Stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
"dli %[tmp0], 0x02 \n\t"
"mtc1 %[tmp0], %[ftmp7] \n\t"
"dli %[tmp0], 0x05 \n\t"
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"mtc1 %[tmp0], %[ftmp8] \n\t"
"1: \n\t"
MMI_ULDC1(%[ftmp1], %[src], 0x00)
MMI_ULDC1(%[ftmp3], %[src], 0x01)
"punpckhbh %[ftmp2], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"punpckhbh %[ftmp4], %[ftmp3], %[ftmp0] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp0] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ftmp4] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ftmp3] \n\t"
"psllh %[ftmp2], %[ftmp2], %[ftmp7] \n\t"
"psllh %[ftmp1], %[ftmp1], %[ftmp7] \n\t"
MMI_ULDC1(%[ftmp3], %[src], -0x01)
MMI_ULDC1(%[ftmp5], %[src], 0x02)
"punpckhbh %[ftmp4], %[ftmp3], %[ftmp0] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp0] \n\t"
"punpckhbh %[ftmp6], %[ftmp5], %[ftmp0] \n\t"
"punpcklbh %[ftmp5], %[ftmp5], %[ftmp0] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp5] \n\t"
"psubh %[ftmp2], %[ftmp2], %[ftmp6] \n\t"
"psubh %[ftmp1], %[ftmp1], %[ftmp3] \n\t"
"pmullh %[ftmp2], %[ftmp2], %[ff_pw_5] \n\t"
"pmullh %[ftmp1], %[ftmp1], %[ff_pw_5] \n\t"
MMI_ULWC1(%[ftmp3], %[src], -0x02)
MMI_ULWC1(%[ftmp6], %[src], 0x07)
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp0] \n\t"
"punpcklbh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp4] \n\t"
"paddh %[ftmp5], %[ftmp5], %[ftmp6] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ff_pw_16] \n\t"
"paddh %[ftmp5], %[ftmp5], %[ff_pw_16] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ftmp3] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ftmp5] \n\t"
"psrah %[ftmp1], %[ftmp1], %[ftmp8] \n\t"
"psrah %[ftmp2], %[ftmp2], %[ftmp8] \n\t"
MMI_LDC1(%[ftmp5], %[src2], 0x00)
"packushb %[ftmp1], %[ftmp1], %[ftmp2] \n\t"
PTR_ADDU "%[src], %[src], %[dstStride] \n\t"
"pavgb %[ftmp1], %[ftmp1], %[ftmp5] \n\t"
PTR_ADDU "%[h], %[h], -0x01 \n\t"
MMI_SDC1(%[ftmp1], %[dst], 0x00)
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
PTR_ADDU "%[src2], %[src2], %[src2Stride] \n\t"
"bgtz %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]),
[tmp0]"=&amp;r"(tmp[0]),
RESTRICT_ASM_LOW32
RESTRICT_ASM_ALL64
[src]"+&amp;r"(src), [dst]"+&amp;r"(dst),
[src2]"+&amp;r"(src2), [h]"+&amp;r"(h)
: [src2Stride]"r"((mips_reg)src2Stride),
[dstStride]"r"((mips_reg)dstStride),
[ff_pw_5]"f"(ff_pw_5), [ff_pw_16]"f"(ff_pw_16)
: "memory"
);</asm>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_pixels8_l2_shift5_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src16</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src8</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src8Stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tmp0</name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DECLARE_VAR_ADDRT</name></expr>;</expr_stmt>

<do>do <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier> (
"dli %[tmp0], 0x05 \n\t"
MMI_ULDC1(%[ftmp0], %[src16], 0x00)
"mtc1 %[tmp0], %[ftmp6] \n\t"
MMI_ULDC1(%[ftmp1], %[src16], 0x08)
MMI_ULDC1(%[ftmp2], %[src16], 0x30)
MMI_ULDC1(%[ftmp3], %[src16], 0x38)
"psrah %[ftmp0], %[ftmp0], %[ftmp6] \n\t"
"psrah %[ftmp1], %[ftmp1], %[ftmp6] \n\t"
"psrah %[ftmp2], %[ftmp2], %[ftmp6] \n\t"
"psrah %[ftmp3], %[ftmp3], %[ftmp6] \n\t"
"packushb %[ftmp0], %[ftmp0], %[ftmp1] \n\t"
"packushb %[ftmp2], %[ftmp2], %[ftmp3] \n\t"
MMI_LDC1(%[ftmp5], %[src8], 0x00)
MMI_LDXC1(%[ftmp4], %[src8], %[src8Stride], 0x00)
"pavgb %[ftmp0], %[ftmp0], %[ftmp5] \n\t"
"pavgb %[ftmp2], %[ftmp2], %[ftmp4] \n\t"
MMI_SDC1(%[ftmp0], %[dst], 0x00)
MMI_SDXC1(%[ftmp2], %[dst], %[dstStride], 0x00)
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]),
RESTRICT_ASM_ALL64
RESTRICT_ASM_ADDRT
[tmp0]"=&amp;r"(tmp0)
: [src8]"r"(src8), [src16]"r"(src16),
[dst]"r"(dst),
[src8Stride]"r"((mips_reg)src8Stride),
[dstStride]"r"((mips_reg)dstStride)
: "memory"
);</asm>

<expr_stmt><expr><name>src8</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>src8Stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src16</name> <operator>+=</operator> <literal type="number">48</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dstStride</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>h</name> <operator>-=</operator> <literal type="number">2</literal></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_h264_qpel16_h_lowpass_l2_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src2Stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_h264_qpel8_h_lowpass_l2_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>src2Stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_h_lowpass_l2_mmi</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src2</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>,
<argument><expr><name>src2Stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>dstStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>dstStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>src2Stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_h264_qpel8_h_lowpass_l2_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>src2Stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_h_lowpass_l2_mmi</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src2</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>,
<argument><expr><name>src2Stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_pixels16_l2_shift5_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src16</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src8</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src8Stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_pixels8_l2_shift5_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src16</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>src8Stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_pixels8_l2_shift5_mmi</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src16</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src8</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>,
<argument><expr><name>src8Stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_h264_qpel4_hv_lowpass_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>INIT_CLIP</name>
<name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name><name>_tmp</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>_tmp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tmp0</name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">2</literal><operator>*</operator><name>srcStride</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"dli %[tmp0], 0x09 \n\t"
"1: \n\t"
MMI_ULWC1(%[ftmp1], %[src], -0x02)
MMI_ULWC1(%[ftmp2], %[src], -0x01)
MMI_ULWC1(%[ftmp3], %[src], 0x00)
MMI_ULWC1(%[ftmp4], %[src], 0x01)
MMI_ULWC1(%[ftmp5], %[src], 0x02)
MMI_ULWC1(%[ftmp6], %[src], 0x03)
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp0] \n\t"
"punpcklbh %[ftmp3], %[ftmp3], %[ftmp0] \n\t"
"punpcklbh %[ftmp4], %[ftmp4], %[ftmp0] \n\t"
"punpcklbh %[ftmp5], %[ftmp5], %[ftmp0] \n\t"
"punpcklbh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"paddsh %[ftmp7], %[ftmp3], %[ftmp4] \n\t"
"paddsh %[ftmp8], %[ftmp2], %[ftmp5] \n\t"
"paddsh %[ftmp9], %[ftmp1], %[ftmp6] \n\t"
"pmullh %[ftmp7], %[ftmp7], %[ff_pw_20] \n\t"
"pmullh %[ftmp8], %[ftmp8], %[ff_pw_5] \n\t"
"psubsh %[ftmp7], %[ftmp7], %[ftmp8] \n\t"
"paddsh %[ftmp9], %[ftmp7], %[ftmp9] \n\t"
MMI_SDC1(%[ftmp9], %[tmp], 0x00)
"daddi %[tmp0], %[tmp0], -0x01 \n\t"
PTR_ADDU "%[src], %[src], %[srcStride] \n\t"
PTR_ADDU "%[tmp], %[tmp], %[tmpStride] \n\t"
"bnez %[tmp0], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[tmp0]"=&amp;r"(tmp0),
RESTRICT_ASM_LOW32
[tmp]"+&amp;r"(tmp), [src]"+&amp;r"(src)
: [tmpStride]"r"(8),
[srcStride]"r"((mips_reg)srcStride),
[ff_pw_20]"f"(ff_pw_20), [ff_pw_5]"f"(ff_pw_5)
: "memory"
);</asm>

<expr_stmt><expr><name>tmp</name> <operator>-=</operator> <literal type="number">28</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>tmpB</name><init>= <expr><name><name>tmp</name><index>[<expr><operator>-</operator><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>tmpA</name><init>= <expr><name><name>tmp</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>tmp0</name><init>= <expr><name><name>tmp</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>tmp1</name><init>= <expr><name><name>tmp</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>tmp2</name><init>= <expr><name><name>tmp</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>tmp3</name><init>= <expr><name><name>tmp</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>tmp4</name><init>= <expr><name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>tmp5</name><init>= <expr><name><name>tmp</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name>tmp6</name><init>= <expr><name><name>tmp</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>op2_avg</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>dstStride</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>tmp0</name><operator>+</operator><name>tmp1</name><operator>)</operator><operator>*</operator><literal type="number">20</literal> <operator>-</operator> <operator>(</operator><name>tmpA</name><operator>+</operator><name>tmp2</name><operator>)</operator><operator>*</operator><literal type="number">5</literal> <operator>+</operator> <operator>(</operator><name>tmpB</name><operator>+</operator><name>tmp3</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>op2_avg</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>dstStride</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>tmp1</name><operator>+</operator><name>tmp2</name><operator>)</operator><operator>*</operator><literal type="number">20</literal> <operator>-</operator> <operator>(</operator><name>tmp0</name><operator>+</operator><name>tmp3</name><operator>)</operator><operator>*</operator><literal type="number">5</literal> <operator>+</operator> <operator>(</operator><name>tmpA</name><operator>+</operator><name>tmp4</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>op2_avg</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>dstStride</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>tmp2</name><operator>+</operator><name>tmp3</name><operator>)</operator><operator>*</operator><literal type="number">20</literal> <operator>-</operator> <operator>(</operator><name>tmp1</name><operator>+</operator><name>tmp4</name><operator>)</operator><operator>*</operator><literal type="number">5</literal> <operator>+</operator> <operator>(</operator><name>tmp0</name><operator>+</operator><name>tmp5</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>op2_avg</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>dstStride</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>tmp3</name><operator>+</operator><name>tmp4</name><operator>)</operator><operator>*</operator><literal type="number">20</literal> <operator>-</operator> <operator>(</operator><name>tmp2</name><operator>+</operator><name>tmp5</name><operator>)</operator><operator>*</operator><literal type="number">5</literal> <operator>+</operator> <operator>(</operator><name>tmp1</name><operator>+</operator><name>tmp6</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_h264_qpel8or16_hv2_lowpass_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>tmpStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name>size</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tmp0</name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<do>do <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>
<asm>__asm__ <specifier>volatile</specifier> (
"dli %[tmp0], 0x02 \n\t"
"mtc1 %[tmp0], %[ftmp9] \n\t"
"dli %[tmp0], 0x06 \n\t"
"mtc1 %[tmp0], %[ftmp10] \n\t"
"1: \n\t"
MMI_LDC1(%[ftmp0], %[tmp], 0x00)
MMI_LDC1(%[ftmp3], %[tmp], 0x08)
MMI_ULDC1(%[ftmp1], %[tmp], 0x02)
MMI_ULDC1(%[ftmp4], %[tmp], 0x0a)
MMI_LDC1(%[ftmp7], %[tmp], 0x10)
MMI_ULDC1(%[ftmp8], %[tmp], 0x12)
"paddh %[ftmp0], %[ftmp0], %[ftmp4] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ftmp3] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp8] \n\t"
"paddh %[ftmp4], %[ftmp4], %[ftmp7] \n\t"
MMI_ULDC1(%[ftmp2], %[tmp], 0x04)
MMI_ULDC1(%[ftmp5], %[tmp], 0x0c)
MMI_ULDC1(%[ftmp7], %[tmp], 0x06)
MMI_ULDC1(%[ftmp8], %[tmp], 0x0e)
"paddh %[ftmp2], %[ftmp2], %[ftmp7] \n\t"
"paddh %[ftmp5], %[ftmp5], %[ftmp8] \n\t"
"psubh %[ftmp0], %[ftmp0], %[ftmp1] \n\t"
"psubh %[ftmp3], %[ftmp3], %[ftmp4] \n\t"
"psrah %[ftmp0], %[ftmp0], %[ftmp9] \n\t"
"psrah %[ftmp3], %[ftmp3], %[ftmp9] \n\t"
"psubh %[ftmp0], %[ftmp0], %[ftmp1] \n\t"
"psubh %[ftmp3], %[ftmp3], %[ftmp4] \n\t"
"paddsh %[ftmp0], %[ftmp0], %[ftmp2] \n\t"
"paddsh %[ftmp3], %[ftmp3], %[ftmp5] \n\t"
"psrah %[ftmp0], %[ftmp0], %[ftmp9] \n\t"
"psrah %[ftmp3], %[ftmp3], %[ftmp9] \n\t"
"paddh %[ftmp0], %[ftmp0], %[ftmp2] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp5] \n\t"
"psrah %[ftmp0], %[ftmp0], %[ftmp10] \n\t"
"psrah %[ftmp3], %[ftmp3], %[ftmp10] \n\t"
"packushb %[ftmp0], %[ftmp0], %[ftmp3] \n\t"
MMI_LDC1(%[ftmp6], %[dst], 0x00)
"pavgb %[ftmp0], %[ftmp0], %[ftmp6] \n\t"
MMI_SDC1(%[ftmp0], %[dst], 0x00)
"addi %[h], %[h], -0x01 \n\t"
PTR_ADDI "%[tmp], %[tmp], 0x30 \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
"bnez %[h], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[ftmp10]"=&amp;f"(ftmp[10]),
[tmp0]"=&amp;r"(tmp0),
RESTRICT_ASM_ALL64
[tmp]"+&amp;r"(tmp), [dst]"+&amp;r"(dst),
[h]"+&amp;r"(h)
: [dstStride]"r"((mips_reg)dstStride)
: "memory"
);</asm>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">8</literal> <operator>-</operator> <name>size</name> <operator>*</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal> <operator>-</operator> <name>size</name> <operator>*</operator> <name>dstStride</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>w</name><operator>--</operator></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_h264_qpel8or16_hv_lowpass_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>tmpStride</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_h264_qpel8or16_hv1_lowpass_mmi</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>tmpStride</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avg_h264_qpel8or16_hv2_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>tmpStride</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_h264_qpel8_hv_lowpass_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>tmpStride</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avg_h264_qpel8or16_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>tmpStride</name></expr></argument>,
<argument><expr><name>srcStride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_h264_qpel16_hv_lowpass_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>tmpStride</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>srcStride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avg_h264_qpel8or16_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>tmpStride</name></expr></argument>,
<argument><expr><name>srcStride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_h264_qpel8_h_lowpass_l2_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src2Stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_LOW32</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
"dli %[tmp1], 0x02 \n\t"
"ori %[tmp0], $0, 0x8 \n\t"
"mtc1 %[tmp1], %[ftmp7] \n\t"
"dli %[tmp1], 0x05 \n\t"
"xor %[ftmp0], %[ftmp0], %[ftmp0] \n\t"
"mtc1 %[tmp1], %[ftmp8] \n\t"
"1: \n\t"
MMI_ULDC1(%[ftmp1], %[src], 0x00)
MMI_ULDC1(%[ftmp2], %[src], 0x01)
"punpckhbh %[ftmp3], %[ftmp1], %[ftmp0] \n\t"
"punpcklbh %[ftmp1], %[ftmp1], %[ftmp0] \n\t"
"punpckhbh %[ftmp4], %[ftmp2], %[ftmp0] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp0] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ftmp2] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp4] \n\t"
"psllh %[ftmp1], %[ftmp1], %[ftmp7] \n\t"
"psllh %[ftmp3], %[ftmp3], %[ftmp7] \n\t"
MMI_ULDC1(%[ftmp2], %[src], -0x01)
MMI_ULDC1(%[ftmp5], %[src], 0x02)
"punpckhbh %[ftmp4], %[ftmp2], %[ftmp0] \n\t"
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp0] \n\t"
"punpckhbh %[ftmp6], %[ftmp5], %[ftmp0] \n\t"
"punpcklbh %[ftmp5], %[ftmp5], %[ftmp0] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ftmp5] \n\t"
"paddh %[ftmp6], %[ftmp6], %[ftmp4] \n\t"
"psubh %[ftmp1], %[ftmp1], %[ftmp2] \n\t"
"psubh %[ftmp3], %[ftmp3], %[ftmp6] \n\t"
"pmullh %[ftmp1], %[ftmp1], %[ff_pw_5] \n\t"
"pmullh %[ftmp3], %[ftmp3], %[ff_pw_5] \n\t"
MMI_ULWC1(%[ftmp2], %[src], -0x02)
MMI_ULWC1(%[ftmp6], %[src], 0x07)
"punpcklbh %[ftmp2], %[ftmp2], %[ftmp0] \n\t"
"punpcklbh %[ftmp6], %[ftmp6], %[ftmp0] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ftmp4] \n\t"
"paddh %[ftmp5], %[ftmp5], %[ftmp6] \n\t"
"paddh %[ftmp2], %[ftmp2], %[ff_pw_16] \n\t"
"paddh %[ftmp5], %[ftmp5], %[ff_pw_16] \n\t"
"paddh %[ftmp1], %[ftmp1], %[ftmp2] \n\t"
"paddh %[ftmp3], %[ftmp3], %[ftmp5] \n\t"
"psrah %[ftmp1], %[ftmp1], %[ftmp8] \n\t"
"psrah %[ftmp3], %[ftmp3], %[ftmp8] \n\t"
MMI_LDC1(%[ftmp5], %[src2], 0x00)
"packushb %[ftmp1], %[ftmp1], %[ftmp3] \n\t"
MMI_LDC1(%[ftmp9], %[dst], 0x00)
"pavgb %[ftmp1], %[ftmp1], %[ftmp5] \n\t"
"pavgb %[ftmp1], %[ftmp1], %[ftmp9] \n\t"
PTR_ADDU "%[src], %[src], %[dstStride] \n\t"
MMI_SDC1(%[ftmp1], %[dst], 0x00)
"daddi %[tmp0], %[tmp0], -0x01 \n\t"
PTR_ADDU "%[dst], %[dst], %[dstStride] \n\t"
PTR_ADDU "%[src2], %[src2], %[src2Stride] \n\t"
"bgtz %[tmp0], 1b \n\t"
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
[ftmp8]"=&amp;f"(ftmp[8]), [ftmp9]"=&amp;f"(ftmp[9]),
[tmp0]"=&amp;r"(tmp[0]), [tmp1]"=&amp;r"(tmp[1]),
RESTRICT_ASM_LOW32
RESTRICT_ASM_ALL64
[dst]"+&amp;r"(dst), [src]"+&amp;r"(src),
[src2]"+&amp;r"(src2)
: [dstStride]"r"((mips_reg)dstStride),
[src2Stride]"r"((mips_reg)src2Stride),
[ff_pw_5]"f"(ff_pw_5), [ff_pw_16]"f"(ff_pw_16)
: "memory"
);</asm>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_h264_qpel16_h_lowpass_l2_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src2Stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avg_h264_qpel8_h_lowpass_l2_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>src2Stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avg_h264_qpel8_h_lowpass_l2_mmi</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src2</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>,
<argument><expr><name>src2Stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>dstStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>dstStride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src2</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>src2Stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avg_h264_qpel8_h_lowpass_l2_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>src2Stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avg_h264_qpel8_h_lowpass_l2_mmi</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src2</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>,
<argument><expr><name>src2Stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_pixels8_l2_shift5_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src16</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src8</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src8Stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name><name>ftmp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tmp0</name></decl>;</decl_stmt>
<expr_stmt><expr><name>DECLARE_VAR_ALL64</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DECLARE_VAR_ADDRT</name></expr>;</expr_stmt>

<do>do <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier> (
"dli %[tmp0], 0x05 \n\t"
MMI_ULDC1(%[ftmp0], %[src16], 0x00)
"mtc1 %[tmp0], %[ftmp6] \n\t"
MMI_ULDC1(%[ftmp1], %[src16], 0x08)
MMI_ULDC1(%[ftmp2], %[src16], 0x30)
MMI_ULDC1(%[ftmp3], %[src16], 0x38)
"psrah %[ftmp0], %[ftmp0], %[ftmp6] \n\t"
"psrah %[ftmp1], %[ftmp1], %[ftmp6] \n\t"
"psrah %[ftmp2], %[ftmp2], %[ftmp6] \n\t"
"psrah %[ftmp3], %[ftmp3], %[ftmp6] \n\t"
"packushb %[ftmp0], %[ftmp0], %[ftmp1] \n\t"
MMI_LDC1(%[ftmp4], %[src8], 0x00)
MMI_LDXC1(%[ftmp5], %[src8], %[src8Stride], 0x00)
"packushb %[ftmp2], %[ftmp2], %[ftmp3] \n\t"
"pavgb %[ftmp0], %[ftmp0], %[ftmp4] \n\t"
"pavgb %[ftmp2], %[ftmp2], %[ftmp5] \n\t"
MMI_LDC1(%[ftmp7], %[dst], 0x00)
"pavgb %[ftmp0], %[ftmp0], %[ftmp7] \n\t"
MMI_SDC1(%[ftmp0], %[dst], 0x00)
MMI_LDXC1(%[ftmp7], %[dst], %[dstStride], 0x00)
"pavgb %[ftmp2], %[ftmp2], %[ftmp7] \n\t"
MMI_SDXC1(%[ftmp2], %[dst], %[dstStride], 0x00)
: [ftmp0]"=&amp;f"(ftmp[0]), [ftmp1]"=&amp;f"(ftmp[1]),
[ftmp2]"=&amp;f"(ftmp[2]), [ftmp3]"=&amp;f"(ftmp[3]),
[ftmp4]"=&amp;f"(ftmp[4]), [ftmp5]"=&amp;f"(ftmp[5]),
[ftmp6]"=&amp;f"(ftmp[6]), [ftmp7]"=&amp;f"(ftmp[7]),
RESTRICT_ASM_ALL64
RESTRICT_ASM_ADDRT
[tmp0]"=&amp;r"(tmp0)
: [src8]"r"(src8), [src16]"r"(src16),
[dst]"r"(dst),
[src8Stride]"r"((mips_reg)src8Stride),
[dstStride]"r"((mips_reg)dstStride)
: "memory"
);</asm>

<expr_stmt><expr><name>src8</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>src8Stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src16</name> <operator>+=</operator> <literal type="number">48</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dstStride</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>b</name> <operator>-=</operator> <literal type="number">2</literal></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_pixels16_l2_shift5_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src16</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src8</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>src8Stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avg_pixels8_l2_shift5_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src16</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>, <argument><expr><name>src8Stride</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avg_pixels8_l2_shift5_mmi</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src16</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>src8</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>dstStride</name></expr></argument>,
<argument><expr><name>src8Stride</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ff_put_h264_qpel4_mc00_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_put_pixels4_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel4_mc10_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_h_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel4_mc20_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_h264_qpel4_h_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel4_mc30_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_h_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel4_mc01_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_block4_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_v_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel4_mc02_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_block4_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_v_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel4_mc03_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_block4_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_v_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>full_mid</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel4_mc11_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block4_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel4_mc31_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block4_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel4_mc13_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block4_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel4_mc33_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block4_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel4_mc22_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_h264_qpel4_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel4_mc21_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfHV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel4_mc23_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfHV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel4_mc12_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfHV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_block4_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel4_mc32_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfHV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_block4_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ff_avg_h264_qpel4_mc00_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_avg_pixels4_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel4_mc10_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_h_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel4_mc20_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avg_h264_qpel4_h_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel4_mc30_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_h_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel4_mc01_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_block4_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_v_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel4_mc02_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_block4_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avg_h264_qpel4_v_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel4_mc03_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_block4_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_v_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>full_mid</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel4_mc11_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block4_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel4_mc31_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block4_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel4_mc13_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block4_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel4_mc33_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block4_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel4_mc22_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avg_h264_qpel4_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel4_mc21_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfHV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel4_mc23_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfHV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel4_mc12_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfHV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_block4_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel4_mc32_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfHV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_block4_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel4_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels4_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ff_put_h264_qpel8_mc00_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_put_pixels8_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel8_mc10_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_h_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel8_mc20_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_h264_qpel8_h_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel8_mc30_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_h_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel8_mc01_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">104</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_block8_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_v_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel8_mc02_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">104</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_block8_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_v_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel8_mc03_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">104</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_block8_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_v_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>full_mid</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel8_mc11_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">104</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block8_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel8_mc31_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">104</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block8_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel8_mc13_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">104</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block8_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel8_mc33_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">104</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block8_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel8_mc22_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name><name>temp</name><index>[<expr><literal type="number">192</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_h264_qpel8_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel8_mc21_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name><name>temp</name><index>[<expr><literal type="number">448</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfHV</name> <init>= <expr><name>temp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfV</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>temp</name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_h264_qpel8_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_h_lowpass_l2_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel8_mc23_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name><name>temp</name><index>[<expr><literal type="number">448</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfHV</name> <init>= <expr><name>temp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfV</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>temp</name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_h264_qpel8_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_h_lowpass_l2_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel8_mc12_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name><name>temp</name><index>[<expr><literal type="number">448</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfHV</name> <init>= <expr><name>temp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfV</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>temp</name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_h264_qpel8_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_pixels8_l2_shift5_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfV</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel8_mc32_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name><name>temp</name><index>[<expr><literal type="number">448</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfHV</name> <init>= <expr><name>temp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfV</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>temp</name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_h264_qpel8_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_pixels8_l2_shift5_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfV</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ff_avg_h264_qpel8_mc00_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_avg_pixels8_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel8_mc10_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_h_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel8_mc20_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avg_h264_qpel8_h_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel8_mc30_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_h_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel8_mc01_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">104</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_block8_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_v_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel8_mc02_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">104</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_block8_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avg_h264_qpel8_v_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel8_mc03_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">104</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_block8_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_v_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>full_mid</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel8_mc11_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">104</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block8_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel8_mc31_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">104</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block8_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel8_mc13_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">104</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block8_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel8_mc33_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">104</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block8_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel8_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels8_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel8_mc22_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name><name>temp</name><index>[<expr><literal type="number">192</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avg_h264_qpel8_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel8_mc21_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name><name>temp</name><index>[<expr><literal type="number">448</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfHV</name> <init>= <expr><name>temp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfV</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>temp</name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_h264_qpel8_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avg_h264_qpel8_h_lowpass_l2_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel8_mc23_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name><name>temp</name><index>[<expr><literal type="number">448</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfHV</name> <init>= <expr><name>temp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfV</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>temp</name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_h264_qpel8_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avg_h264_qpel8_h_lowpass_l2_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel8_mc12_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name><name>temp</name><index>[<expr><literal type="number">448</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfHV</name> <init>= <expr><name>temp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfV</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>temp</name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_h264_qpel8_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avg_pixels8_l2_shift5_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfV</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel8_mc32_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name><name>temp</name><index>[<expr><literal type="number">448</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfHV</name> <init>= <expr><name>temp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfV</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>temp</name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_h264_qpel8_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avg_pixels8_l2_shift5_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfV</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ff_put_h264_qpel16_mc00_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_put_pixels16_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel16_mc10_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_h_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels16_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel16_mc20_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_h264_qpel16_h_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel16_mc30_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_h_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels16_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel16_mc01_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">336</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_block16_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_v_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels16_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel16_mc02_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">336</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_block16_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_v_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel16_mc03_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">336</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_block16_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_v_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels16_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>full_mid</name><operator>+</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel16_mc11_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">336</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block16_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels16_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel16_mc31_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">336</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block16_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels16_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel16_mc13_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">336</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block16_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels16_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel16_mc33_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">336</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block16_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_put_pixels16_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel16_mc22_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name><name>temp</name><index>[<expr><literal type="number">384</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_h264_qpel16_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel16_mc21_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name><name>temp</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfHV</name> <init>= <expr><name>temp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfV</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>temp</name> <operator>+</operator> <literal type="number">256</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_h264_qpel16_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_h_lowpass_l2_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel16_mc23_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name><name>temp</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfHV</name> <init>= <expr><name>temp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfV</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>temp</name> <operator>+</operator> <literal type="number">256</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_h264_qpel16_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_h_lowpass_l2_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel16_mc12_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name><name>temp</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfHV</name> <init>= <expr><name>temp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfV</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>temp</name> <operator>+</operator> <literal type="number">256</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_h264_qpel16_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_pixels16_l2_shift5_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfV</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_qpel16_mc32_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name><name>temp</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfHV</name> <init>= <expr><name>temp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfV</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>temp</name> <operator>+</operator> <literal type="number">256</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_h264_qpel16_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_pixels16_l2_shift5_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfV</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ff_avg_h264_qpel16_mc00_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ff_avg_pixels16_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel16_mc10_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_h_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels16_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel16_mc20_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avg_h264_qpel16_h_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel16_mc30_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_h_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels16_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel16_mc01_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">336</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_block16_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_v_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels16_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel16_mc02_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">336</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_block16_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avg_h264_qpel16_v_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel16_mc03_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">336</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>half</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_block16_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_v_lowpass_mmi</name><argument_list>(<argument><expr><name>half</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels16_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>full_mid</name><operator>+</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name>half</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel16_mc11_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">336</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block16_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels16_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel16_mc31_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">336</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block16_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels16_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel16_mc13_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">336</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block16_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels16_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel16_mc33_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>full</name><index>[<expr><literal type="number">336</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>full_mid</name><init>= <expr><name>full</name> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfH</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>halfV</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_h_lowpass_mmi</name><argument_list>(<argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_block16_mmi</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_h264_qpel16_v_lowpass_mmi</name><argument_list>(<argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>full_mid</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ff_avg_pixels16_l2_8_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfH</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel16_mc22_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name><name>temp</name><index>[<expr><literal type="number">384</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>avg_h264_qpel16_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel16_mc21_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name><name>temp</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfHV</name> <init>= <expr><name>temp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfV</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>temp</name> <operator>+</operator> <literal type="number">256</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_h264_qpel16_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avg_h264_qpel16_h_lowpass_l2_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel16_mc23_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name><name>temp</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfHV</name> <init>= <expr><name>temp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfV</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>temp</name> <operator>+</operator> <literal type="number">256</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_h264_qpel16_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avg_h264_qpel16_h_lowpass_l2_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel16_mc12_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name><name>temp</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfHV</name> <init>= <expr><name>temp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfV</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>temp</name> <operator>+</operator> <literal type="number">256</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_h264_qpel16_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avg_pixels16_l2_shift5_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfV</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_qpel16_mc32_mmi</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name><name>temp</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfHV</name> <init>= <expr><name>temp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>halfV</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>temp</name> <operator>+</operator> <literal type="number">256</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_h264_qpel16_hv_lowpass_mmi</name><argument_list>(<argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>halfV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>avg_pixels16_l2_shift5_mmi</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>halfV</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>halfHV</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>op2_avg</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>op2_put</name></cpp:undef>
</unit>
