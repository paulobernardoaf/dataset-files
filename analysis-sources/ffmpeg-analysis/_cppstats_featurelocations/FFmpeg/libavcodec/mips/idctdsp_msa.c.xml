<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mips\idctdsp_msa.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/generic_macros_msa.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp_mips.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_pixels_clamped_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>in0_d</name></decl>, <decl><type ref="prev"/><name>in1_d</name></decl>, <decl><type ref="prev"/><name>in2_d</name></decl>, <decl><type ref="prev"/><name>in3_d</name></decl>, <decl><type ref="prev"/><name>in4_d</name></decl>, <decl><type ref="prev"/><name>in5_d</name></decl>, <decl><type ref="prev"/><name>in6_d</name></decl>, <decl><type ref="prev"/><name>in7_d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>, <decl><type ref="prev"/><name>in4</name></decl>, <decl><type ref="prev"/><name>in5</name></decl>, <decl><type ref="prev"/><name>in6</name></decl>, <decl><type ref="prev"/><name>in7</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLIP_SH8_0_255</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B4_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B4_SH</name><argument_list>(<argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in0_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in1_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in2_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in3_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in4_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in5_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in6_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in7_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>in0_d</name></expr></argument>, <argument><expr><name>in1_d</name></expr></argument>, <argument><expr><name>in2_d</name></expr></argument>, <argument><expr><name>in3_d</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>in4_d</name></expr></argument>, <argument><expr><name>in5_d</name></expr></argument>, <argument><expr><name>in6_d</name></expr></argument>, <argument><expr><name>in7_d</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_signed_pixels_clamped_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>in0_d</name></decl>, <decl><type ref="prev"/><name>in1_d</name></decl>, <decl><type ref="prev"/><name>in2_d</name></decl>, <decl><type ref="prev"/><name>in3_d</name></decl>, <decl><type ref="prev"/><name>in4_d</name></decl>, <decl><type ref="prev"/><name>in5_d</name></decl>, <decl><type ref="prev"/><name>in6_d</name></decl>, <decl><type ref="prev"/><name>in7_d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>, <decl><type ref="prev"/><name>in4</name></decl>, <decl><type ref="prev"/><name>in5</name></decl>, <decl><type ref="prev"/><name>in6</name></decl>, <decl><type ref="prev"/><name>in7</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in0</name> <operator>+=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in1</name> <operator>+=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in2</name> <operator>+=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in3</name> <operator>+=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in4</name> <operator>+=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in5</name> <operator>+=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in6</name> <operator>+=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in7</name> <operator>+=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH8_0_255</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B4_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B4_SH</name><argument_list>(<argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in0_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in1_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in2_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in3_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in4_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in5_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in6_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in7_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>in0_d</name></expr></argument>, <argument><expr><name>in1_d</name></expr></argument>, <argument><expr><name>in2_d</name></expr></argument>, <argument><expr><name>in3_d</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>in4_d</name></expr></argument>, <argument><expr><name>in5_d</name></expr></argument>, <argument><expr><name>in6_d</name></expr></argument>, <argument><expr><name>in7_d</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_pixels_clamped_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pixels</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>in0_d</name></decl>, <decl><type ref="prev"/><name>in1_d</name></decl>, <decl><type ref="prev"/><name>in2_d</name></decl>, <decl><type ref="prev"/><name>in3_d</name></decl>, <decl><type ref="prev"/><name>in4_d</name></decl>, <decl><type ref="prev"/><name>in5_d</name></decl>, <decl><type ref="prev"/><name>in6_d</name></decl>, <decl><type ref="prev"/><name>in7_d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl>, <decl><type ref="prev"/><name>in2</name></decl>, <decl><type ref="prev"/><name>in3</name></decl>, <decl><type ref="prev"/><name>in4</name></decl>, <decl><type ref="prev"/><name>in5</name></decl>, <decl><type ref="prev"/><name>in6</name></decl>, <decl><type ref="prev"/><name>in7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>pix_in0</name></decl>, <decl><type ref="prev"/><name>pix_in1</name></decl>, <decl><type ref="prev"/><name>pix_in2</name></decl>, <decl><type ref="prev"/><name>pix_in3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>pix_in4</name></decl>, <decl><type ref="prev"/><name>pix_in5</name></decl>, <decl><type ref="prev"/><name>pix_in6</name></decl>, <decl><type ref="prev"/><name>pix_in7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>pix0</name></decl>, <decl><type ref="prev"/><name>pix1</name></decl>, <decl><type ref="prev"/><name>pix2</name></decl>, <decl><type ref="prev"/><name>pix3</name></decl>, <decl><type ref="prev"/><name>pix4</name></decl>, <decl><type ref="prev"/><name>pix5</name></decl>, <decl><type ref="prev"/><name>pix6</name></decl>, <decl><type ref="prev"/><name>pix7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_SH8</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>pix_in0</name></expr></argument>, <argument><expr><name>pix_in1</name></expr></argument>, <argument><expr><name>pix_in2</name></expr></argument>,
<argument><expr><name>pix_in3</name></expr></argument>, <argument><expr><name>pix_in4</name></expr></argument>, <argument><expr><name>pix_in5</name></expr></argument>, <argument><expr><name>pix_in6</name></expr></argument>, <argument><expr><name>pix_in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_UH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pix_in0</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pix_in1</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pix_in2</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pix_in3</name></expr></argument>,
<argument><expr><name>pix0</name></expr></argument>, <argument><expr><name>pix1</name></expr></argument>, <argument><expr><name>pix2</name></expr></argument>, <argument><expr><name>pix3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B4_UH</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pix_in4</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pix_in5</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pix_in6</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>pix_in7</name></expr></argument>,
<argument><expr><name>pix4</name></expr></argument>, <argument><expr><name>pix5</name></expr></argument>, <argument><expr><name>pix6</name></expr></argument>, <argument><expr><name>pix7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in0</name> <operator>+=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>pix0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in1</name> <operator>+=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>pix1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in2</name> <operator>+=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>pix2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in3</name> <operator>+=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>pix3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in4</name> <operator>+=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>pix4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in5</name> <operator>+=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>pix5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in6</name> <operator>+=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>pix6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in7</name> <operator>+=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <name>pix7</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLIP_SH8_0_255</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B4_SH</name><argument_list>(<argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>, <argument><expr><name>in0</name></expr></argument>, <argument><expr><name>in1</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B4_SH</name><argument_list>(<argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>, <argument><expr><name>in4</name></expr></argument>, <argument><expr><name>in5</name></expr></argument>, <argument><expr><name>in6</name></expr></argument>, <argument><expr><name>in7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in0_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in1_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in2_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in3_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in4_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in5_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in6_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in7_d</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>in7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>in0_d</name></expr></argument>, <argument><expr><name>in1_d</name></expr></argument>, <argument><expr><name>in2_d</name></expr></argument>, <argument><expr><name>in3_d</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pixels</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>in4_d</name></expr></argument>, <argument><expr><name>in5_d</name></expr></argument>, <argument><expr><name>in6_d</name></expr></argument>, <argument><expr><name>in7_d</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_pixels_clamped_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><name>av_restrict</name></type> <name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_pixels_clamped_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_signed_pixels_clamped_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><name>av_restrict</name></type> <name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>put_signed_pixels_clamped_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_add_pixels_clamped_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><name>av_restrict</name></type> <name>pixels</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>add_pixels_clamped_msa</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>, <argument><expr><name>line_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
