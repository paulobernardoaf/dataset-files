<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mips\qpeldsp_msa.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/generic_macros_msa.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qpeldsp_mips.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_HORIZ_QPEL_FILTER</name><parameter_list>(<parameter><type><name>inp0</name></type></parameter>, <parameter><type><name>inp1</name></type></parameter>, <parameter><type><name>mask</name></type></parameter>, <parameter><type><name>coef0</name></type></parameter>, <parameter><type><name>coef1</name></type></parameter>, <parameter><type><name>coef2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( { v16u8 out, tmp0, tmp1; v16u8 data0, data1, data2, data3, data4, data5; v8i16 res_r, res_l; v8u16 sum0_r, sum1_r, sum2_r, sum3_r; v8u16 sum0_l, sum1_l, sum2_l, sum3_l; VSHF_B2_UB(inp0, inp0, inp1, inp1, mask, mask, tmp0, tmp1); ILVRL_B2_UH(inp1, inp0, sum0_r, sum0_l); data0 = (v16u8) __msa_sldi_b((v16i8) inp0, (v16i8) tmp0, 15); data3 = (v16u8) __msa_sldi_b((v16i8) tmp1, (v16i8) inp1, 1); HADD_UB2_UH(sum0_r, sum0_l, sum0_r, sum0_l); ILVRL_B2_UH(data3, data0, sum1_r, sum1_l); data1 = (v16u8) __msa_sldi_b((v16i8) inp0, (v16i8) tmp0, 14); data4 = (v16u8) __msa_sldi_b((v16i8) tmp1, (v16i8) inp1, 2); sum0_r *= (v8u16) (coef0); sum0_l *= (v8u16) (coef0); ILVRL_B2_UH(data4, data1, sum2_r, sum2_l); data2 = (v16u8) __msa_sldi_b((v16i8) inp0, (v16i8) tmp0, 13); data5 = (v16u8) __msa_sldi_b((v16i8) tmp1, (v16i8) inp1, 3); DPADD_UB2_UH(sum2_r, sum2_l, coef2, coef2, sum0_r, sum0_l); ILVRL_B2_UH(data5, data2, sum3_r, sum3_l); HADD_UB2_UH(sum3_r, sum3_l, sum3_r, sum3_l); DPADD_UB2_UH(sum1_r, sum1_l, coef1, coef1, sum3_r, sum3_l); res_r = (v8i16) (sum0_r - sum3_r); res_l = (v8i16) (sum0_l - sum3_l); SRARI_H2_SH(res_r, res_l, 5); CLIP_SH2_0_255(res_r, res_l); out = (v16u8) __msa_pckev_b((v16i8) res_l, (v16i8) res_r); out; } )</cpp:value></cpp:define>

































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><parameter_list>(<parameter><type><name>inp0</name></type></parameter>, <parameter><type><name>inp1</name></type></parameter>, <parameter><type><name>mask0</name></type></parameter>, <parameter><type><name>mask1</name></type></parameter>, <parameter><type><name>mask2</name></type></parameter>, <parameter><type><name>mask3</name></type></parameter>, <parameter><type><name>coef0</name></type></parameter>, <parameter><type><name>coef1</name></type></parameter>, <parameter><type><name>coef2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( { v16u8 out; v8u16 sum0_r, sum1_r, sum2_r, sum3_r; v8u16 sum4_r, sum5_r, sum6_r, sum7_r; v8i16 res0_r, res1_r; VSHF_B2_UH(inp0, inp0, inp1, inp1, mask0, mask0, sum0_r, sum4_r); VSHF_B2_UH(inp0, inp0, inp1, inp1, mask3, mask3, sum3_r, sum7_r); HADD_UB2_UH(sum3_r, sum7_r, sum3_r, sum7_r); DOTP_UB2_UH(sum0_r, sum4_r, coef0, coef0, sum0_r, sum4_r); VSHF_B2_UH(inp0, inp0, inp1, inp1, mask2, mask2, sum2_r, sum6_r); VSHF_B2_UH(inp0, inp0, inp1, inp1, mask1, mask1, sum1_r, sum5_r); DPADD_UB2_UH(sum2_r, sum6_r, coef2, coef2, sum0_r, sum4_r); DPADD_UB2_UH(sum1_r, sum5_r, coef1, coef1, sum3_r, sum7_r); res0_r = (v8i16) (sum0_r - sum3_r); res1_r = (v8i16) (sum4_r - sum7_r); SRARI_H2_SH(res0_r, res1_r, 5); CLIP_SH2_0_255(res0_r, res1_r); out = (v16u8) __msa_pckev_b((v16i8) res1_r, (v16i8) res0_r); out; } )</cpp:value></cpp:define>

























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_HORIZ_QPEL_FILTER_8BYTE_1ROW</name><parameter_list>(<parameter><type><name>inp0</name></type></parameter>, <parameter><type><name>mask0</name></type></parameter>, <parameter><type><name>mask1</name></type></parameter>, <parameter><type><name>mask2</name></type></parameter>, <parameter><type><name>mask3</name></type></parameter>, <parameter><type><name>coef0</name></type></parameter>, <parameter><type><name>coef1</name></type></parameter>, <parameter><type><name>coef2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( { v16u8 out; v8i16 res0_r; v8u16 sum0_r, sum1_r, sum2_r, sum3_r; VSHF_B2_UH(inp0, inp0, inp0, inp0, mask0, mask3, sum0_r, sum3_r); sum3_r = __msa_hadd_u_h((v16u8) sum3_r, (v16u8) sum3_r); sum0_r = __msa_dotp_u_h((v16u8) sum0_r, (v16u8) coef0); VSHF_B2_UH(inp0, inp0, inp0, inp0, mask2, mask1, sum2_r, sum1_r); DPADD_UB2_UH(sum2_r, sum1_r, coef2, coef1, sum0_r, sum3_r); res0_r = (v8i16) (sum0_r - sum3_r); res0_r = __msa_srari_h(res0_r, 5); CLIP_SH_0_255(res0_r); out = (v16u8) __msa_pckev_b((v16i8) res0_r, (v16i8) res0_r); out; } )</cpp:value></cpp:define>




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE_1ROW</name><parameter_list>(<parameter><type><name>inp0</name></type></parameter>, <parameter><type><name>mask0</name></type></parameter>, <parameter><type><name>mask1</name></type></parameter>, <parameter><type><name>mask2</name></type></parameter>, <parameter><type><name>mask3</name></type></parameter>, <parameter><type><name>coef0</name></type></parameter>, <parameter><type><name>coef1</name></type></parameter>, <parameter><type><name>coef2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( { v16u8 out; v8i16 res0_r; v8u16 sum0_r, sum1_r, sum2_r, sum3_r; VSHF_B2_UH(inp0, inp0, inp0, inp0, mask0, mask3, sum0_r, sum3_r); sum3_r = __msa_hadd_u_h((v16u8) sum3_r, (v16u8) sum3_r); sum0_r = __msa_dotp_u_h((v16u8) sum0_r, (v16u8) coef0); VSHF_B2_UH(inp0, inp0, inp0, inp0, mask2, mask1, sum2_r, sum1_r); DPADD_UB2_UH(sum2_r, sum1_r, coef2, coef1, sum0_r, sum3_r); res0_r = (v8i16) (sum0_r - sum3_r); res0_r += 15; res0_r &gt;&gt;= 5; CLIP_SH_0_255(res0_r); out = (v16u8) __msa_pckev_b((v16i8) res0_r, (v16i8) res0_r); out; } )</cpp:value></cpp:define>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><parameter_list>(<parameter><type><name>inp0</name></type></parameter>, <parameter><type><name>inp1</name></type></parameter>, <parameter><type><name>mask</name></type></parameter>, <parameter><type><name>coef0</name></type></parameter>, <parameter><type><name>coef1</name></type></parameter>, <parameter><type><name>coef2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( { v16u8 out, tmp0, tmp1; v16u8 data0, data1, data2, data3, data4, data5; v8i16 res_r, res_l; v8u16 sum0_r, sum1_r, sum2_r, sum3_r; v8u16 sum0_l, sum1_l, sum2_l, sum3_l; VSHF_B2_UB(inp0, inp0, inp1, inp1, mask, mask, tmp0, tmp1); ILVRL_B2_UH(inp1, inp0, sum0_r, sum0_l); data0 = (v16u8) __msa_sldi_b((v16i8) inp0, (v16i8) tmp0, 15); data3 = (v16u8) __msa_sldi_b((v16i8) tmp1, (v16i8) inp1, 1); HADD_UB2_UH(sum0_r, sum0_l, sum0_r, sum0_l); ILVRL_B2_UH(data3, data0, sum1_r, sum1_l); data1 = (v16u8) __msa_sldi_b((v16i8) inp0, (v16i8) tmp0, 14); data4 = (v16u8) __msa_sldi_b((v16i8) tmp1, (v16i8) inp1, 2); sum0_r *= (v8u16) (coef0); sum0_l *= (v8u16) (coef0); ILVRL_B2_UH(data4, data1, sum2_r, sum2_l); data2 = (v16u8) __msa_sldi_b((v16i8) inp0, (v16i8) tmp0, 13); data5 = (v16u8) __msa_sldi_b((v16i8) tmp1, (v16i8) inp1, 3); DPADD_UB2_UH(sum2_r, sum2_l, coef2, coef2, sum0_r, sum0_l); ILVRL_B2_UH(data5, data2, sum3_r, sum3_l); HADD_UB2_UH(sum3_r, sum3_l, sum3_r, sum3_l); DPADD_UB2_UH(sum1_r, sum1_l, coef1, coef1, sum3_r, sum3_l); res_r = (v8i16) (sum0_r - sum3_r); res_l = (v8i16) (sum0_l - sum3_l); res_r += 15; res_l += 15; res_r &gt;&gt;= 5; res_l &gt;&gt;= 5; CLIP_SH2_0_255(res_r, res_l); out = (v16u8) __msa_pckev_b((v16i8) res_l, (v16i8) res_r); out; } )</cpp:value></cpp:define>





































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><parameter_list>(<parameter><type><name>inp0</name></type></parameter>, <parameter><type><name>inp1</name></type></parameter>, <parameter><type><name>mask0</name></type></parameter>, <parameter><type><name>mask1</name></type></parameter>, <parameter><type><name>mask2</name></type></parameter>, <parameter><type><name>mask3</name></type></parameter>, <parameter><type><name>coef0</name></type></parameter>, <parameter><type><name>coef1</name></type></parameter>, <parameter><type><name>coef2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( { v16u8 out; v8i16 res0_r, res1_r; v8u16 sum0_r, sum1_r, sum2_r, sum3_r; v8u16 sum4_r, sum5_r, sum6_r, sum7_r; VSHF_B2_UH(inp0, inp0, inp1, inp1, mask0, mask0, sum0_r, sum4_r); VSHF_B2_UH(inp0, inp0, inp1, inp1, mask3, mask3, sum3_r, sum7_r); HADD_UB2_UH(sum3_r, sum7_r, sum3_r, sum7_r); DOTP_UB2_UH(sum0_r, sum4_r, coef0, coef0, sum0_r, sum4_r); VSHF_B2_UH(inp0, inp0, inp1, inp1, mask2, mask2, sum2_r, sum6_r); VSHF_B2_UH(inp0, inp0, inp1, inp1, mask1, mask1, sum1_r, sum5_r); DPADD_UB2_UH(sum2_r, sum6_r, coef2, coef2, sum0_r, sum4_r); DPADD_UB2_UH(sum1_r, sum5_r, coef1, coef1, sum3_r, sum7_r); res0_r = (v8i16) (sum0_r - sum3_r); res1_r = (v8i16) (sum4_r - sum7_r); res0_r += 15; res1_r += 15; res0_r &gt;&gt;= 5; res1_r &gt;&gt;= 5; CLIP_SH2_0_255(res0_r, res1_r); out = (v16u8) __msa_pckev_b((v16i8) res1_r, (v16i8) res0_r); out; } )</cpp:value></cpp:define>




























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_VERT_QPEL_FILTER</name><parameter_list>(<parameter><type><name>inp0</name></type></parameter>, <parameter><type><name>inp1</name></type></parameter>, <parameter><type><name>inp2</name></type></parameter>, <parameter><type><name>inp3</name></type></parameter>, <parameter><type><name>inp4</name></type></parameter>, <parameter><type><name>inp5</name></type></parameter>, <parameter><type><name>inp6</name></type></parameter>, <parameter><type><name>inp7</name></type></parameter>, <parameter><type><name>coef0</name></type></parameter>, <parameter><type><name>coef1</name></type></parameter>, <parameter><type><name>coef2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( { v16u8 res; v8i16 res_r, res_l; v8u16 sum0_r, sum1_r, sum2_r, sum3_r; v8u16 sum0_l, sum1_l, sum2_l, sum3_l; ILVRL_B2_UH(inp4, inp0, sum0_r, sum0_l); ILVRL_B2_UH(inp7, inp3, sum3_r, sum3_l); DOTP_UB2_UH(sum0_r, sum0_l, coef0, coef0, sum0_r, sum0_l); HADD_UB2_UH(sum3_r, sum3_l, sum3_r, sum3_l); ILVRL_B2_UH(inp6, inp2, sum2_r, sum2_l); ILVRL_B2_UH(inp5, inp1, sum1_r, sum1_l); DPADD_UB2_UH(sum2_r, sum2_l, coef2, coef2, sum0_r, sum0_l); DPADD_UB2_UH(sum1_r, sum1_l, coef1, coef1, sum3_r, sum3_l); res_r = (v8i16) (sum0_r - sum3_r); res_l = (v8i16) (sum0_l - sum3_l); SRARI_H2_SH(res_r, res_l, 5); CLIP_SH2_0_255(res_r, res_l); res = (v16u8) __msa_pckev_b((v16i8) res_l, (v16i8) res_r); res; } )</cpp:value></cpp:define>

























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><parameter_list>(<parameter><type><name>inp00</name></type></parameter>, <parameter><type><name>inp01</name></type></parameter>, <parameter><type><name>inp02</name></type></parameter>, <parameter><type><name>inp03</name></type></parameter>, <parameter><type><name>inp04</name></type></parameter>, <parameter><type><name>inp05</name></type></parameter>, <parameter><type><name>inp06</name></type></parameter>, <parameter><type><name>inp07</name></type></parameter>, <parameter><type><name>inp10</name></type></parameter>, <parameter><type><name>inp11</name></type></parameter>, <parameter><type><name>inp12</name></type></parameter>, <parameter><type><name>inp13</name></type></parameter>, <parameter><type><name>inp14</name></type></parameter>, <parameter><type><name>inp15</name></type></parameter>, <parameter><type><name>inp16</name></type></parameter>, <parameter><type><name>inp17</name></type></parameter>, <parameter><type><name>coef0</name></type></parameter>, <parameter><type><name>coef1</name></type></parameter>, <parameter><type><name>coef2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( { v16u8 res; v8i16 val0, val1; v8u16 sum00, sum01, sum02, sum03; v8u16 sum10, sum11, sum12, sum13; ILVR_B4_UH(inp04, inp00, inp14, inp10, inp07, inp03, inp17, inp13, sum00, sum10, sum03, sum13); DOTP_UB2_UH(sum00, sum10, coef0, coef0, sum00, sum10); HADD_UB2_UH(sum03, sum13, sum03, sum13); ILVR_B4_UH(inp06, inp02, inp16, inp12, inp05, inp01, inp15, inp11, sum02, sum12, sum01, sum11); DPADD_UB2_UH(sum02, sum12, coef2, coef2, sum00, sum10); DPADD_UB2_UH(sum01, sum11, coef1, coef1, sum03, sum13); val0 = (v8i16) (sum00 - sum03); val1 = (v8i16) (sum10 - sum13); SRARI_H2_SH(val0, val1, 5); CLIP_SH2_0_255(val0, val1); res = (v16u8) __msa_pckev_b((v16i8) val1, (v16i8) val0); res; } )</cpp:value></cpp:define>



























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><parameter_list>(<parameter><type><name>inp0</name></type></parameter>, <parameter><type><name>inp1</name></type></parameter>, <parameter><type><name>inp2</name></type></parameter>, <parameter><type><name>inp3</name></type></parameter>, <parameter><type><name>inp4</name></type></parameter>, <parameter><type><name>inp5</name></type></parameter>, <parameter><type><name>inp6</name></type></parameter>, <parameter><type><name>inp7</name></type></parameter>, <parameter><type><name>coef0</name></type></parameter>, <parameter><type><name>coef1</name></type></parameter>, <parameter><type><name>coef2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( { v16u8 res; v8i16 res_r, res_l; v8u16 sum0_r, sum1_r, sum2_r, sum3_r; v8u16 sum0_l, sum1_l, sum2_l, sum3_l; ILVRL_B2_UH(inp4, inp0, sum0_r, sum0_l); ILVRL_B2_UH(inp7, inp3, sum3_r, sum3_l); DOTP_UB2_UH(sum0_r, sum0_l, coef0, coef0, sum0_r, sum0_l); HADD_UB2_UH(sum3_r, sum3_l, sum3_r, sum3_l); ILVRL_B2_UH(inp6, inp2, sum2_r, sum2_l); ILVRL_B2_UH(inp5, inp1, sum1_r, sum1_l); DPADD_UB2_UH(sum2_r, sum2_l, coef2, coef2, sum0_r, sum0_l); DPADD_UB2_UH(sum1_r, sum1_l, coef1, coef1, sum3_r, sum3_l); res_r = (v8i16) (sum0_r - sum3_r); res_l = (v8i16) (sum0_l - sum3_l); res_r += 15; res_l += 15; res_r &gt;&gt;= 5; res_l &gt;&gt;= 5; CLIP_SH2_0_255(res_r, res_l); res = (v16u8) __msa_pckev_b((v16i8) res_l, (v16i8) res_r); res; } )</cpp:value></cpp:define>




























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><parameter_list>(<parameter><type><name>inp00</name></type></parameter>, <parameter><type><name>inp01</name></type></parameter>, <parameter><type><name>inp02</name></type></parameter>, <parameter><type><name>inp03</name></type></parameter>, <parameter><type><name>inp04</name></type></parameter>, <parameter><type><name>inp05</name></type></parameter>, <parameter><type><name>inp06</name></type></parameter>, <parameter><type><name>inp07</name></type></parameter>, <parameter><type><name>inp10</name></type></parameter>, <parameter><type><name>inp11</name></type></parameter>, <parameter><type><name>inp12</name></type></parameter>, <parameter><type><name>inp13</name></type></parameter>, <parameter><type><name>inp14</name></type></parameter>, <parameter><type><name>inp15</name></type></parameter>, <parameter><type><name>inp16</name></type></parameter>, <parameter><type><name>inp17</name></type></parameter>, <parameter><type><name>coef0</name></type></parameter>, <parameter><type><name>coef1</name></type></parameter>, <parameter><type><name>coef2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( { v16u8 res; v8i16 val0, val1; v8u16 sum00, sum01, sum02, sum03; v8u16 sum10, sum11, sum12, sum13; ILVR_B4_UH(inp04, inp00, inp14, inp10, inp07, inp03, inp17, inp13, sum00, sum10, sum03, sum13); DOTP_UB2_UH(sum00, sum10, coef0, coef0, sum00, sum10); HADD_UB2_UH(sum03, sum13, sum03, sum13); ILVR_B4_UH(inp06, inp02, inp16, inp12, inp05, inp01, inp15, inp11, sum02, sum12, sum01, sum11); DPADD_UB2_UH(sum02, sum12, coef2, coef2, sum00, sum10); DPADD_UB2_UH(sum01, sum11, coef1, coef1, sum03, sum13); val0 = (v8i16) (sum00 - sum03); val1 = (v8i16) (sum10 - sum13); val0 += 15; val1 += 15; val0 &gt;&gt;= 5; val1 &gt;&gt;= 5; CLIP_SH2_0_255(val0, val1); res = (v16u8) __msa_pckev_b((v16i8) val1, (v16i8) val0); res; } )</cpp:value></cpp:define>






























<function><type><specifier>static</specifier> <name>void</name></type> <name>horiz_mc_qpel_aver_src0_8width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horiz_mc_qpel_aver_src0_16width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name> <init>= <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_ldi_h</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horiz_mc_qpel_8width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horiz_mc_qpel_16width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name> <init>= <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_ldi_h</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horiz_mc_qpel_aver_src1_8width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B4_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horiz_mc_qpel_aver_src1_16width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name> <init>= <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_ldi_h</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horiz_mc_qpel_no_rnd_aver_src0_8width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horiz_mc_qpel_no_rnd_aver_src0_16width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name> <init>= <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_ldi_h</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horiz_mc_qpel_no_rnd_8width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horiz_mc_qpel_no_rnd_16width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name> <init>= <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_ldi_h</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horiz_mc_qpel_no_rnd_aver_src1_8width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B4_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horiz_mc_qpel_no_rnd_aver_src1_16width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name> <init>= <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_ldi_h</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horiz_mc_qpel_avg_dst_aver_src0_8width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horiz_mc_qpel_avg_dst_aver_src0_16width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name> <init>= <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_ldi_h</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horiz_mc_qpel_avg_dst_8width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horiz_mc_qpel_avg_dst_16width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name> <init>= <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_ldi_h</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horiz_mc_qpel_avg_dst_aver_src1_8width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B4_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>horiz_mc_qpel_avg_dst_aver_src1_16width_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name> <init>= <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_ldi_h</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_mc_qpel_aver_src0_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>, <decl><type ref="prev"/><name>inp8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_mc_qpel_aver_src0_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>, <decl><type ref="prev"/><name>inp8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp9</name></decl>, <decl><type ref="prev"/><name>inp10</name></decl>, <decl><type ref="prev"/><name>inp11</name></decl>, <decl><type ref="prev"/><name>inp12</name></decl>, <decl><type ref="prev"/><name>inp13</name></decl>, <decl><type ref="prev"/><name>inp14</name></decl>, <decl><type ref="prev"/><name>inp15</name></decl>, <decl><type ref="prev"/><name>inp16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp5</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp6</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp7</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp16</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>,
<argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>,
<argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>,
<argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>,
<argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_mc_qpel_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>, <decl><type ref="prev"/><name>inp8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_mc_qpel_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>, <decl><type ref="prev"/><name>inp8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp9</name></decl>, <decl><type ref="prev"/><name>inp10</name></decl>, <decl><type ref="prev"/><name>inp11</name></decl>, <decl><type ref="prev"/><name>inp12</name></decl>, <decl><type ref="prev"/><name>inp13</name></decl>, <decl><type ref="prev"/><name>inp14</name></decl>, <decl><type ref="prev"/><name>inp15</name></decl>, <decl><type ref="prev"/><name>inp16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>inp4</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp5</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp6</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp7</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp9</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp10</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp11</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp12</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp13</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp14</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp15</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp16</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>,
<argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>,
<argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>,
<argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>,
<argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_mc_qpel_aver_src1_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>, <decl><type ref="prev"/><name>inp8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp5</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp7</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_mc_qpel_aver_src1_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>, <decl><type ref="prev"/><name>inp8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp9</name></decl>, <decl><type ref="prev"/><name>inp10</name></decl>, <decl><type ref="prev"/><name>inp11</name></decl>, <decl><type ref="prev"/><name>inp12</name></decl>, <decl><type ref="prev"/><name>inp13</name></decl>, <decl><type ref="prev"/><name>inp14</name></decl>, <decl><type ref="prev"/><name>inp15</name></decl>, <decl><type ref="prev"/><name>inp16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>inp4</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp5</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp6</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp7</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp9</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp10</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp11</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp12</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp13</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp14</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp15</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp16</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>,
<argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>,
<argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>,
<argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>,
<argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_mc_qpel_no_rnd_aver_src0_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>, <decl><type ref="prev"/><name>inp8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_mc_qpel_no_rnd_aver_src0_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>, <decl><type ref="prev"/><name>inp8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp9</name></decl>, <decl><type ref="prev"/><name>inp10</name></decl>, <decl><type ref="prev"/><name>inp11</name></decl>, <decl><type ref="prev"/><name>inp12</name></decl>, <decl><type ref="prev"/><name>inp13</name></decl>, <decl><type ref="prev"/><name>inp14</name></decl>, <decl><type ref="prev"/><name>inp15</name></decl>, <decl><type ref="prev"/><name>inp16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp5</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp6</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp7</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp9</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp10</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp11</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp12</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp13</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp14</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp15</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp16</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>,
<argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>,
<argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>,
<argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>,
<argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_mc_qpel_no_rnd_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>, <decl><type ref="prev"/><name>inp8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_mc_qpel_no_rnd_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>, <decl><type ref="prev"/><name>inp8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp9</name></decl>, <decl><type ref="prev"/><name>inp10</name></decl>, <decl><type ref="prev"/><name>inp11</name></decl>, <decl><type ref="prev"/><name>inp12</name></decl>, <decl><type ref="prev"/><name>inp13</name></decl>, <decl><type ref="prev"/><name>inp14</name></decl>, <decl><type ref="prev"/><name>inp15</name></decl>, <decl><type ref="prev"/><name>inp16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp5</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp6</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp7</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp9</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp10</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp11</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp12</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp13</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp14</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp15</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp16</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>,
<argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>,
<argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>,
<argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>,
<argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_mc_qpel_no_rnd_aver_src1_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>, <decl><type ref="prev"/><name>inp8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp5</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp7</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_mc_qpel_no_rnd_aver_src1_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>, <decl><type ref="prev"/><name>inp8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp9</name></decl>, <decl><type ref="prev"/><name>inp10</name></decl>, <decl><type ref="prev"/><name>inp11</name></decl>, <decl><type ref="prev"/><name>inp12</name></decl>, <decl><type ref="prev"/><name>inp13</name></decl>, <decl><type ref="prev"/><name>inp14</name></decl>, <decl><type ref="prev"/><name>inp15</name></decl>, <decl><type ref="prev"/><name>inp16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp5</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp6</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp7</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp9</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp10</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp11</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp12</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp13</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp14</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp15</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp16</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>,
<argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>,
<argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>,
<argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>,
<argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_mc_qpel_avg_dst_aver_src0_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>, <decl><type ref="prev"/><name>inp8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_mc_qpel_avg_dst_aver_src0_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>, <decl><type ref="prev"/><name>inp8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp9</name></decl>, <decl><type ref="prev"/><name>inp10</name></decl>, <decl><type ref="prev"/><name>inp11</name></decl>, <decl><type ref="prev"/><name>inp12</name></decl>, <decl><type ref="prev"/><name>inp13</name></decl>, <decl><type ref="prev"/><name>inp14</name></decl>, <decl><type ref="prev"/><name>inp15</name></decl>, <decl><type ref="prev"/><name>inp16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp5</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp6</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp7</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp16</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>,
<argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>,
<argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>,
<argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>,
<argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_mc_qpel_avg_dst_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>, <decl><type ref="prev"/><name>inp8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_mc_qpel_avg_dst_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>, <decl><type ref="prev"/><name>inp8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp9</name></decl>, <decl><type ref="prev"/><name>inp10</name></decl>, <decl><type ref="prev"/><name>inp11</name></decl>, <decl><type ref="prev"/><name>inp12</name></decl>, <decl><type ref="prev"/><name>inp13</name></decl>, <decl><type ref="prev"/><name>inp14</name></decl>, <decl><type ref="prev"/><name>inp15</name></decl>, <decl><type ref="prev"/><name>inp16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp5</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp6</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp7</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp9</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp10</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp11</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp12</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp13</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp14</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp15</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp16</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>,
<argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>,
<argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>,
<argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>,
<argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_mc_qpel_avg_dst_aver_src1_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>, <decl><type ref="prev"/><name>inp8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp5</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp7</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vert_mc_qpel_avg_dst_aver_src1_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>, <decl><type ref="prev"/><name>inp8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp9</name></decl>, <decl><type ref="prev"/><name>inp10</name></decl>, <decl><type ref="prev"/><name>inp11</name></decl>, <decl><type ref="prev"/><name>inp12</name></decl>, <decl><type ref="prev"/><name>inp13</name></decl>, <decl><type ref="prev"/><name>inp14</name></decl>, <decl><type ref="prev"/><name>inp15</name></decl>, <decl><type ref="prev"/><name>inp16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp5</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp6</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp7</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp8</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp9</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>,
<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp10</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp11</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>,
<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp12</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>,
<argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp13</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>,
<argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp14</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>,
<argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp15</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>, <argument><expr><name>inp8</name></expr></argument>,
<argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp16</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>, <argument><expr><name>inp9</name></expr></argument>,
<argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>, <argument><expr><name>inp10</name></expr></argument>,
<argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>, <argument><expr><name>inp11</name></expr></argument>,
<argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>, <argument><expr><name>inp13</name></expr></argument>, <argument><expr><name>inp12</name></expr></argument>,
<argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>inp14</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>inp15</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>inp16</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_no_rnd_horiz_src0_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name> <init>= <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_ldi_h</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_no_rnd_aver_hv_src00_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_horiz_src0_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_no_rnd_aver_src0_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_no_rnd_aver_hv_src00_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>avg0</name></decl>, <decl><type ref="prev"/><name>avg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz5</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz7</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_no_rnd_horiz_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name> <init>= <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_ldi_h</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_no_rnd_aver_v_src0_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_horiz_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_no_rnd_aver_src0_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_no_rnd_aver_v_src0_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>avg0</name></decl>, <decl><type ref="prev"/><name>avg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz5</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz7</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_no_rnd_horiz_src1_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name> <init>= <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_ldi_h</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_no_rnd_aver_hv_src10_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_horiz_src1_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_no_rnd_aver_src0_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_no_rnd_aver_hv_src10_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>avg0</name></decl>, <decl><type ref="prev"/><name>avg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz5</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz7</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_no_rnd_aver_h_src0_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_horiz_src0_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_no_rnd_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_no_rnd_aver_h_src0_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_no_rnd_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_horiz_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_no_rnd_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_no_rnd_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr>;</expr_stmt>


<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_no_rnd_aver_h_src1_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_horiz_src1_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_no_rnd_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_no_rnd_aver_h_src1_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_no_rnd_aver_hv_src01_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_horiz_src0_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_no_rnd_aver_src1_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_no_rnd_aver_hv_src01_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>avg0</name></decl>, <decl><type ref="prev"/><name>avg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz8</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_no_rnd_aver_v_src1_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_horiz_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_no_rnd_aver_src1_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_no_rnd_aver_v_src1_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>avg0</name></decl>, <decl><type ref="prev"/><name>avg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz8</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_no_rnd_aver_hv_src11_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_horiz_src1_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_no_rnd_aver_src1_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_no_rnd_aver_hv_src11_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>avg0</name></decl>, <decl><type ref="prev"/><name>avg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_NO_ROUND_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>,
<argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>,
<argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_NO_ROUND_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz8</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_ave_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_aver_horiz_src0_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name> <init>= <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_ldi_h</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_aver_hv_src00_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_aver_horiz_src0_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_aver_src0_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_aver_hv_src00_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>avg0</name></decl>, <decl><type ref="prev"/><name>avg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz5</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz7</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_aver_horiz_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name> <init>= <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_ldi_h</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_aver_v_src0_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_aver_horiz_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_aver_src0_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_aver_v_src0_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>avg0</name></decl>, <decl><type ref="prev"/><name>avg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz5</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz7</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_aver_horiz_src1_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>loop_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>, <decl><type ref="prev"/><name>inp4</name></decl>, <decl><type ref="prev"/><name>inp5</name></decl>, <decl><type ref="prev"/><name>inp6</name></decl>, <decl><type ref="prev"/><name>inp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask</name> <init>= <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_ldi_h</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_count</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>loop_count</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp4</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>inp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp6</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>inp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_aver_hv_src10_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_aver_horiz_src1_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_aver_src0_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_aver_hv_src10_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>avg0</name></decl>, <decl><type ref="prev"/><name>avg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz5</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz7</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_aver_h_src0_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_aver_horiz_src0_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_aver_h_src0_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_aver_horiz_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_aver_h_src1_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_aver_horiz_src1_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_aver_h_src1_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_aver_hv_src01_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_aver_horiz_src0_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_aver_src1_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_aver_hv_src01_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>avg0</name></decl>, <decl><type ref="prev"/><name>avg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz5</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz7</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_aver_v_src1_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_aver_horiz_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_aver_src1_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_aver_v_src1_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>avg0</name></decl>, <decl><type ref="prev"/><name>avg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz5</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz7</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_aver_hv_src11_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_aver_horiz_src1_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_aver_src1_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_aver_hv_src11_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>avg0</name></decl>, <decl><type ref="prev"/><name>avg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insve_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz8</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_avg_dst_aver_hv_src00_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_aver_horiz_src0_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_avg_dst_aver_src0_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_avg_dst_aver_hv_src00_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>avg0</name></decl>, <decl><type ref="prev"/><name>avg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz5</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz7</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_avg_dst_aver_v_src0_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_aver_horiz_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_avg_dst_aver_src0_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_avg_dst_aver_v_src0_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>avg0</name></decl>, <decl><type ref="prev"/><name>avg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz5</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz7</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_avg_dst_aver_hv_src10_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_aver_horiz_src1_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_avg_dst_aver_src0_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_avg_dst_aver_hv_src10_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>avg0</name></decl>, <decl><type ref="prev"/><name>avg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz5</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz7</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_avg_dst_aver_h_src0_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_aver_horiz_src0_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_avg_dst_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_avg_dst_aver_h_src0_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>avg0</name></decl>, <decl><type ref="prev"/><name>avg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_avg_dst_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_aver_horiz_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_avg_dst_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_avg_dst_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>avg0</name></decl>, <decl><type ref="prev"/><name>avg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_avg_dst_aver_h_src1_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_aver_horiz_src1_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_avg_dst_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_avg_dst_aver_h_src1_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>avg0</name></decl>, <decl><type ref="prev"/><name>avg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_avg_dst_aver_hv_src01_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_aver_horiz_src0_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_avg_dst_aver_src1_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_avg_dst_aver_hv_src01_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>avg0</name></decl>, <decl><type ref="prev"/><name>avg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz8</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_avg_dst_aver_v_src1_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_aver_horiz_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_avg_dst_aver_src1_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_avg_dst_aver_v_src1_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>avg0</name></decl>, <decl><type ref="prev"/><name>avg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>,
<argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz8</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_avg_dst_aver_hv_src11_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buff</name><index>[<expr><literal type="number">272</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hv_mc_qpel_aver_horiz_src1_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vert_mc_qpel_avg_dst_aver_src1_16x16_msa</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hv_mc_qpel_avg_dst_aver_hv_src11_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>inp0</name></decl>, <decl><type ref="prev"/><name>inp1</name></decl>, <decl><type ref="prev"/><name>inp2</name></decl>, <decl><type ref="prev"/><name>inp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>avg0</name></decl>, <decl><type ref="prev"/><name>avg1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz0</name></decl>, <decl><type ref="prev"/><name>horiz1</name></decl>, <decl><type ref="prev"/><name>horiz2</name></decl>, <decl><type ref="prev"/><name>horiz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>horiz4</name></decl>, <decl><type ref="prev"/><name>horiz5</name></decl>, <decl><type ref="prev"/><name>horiz6</name></decl>, <decl><type ref="prev"/><name>horiz7</name></decl>, <decl><type ref="prev"/><name>horiz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask2</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>mask3</name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const20</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const6</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>const3</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ldi_b</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz2</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz3</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>inp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz4</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz5</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz2</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>,
<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>,
<argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLDI_B2_UB</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>inp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inp2</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp3</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>inp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz6</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp2</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz7</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_splati_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz4</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>,
<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>,
<argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz0</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>inp0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_HORIZ_QPEL_FILTER_8BYTE_1ROW</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>mask0</name></expr></argument>, <argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>, <argument><expr><name>mask3</name></expr></argument>,
<argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_sldi_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>inp0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>horiz8</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>inp0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz6</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz1</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>,
<argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz2</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg0</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz8</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>horiz7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>APPLY_VERT_QPEL_FILTER_8BYTE</name><argument_list>(<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz3</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>, <argument><expr><name>horiz6</name></expr></argument>,
<argument><expr><name>horiz5</name></expr></argument>, <argument><expr><name>horiz4</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz8</name></expr></argument>, <argument><expr><name>horiz7</name></expr></argument>,
<argument><expr><name>horiz6</name></expr></argument>, <argument><expr><name>const20</name></expr></argument>, <argument><expr><name>const6</name></expr></argument>, <argument><expr><name>const3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>avg1</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>avg1</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_8x8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>loop_cnt</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>loop_cnt</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>loop_cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src1</name> <operator>=</operator> <call><name>LD</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_16x16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src8</name></decl>, <decl><type ref="prev"/><name>src9</name></decl>, <decl><type ref="prev"/><name>src10</name></decl>, <decl><type ref="prev"/><name>src11</name></decl>, <decl><type ref="prev"/><name>src12</name></decl>, <decl><type ref="prev"/><name>src13</name></decl>, <decl><type ref="prev"/><name>src14</name></decl>, <decl><type ref="prev"/><name>src15</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>,
<argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src9</name></expr></argument>, <argument><expr><name>src10</name></expr></argument>, <argument><expr><name>src11</name></expr></argument>, <argument><expr><name>src12</name></expr></argument>, <argument><expr><name>src13</name></expr></argument>, <argument><expr><name>src14</name></expr></argument>, <argument><expr><name>src15</name></expr></argument>,
<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_width8_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>, <decl><type ref="prev"/><name>out3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr>;</init> <condition><expr><name>cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_UB4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>,
<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out2</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out3</name> <operator>=</operator> <call><name>__msa_copy_u_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>dst3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_width16_msa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>src_stride</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dst_stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst1</name></decl>, <decl><type ref="prev"/><name>dst2</name></decl>, <decl><type ref="prev"/><name>dst3</name></decl>, <decl><type ref="prev"/><name>dst4</name></decl>, <decl><type ref="prev"/><name>dst5</name></decl>, <decl><type ref="prev"/><name>dst6</name></decl>, <decl><type ref="prev"/><name>dst7</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>;</init> <condition><expr><name>cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>src_stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVER_UB4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>,
<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB4_UB</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>,
<argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_UB8</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst4</name></expr></argument>, <argument><expr><name>dst5</name></expr></argument>, <argument><expr><name>dst6</name></expr></argument>, <argument><expr><name>dst7</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>dst_stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_copy_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>copy_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_copy_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>copy_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_horiz_mc_qpel_aver_src0_8width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>horiz_mc_qpel_aver_src0_8width_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_horiz_mc_qpel_aver_src0_16width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>horiz_mc_qpel_aver_src0_16width_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_horiz_mc_qpel_8width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>horiz_mc_qpel_8width_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_horiz_mc_qpel_16width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>horiz_mc_qpel_16width_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_horiz_mc_qpel_aver_src1_8width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>horiz_mc_qpel_aver_src1_8width_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_horiz_mc_qpel_aver_src1_16width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>horiz_mc_qpel_aver_src1_16width_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_horiz_mc_qpel_no_rnd_aver_src0_8width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>horiz_mc_qpel_no_rnd_aver_src0_8width_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_horiz_mc_qpel_no_rnd_aver_src0_16width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>horiz_mc_qpel_no_rnd_aver_src0_16width_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_horiz_mc_qpel_no_rnd_8width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>horiz_mc_qpel_no_rnd_8width_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_horiz_mc_qpel_no_rnd_16width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>horiz_mc_qpel_no_rnd_16width_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_horiz_mc_qpel_no_rnd_aver_src1_8width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>horiz_mc_qpel_no_rnd_aver_src1_8width_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_horiz_mc_qpel_no_rnd_aver_src1_16width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>horiz_mc_qpel_no_rnd_aver_src1_16width_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_width8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avg_width8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_width16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>avg_width16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_horiz_mc_qpel_avg_dst_aver_src0_8width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>horiz_mc_qpel_avg_dst_aver_src0_8width_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_horiz_mc_qpel_avg_dst_aver_src0_16width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>horiz_mc_qpel_avg_dst_aver_src0_16width_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_horiz_mc_qpel_avg_dst_8width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>horiz_mc_qpel_avg_dst_8width_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_horiz_mc_qpel_avg_dst_16width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>horiz_mc_qpel_avg_dst_16width_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_horiz_mc_qpel_avg_dst_aver_src1_8width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>horiz_mc_qpel_avg_dst_aver_src1_8width_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_horiz_mc_qpel_avg_dst_aver_src1_16width_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>horiz_mc_qpel_avg_dst_aver_src1_16width_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ff_vert_mc_qpel_aver_src0_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vert_mc_qpel_aver_src0_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vert_mc_qpel_aver_src0_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vert_mc_qpel_aver_src0_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vert_mc_qpel_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vert_mc_qpel_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vert_mc_qpel_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vert_mc_qpel_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vert_mc_qpel_aver_src1_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vert_mc_qpel_aver_src1_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vert_mc_qpel_aver_src1_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vert_mc_qpel_aver_src1_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vert_mc_qpel_no_rnd_aver_src0_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vert_mc_qpel_no_rnd_aver_src0_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vert_mc_qpel_no_rnd_aver_src0_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vert_mc_qpel_no_rnd_aver_src0_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vert_mc_qpel_no_rnd_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vert_mc_qpel_no_rnd_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vert_mc_qpel_no_rnd_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vert_mc_qpel_no_rnd_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vert_mc_qpel_no_rnd_aver_src1_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vert_mc_qpel_no_rnd_aver_src1_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vert_mc_qpel_no_rnd_aver_src1_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vert_mc_qpel_no_rnd_aver_src1_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vert_mc_qpel_avg_dst_aver_src0_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vert_mc_qpel_avg_dst_aver_src0_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vert_mc_qpel_avg_dst_aver_src0_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vert_mc_qpel_avg_dst_aver_src0_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vert_mc_qpel_avg_dst_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vert_mc_qpel_avg_dst_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vert_mc_qpel_avg_dst_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vert_mc_qpel_avg_dst_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vert_mc_qpel_avg_dst_aver_src1_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vert_mc_qpel_avg_dst_aver_src1_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vert_mc_qpel_avg_dst_aver_src1_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vert_mc_qpel_avg_dst_aver_src1_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ff_hv_mc_qpel_aver_hv_src00_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_aver_hv_src00_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_aver_hv_src00_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_aver_hv_src00_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_aver_v_src0_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_aver_v_src0_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_aver_v_src0_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_aver_v_src0_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_aver_hv_src10_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_aver_hv_src10_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_aver_hv_src10_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_aver_hv_src10_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_aver_h_src0_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_aver_h_src0_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_aver_h_src0_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_aver_h_src0_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_aver_h_src1_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_aver_h_src1_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_aver_h_src1_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_aver_h_src1_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_aver_hv_src01_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_aver_hv_src01_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_aver_hv_src01_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_aver_hv_src01_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_aver_v_src1_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_aver_v_src1_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_aver_v_src1_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_aver_v_src1_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_aver_hv_src11_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_aver_hv_src11_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_aver_hv_src11_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_aver_hv_src11_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_avg_dst_aver_hv_src00_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_avg_dst_aver_hv_src00_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_avg_dst_aver_hv_src00_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_avg_dst_aver_hv_src00_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_avg_dst_aver_v_src0_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_avg_dst_aver_v_src0_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_avg_dst_aver_v_src0_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_avg_dst_aver_v_src0_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_avg_dst_aver_hv_src10_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_avg_dst_aver_hv_src10_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_avg_dst_aver_hv_src10_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_avg_dst_aver_hv_src10_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_avg_dst_aver_h_src0_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_avg_dst_aver_h_src0_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_avg_dst_aver_h_src0_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_avg_dst_aver_h_src0_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_avg_dst_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_avg_dst_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_avg_dst_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_avg_dst_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_avg_dst_aver_h_src1_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_avg_dst_aver_h_src1_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_avg_dst_aver_h_src1_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_avg_dst_aver_h_src1_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_avg_dst_aver_hv_src01_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_avg_dst_aver_hv_src01_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_avg_dst_aver_hv_src01_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_avg_dst_aver_hv_src01_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_avg_dst_aver_v_src1_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_avg_dst_aver_v_src1_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_avg_dst_aver_v_src1_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_avg_dst_aver_v_src1_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_avg_dst_aver_hv_src11_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_avg_dst_aver_hv_src11_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_avg_dst_aver_hv_src11_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_avg_dst_aver_hv_src11_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_no_rnd_aver_hv_src00_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_aver_hv_src00_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_no_rnd_aver_hv_src00_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_aver_hv_src00_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_no_rnd_aver_v_src0_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_aver_v_src0_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_no_rnd_aver_v_src0_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_aver_v_src0_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_no_rnd_aver_hv_src10_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_aver_hv_src10_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_no_rnd_aver_hv_src10_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_aver_hv_src10_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_no_rnd_aver_h_src0_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_aver_h_src0_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_no_rnd_aver_h_src0_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_aver_h_src0_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_no_rnd_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_no_rnd_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_no_rnd_aver_h_src1_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_aver_h_src1_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_no_rnd_aver_h_src1_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_aver_h_src1_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_no_rnd_aver_hv_src01_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_aver_hv_src01_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_no_rnd_aver_hv_src01_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_aver_hv_src01_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_no_rnd_aver_v_src1_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_aver_v_src1_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_no_rnd_aver_v_src1_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_aver_v_src1_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_no_rnd_aver_hv_src11_16x16_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_aver_hv_src11_16x16_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hv_mc_qpel_no_rnd_aver_hv_src11_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>hv_mc_qpel_no_rnd_aver_hv_src11_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
