<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mips\fmtconvert_mips.c">
















































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/fmtconvert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/asmdefs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>int32_to_float_fmul_scalar_mips</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>float</name></type> <name>mul</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>float</name></type> <name>temp1</name></decl>, <decl><type ref="prev"/><name>temp3</name></decl>, <decl><type ref="prev"/><name>temp5</name></decl>, <decl><type ref="prev"/><name>temp7</name></decl>, <decl><type ref="prev"/><name>temp9</name></decl>, <decl><type ref="prev"/><name>temp11</name></decl>, <decl><type ref="prev"/><name>temp13</name></decl>, <decl><type ref="prev"/><name>temp15</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rpom1</name></decl>, <decl><type ref="prev"/><name>rpom2</name></decl>, <decl><type ref="prev"/><name>rpom11</name></decl>, <decl><type ref="prev"/><name>rpom21</name></decl>, <decl><type ref="prev"/><name>rpom12</name></decl>, <decl><type ref="prev"/><name>rpom22</name></decl>, <decl><type ref="prev"/><name>rpom13</name></decl>, <decl><type ref="prev"/><name>rpom23</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>src_end</name> <init>= <expr><name>src</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>



<asm>__asm__ <specifier>volatile</specifier> (
"i32tf_lp%=: \n\t"
"lw %[rpom11], 0(%[src]) \n\t"
"lw %[rpom21], 4(%[src]) \n\t"
"lw %[rpom1], 8(%[src]) \n\t"
"lw %[rpom2], 12(%[src]) \n\t"
"mtc1 %[rpom11], %[temp1] \n\t"
"mtc1 %[rpom21], %[temp3] \n\t"
"mtc1 %[rpom1], %[temp5] \n\t"
"mtc1 %[rpom2], %[temp7] \n\t"

"lw %[rpom13], 16(%[src]) \n\t"
"lw %[rpom23], 20(%[src]) \n\t"
"lw %[rpom12], 24(%[src]) \n\t"
"lw %[rpom22], 28(%[src]) \n\t"
"mtc1 %[rpom13], %[temp9] \n\t"
"mtc1 %[rpom23], %[temp11] \n\t"
"mtc1 %[rpom12], %[temp13] \n\t"
"mtc1 %[rpom22], %[temp15] \n\t"

PTR_ADDIU "%[src], 32 \n\t"
"cvt.s.w %[temp1], %[temp1] \n\t"
"cvt.s.w %[temp3], %[temp3] \n\t"
"cvt.s.w %[temp5], %[temp5] \n\t"
"cvt.s.w %[temp7], %[temp7] \n\t"

"cvt.s.w %[temp9], %[temp9] \n\t"
"cvt.s.w %[temp11], %[temp11] \n\t"
"cvt.s.w %[temp13], %[temp13] \n\t"
"cvt.s.w %[temp15], %[temp15] \n\t"

"mul.s %[temp1], %[temp1], %[mul] \n\t"
"mul.s %[temp3], %[temp3], %[mul] \n\t"
"mul.s %[temp5], %[temp5], %[mul] \n\t"
"mul.s %[temp7], %[temp7], %[mul] \n\t"

"mul.s %[temp9], %[temp9], %[mul] \n\t"
"mul.s %[temp11], %[temp11], %[mul] \n\t"
"mul.s %[temp13], %[temp13], %[mul] \n\t"
"mul.s %[temp15], %[temp15], %[mul] \n\t"

"swc1 %[temp1], 0(%[dst]) \n\t" 
"swc1 %[temp3], 4(%[dst]) \n\t" 
"swc1 %[temp5], 8(%[dst]) \n\t" 
"swc1 %[temp7], 12(%[dst]) \n\t" 

"swc1 %[temp9], 16(%[dst]) \n\t" 
"swc1 %[temp11], 20(%[dst]) \n\t" 
"swc1 %[temp13], 24(%[dst]) \n\t" 
"swc1 %[temp15], 28(%[dst]) \n\t" 
PTR_ADDIU "%[dst], 32 \n\t"
"bne %[src], %[src_end], i32tf_lp%= \n\t"
: [temp1]"=&amp;f"(temp1), [temp11]"=&amp;f"(temp11),
[temp13]"=&amp;f"(temp13), [temp15]"=&amp;f"(temp15),
[temp3]"=&amp;f"(temp3), [temp5]"=&amp;f"(temp5),
[temp7]"=&amp;f"(temp7), [temp9]"=&amp;f"(temp9),
[rpom1]"=&amp;r"(rpom1), [rpom2]"=&amp;r"(rpom2),
[rpom11]"=&amp;r"(rpom11), [rpom21]"=&amp;r"(rpom21),
[rpom12]"=&amp;r"(rpom12), [rpom22]"=&amp;r"(rpom22),
[rpom13]"=&amp;r"(rpom13), [rpom23]"=&amp;r"(rpom23),
[dst]"+r"(dst), [src]"+r"(src)
: [mul]"f"(mul), [src_end]"r"(src_end)
: "memory"
);</asm>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_fmt_convert_init_mips</name><parameter_list>(<parameter><decl><type><name>FmtConvertContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>int32_to_float_fmul_scalar</name></name> <operator>=</operator> <name>int32_to_float_fmul_scalar_mips</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
