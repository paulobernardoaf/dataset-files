<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats_featurelocations\FFmpeg\libavcodec\mips\h264chroma_msa.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mips/generic_macros_msa.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264chroma_mips.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>chroma_mask_arr</name><index>[<expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hz_2x2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>__msa_vshf_b</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_dotp_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_sat_u_h</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hz_2x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src2</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_dotp_u_h</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_sat_u_h</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_H4</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hz_2w_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hz_2x2_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hz_2x4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hz_4x2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4i32</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>__msa_vshf_b</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_dotp_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_sat_u_h</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W2</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hz_4x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res0_r</name></decl>, <decl><type ref="prev"/><name>res1_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB2_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res0_r</name></expr></argument>, <argument><expr><name>res1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0_r</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res1_r</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H2_UH</name><argument_list>(<argument><expr><name>res0_r</name></expr></argument>, <argument><expr><name>res1_r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH2_UH</name><argument_list>(<argument><expr><name>res0_r</name></expr></argument>, <argument><expr><name>res1_r</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res1_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W4</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hz_4x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>, <decl><type ref="prev"/><name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB2_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB2_UH</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLLI_4V</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W8</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hz_4w_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hz_4x2_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hz_4x4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">8</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hz_4x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hz_8x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>,
<argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLLI_4V</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hz_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>, <decl><type ref="prev"/><name>out3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>, <decl><type ref="prev"/><name>res4</name></decl>, <decl><type ref="prev"/><name>res5</name></decl>, <decl><type ref="prev"/><name>res6</name></decl>, <decl><type ref="prev"/><name>res7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>,
<argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>,
<argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLLI_4V</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLLI_4V</name><argument_list>(<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D8</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hz_nonmult_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>row</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <name>height</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>row</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>,
<argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLLI_4V</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <operator>(</operator><name>height</name> <operator>%</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <operator>(</operator><name>height</name> <operator>%</operator> <literal type="number">4</literal><operator>)</operator></expr>;</init> <condition><expr><name>row</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_vshf_b</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_dotp_u_h</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>res0</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>__msa_sat_u_h</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_D1</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hz_8w_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hz_8x4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">8</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hz_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hz_nonmult_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_vt_2x2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_SB3</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>tmp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_dotp_u_h</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_sat_u_h</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_vt_2x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B4_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>,
<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_W2_UB</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>tmp2</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_dotp_u_h</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_sat_u_h</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_H4</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_vt_2w_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_vt_2x2_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_vt_2x4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_vt_4x2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4i32</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB3</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B2_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>tmp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_dotp_u_h</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_sat_u_h</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W2</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_vt_4x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res0_r</name></decl>, <decl><type ref="prev"/><name>res1_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B4_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>,
<argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_D2_UB</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB2_UH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res0_r</name></expr></argument>, <argument><expr><name>res1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0_r</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res1_r</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H2_UH</name><argument_list>(<argument><expr><name>res0_r</name></expr></argument>, <argument><expr><name>res1_r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH2_UH</name><argument_list>(<argument><expr><name>res0_r</name></expr></argument>, <argument><expr><name>res1_r</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res1_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W4</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_vt_4x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>, <decl><type ref="prev"/><name>src8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>, <decl><type ref="prev"/><name>tmp7</name></decl>, <decl><type ref="prev"/><name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B4_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>,
<argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B4_UB</name><argument_list>(<argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>,
<argument><expr><name>tmp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_D2_UB</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_D2_UB</name><argument_list>(<argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB2_UH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB2_UH</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLLI_4V</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W8</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_vt_4w_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_vt_4x2_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_vt_4x4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">8</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_vt_4x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_vt_8x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B4_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>,
<argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>,
<argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLLI_4V</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_vt_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>, <decl><type ref="prev"/><name>src8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>, <decl><type ref="prev"/><name>out3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>, <decl><type ref="prev"/><name>res4</name></decl>, <decl><type ref="prev"/><name>res5</name></decl>, <decl><type ref="prev"/><name>res6</name></decl>, <decl><type ref="prev"/><name>res7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B4_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>,
<argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B4_UB</name><argument_list>(<argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>,
<argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>,
<argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>,
<argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLLI_4V</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLLI_4V</name><argument_list>(<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D8</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_vt_8w_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_vt_8x4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">8</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_vt_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hv_2x2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coef_hor1</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coef_ver1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_hz0</name></decl>, <decl><type ref="prev"/><name>res_hz1</name></decl>, <decl><type ref="prev"/><name>res_vt0</name></decl>, <decl><type ref="prev"/><name>res_vt1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>res_vert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_hz_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_hz_vec0</name></expr></argument>, <argument><expr><name>coeff_hz_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec0</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec1</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB3</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB2_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>res_hz0</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL2</name><argument_list>(<argument><expr><name>res_hz0</name></expr></argument>, <argument><expr><name>coeff_vt_vec1</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res_vt0</name> <operator>+=</operator> <name>res_vt1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt0</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>res_vt0</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt0</name> <operator>=</operator> <call><name>__msa_sat_u_h</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vert</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_vt0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_vt0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>res_vert</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>res_vert</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hv_2x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coef_hor1</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coef_ver1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_hz0</name></decl>, <decl><type ref="prev"/><name>res_hz1</name></decl>, <decl><type ref="prev"/><name>res_vt0</name></decl>, <decl><type ref="prev"/><name>res_vt1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_hz_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_hz_vec0</name></expr></argument>, <argument><expr><name>coeff_hz_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec0</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec1</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_D2_UB</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB2_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>res_hz0</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL2</name><argument_list>(<argument><expr><name>res_hz0</name></expr></argument>, <argument><expr><name>coeff_vt_vec1</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res_vt0</name> <operator>+=</operator> <name>res_vt1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt0</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>res_vt0</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt0</name> <operator>=</operator> <call><name>__msa_sat_u_h</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_vt0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_vt0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_H4</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hv_2w_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coef_hor1</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coef_ver1</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hv_2x2_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coef_hor0</name></expr></argument>, <argument><expr><name>coef_hor1</name></expr></argument>, <argument><expr><name>coef_ver0</name></expr></argument>,
<argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hv_2x4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coef_hor0</name></expr></argument>, <argument><expr><name>coef_hor1</name></expr></argument>, <argument><expr><name>coef_ver0</name></expr></argument>,
<argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hv_4x2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coef_hor1</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coef_ver1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_hz0</name></decl>, <decl><type ref="prev"/><name>res_hz1</name></decl>, <decl><type ref="prev"/><name>res_vt0</name></decl>, <decl><type ref="prev"/><name>res_vt1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4i32</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_hz_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_hz_vec0</name></expr></argument>, <argument><expr><name>coeff_hz_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec0</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec1</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB3</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB2_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>res_hz0</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL2</name><argument_list>(<argument><expr><name>res_hz0</name></expr></argument>, <argument><expr><name>coeff_vt_vec1</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res_vt0</name> <operator>+=</operator> <name>res_vt1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt0</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>res_vt0</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt0</name> <operator>=</operator> <call><name>__msa_sat_u_h</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>v4i32</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_vt0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_vt0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W2</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hv_4x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coef_hor1</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coef_ver1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_hz0</name></decl>, <decl><type ref="prev"/><name>res_hz1</name></decl>, <decl><type ref="prev"/><name>res_hz2</name></decl>, <decl><type ref="prev"/><name>res_hz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_vt0</name></decl>, <decl><type ref="prev"/><name>res_vt1</name></decl>, <decl><type ref="prev"/><name>res_vt2</name></decl>, <decl><type ref="prev"/><name>res_vt3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_hz_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_hz_vec0</name></expr></argument>, <argument><expr><name>coeff_hz_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec0</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec1</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v4i32</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>,
<argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>res_hz0</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>, <argument><expr><name>res_hz2</name></expr></argument>,
<argument><expr><name>res_hz3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>res_hz0</name></expr></argument>, <argument><expr><name>coeff_vt_vec1</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_hz2</name></expr></argument>, <argument><expr><name>coeff_vt_vec1</name></expr></argument>,
<argument><expr><name>res_hz3</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H2_UH</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH2_UH</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_SW</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W2</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W2</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hv_4x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coef_hor1</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coef_ver1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>, <decl><type ref="prev"/><name>src8</name></decl>, <decl><type ref="prev"/><name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_hz0</name></decl>, <decl><type ref="prev"/><name>res_hz1</name></decl>, <decl><type ref="prev"/><name>res_hz2</name></decl>, <decl><type ref="prev"/><name>res_hz3</name></decl>, <decl><type ref="prev"/><name>res_hz4</name></decl>, <decl><type ref="prev"/><name>res_hz5</name></decl>, <decl><type ref="prev"/><name>res_hz6</name></decl>, <decl><type ref="prev"/><name>res_hz7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_vt0</name></decl>, <decl><type ref="prev"/><name>res_vt1</name></decl>, <decl><type ref="prev"/><name>res_vt2</name></decl>, <decl><type ref="prev"/><name>res_vt3</name></decl>, <decl><type ref="prev"/><name>res_vt4</name></decl>, <decl><type ref="prev"/><name>res_vt5</name></decl>, <decl><type ref="prev"/><name>res_vt6</name></decl>, <decl><type ref="prev"/><name>res_vt7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_hz_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_hz_vec0</name></expr></argument>, <argument><expr><name>coeff_hz_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec0</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec1</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>,
<argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>res_hz0</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>, <argument><expr><name>res_hz2</name></expr></argument>, <argument><expr><name>res_hz3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>,
<argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>res_hz4</name></expr></argument>, <argument><expr><name>res_hz5</name></expr></argument>, <argument><expr><name>res_hz6</name></expr></argument>, <argument><expr><name>res_hz7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>res_hz0</name></expr></argument>, <argument><expr><name>coeff_vt_vec1</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_hz2</name></expr></argument>, <argument><expr><name>coeff_vt_vec1</name></expr></argument>,
<argument><expr><name>res_hz3</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>res_hz4</name></expr></argument>, <argument><expr><name>coeff_vt_vec1</name></expr></argument>, <argument><expr><name>res_hz5</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_hz6</name></expr></argument>, <argument><expr><name>coeff_vt_vec1</name></expr></argument>,
<argument><expr><name>res_hz7</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_vt4</name></expr></argument>, <argument><expr><name>res_vt5</name></expr></argument>, <argument><expr><name>res_vt6</name></expr></argument>, <argument><expr><name>res_vt7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>res_vt4</name></expr></argument>, <argument><expr><name>res_vt5</name></expr></argument>, <argument><expr><name>res_vt6</name></expr></argument>, <argument><expr><name>res_vt7</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W8</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hv_4w_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coef_hor1</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coef_ver1</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hv_4x2_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coef_hor0</name></expr></argument>, <argument><expr><name>coef_hor1</name></expr></argument>, <argument><expr><name>coef_ver0</name></expr></argument>,
<argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hv_4x4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coef_hor0</name></expr></argument>, <argument><expr><name>coef_hor1</name></expr></argument>, <argument><expr><name>coef_ver0</name></expr></argument>,
<argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">8</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hv_4x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coef_hor0</name></expr></argument>, <argument><expr><name>coef_hor1</name></expr></argument>, <argument><expr><name>coef_ver0</name></expr></argument>,
<argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hv_8x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coef_hor1</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coef_ver1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_hz0</name></decl>, <decl><type ref="prev"/><name>res_hz1</name></decl>, <decl><type ref="prev"/><name>res_hz2</name></decl>, <decl><type ref="prev"/><name>res_hz3</name></decl>, <decl><type ref="prev"/><name>res_hz4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_vt0</name></decl>, <decl><type ref="prev"/><name>res_vt1</name></decl>, <decl><type ref="prev"/><name>res_vt2</name></decl>, <decl><type ref="prev"/><name>res_vt3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_hz_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_hz_vec0</name></expr></argument>, <argument><expr><name>coeff_hz_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec0</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec1</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_vshf_b</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_hz0</name> <operator>=</operator> <call><name>__msa_dotp_u_h</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>,
<argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>, <argument><expr><name>res_hz2</name></expr></argument>, <argument><expr><name>res_hz3</name></expr></argument>, <argument><expr><name>res_hz4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>res_hz1</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_hz2</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_hz3</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>,
<argument><expr><name>res_hz4</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res_vt0</name> <operator>+=</operator> <operator>(</operator><name>res_hz0</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt1</name> <operator>+=</operator> <operator>(</operator><name>res_hz1</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt2</name> <operator>+=</operator> <operator>(</operator><name>res_hz2</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt3</name> <operator>+=</operator> <operator>(</operator><name>res_hz3</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hv_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coef_hor1</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coef_ver1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>, <decl><type ref="prev"/><name>src8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>, <decl><type ref="prev"/><name>out3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_hz0</name></decl>, <decl><type ref="prev"/><name>res_hz1</name></decl>, <decl><type ref="prev"/><name>res_hz2</name></decl>, <decl><type ref="prev"/><name>res_hz3</name></decl>, <decl><type ref="prev"/><name>res_hz4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_hz5</name></decl>, <decl><type ref="prev"/><name>res_hz6</name></decl>, <decl><type ref="prev"/><name>res_hz7</name></decl>, <decl><type ref="prev"/><name>res_hz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_vt0</name></decl>, <decl><type ref="prev"/><name>res_vt1</name></decl>, <decl><type ref="prev"/><name>res_vt2</name></decl>, <decl><type ref="prev"/><name>res_vt3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_vt4</name></decl>, <decl><type ref="prev"/><name>res_vt5</name></decl>, <decl><type ref="prev"/><name>res_vt6</name></decl>, <decl><type ref="prev"/><name>res_vt7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_hz_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_hz_vec0</name></expr></argument>, <argument><expr><name>coeff_hz_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec0</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec1</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_vshf_b</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_hz0</name> <operator>=</operator> <call><name>__msa_dotp_u_h</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>,
<argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>, <argument><expr><name>res_hz2</name></expr></argument>, <argument><expr><name>res_hz3</name></expr></argument>,
<argument><expr><name>res_hz4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>,
<argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>res_hz5</name></expr></argument>, <argument><expr><name>res_hz6</name></expr></argument>, <argument><expr><name>res_hz7</name></expr></argument>, <argument><expr><name>res_hz8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>res_hz1</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_hz2</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_hz3</name></expr></argument>,
<argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_hz4</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>,
<argument><expr><name>res_vt3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>res_hz5</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_hz6</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_hz7</name></expr></argument>,
<argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_hz8</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_vt4</name></expr></argument>, <argument><expr><name>res_vt5</name></expr></argument>, <argument><expr><name>res_vt6</name></expr></argument>,
<argument><expr><name>res_vt7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt0</name> <operator>+=</operator> <operator>(</operator><name>res_hz0</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt1</name> <operator>+=</operator> <operator>(</operator><name>res_hz1</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt2</name> <operator>+=</operator> <operator>(</operator><name>res_hz2</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt3</name> <operator>+=</operator> <operator>(</operator><name>res_hz3</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt4</name> <operator>+=</operator> <operator>(</operator><name>res_hz4</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt5</name> <operator>+=</operator> <operator>(</operator><name>res_hz5</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt6</name> <operator>+=</operator> <operator>(</operator><name>res_hz6</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt7</name> <operator>+=</operator> <operator>(</operator><name>res_hz7</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res_vt4</name></expr></argument>, <argument><expr><name>res_vt5</name></expr></argument>, <argument><expr><name>res_vt6</name></expr></argument>, <argument><expr><name>res_vt7</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res_vt4</name></expr></argument>, <argument><expr><name>res_vt5</name></expr></argument>, <argument><expr><name>res_vt6</name></expr></argument>, <argument><expr><name>res_vt7</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res_vt5</name></expr></argument>, <argument><expr><name>res_vt4</name></expr></argument>, <argument><expr><name>res_vt7</name></expr></argument>, <argument><expr><name>res_vt6</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D8</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hv_8w_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coef_hor1</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coef_ver1</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hv_8x4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coef_hor0</name></expr></argument>, <argument><expr><name>coef_hor1</name></expr></argument>, <argument><expr><name>coef_ver0</name></expr></argument>,
<argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">8</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hv_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coef_hor0</name></expr></argument>, <argument><expr><name>coef_hor1</name></expr></argument>, <argument><expr><name>coef_ver0</name></expr></argument>,
<argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hz_and_aver_dst_2x2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst_data</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>LH</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>LH</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_data</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>out0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_data</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>__msa_vshf_b</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_dotp_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_sat_u_h</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_data</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hz_and_aver_dst_2x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst_data</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tp0</name> <operator>=</operator> <call><name>LH</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tp1</name> <operator>=</operator> <call><name>LH</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tp2</name> <operator>=</operator> <call><name>LH</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tp3</name> <operator>=</operator> <call><name>LH</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_data</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_data</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_data</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>tp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_data</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst_data</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src2</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_dotp_u_h</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_sat_u_h</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_H4</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hz_and_aver_dst_2w_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hz_and_aver_dst_2x2_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hz_and_aver_dst_2x4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hz_and_aver_dst_4x2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>load0</name></decl>, <decl><type ref="prev"/><name>load1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst_data</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_SB2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LW2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>load0</name></expr></argument>, <argument><expr><name>load1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_W2_UB</name><argument_list>(<argument><expr><name>load0</name></expr></argument>, <argument><expr><name>load1</name></expr></argument>, <argument><expr><name>dst_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>__msa_vshf_b</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_dotp_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_sat_u_h</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_data</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>res</name></expr></argument>, <argument><expr><name>dst_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W2</name><argument_list>(<argument><expr><name>dst_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hz_and_aver_dst_4x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>out</name></decl>, <decl><type ref="prev"/><name>dst_data</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res0_r</name></decl>, <decl><type ref="prev"/><name>res1_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB2_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res0_r</name></expr></argument>, <argument><expr><name>res1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0_r</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res1_r</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H2_UH</name><argument_list>(<argument><expr><name>res0_r</name></expr></argument>, <argument><expr><name>res1_r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH2_UH</name><argument_list>(<argument><expr><name>res0_r</name></expr></argument>, <argument><expr><name>res1_r</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res1_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>dst_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W4</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hz_and_aver_dst_4x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>, <decl><type ref="prev"/><name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>dst1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB2_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB2_UH</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLLI_4V</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W8</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hz_and_aver_dst_4w_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hz_and_aver_dst_4x2_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hz_and_aver_dst_4x4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">8</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hz_and_aver_dst_4x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hz_and_aver_dst_8x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>dst1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>,
<argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLLI_4V</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hz_and_aver_dst_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>, <decl><type ref="prev"/><name>out3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>dst1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>dst2</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>dst3</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>, <decl><type ref="prev"/><name>res4</name></decl>, <decl><type ref="prev"/><name>res5</name></decl>, <decl><type ref="prev"/><name>res6</name></decl>, <decl><type ref="prev"/><name>res7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>,
<argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>,
<argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLLI_4V</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLLI_4V</name><argument_list>(<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D8</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hz_and_aver_dst_8w_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hz_and_aver_dst_8x4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">8</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hz_and_aver_dst_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_vt_and_aver_dst_2x2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst_data</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_SB3</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>LH</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>LH</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_data</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>out0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_data</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B2_SB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>v16i8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>tmp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_dotp_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>tmp0</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_sat_u_h</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>res</name></expr></argument>, <argument><expr><name>dst_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_vt_and_aver_dst_2x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8i16</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst_data</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_SB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tp0</name> <operator>=</operator> <call><name>LH</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tp1</name> <operator>=</operator> <call><name>LH</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tp2</name> <operator>=</operator> <call><name>LH</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tp3</name> <operator>=</operator> <call><name>LH</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_data</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_data</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_data</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>tp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_data</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst_data</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ILVR_B4_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>,
<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_W2_UB</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>tmp2</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_dotp_u_h</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_sat_u_h</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>v8i16</name><operator>)</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>res</name></expr></argument>, <argument><expr><name>dst_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_H4</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_vt_and_aver_dst_2w_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_vt_and_aver_dst_2x2_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_vt_and_aver_dst_2x4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_vt_and_aver_dst_4x2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>load0</name></decl>, <decl><type ref="prev"/><name>load1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst_data</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB3</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LW2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>load0</name></expr></argument>, <argument><expr><name>load1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INSERT_W2_UB</name><argument_list>(<argument><expr><name>load0</name></expr></argument>, <argument><expr><name>load1</name></expr></argument>, <argument><expr><name>dst_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B2_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_d</name><argument_list>(<argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>tmp1</name></expr></argument>, <argument><expr><operator>(</operator><name>v2i64</name><operator>)</operator> <name>tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_dotp_u_h</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_r</name> <operator>=</operator> <call><name>__msa_sat_u_h</name><argument_list>(<argument><expr><name>res_r</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dst_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W2</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_vt_and_aver_dst_4x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res0_r</name></decl>, <decl><type ref="prev"/><name>res1_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B4_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>,
<argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_D2_UB</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB2_UH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res0_r</name></expr></argument>, <argument><expr><name>res1_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res0_r</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>res1_r</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H2_UH</name><argument_list>(<argument><expr><name>res0_r</name></expr></argument>, <argument><expr><name>res1_r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH2_UH</name><argument_list>(<argument><expr><name>res0_r</name></expr></argument>, <argument><expr><name>res1_r</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res1_r</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res0_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W4</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_vt_and_aver_dst_4x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>, <decl><type ref="prev"/><name>src8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>, <decl><type ref="prev"/><name>tmp4</name></decl>, <decl><type ref="prev"/><name>tmp5</name></decl>, <decl><type ref="prev"/><name>tmp6</name></decl>, <decl><type ref="prev"/><name>tmp7</name></decl>, <decl><type ref="prev"/><name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>dst1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B4_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>,
<argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B4_UB</name><argument_list>(<argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>,
<argument><expr><name>tmp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_D2_UB</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_D2_UB</name><argument_list>(<argument><expr><name>tmp5</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp7</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB2_UH</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB2_UH</name><argument_list>(<argument><expr><name>tmp4</name></expr></argument>, <argument><expr><name>tmp6</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLLI_4V</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W8</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_vt_and_aver_dst_4w_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_vt_and_aver_dst_4x2_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_vt_and_aver_dst_4x4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">8</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_vt_and_aver_dst_4x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_vt_and_aver_dst_8x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>dst1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B4_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>,
<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>,
<argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLLI_4V</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_vt_and_aver_dst_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>, <decl><type ref="prev"/><name>src8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>, <decl><type ref="prev"/><name>out3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>dst1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>dst2</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>dst3</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>, <decl><type ref="prev"/><name>res3</name></decl>, <decl><type ref="prev"/><name>res4</name></decl>, <decl><type ref="prev"/><name>res5</name></decl>, <decl><type ref="prev"/><name>res6</name></decl>, <decl><type ref="prev"/><name>res7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_vec0</name></expr></argument>, <argument><expr><name>coeff_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B4_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>,
<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_B4_UB</name><argument_list>(<argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>,
<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>,
<argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>coeff_vec</name></expr></argument>,
<argument><expr><name>coeff_vec</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLLI_4V</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SLLI_4V</name><argument_list>(<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res3</name></expr></argument>, <argument><expr><name>res2</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res5</name></expr></argument>, <argument><expr><name>res4</name></expr></argument>, <argument><expr><name>res7</name></expr></argument>, <argument><expr><name>res6</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D8</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_vt_and_aver_dst_8w_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>coeff0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coeff1</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_vt_and_aver_dst_8x4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">8</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_vt_and_aver_dst_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coeff0</name></expr></argument>, <argument><expr><name>coeff1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hv_and_aver_dst_2x2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor1</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_hz0</name></decl>, <decl><type ref="prev"/><name>res_hz1</name></decl>, <decl><type ref="prev"/><name>res_vt0</name></decl>, <decl><type ref="prev"/><name>res_vt1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_hz_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_hz_vec0</name></expr></argument>, <argument><expr><name>coeff_hz_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec0</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec1</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB3</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>LH</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>LH</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>out0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB2_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>res_hz0</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL2</name><argument_list>(<argument><expr><name>res_hz0</name></expr></argument>, <argument><expr><name>coeff_vt_vec1</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res_vt0</name> <operator>+=</operator> <name>res_vt1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt0</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>res_vt0</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt0</name> <operator>=</operator> <call><name>__msa_sat_u_h</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_vt0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_vt0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>res</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out0</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out1</name> <operator>=</operator> <call><name>__msa_copy_u_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SH</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hv_and_aver_dst_2x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor1</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>tmp0</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>tmp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_hz0</name></decl>, <decl><type ref="prev"/><name>res_hz1</name></decl>, <decl><type ref="prev"/><name>res_vt0</name></decl>, <decl><type ref="prev"/><name>res_vt1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_hz_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_hz_vec0</name></expr></argument>, <argument><expr><name>coeff_hz_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec0</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec1</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tp0</name> <operator>=</operator> <call><name>LH</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tp1</name> <operator>=</operator> <call><name>LH</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tp2</name> <operator>=</operator> <call><name>LH</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tp3</name> <operator>=</operator> <call><name>LH</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>tp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_insert_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>dst0</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ILVR_D2_UB</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB2_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>res_hz0</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL2</name><argument_list>(<argument><expr><name>res_hz0</name></expr></argument>, <argument><expr><name>coeff_vt_vec1</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res_vt0</name> <operator>+=</operator> <name>res_vt1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt0</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>res_vt0</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt0</name> <operator>=</operator> <call><name>__msa_sat_u_h</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_vt0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_vt0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16u8</name><operator>)</operator> <name>res</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_H4</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hv_and_aver_dst_2w_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor1</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver1</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hv_and_aver_dst_2x2_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coef_hor0</name></expr></argument>,
<argument><expr><name>coef_hor1</name></expr></argument>, <argument><expr><name>coef_ver0</name></expr></argument>, <argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hv_and_aver_dst_2x4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coef_hor0</name></expr></argument>,
<argument><expr><name>coef_hor1</name></expr></argument>, <argument><expr><name>coef_ver0</name></expr></argument>, <argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hv_and_aver_dst_4x2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor1</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name></decl>, <decl><type ref="prev"/><name>dst_data</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_hz0</name></decl>, <decl><type ref="prev"/><name>res_hz1</name></decl>, <decl><type ref="prev"/><name>res_vt0</name></decl>, <decl><type ref="prev"/><name>res_vt1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_hz_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_hz_vec0</name></expr></argument>, <argument><expr><name>coeff_hz_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec0</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec1</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB3</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LW2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_W2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>dst_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB2_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>res_hz0</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL2</name><argument_list>(<argument><expr><name>res_hz0</name></expr></argument>, <argument><expr><name>coeff_vt_vec1</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res_vt0</name> <operator>+=</operator> <name>res_vt1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt0</name> <operator>=</operator> <operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_srari_h</name><argument_list>(<argument><expr><operator>(</operator><name>v8i16</name><operator>)</operator> <name>res_vt0</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt0</name> <operator>=</operator> <call><name>__msa_sat_u_h</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_vt0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_vt0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ST_W2</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hv_and_aver_dst_4x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor1</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>out</name></decl>, <decl><type ref="prev"/><name>dst_data</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_hz0</name></decl>, <decl><type ref="prev"/><name>res_hz1</name></decl>, <decl><type ref="prev"/><name>res_hz2</name></decl>, <decl><type ref="prev"/><name>res_hz3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_vt0</name></decl>, <decl><type ref="prev"/><name>res_vt1</name></decl>, <decl><type ref="prev"/><name>res_vt2</name></decl>, <decl><type ref="prev"/><name>res_vt3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_hz_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_hz_vec0</name></expr></argument>, <argument><expr><name>coeff_hz_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec0</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec1</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>,
<argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>res_hz0</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>, <argument><expr><name>res_hz2</name></expr></argument>,
<argument><expr><name>res_hz3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>res_hz0</name></expr></argument>, <argument><expr><name>coeff_vt_vec1</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_hz2</name></expr></argument>, <argument><expr><name>coeff_vt_vec1</name></expr></argument>,
<argument><expr><name>res_hz3</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H2_UH</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH2_UH</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_pckev_b</name><argument_list>(<argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_vt1</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>res_vt0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>dst_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W4</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hv_and_aver_dst_4x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor1</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>, <decl><type ref="prev"/><name>src8</name></decl>, <decl><type ref="prev"/><name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>dst1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_hz0</name></decl>, <decl><type ref="prev"/><name>res_hz1</name></decl>, <decl><type ref="prev"/><name>res_hz2</name></decl>, <decl><type ref="prev"/><name>res_hz3</name></decl>, <decl><type ref="prev"/><name>res_hz4</name></decl>, <decl><type ref="prev"/><name>res_hz5</name></decl>, <decl><type ref="prev"/><name>res_hz6</name></decl>, <decl><type ref="prev"/><name>res_hz7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_vt0</name></decl>, <decl><type ref="prev"/><name>res_vt1</name></decl>, <decl><type ref="prev"/><name>res_vt2</name></decl>, <decl><type ref="prev"/><name>res_vt3</name></decl>, <decl><type ref="prev"/><name>res_vt4</name></decl>, <decl><type ref="prev"/><name>res_vt5</name></decl>, <decl><type ref="prev"/><name>res_vt6</name></decl>, <decl><type ref="prev"/><name>res_vt7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_hz_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_hz_vec0</name></expr></argument>, <argument><expr><name>coeff_hz_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec0</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec1</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>,
<argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>res_hz0</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>, <argument><expr><name>res_hz2</name></expr></argument>, <argument><expr><name>res_hz3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>,
<argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>res_hz4</name></expr></argument>, <argument><expr><name>res_hz5</name></expr></argument>, <argument><expr><name>res_hz6</name></expr></argument>, <argument><expr><name>res_hz7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>res_hz0</name></expr></argument>, <argument><expr><name>coeff_vt_vec1</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_hz2</name></expr></argument>, <argument><expr><name>coeff_vt_vec1</name></expr></argument>,
<argument><expr><name>res_hz3</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>res_hz4</name></expr></argument>, <argument><expr><name>coeff_vt_vec1</name></expr></argument>, <argument><expr><name>res_hz5</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_hz6</name></expr></argument>, <argument><expr><name>coeff_vt_vec1</name></expr></argument>,
<argument><expr><name>res_hz7</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_vt4</name></expr></argument>, <argument><expr><name>res_vt5</name></expr></argument>, <argument><expr><name>res_vt6</name></expr></argument>, <argument><expr><name>res_vt7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD2</name><argument_list>(<argument><expr><name>res_vt4</name></expr></argument>, <argument><expr><name>res_vt5</name></expr></argument>, <argument><expr><name>res_vt6</name></expr></argument>, <argument><expr><name>res_vt7</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W8</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hv_and_aver_dst_4w_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor1</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver1</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hv_and_aver_dst_4x2_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coef_hor0</name></expr></argument>,
<argument><expr><name>coef_hor1</name></expr></argument>, <argument><expr><name>coef_ver0</name></expr></argument>, <argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hv_and_aver_dst_4x4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coef_hor0</name></expr></argument>,
<argument><expr><name>coef_hor1</name></expr></argument>, <argument><expr><name>coef_ver0</name></expr></argument>, <argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">8</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hv_and_aver_dst_4x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coef_hor0</name></expr></argument>,
<argument><expr><name>coef_hor1</name></expr></argument>, <argument><expr><name>coef_ver0</name></expr></argument>, <argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hv_and_aver_dst_8x4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor1</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_hz0</name></decl>, <decl><type ref="prev"/><name>res_hz1</name></decl>, <decl><type ref="prev"/><name>res_hz2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_hz3</name></decl>, <decl><type ref="prev"/><name>res_hz4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_vt0</name></decl>, <decl><type ref="prev"/><name>res_vt1</name></decl>, <decl><type ref="prev"/><name>res_vt2</name></decl>, <decl><type ref="prev"/><name>res_vt3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>dst1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_hz_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_hz_vec0</name></expr></argument>, <argument><expr><name>coeff_hz_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec0</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec1</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src0</name> <operator>=</operator> <call><name>LD_UB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_vshf_b</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_hz0</name> <operator>=</operator> <call><name>__msa_dotp_u_h</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>,
<argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>, <argument><expr><name>res_hz2</name></expr></argument>, <argument><expr><name>res_hz3</name></expr></argument>, <argument><expr><name>res_hz4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>res_hz1</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_hz2</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_hz3</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>,
<argument><expr><name>res_hz4</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt0</name> <operator>+=</operator> <operator>(</operator><name>res_hz0</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt1</name> <operator>+=</operator> <operator>(</operator><name>res_hz1</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt2</name> <operator>+=</operator> <operator>(</operator><name>res_hz2</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt3</name> <operator>+=</operator> <operator>(</operator><name>res_hz3</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hv_and_aver_dst_8x8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor1</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>, <decl><type ref="prev"/><name>src8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>out0</name></decl>, <decl><type ref="prev"/><name>out1</name></decl>, <decl><type ref="prev"/><name>out2</name></decl>, <decl><type ref="prev"/><name>out3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>dst1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>dst2</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>dst3</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_hz0</name></decl>, <decl><type ref="prev"/><name>res_hz1</name></decl>, <decl><type ref="prev"/><name>res_hz2</name></decl>, <decl><type ref="prev"/><name>res_hz3</name></decl>, <decl><type ref="prev"/><name>res_hz4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_hz5</name></decl>, <decl><type ref="prev"/><name>res_hz6</name></decl>, <decl><type ref="prev"/><name>res_hz7</name></decl>, <decl><type ref="prev"/><name>res_hz8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_vt0</name></decl>, <decl><type ref="prev"/><name>res_vt1</name></decl>, <decl><type ref="prev"/><name>res_vt2</name></decl>, <decl><type ref="prev"/><name>res_vt3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>res_vt4</name></decl>, <decl><type ref="prev"/><name>res_vt5</name></decl>, <decl><type ref="prev"/><name>res_vt6</name></decl>, <decl><type ref="prev"/><name>res_vt7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec0</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16i8</name></type> <name>coeff_hz_vec1</name> <init>= <expr><call><name>__msa_fill_b</name><argument_list>(<argument><expr><name>coef_hor1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>coeff_hz_vec</name> <init>= <expr><operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_ilvr_b</name><argument_list>(<argument><expr><name>coeff_hz_vec0</name></expr></argument>, <argument><expr><name>coeff_hz_vec1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec0</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v8u16</name></type> <name>coeff_vt_vec1</name> <init>= <expr><operator>(</operator><name>v8u16</name><operator>)</operator> <call><name>__msa_fill_h</name><argument_list>(<argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>LD_SB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chroma_mask_arr</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LD_UB5</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD_UB4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src0</name> <operator>=</operator> <operator>(</operator><name>v16u8</name><operator>)</operator> <call><name>__msa_vshf_b</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0</name></expr></argument>, <argument><expr><operator>(</operator><name>v16i8</name><operator>)</operator> <name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VSHF_B2_UB</name><argument_list>(<argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_hz0</name> <operator>=</operator> <call><name>__msa_dotp_u_h</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>,
<argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>res_hz1</name></expr></argument>, <argument><expr><name>res_hz2</name></expr></argument>, <argument><expr><name>res_hz3</name></expr></argument>,
<argument><expr><name>res_hz4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOTP_UB4_UH</name><argument_list>(<argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>src8</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>,
<argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>coeff_hz_vec</name></expr></argument>, <argument><expr><name>res_hz5</name></expr></argument>, <argument><expr><name>res_hz6</name></expr></argument>, <argument><expr><name>res_hz7</name></expr></argument>, <argument><expr><name>res_hz8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>res_hz1</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_hz2</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_hz3</name></expr></argument>,
<argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_hz4</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>,
<argument><expr><name>res_vt3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MUL4</name><argument_list>(<argument><expr><name>res_hz5</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_hz6</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_hz7</name></expr></argument>,
<argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_hz8</name></expr></argument>, <argument><expr><name>coeff_vt_vec0</name></expr></argument>, <argument><expr><name>res_vt4</name></expr></argument>, <argument><expr><name>res_vt5</name></expr></argument>, <argument><expr><name>res_vt6</name></expr></argument>,
<argument><expr><name>res_vt7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt0</name> <operator>+=</operator> <operator>(</operator><name>res_hz0</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt1</name> <operator>+=</operator> <operator>(</operator><name>res_hz1</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt2</name> <operator>+=</operator> <operator>(</operator><name>res_hz2</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt3</name> <operator>+=</operator> <operator>(</operator><name>res_hz3</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt4</name> <operator>+=</operator> <operator>(</operator><name>res_hz4</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt5</name> <operator>+=</operator> <operator>(</operator><name>res_hz5</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt6</name> <operator>+=</operator> <operator>(</operator><name>res_hz6</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>res_vt7</name> <operator>+=</operator> <operator>(</operator><name>res_hz7</name> <operator>*</operator> <name>coeff_vt_vec1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SRARI_H4_UH</name><argument_list>(<argument><expr><name>res_vt4</name></expr></argument>, <argument><expr><name>res_vt5</name></expr></argument>, <argument><expr><name>res_vt6</name></expr></argument>, <argument><expr><name>res_vt7</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SAT_UH4_UH</name><argument_list>(<argument><expr><name>res_vt4</name></expr></argument>, <argument><expr><name>res_vt5</name></expr></argument>, <argument><expr><name>res_vt6</name></expr></argument>, <argument><expr><name>res_vt7</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res_vt1</name></expr></argument>, <argument><expr><name>res_vt0</name></expr></argument>, <argument><expr><name>res_vt3</name></expr></argument>, <argument><expr><name>res_vt2</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PCKEV_B2_UB</name><argument_list>(<argument><expr><name>res_vt5</name></expr></argument>, <argument><expr><name>res_vt4</name></expr></argument>, <argument><expr><name>res_vt7</name></expr></argument>, <argument><expr><name>res_vt6</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D8</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>, <argument><expr><name>out3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avc_chroma_hv_and_aver_dst_8w_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_hor1</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver0</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>coef_ver1</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hv_and_aver_dst_8x4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coef_hor0</name></expr></argument>,
<argument><expr><name>coef_hor1</name></expr></argument>, <argument><expr><name>coef_ver0</name></expr></argument>, <argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">8</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hv_and_aver_dst_8x8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>coef_hor0</name></expr></argument>,
<argument><expr><name>coef_hor1</name></expr></argument>, <argument><expr><name>coef_ver0</name></expr></argument>, <argument><expr><name>coef_ver1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_width4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>, <decl><type ref="prev"/><name>tp4</name></decl>, <decl><type ref="prev"/><name>tp5</name></decl>, <decl><type ref="prev"/><name>tp6</name></decl>, <decl><type ref="prev"/><name>tp7</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">8</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp4</name></expr></argument>, <argument><expr><name>tp5</name></expr></argument>, <argument><expr><name>tp6</name></expr></argument>, <argument><expr><name>tp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW4</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW4</name><argument_list>(<argument><expr><name>tp4</name></expr></argument>, <argument><expr><name>tp5</name></expr></argument>, <argument><expr><name>tp6</name></expr></argument>, <argument><expr><name>tp7</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW4</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">2</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LW2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SW</name><argument_list>(<argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_width8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>src0</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name>src3</name></decl>, <decl><type ref="prev"/><name>src4</name></decl>, <decl><type ref="prev"/><name>src5</name></decl>, <decl><type ref="prev"/><name>src6</name></decl>, <decl><type ref="prev"/><name>src7</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">8</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><name>src6</name></expr></argument>, <argument><expr><name>src7</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SD4</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_width4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>src1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>dst0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>dst1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">8</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W8</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LW4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_W4_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W4</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">2</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LW2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_W2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LW2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_W2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst0</name> <operator>=</operator> <call><name>__msa_aver_u_b</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_W2</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_width8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>stride</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tp0</name></decl>, <decl><type ref="prev"/><name>tp1</name></decl>, <decl><type ref="prev"/><name>tp2</name></decl>, <decl><type ref="prev"/><name>tp3</name></decl>, <decl><type ref="prev"/><name>tp4</name></decl>, <decl><type ref="prev"/><name>tp5</name></decl>, <decl><type ref="prev"/><name>tp6</name></decl>, <decl><type ref="prev"/><name>tp7</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>src0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>src1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>src2</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>src3</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v16u8</name></type> <name>dst0</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>dst1</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>dst2</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>dst3</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">8</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp4</name></expr></argument>, <argument><expr><name>tp5</name></expr></argument>, <argument><expr><name>tp6</name></expr></argument>, <argument><expr><name>tp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp4</name></expr></argument>, <argument><expr><name>tp5</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp6</name></expr></argument>, <argument><expr><name>tp7</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp4</name></expr></argument>, <argument><expr><name>tp5</name></expr></argument>, <argument><expr><name>tp6</name></expr></argument>, <argument><expr><name>tp7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp4</name></expr></argument>, <argument><expr><name>tp5</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp6</name></expr></argument>, <argument><expr><name>tp7</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB4_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>,
<argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D8</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst2</name></expr></argument>, <argument><expr><name>dst3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">4</literal> <operator>==</operator> <name>height</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp0</name></expr></argument>, <argument><expr><name>tp1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>INSERT_D2_UB</name><argument_list>(<argument><expr><name>tp2</name></expr></argument>, <argument><expr><name>tp3</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AVER_UB2_UB</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ST_D4</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_chroma_mc8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;&amp;</operator> <name>y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hv_8w_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hz_8w_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_vt_8w_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>copy_width8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_chroma_mc4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;&amp;</operator> <name>y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hv_4w_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hz_4w_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_vt_4w_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>copy_width4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_put_h264_chroma_mc2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>cnt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;&amp;</operator> <name>y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hv_2w_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hz_2w_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_vt_2w_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <name>height</name></expr>;</init> <condition><expr><name>cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>dst</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_chroma_mc8_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;&amp;</operator> <name>y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hv_and_aver_dst_8w_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator></expr></argument>, <argument><expr><name>y</name></expr></argument>,
<argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hz_and_aver_dst_8w_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_vt_and_aver_dst_8w_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>avg_width8_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_chroma_mc4_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;&amp;</operator> <name>y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hv_and_aver_dst_4w_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator></expr></argument>, <argument><expr><name>y</name></expr></argument>,
<argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hz_and_aver_dst_4w_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_vt_and_aver_dst_4w_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>avg_width4_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_avg_h264_chroma_mc2_msa</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>cnt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;&amp;</operator> <name>y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hv_and_aver_dst_2w_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator></expr></argument>, <argument><expr><name>y</name></expr></argument>,
<argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_hz_and_aver_dst_2w_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>x</name><operator>)</operator></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>avc_chroma_vt_and_aver_dst_2w_msa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <name>height</name></expr>;</init> <condition><expr><name>cnt</name><operator>--</operator></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
